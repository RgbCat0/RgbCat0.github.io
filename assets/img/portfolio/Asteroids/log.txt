[   0.000][v][cplayer] Command line options: '--player-operation-mode=pseudo-gui' '--' 'F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\yourgif.mp4'
[   0.000][v][cplayer] mpv v0.40.0-234-g73c211871 Copyright © 2000-2025 mpv/MPlayer/mplayer2 projects
[   0.000][v][cplayer]  built on Jul 27 2025 00:09:34
[   0.000][v][cplayer] libplacebo version: v7.351.0 (v7.351.0-25-g2ffcfff-dirty)
[   0.000][v][cplayer] FFmpeg version: N-120379-g29368ccb4
[   0.000][v][cplayer] FFmpeg library versions:
[   0.000][v][cplayer]    libavcodec      62.8.100
[   0.000][v][cplayer]    libavdevice     62.0.100
[   0.000][v][cplayer]    libavfilter     11.3.100
[   0.000][v][cplayer]    libavformat     62.1.103
[   0.000][v][cplayer]    libavutil       60.6.100
[   0.000][v][cplayer]    libswresample   6.0.100
[   0.000][v][cplayer]    libswscale      9.0.100
[   0.000][v][cplayer] Configuration: -Ddebug=true -Db_ndebug=true -Doptimization=3 -Db_lto=true -Db_lto_mode=thin -Dlibmpv=true -Dpdf-build=enabled -Dlua=enabled -Djavascript=enabled -Dsdl2=enabled -Dlibarchive=enabled -Dlibbluray=enabled -Ddvdnav=enabled -Duchardet=enabled -Drubberband=enabled -Dlcms2=enabled -Dopenal=enabled -Dspirv-cross=enabled -Dvulkan=enabled -Dvapoursynth=enabled -Dgl=enabled -Degl-angle=enabled -Dc_args=-Wno-error=int-conversion -Dprefix=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32 -Dlibdir=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32/lib -Ddefault_library=shared -Dprefer_static=True --cross-file=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/meson_cross.txt
[   0.000][v][cplayer] List of enabled features: build-date cplugins cuda-hwaccel cuda-interop d3d-hwaccel d3d11 d3d9-hwaccel debug direct3d dos-paths dvdnav dxgi-debug-d3d11 egl-angle egl-angle-win32 ffmpeg ffnvcodec gl gl-dxinterop gl-dxinterop-d3d9 gl-win32 glob glob-win32 gpl iconv javascript jpeg lcms2 libarchive libass libavdevice libbluray libplacebo luajit openal rubberband rubberband-3 sdl2 sdl2-audio sdl2-gamepad sdl2-video shaderc spirv-cross uchardet vaapi vaapi-win32 vapoursynth vector vulkan wasapi win32 win32-desktop win32-executable win32-smtc win32-threads zimg zimg-st428 zlib
[   0.000][v][cplayer] Built with NDEBUG.
[   0.000][d][global] home path: '' -> 'C:\Users\jespe\AppData\Roaming/mpv'
[   0.000][d][global] user path: '~~home/' -> 'C:\Users\jespe\AppData\Roaming/mpv'
[   0.000][d][global] user path: '~~old_home/' -> ''
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> 'C:/Program Files/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'encoding-profiles.conf' -/-> 'C:/Program Files/mpv/mpv/encoding-profiles.conf'
[   0.000][d][global] config path: 'mpv.conf' -> 'C:\Users\jespe\AppData\Roaming/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/config'
[   0.000][d][global] config path: 'mpv.conf' -/-> 'C:/Program Files/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> 'C:/Program Files/mpv/config'
[   0.000][d][global] config path: 'mpv.conf' -/-> 'C:/Program Files/mpv/mpv/mpv.conf'
[   0.000][d][global] config path: 'config' -/-> 'C:/Program Files/mpv/mpv/config'
[   0.000][v][cplayer] Reading config file C:\Users\jespe\AppData\Roaming/mpv/mpv.conf
[   0.000][v][ifo_dvdnav] Opening C:\Users\jespe\AppData\Roaming/mpv/mpv.conf
[   0.000][v][bdmv/bluray] Opening C:\Users\jespe\AppData\Roaming/mpv/mpv.conf
[   0.000][v][file] Opening C:\Users\jespe\AppData\Roaming/mpv/mpv.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][cplayer] Applying profile 'default'...
[   0.000][v][cplayer] Setting option 'osc' = 'no' (flags = 4)
[   0.000][v][cplayer] Setting option 'save-position-on-quit' = '' (flags = 4)
[   0.000][v][cplayer] Setting option 'watch-later-options' = 'vid,aid,sid,volume,start,speed,sub-visibility' (flags = 4)
[   0.000][v][cplayer] Setting option 'glsl-shaders' = '~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl' (flags = 4)
[   0.000][d][global] config path: 'shaders/Anime4K_Upscale_CNN_x2_M.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Upscale_CNN_x2_M.glsl'
[   0.000][d][global] user path: '~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Upscale_CNN_x2_M.glsl'
[   0.000][d][global] config path: 'shaders/Anime4K_AutoDownscalePre_x4.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_AutoDownscalePre_x4.glsl'
[   0.000][d][global] user path: '~~/shaders/Anime4K_AutoDownscalePre_x4.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_AutoDownscalePre_x4.glsl'
[   0.000][d][global] config path: 'shaders/Anime4K_AutoDownscalePre_x2.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_AutoDownscalePre_x2.glsl'
[   0.000][d][global] user path: '~~/shaders/Anime4K_AutoDownscalePre_x2.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_AutoDownscalePre_x2.glsl'
[   0.000][d][global] config path: 'shaders/Anime4K_Upscale_CNN_x2_VL.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Upscale_CNN_x2_VL.glsl'
[   0.000][d][global] user path: '~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Upscale_CNN_x2_VL.glsl'
[   0.000][d][global] config path: 'shaders/Anime4K_Restore_CNN_VL.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Restore_CNN_VL.glsl'
[   0.000][d][global] user path: '~~/shaders/Anime4K_Restore_CNN_VL.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Restore_CNN_VL.glsl'
[   0.000][d][global] config path: 'shaders/Anime4K_Clamp_Highlights.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Clamp_Highlights.glsl'
[   0.000][d][global] user path: '~~/shaders/Anime4K_Clamp_Highlights.glsl' -> 'C:\Users\jespe\AppData\Roaming/mpv/shaders/Anime4K_Clamp_Highlights.glsl'
[   0.000][v][cplayer] Setting option 'log-file' = './log.txt' (flags = 4)
[   0.000][v][cplayer] Setting option 'player-operation-mode' = 'pseudo-gui' (flags = 8)
[   0.000][v][cplayer] Applying profile 'builtin-pseudo-gui'...
[   0.000][v][cplayer] Setting option 'terminal' = 'no' (flags = 260)
[   0.000][v][cplayer] Setting option 'force-window' = 'yes' (flags = 260)
[   0.000][v][cplayer] Setting option 'idle' = 'once' (flags = 260)
[   0.000][v][cplayer] Setting option 'screenshot-dir' = '~~desktop/' (flags = 260)
[   0.000][d][global] user path: '~~desktop/' -> 'C:\Users\jespe\OneDrive\Bureaublad'
[   0.000][v][cplayer] Applying profile 'pseudo-gui'...
[   0.000][v][cplayer] Setting option 'player-operation-mode' = 'pseudo-gui' (flags = 4)
[   0.000][d][global] config path: 'input.conf' -> 'C:\Users\jespe\AppData\Roaming/mpv/input.conf'
[   0.000][d][global] config path: 'input.conf' -/-> 'C:/Program Files/mpv/input.conf'
[   0.000][d][global] config path: 'input.conf' -/-> 'C:/Program Files/mpv/mpv/input.conf'
[   0.000][v][ifo_dvdnav] Opening C:\Users\jespe\AppData\Roaming/mpv/input.conf
[   0.000][v][bdmv/bluray] Opening C:\Users\jespe\AppData\Roaming/mpv/input.conf
[   0.000][v][file] Opening C:\Users\jespe\AppData\Roaming/mpv/input.conf
[   0.000][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.000][d][file] Stream opened successfully.
[   0.000][v][input] Parsing input config file C:\Users\jespe\AppData\Roaming/mpv/input.conf
[   0.000][v][input] Input config file C:\Users\jespe\AppData\Roaming/mpv/input.conf parsed: 7 binds
[   0.023][v][cplayer] mpv v0.40.0-234-g73c211871 Copyright © 2000-2025 mpv/MPlayer/mplayer2 projects
[   0.023][v][cplayer]  built on Jul 27 2025 00:09:34
[   0.023][v][cplayer] libplacebo version: v7.351.0 (v7.351.0-25-g2ffcfff-dirty)
[   0.023][v][cplayer] FFmpeg version: N-120379-g29368ccb4
[   0.023][v][cplayer] FFmpeg library versions:
[   0.023][v][cplayer]    libavcodec      62.8.100
[   0.023][v][cplayer]    libavdevice     62.0.100
[   0.023][v][cplayer]    libavfilter     11.3.100
[   0.023][v][cplayer]    libavformat     62.1.103
[   0.023][v][cplayer]    libavutil       60.6.100
[   0.023][v][cplayer]    libswresample   6.0.100
[   0.023][v][cplayer]    libswscale      9.0.100
[   0.023][v][cplayer] Configuration: -Ddebug=true -Db_ndebug=true -Doptimization=3 -Db_lto=true -Db_lto_mode=thin -Dlibmpv=true -Dpdf-build=enabled -Dlua=enabled -Djavascript=enabled -Dsdl2=enabled -Dlibarchive=enabled -Dlibbluray=enabled -Ddvdnav=enabled -Duchardet=enabled -Drubberband=enabled -Dlcms2=enabled -Dopenal=enabled -Dspirv-cross=enabled -Dvulkan=enabled -Dvapoursynth=enabled -Dgl=enabled -Degl-angle=enabled -Dc_args=-Wno-error=int-conversion -Dprefix=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32 -Dlibdir=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/x86_64-w64-mingw32/lib -Ddefault_library=shared -Dprefer_static=True --cross-file=/__w/mpv-winbuild-cmake/mpv-winbuild-cmake/build_x86_64/meson_cross.txt
[   0.023][v][cplayer] List of enabled features: build-date cplugins cuda-hwaccel cuda-interop d3d-hwaccel d3d11 d3d9-hwaccel debug direct3d dos-paths dvdnav dxgi-debug-d3d11 egl-angle egl-angle-win32 ffmpeg ffnvcodec gl gl-dxinterop gl-dxinterop-d3d9 gl-win32 glob glob-win32 gpl iconv javascript jpeg lcms2 libarchive libass libavdevice libbluray libplacebo luajit openal rubberband rubberband-3 sdl2 sdl2-audio sdl2-gamepad sdl2-video shaderc spirv-cross uchardet vaapi vaapi-win32 vapoursynth vector vulkan wasapi win32 win32-desktop win32-executable win32-smtc win32-threads zimg zimg-st428 zlib
[   0.023][v][cplayer] Built with NDEBUG.
[   0.023][d][ytdl_hook] Loading lua script @ytdl_hook.lua...
[   0.023][d][stats] Loading lua script @stats.lua...
[   0.023][d][console] Loading lua script @console.lua...
[   0.023][d][auto_profiles] Loading lua script @auto_profiles.lua...
[   0.023][d][select] Loading lua script @select.lua...
[   0.023][d][positioning] Loading lua script @positioning.lua...
[   0.023][d][commands] Loading lua script @commands.lua...
[   0.023][v][clipboard] Initialized win32 clipboard backend.
[   0.023][d][auto_profiles] loading mp.defaults
[   0.023][d][commands] loading mp.defaults
[   0.023][d][ytdl_hook] loading mp.defaults
[   0.023][d][stats] loading mp.defaults
[   0.023][d][global] config path: 'scripts' -> 'C:\Users\jespe\AppData\Roaming/mpv/scripts'
[   0.023][d][console] loading mp.defaults
[   0.023][d][select] loading mp.defaults
[   0.023][d][positioning] loading mp.defaults
[   0.023][d][global] config path: 'scripts' -/-> 'C:/Program Files/mpv/scripts'
[   0.024][d][global] config path: 'scripts' -/-> 'C:/Program Files/mpv/mpv/scripts'
[   0.024][d][console] loading @console.lua
[   0.024][d][select] loading @select.lua
[   0.024][d][ytdl_hook] loading @ytdl_hook.lua
[   0.024][d][commands] loading @commands.lua
[   0.024][d][positioning] loading @positioning.lua
[   0.024][d][stats] loading @stats.lua
[   0.024][d][auto_profiles] loading @auto_profiles.lua
[   0.024][d][positioning] reading options for positioning
[   0.024][d][select] reading options for select
[   0.025][d][ytdl_hook] reading options for ytdl_hook
[   0.025][d][global] config path: 'script-opts/positioning.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/positioning.conf'
[   0.025][d][global] config path: 'script-opts/select.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/select.conf'
[   0.025][d][global] config path: 'script-opts/positioning.conf' -/-> 'C:/Program Files/mpv/script-opts/positioning.conf'
[   0.025][d][global] config path: 'script-opts/select.conf' -/-> 'C:/Program Files/mpv/script-opts/select.conf'
[   0.025][d][global] config path: 'script-opts/positioning.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/positioning.conf'
[   0.025][d][positioning] script-opts/positioning.conf not found.
[   0.025][d][global] config path: 'script-opts/select.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/select.conf'
[   0.025][d][select] script-opts/select.conf not found.
[   0.025][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/ytdl_hook.conf'
[   0.025][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:/Program Files/mpv/script-opts/ytdl_hook.conf'
[   0.025][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/ytdl_hook.conf'
[   0.025][d][ytdl_hook] script-opts/ytdl_hook.conf not found.
[   0.025][d][global] config path: 'lua-settings/positioning.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/positioning.conf'
[   0.025][d][global] config path: 'lua-settings/select.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/select.conf'
[   0.025][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/ytdl_hook.conf'
[   0.025][d][global] config path: 'lua-settings/positioning.conf' -/-> 'C:/Program Files/mpv/lua-settings/positioning.conf'
[   0.025][d][global] config path: 'lua-settings/select.conf' -/-> 'C:/Program Files/mpv/lua-settings/select.conf'
[   0.025][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:/Program Files/mpv/lua-settings/ytdl_hook.conf'
[   0.025][d][playlistmanager] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/playlistmanager.lua...
[   0.025][d][global] config path: 'lua-settings/positioning.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/positioning.conf'
[   0.025][d][positioning] lua-settings/positioning.conf not found.
[   0.025][d][stats] reading options for stats
[   0.025][d][global] config path: 'lua-settings/select.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/select.conf'
[   0.025][d][select] lua-settings/select.conf not found.
[   0.025][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/ytdl_hook.conf'
[   0.025][d][ytdl_hook] lua-settings/ytdl_hook.conf not found.
[   0.025][d][autoload] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/autoload.lua...
[   0.026][e][cplayer] Can't load unknown script: C:\Users\jespe\AppData\Roaming/mpv/scripts/anilistToken.txt
[   0.026][d][global] config path: 'script-opts/stats.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/stats.conf'
[   0.026][e][cplayer] Can't load unknown script: C:\Users\jespe\AppData\Roaming/mpv/scripts/anilistUpdater.py
[   0.026][d][trackselect] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/trackselect.lua...
[   0.026][d][global] config path: 'script-opts/stats.conf' -/-> 'C:/Program Files/mpv/script-opts/stats.conf'
[   0.026][d][playlistmanager] loading mp.defaults
[   0.026][d][global] config path: 'script-opts/stats.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/stats.conf'
[   0.026][d][stats] script-opts/stats.conf not found.
[   0.026][d][status_line] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/status-line.lua...
[   0.026][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/stats.conf'
[   0.026][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:/Program Files/mpv/lua-settings/stats.conf'
[   0.026][d][global] config path: 'lua-settings/stats.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/stats.conf'
[   0.026][d][stats] lua-settings/stats.conf not found.
[   0.026][d][playlistmanager] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/playlistmanager.lua
[   0.026][d][mpv_discordRPC] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/mpv-discordRPC/main.lua...
[   0.026][d][anilistUpdater] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/anilistUpdater.lua...
[   0.026][d][modernz] Loading lua script C:\Users\jespe\AppData\Roaming/mpv/scripts/modernz.lua...
[   0.026][v][cplayer] Waiting for scripts...
[   0.026][d][autoload] loading mp.defaults
[   0.026][d][anilistUpdater] loading mp.defaults
[   0.026][d][status_line] loading mp.defaults
[   0.026][d][mpv_discordRPC] loading mp.defaults
[   0.026][d][trackselect] loading mp.defaults
[   0.027][d][modernz] loading mp.defaults
[   0.027][d][commands] reading options for commands
[   0.027][d][autoload] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/autoload.lua
[   0.027][d][anilistUpdater] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/anilistUpdater.lua
[   0.027][d][global] config path: 'script-opts/commands.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/commands.conf'
[   0.027][d][trackselect] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/trackselect.lua
[   0.027][d][global] config path: 'script-opts/commands.conf' -/-> 'C:/Program Files/mpv/script-opts/commands.conf'
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_positioning", contents="", flags="default"]
[   0.027][d][global] config path: 'script-opts/commands.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/commands.conf'
[   0.027][d][commands] script-opts/commands.conf not found.
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_positioning", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_positioning", contents="", flags="force"]
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_positioning", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][status_line] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/status-line.lua
[   0.027][d][mpv_discordRPC] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/mpv-discordRPC/main.lua
[   0.027][d][global] config path: 'lua-settings/commands.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/commands.conf'
[   0.027][d][modernz] loading file C:\Users\jespe\AppData\Roaming/mpv/scripts/modernz.lua
[   0.027][d][console] reading options for console
[   0.027][d][global] config path: 'lua-settings/commands.conf' -/-> 'C:/Program Files/mpv/lua-settings/commands.conf'
[   0.027][d][global] config path: 'lua-settings/commands.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/commands.conf'
[   0.027][d][commands] lua-settings/commands.conf not found.
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_select", contents="", flags="default"]
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_select", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_select", contents="", flags="force"]
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_select", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_commands", contents="", flags="default"]
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_commands", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_commands", contents="", flags="force"]
[   0.027][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_commands", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.027][d][global] config path: 'script-opts/console.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/console.conf'
[   0.027][d][cplayer] Run command: define-section, flags=64, args=[name="input_stats", contents="", flags="default"]
[   0.028][d][global] config path: 'script-opts/console.conf' -/-> 'C:/Program Files/mpv/script-opts/console.conf'
[   0.028][d][cplayer] Run command: enable-section, flags=64, args=[name="input_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.028][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_stats", contents="", flags="force"]
[   0.028][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.028][d][global] config path: 'script-opts/console.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/console.conf'
[   0.028][d][console] script-opts/console.conf not found.
[   0.028][d][auto_profiles] Destroying client handle...
[   0.028][d][global] config path: 'lua-settings/console.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/console.conf'
[   0.028][d][global] config path: 'lua-settings/console.conf' -/-> 'C:/Program Files/mpv/lua-settings/console.conf'
[   0.028][d][global] config path: 'lua-settings/console.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/console.conf'
[   0.028][d][console] lua-settings/console.conf not found.
[   0.028][d][cplayer] Run command: define-section, flags=64, args=[name="input_console", contents="", flags="default"]
[   0.028][d][cplayer] Run command: enable-section, flags=64, args=[name="input_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.028][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_console", contents="", flags="force"]
[   0.028][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.038][d][cplayer] Run command: define-section, flags=64, args=[name="input_anilistUpdater", contents="ctrl+a nonscalable script-binding anilistUpdater/update_anilist\nctrl+b nonscalable script-binding anilistUpdater/launch_anilist\nctrl+d nonscalable script-binding anilistUpdater/open_folder\n", flags="default"]
[   0.038][d][cplayer] Run command: enable-section, flags=64, args=[name="input_anilistUpdater", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.038][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_anilistUpdater", contents="", flags="force"]
[   0.038][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_anilistUpdater", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.039][d][mpv_discordRPC] reading options for mpv_discordRPC
[   0.039][d][autoload] reading options for autoload
[   0.039][d][global] config path: 'script-opts/autoload.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/autoload.conf'
[   0.039][d][global] config path: 'script-opts/mpv_discordRPC.conf' -> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/mpv_discordRPC.conf'
[   0.039][d][global] config path: 'script-opts/autoload.conf' -/-> 'C:/Program Files/mpv/script-opts/autoload.conf'
[   0.039][d][global] config path: 'script-opts/autoload.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/autoload.conf'
[   0.039][d][autoload] script-opts/autoload.conf not found.
[   0.039][d][global] config path: 'lua-settings/autoload.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/autoload.conf'
[   0.039][d][global] config path: 'lua-settings/autoload.conf' -/-> 'C:/Program Files/mpv/lua-settings/autoload.conf'
[   0.039][d][global] config path: 'lua-settings/autoload.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/autoload.conf'
[   0.039][d][autoload] lua-settings/autoload.conf not found.
[   0.040][d][playlistmanager] reading options for playlistmanager
[   0.040][d][global] config path: 'script-opts/playlistmanager.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/playlistmanager.conf'
[   0.040][d][global] config path: 'script-opts/playlistmanager.conf' -/-> 'C:/Program Files/mpv/script-opts/playlistmanager.conf'
[   0.040][d][global] config path: 'script-opts/playlistmanager.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/playlistmanager.conf'
[   0.040][d][playlistmanager] script-opts/playlistmanager.conf not found.
[   0.040][d][global] config path: 'lua-settings/playlistmanager.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/playlistmanager.conf'
[   0.040][d][global] config path: 'lua-settings/playlistmanager.conf' -/-> 'C:/Program Files/mpv/lua-settings/playlistmanager.conf'
[   0.040][d][global] config path: 'lua-settings/playlistmanager.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/playlistmanager.conf'
[   0.040][d][playlistmanager] lua-settings/playlistmanager.conf not found.
[   0.041][i][playlistmanager] auto showamount: 19
[   0.041][v][playlistmanager] updating options
[   0.041][d][cplayer] Run command: define-section, flags=64, args=[name="input_playlistmanager", contents="SHIFT+ENTER nonscalable script-binding playlistmanager/showplaylist\n", flags="default"]
[   0.041][d][cplayer] Run command: enable-section, flags=64, args=[name="input_playlistmanager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.041][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_playlistmanager", contents="", flags="force"]
[   0.041][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_playlistmanager", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.045][v][mpv_discordRPC] Opened config file script-opts/mpv_discordRPC.conf.
[   0.045][i][mpv_discordRPC] Discord Rich Presence integration for mpv Media Player
[   0.045][i][mpv_discordRPC] Upstream: https://github.com/cniw/mpv-discordRPC
[   0.045][i][mpv_discordRPC] Version: 1.4.1-UNKNOWN
[   0.045][v][mpv_discordRPC] rpc_wrapper    : lua-discordRPC
[   0.045][v][mpv_discordRPC] periodic_timer : 15
[   0.045][v][mpv_discordRPC] playlist_info  : yes
[   0.045][v][mpv_discordRPC] loop_info      : yes
[   0.045][v][mpv_discordRPC] cover_art      : yes
[   0.045][v][mpv_discordRPC] mpv_version    : yes
[   0.045][v][mpv_discordRPC] active         : yes
[   0.045][v][mpv_discordRPC] key_toggle     : D
[   0.045][d][cplayer] Run command: define-section, flags=64, args=[name="input_mpv_discordRPC", contents="D nonscalable script-binding mpv_discordRPC/active-toggle\n", flags="default"]
[   0.045][d][cplayer] Run command: enable-section, flags=64, args=[name="input_mpv_discordRPC", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.045][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_mpv_discordRPC", contents="", flags="force"]
[   0.045][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_mpv_discordRPC", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.048][d][global] config path: 'scripts/modernz-locale.lua' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/scripts/modernz-locale.lua'
[   0.048][d][global] config path: 'scripts/modernz-locale.lua' -/-> 'C:/Program Files/mpv/scripts/modernz-locale.lua'
[   0.048][d][global] config path: 'scripts/modernz-locale.lua' -/-> 'C:/Program Files/mpv/mpv/scripts/modernz-locale.lua'
[   0.048][d][cplayer] Run command: define-section, flags=64, args=[name="showhide", contents="mouse_move script-binding modernz/__keybinding1\nmouse_leave script-binding modernz/__keybinding2\n", flags="force"]
[   0.048][d][cplayer] Run command: define-section, flags=64, args=[name="showhide_wc", contents="mouse_move script-binding modernz/__keybinding3\nmouse_leave script-binding modernz/__keybinding4\n", flags="force"]
[   0.048][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.048][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide_wc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.048][d][cplayer] Run command: define-section, flags=64, args=[name="input", contents="mbtn_left script-binding modernz/__keybinding5\nshift+mbtn_left script-binding modernz/__keybinding6\nmbtn_right script-binding modernz/__keybinding7\nshift+mbtn_right script-binding modernz/__keybinding8\nmbtn_mid script-binding modernz/__keybinding9\nwheel_up script-binding modernz/__keybinding10\nwheel_down script-binding modernz/__keybinding11\nmbtn_left_dbl ignore\nshift+mbtn_left_dbl ignore\nmbtn_right_dbl ignore\n", flags="force"]
[   0.048][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   0.048][d][cplayer] Run command: define-section, flags=64, args=[name="window-controls", contents="mbtn_left script-binding modernz/__keybinding12\n", flags="force"]
[   0.048][d][cplayer] Run command: enable-section, flags=64, args=[name="window-controls", flags=""]
[   0.048][d][modernz] reading options for modernz
[   0.048][d][global] config path: 'script-opts/modernz.conf' -> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/modernz.conf'
[   0.057][v][modernz] Opened config file script-opts/modernz.conf.
[   0.057][w][modernz] script-opts/modernz.conf:29 unknown key 'seekbar_cache_color', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:31 unknown key 'volumebar_match_seek_color', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:45 unknown key 'thumbnail_border_color', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:47 unknown key 'hover_effect_color', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:52 unknown key 'hover_effect', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:58 unknown key 'hover_effect_for_sliders', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:60 unknown key 'playlist_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:66 unknown key 'jump_buttons', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:68 unknown key 'chapter_skip_buttons', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:70 unknown key 'track_nextprev_buttons', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:72 unknown key 'info_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:74 unknown key 'loop_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:76 unknown key 'screenshot_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:78 unknown key 'ontop_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:80 unknown key 'screenshot_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:89 unknown key 'download_button', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:111 unknown key 'time_font_size', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:113 unknown key 'jump_amount', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:115 unknown key 'jump_more_amount', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:117 unknown key 'jump_icon_number', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:119 unknown key 'jump_mode', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:121 unknown key 'volume_control', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:123 unknown key 'volume_control_type', ignoring
[   0.057][w][modernz] script-opts/modernz.conf:147 unknown key 'show_title', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:149 unknown key 'window_title', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:151 unknown key 'window_controls', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:153 unknown key 'title_bar_box', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:161 unknown key 'title_font_size', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:185 unknown key 'raise_subtitles', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:187 unknown key 'raise_subtitle_amount', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:189 unknown key 'thumbnail_border', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:191 unknown key 'fade_alpha', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:193 unknown key 'fade_blur_strength', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:195 unknown key 'window_fade_alpha', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:197 unknown key 'loop_in_pause', ignoring
[   0.058][w][modernz] script-opts/modernz.conf:205 unknown key 'seek_resets_hidetimeout', ignoring
[   0.058][v][cplayer] Set property: user-data/osc/visibility="auto" -> 1
[   0.058][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   0.058][d][cplayer] Run command: disable-section, flags=64, args=[name="window-controls"]
[   0.058][v][cplayer] Done loading scripts.
[   0.058][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   0.059][v][cplayer] Running hook: auto_profiles/on_before_start_file
[   0.059][v][cplayer] Failed sending hook command auto_profiles/on_before_start_file. Removing hook.
[   0.059][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   0.059][v][cplayer] Running hook: auto_profiles/on_load
[   0.059][v][cplayer] Failed sending hook command auto_profiles/on_load. Removing hook.
[   0.059][v][cplayer] Running hook: ytdl_hook/on_load
[   0.059][v][cplayer] Running hook: ytdl_hook/on_load
[   0.059][v][ytdl_hook] playlist hook
[   0.059][d][cplayer] Run command: set, flags=64, args=[name="sub-pos", value="100"]
[   0.059][v][cplayer] Set property: sub-pos=100 -> 1
[   0.059][d][cplayer] Run command: set, flags=64, args=[name="sub-pos", value="100"]
[   0.059][v][cplayer] Set property: sub-pos=100 -> 1
[   0.060][v][cplayer] Set property: user-data/osc/visibility="auto" -> 1
[   0.060][v][ifo_dvdnav] Opening F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\yourgif.mp4
[   0.060][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   0.060][d][cplayer] Run command: disable-section, flags=64, args=[name="window-controls"]
[   0.060][v][bdmv/bluray] Opening F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\yourgif.mp4
[   0.060][d][modernz] osc_init
[   0.060][v][file] Opening F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\yourgif.mp4
[   0.060][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.060][d][file] Stream opened successfully.
[   0.060][v][demux] Trying demuxers for level=normal.
[   0.060][d][demux] Trying demuxer: directory (force-level: normal)
[   0.060][d][demux] Trying demuxer: disc (force-level: normal)
[   0.060][d][demux] Trying demuxer: edl (force-level: normal)
[   0.060][d][demux] Trying demuxer: cue (force-level: normal)
[   0.060][d][demux] Trying demuxer: rawaudio (force-level: normal)
[   0.060][d][demux] Trying demuxer: rawvideo (force-level: normal)
[   0.060][d][demux] Trying demuxer: mkv (force-level: normal)
[   0.060][d][demux] Trying demuxer: libarchive (force-level: normal)
[   0.060][d][global] config path: 'fonts' -> 'C:\Users\jespe\AppData\Roaming/mpv/fonts'
[   0.060][d][demux] Trying demuxer: lavf (force-level: normal)
[   0.060][d][osd/libass] ASS library version: 0x1704000 (runtime 0x1704000)
[   0.060][v][osd/libass] libass API version: 0x1704000
[   0.060][v][osd/libass] libass source: meson, commit: 0.17.4-13-ge4215b0d175a5a340c0dbd7a990df82f07d71a34
[   0.061][v][autoload] Prepending F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\Image1.png
[   0.061][v][autoload] Prepending F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\asteroids.gif
[   0.061][v][osd/libass] Shaper: FriBidi 1.0.16 (SIMPLE) HarfBuzz-ng 11.3.3 (COMPLEX)
[   0.061][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/subfont.ttf'
[   0.061][d][global] config path: 'subfont.ttf' -/-> 'C:/Program Files/mpv/subfont.ttf'
[   0.061][d][global] config path: 'subfont.ttf' -/-> 'C:/Program Files/mpv/mpv/subfont.ttf'
[   0.061][d][global] config path: 'fonts.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/fonts.conf'
[   0.061][d][global] config path: 'fonts.conf' -/-> 'C:/Program Files/mpv/fonts.conf'
[   0.061][d][global] config path: 'fonts.conf' -> 'C:/Program Files/mpv/mpv/fonts.conf'
[   0.061][v][osd/libass] Setting up fonts...
[   0.062][v][osd/libass] Loading font file 'C:\Users\jespe\AppData\Roaming/mpv/fonts\fluent-system-icons.ttf'
[   0.063][v][lavf] Found 'mov,mp4,m4a,3gp,3g2,mj2' at score=100 size=2048.
[   0.064][v][demux] Detected file format: mov,mp4,m4a,3gp,3g2,mj2 (libavformat)
[   0.064][v][cplayer] Opening done: F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\yourgif.mp4
[   0.077][v][osd/libass] Using font provider directwrite (with GDI)
[   0.077][v][osd/libass] Done.
[   0.078][d][cplayer] Run command: loadfile, flags=64, args=[url="F:\\OTHER GITHUB\\RgbCat0.github.io\\assets\\img\\portfolio\\Asteroids\\asteroids.gif", flags="append", index="-1", options=""]
[   0.078][d][cplayer] Run command: loadfile, flags=64, args=[url="F:\\OTHER GITHUB\\RgbCat0.github.io\\assets\\img\\portfolio\\Asteroids\\Image1.png", flags="append", index="-1", options=""]
[   0.078][d][cplayer] Run command: playlist-move, flags=64, args=[index1="0", index2="3"]
[   0.078][v][find_files] Loading external files in F:\OTHER GITHUB\RgbCat0.github.io\assets\img\portfolio\Asteroids\
[   0.078][d][global] config path: 'sub' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/sub'
[   0.078][d][global] config path: 'sub' -/-> 'C:/Program Files/mpv/sub'
[   0.078][d][global] config path: 'sub' -/-> 'C:/Program Files/mpv/mpv/sub'
[   0.078][v][cplayer] Running hook: auto_profiles/on_preloaded
[   0.078][v][cplayer] Failed sending hook command auto_profiles/on_preloaded. Removing hook.
[   0.078][v][cplayer] Running hook: ytdl_hook/on_preloaded
[   0.078][d][cplayer] Run command: define-section, flags=64, args=[name="input_modernz", contents="", flags="default"]
[   0.078][d][cplayer] Run command: enable-section, flags=64, args=[name="input_modernz", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.078][v][cplayer] Running hook: trackselect/on_preloaded
[   0.079][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_modernz", contents="", flags="force"]
[   0.079][d][trackselect] reading options for trackselect
[   0.079][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_modernz", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.079][d][global] config path: 'script-opts/trackselect.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/script-opts/trackselect.conf'
[   0.079][d][global] config path: 'script-opts/trackselect.conf' -/-> 'C:/Program Files/mpv/script-opts/trackselect.conf'
[   0.079][d][global] config path: 'script-opts/trackselect.conf' -/-> 'C:/Program Files/mpv/mpv/script-opts/trackselect.conf'
[   0.079][d][trackselect] script-opts/trackselect.conf not found.
[   0.079][d][global] config path: 'lua-settings/trackselect.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/lua-settings/trackselect.conf'
[   0.079][d][global] config path: 'lua-settings/trackselect.conf' -/-> 'C:/Program Files/mpv/lua-settings/trackselect.conf'
[   0.079][d][global] config path: 'lua-settings/trackselect.conf' -/-> 'C:/Program Files/mpv/mpv/lua-settings/trackselect.conf'
[   0.079][d][trackselect] lua-settings/trackselect.conf not found.
[   0.079][v][lavf] select track 0
[   0.079][i][cplayer]  ● Video  --vid=1  (h264 1080x610 14.985 fps) [default]
[   0.079][i][display-tags] File tags:
[   0.079][i][display-tags]  Comment: GIF optimized with https://ezgif.com/optimize
[   0.079][v][vo/gpu-next] Probing for best GPU context.
[   0.079][v][vo/gpu-next/auto] Initializing GPU context 'auto'
[   0.079][v][vo/gpu-next/d3d11] Initializing GPU context 'd3d11'
[   0.255][v][vo/gpu-next/d3d11] Using Direct3D 11 feature level 12_1
[   0.255][v][vo/gpu-next/d3d11] Device Name: NVIDIA GeForce RTX 4070 Laptop GPU
[   0.255][v][vo/gpu-next/d3d11] Device ID: 10de:2860 (rev a1)
[   0.255][v][vo/gpu-next/d3d11] Subsystem ID: 1043:23bd
[   0.255][v][vo/gpu-next/d3d11] LUID: 000000000001345a
[   0.255][v][vo/gpu-next/d3d11] Initializing SPIR-V compiler 'shaderc'
[   0.255][v][vo/gpu-next/d3d11] Using Direct3D 11.1 runtime
[   0.255][v][vo/gpu-next/d3d11] Maximum Texture2D size: 16384x16384
[   0.256][v][vo/gpu-next/d3d11] D3DCompiler version: 10.0.26100.5770
[   0.273][v][vo/gpu-next/d3d11] Using DXGI 1.2+
[   0.273][v][vo/gpu-next/d3d11] Queried output: \\.\DISPLAY1, 1920x1080 @ 8 bits, colorspace: RGB_FULL_G22_NONE_P709 (0)
[   0.273][v][vo/gpu-next/d3d11] Selected swapchain format R8G8B8A8_UNORM (28), attempting to utilize it.
[   0.274][v][vo/gpu-next/d3d11] Selected swapchain color space RGB_FULL_G22_NONE_P709 (0), attempting to utilize it.
[   0.275][v][vo/gpu-next/d3d11] Swapchain capabilities for color space RGB_FULL_G22_NONE_P709 (0): normal: yes, overlay: yes
[   0.275][v][vo/gpu-next/d3d11] Swapchain successfully configured to color space RGB_FULL_G22_NONE_P709 (0)!
[   0.275][v][vo/gpu-next/d3d11] Using flip-model presentation
[   0.275][v][vo/gpu-next/libplacebo] Initialized libplacebo v7.351.0 (v7.351.0-25-g2ffcfff-dirty) (API v351)
[   0.275][v][vo/gpu-next/libplacebo] Using DXGI 1.2+
[   0.275][v][vo/gpu-next/libplacebo] Using Direct3D 11 feature level 12_1
[   0.275][v][vo/gpu-next/libplacebo] Direct3D 11 device properties:
[   0.275][v][vo/gpu-next/libplacebo]     Device Name: NVIDIA GeForce RTX 4070 Laptop GPU
[   0.275][v][vo/gpu-next/libplacebo]     Device ID: 10de:2860 (rev a1)
[   0.275][v][vo/gpu-next/libplacebo]     Subsystem ID: 1043:23bd
[   0.275][v][vo/gpu-next/libplacebo]     LUID: 000000000001345a
[   0.275][v][vo/gpu-next/libplacebo]     Driver version: 32.0.15.7652
[   0.275][v][vo/gpu-next/libplacebo] shaderc SPIR-V version 1.6 rev 1
[   0.275][v][vo/gpu-next/libplacebo] Initialized SPIR-V compiler 'shaderc'
[   0.275][v][vo/gpu-next/libplacebo] Using Direct3D 11.4 runtime
[   0.275][v][vo/gpu-next/libplacebo] D3DCompiler version: 10.0.26100.5770
[   0.275][v][vo/gpu-next/libplacebo] GPU information:
[   0.275][v][vo/gpu-next/libplacebo]     GLSL version: 450 (vulkan)
[   0.275][v][vo/gpu-next/libplacebo]       max_shmem_size:            32768
[   0.275][v][vo/gpu-next/libplacebo]       max_group_threads:         1024
[   0.275][v][vo/gpu-next/libplacebo]       max_group_size[0]:         1024
[   0.275][v][vo/gpu-next/libplacebo]       max_group_size[1]:         1024
[   0.275][v][vo/gpu-next/libplacebo]       max_group_size[2]:         64
[   0.275][v][vo/gpu-next/libplacebo]       subgroup_size:             0
[   0.275][v][vo/gpu-next/libplacebo]       min_gather_offset:         -32
[   0.275][v][vo/gpu-next/libplacebo]       max_gather_offset:         31
[   0.275][v][vo/gpu-next/libplacebo]     Limits:
[   0.275][v][vo/gpu-next/libplacebo]       thread_safe:               0
[   0.275][v][vo/gpu-next/libplacebo]       callbacks:                 0
[   0.275][v][vo/gpu-next/libplacebo]       max_buf_size:              2083520512
[   0.275][v][vo/gpu-next/libplacebo]       max_ubo_size:              65536
[   0.275][v][vo/gpu-next/libplacebo]       max_ssbo_size:             2083520512
[   0.275][v][vo/gpu-next/libplacebo]       max_vbo_size:              2083520512
[   0.275][v][vo/gpu-next/libplacebo]       max_mapped_size:           0
[   0.275][v][vo/gpu-next/libplacebo]       max_buffer_texels:         134217728
[   0.275][v][vo/gpu-next/libplacebo]       align_host_ptr:            0
[   0.275][v][vo/gpu-next/libplacebo]       host_cached:               0
[   0.275][v][vo/gpu-next/libplacebo]       max_tex_1d_dim:            16384
[   0.275][v][vo/gpu-next/libplacebo]       max_tex_2d_dim:            16384
[   0.275][v][vo/gpu-next/libplacebo]       max_tex_3d_dim:            2048
[   0.275][v][vo/gpu-next/libplacebo]       blittable_1d_3d:           1
[   0.275][v][vo/gpu-next/libplacebo]       buf_transfer:              0
[   0.275][v][vo/gpu-next/libplacebo]       align_tex_xfer_pitch:      1
[   0.275][v][vo/gpu-next/libplacebo]       align_tex_xfer_offset:     32
[   0.275][v][vo/gpu-next/libplacebo]       max_variable_comps:        0
[   0.275][v][vo/gpu-next/libplacebo]       max_constants:             0
[   0.275][v][vo/gpu-next/libplacebo]       max_pushc_size:            0
[   0.275][v][vo/gpu-next/libplacebo]       align_vertex_stride:       1
[   0.275][v][vo/gpu-next/libplacebo]       max_dispatch[0]:           65535
[   0.275][v][vo/gpu-next/libplacebo]       max_dispatch[1]:           65535
[   0.275][v][vo/gpu-next/libplacebo]       max_dispatch[2]:           65535
[   0.275][v][vo/gpu-next/libplacebo]       fragment_queues:           1
[   0.275][v][vo/gpu-next/libplacebo]       compute_queues:            1
[   0.275][d][vo/gpu-next/libplacebo] GPU texture formats:
[   0.275][d][vo/gpu-next/libplacebo]     NAME                 TYPE   SIZE COMP CAPS         EMU DEPTH         HOST_BITS     GLSL_TYPE  GLSL_FMT   FOURCC
[   0.275][d][vo/gpu-next/libplacebo]     r8                   UNORM  1    R    SsLRbBVutHWG n   {8  0  0  0 } {8  0  0  0 } float      r8         R8    
[   0.275][d][vo/gpu-next/libplacebo]     r8s                  SNORM  1    R    SsLRbBVutHWG n   {8  0  0  0 } {8  0  0  0 } float      r8_snorm         
[   0.275][d][vo/gpu-next/libplacebo]     rg8                  UNORM  2    RG   SsLRbBVutHWG n   {8  8  0  0 } {8  8  0  0 } vec2       rg8        GR88  
[   0.275][d][vo/gpu-next/libplacebo]     rg8s                 SNORM  2    RG   SsLRbBVutHWG n   {8  8  0  0 } {8  8  0  0 } vec2       rg8_snorm        
[   0.275][d][vo/gpu-next/libplacebo]     rgba8                UNORM  4    RGBA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8      AB24  
[   0.275][d][vo/gpu-next/libplacebo]     rgba8s               SNORM  4    RGBA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8_snorm       
[   0.275][d][vo/gpu-next/libplacebo]     bgra8                UNORM  4    BGRA SsLRbBVutHWG n   {8  8  8  8 } {8  8  8  8 } vec4       rgba8      AR24  
[   0.275][d][vo/gpu-next/libplacebo]     rgb10a2              UNORM  4    RGBA SsLRbBVutHWG n   {10 10 10 2 } {10 10 10 2 } vec4       rgb10_a2   AB30  
[   0.275][d][vo/gpu-next/libplacebo]     rg11b10f             FLOAT  4    RGB  SsLRbBVutHWG n   {11 11 10 0 } {11 11 10 0 } vec3       r11f_g11f_b10f       
[   0.275][d][vo/gpu-next/libplacebo]     r16                  UNORM  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16        R16   
[   0.275][d][vo/gpu-next/libplacebo]     r16hf                FLOAT  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16f             
[   0.275][d][vo/gpu-next/libplacebo]     r16s                 SNORM  2    R    SsLRbBVutHWG n   {16 0  0  0 } {16 0  0  0 } float      r16_snorm        
[   0.275][d][vo/gpu-next/libplacebo]     rg16                 UNORM  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16       GR32  
[   0.275][d][vo/gpu-next/libplacebo]     rg16hf               FLOAT  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16f            
[   0.275][d][vo/gpu-next/libplacebo]     rg16s                SNORM  4    RG   SsLRbBVutHWG n   {16 16 0  0 } {16 16 0  0 } vec2       rg16_snorm       
[   0.275][d][vo/gpu-next/libplacebo]     rgba16               UNORM  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16     AB48  
[   0.275][d][vo/gpu-next/libplacebo]     rgba16hf             FLOAT  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16f    AB4H  
[   0.275][d][vo/gpu-next/libplacebo]     rgba16s              SNORM  8    RGBA SsLRbBVutHWG n   {16 16 16 16} {16 16 16 16} vec4       rgba16_snorm       
[   0.275][d][vo/gpu-next/libplacebo]     r32f                 FLOAT  4    R    SsLRbBVutHWG n   {32 0  0  0 } {32 0  0  0 } float      r32f             
[   0.275][d][vo/gpu-next/libplacebo]     rg32f                FLOAT  8    RG   SsLRbBVutHWG n   {32 32 0  0 } {32 32 0  0 } vec2       rg32f            
[   0.275][d][vo/gpu-next/libplacebo]     rgba32f              FLOAT  16   RGBA SsLRbBVutHWG n   {32 32 32 32} {32 32 32 32} vec4       rgba32f          
[   0.275][d][vo/gpu-next/libplacebo]     bgr5a1               UNORM  2    BGRA S-LRb----H-G n   {5  5  5  1 } {5  5  5  1 }                       AR15  
[   0.275][d][vo/gpu-next/libplacebo]     bgr565               UNORM  2    BGR  S-LRb----H-G n   {5  6  5  0 } {5  6  5  0 }                       RG16  
[   0.275][d][vo/gpu-next/libplacebo]     bgrx8                UNORM  4    BGR  S-LRb-Vu-H-G n   {8  8  8  0 } {8  8  8  0 } vec3                        
[   0.275][d][vo/gpu-next/libplacebo]     r8i                  SINT   1    R    Ss-R-BVutHW- n   {8  0  0  0 } {8  0  0  0 } int        r8i              
[   0.275][d][vo/gpu-next/libplacebo]     r8u                  UINT   1    R    Ss-R-BVutHW- n   {8  0  0  0 } {8  0  0  0 } uint       r8ui             
[   0.275][d][vo/gpu-next/libplacebo]     rg8i                 SINT   2    RG   Ss-R-BVutHW- n   {8  8  0  0 } {8  8  0  0 } ivec2      rg8i             
[   0.275][d][vo/gpu-next/libplacebo]     rg8u                 UINT   2    RG   Ss-R-BVutHW- n   {8  8  0  0 } {8  8  0  0 } uvec2      rg8ui            
[   0.275][d][vo/gpu-next/libplacebo]     rgba8i               SINT   4    RGBA Ss-R-BVutHW- n   {8  8  8  8 } {8  8  8  8 } ivec4      rgba8i           
[   0.275][d][vo/gpu-next/libplacebo]     rgba8u               UINT   4    RGBA Ss-R-BVutHW- n   {8  8  8  8 } {8  8  8  8 } uvec4      rgba8ui          
[   0.275][d][vo/gpu-next/libplacebo]     rgb10a2u             UINT   4    RGBA Ss-R-BVutHW- n   {10 10 10 2 } {10 10 10 2 } uvec4      rgb10_a2ui       
[   0.275][d][vo/gpu-next/libplacebo]     r16i                 SINT   2    R    Ss-R-BVutHW- n   {16 0  0  0 } {16 0  0  0 } int        r16i             
[   0.275][d][vo/gpu-next/libplacebo]     r16u                 UINT   2    R    Ss-R-BVutHW- n   {16 0  0  0 } {16 0  0  0 } uint       r16ui            
[   0.275][d][vo/gpu-next/libplacebo]     rg16i                SINT   4    RG   Ss-R-BVutHW- n   {16 16 0  0 } {16 16 0  0 } ivec2      rg16i            
[   0.275][d][vo/gpu-next/libplacebo]     rg16u                UINT   4    RG   Ss-R-BVutHW- n   {16 16 0  0 } {16 16 0  0 } uvec2      rg16ui           
[   0.275][d][vo/gpu-next/libplacebo]     rgba16i              SINT   8    RGBA Ss-R-BVutHW- n   {16 16 16 16} {16 16 16 16} ivec4      rgba16i          
[   0.275][d][vo/gpu-next/libplacebo]     rgba16u              UINT   8    RGBA Ss-R-BVutHW- n   {16 16 16 16} {16 16 16 16} uvec4      rgba16ui         
[   0.275][d][vo/gpu-next/libplacebo]     r32i                 SINT   4    R    Ss-R-BVutHW- n   {32 0  0  0 } {32 0  0  0 } int        r32i             
[   0.275][d][vo/gpu-next/libplacebo]     r32u                 UINT   4    R    Ss-R-BVutHW- n   {32 0  0  0 } {32 0  0  0 } uint       r32ui            
[   0.275][d][vo/gpu-next/libplacebo]     rg32i                SINT   8    RG   Ss-R-BVutHW- n   {32 32 0  0 } {32 32 0  0 } ivec2      rg32i            
[   0.275][d][vo/gpu-next/libplacebo]     rg32u                UINT   8    RG   Ss-R-BVutHW- n   {32 32 0  0 } {32 32 0  0 } uvec2      rg32ui           
[   0.275][d][vo/gpu-next/libplacebo]     rgba32i              SINT   16   RGBA Ss-R-BVutHW- n   {32 32 32 32} {32 32 32 32} ivec4      rgba32i          
[   0.275][d][vo/gpu-next/libplacebo]     rgba32u              UINT   16   RGBA Ss-R-BVutHW- n   {32 32 32 32} {32 32 32 32} uvec4      rgba32ui         
[   0.275][d][vo/gpu-next/libplacebo]     bgra4                UNORM  2    BGRA S-L------H-G n   {4  4  4  4 } {4  4  4  4 }                       AR12  
[   0.275][d][vo/gpu-next/libplacebo]     rgb32f               FLOAT  12   RGB  S-----Vu-H-- n   {32 32 32 0 } {32 32 32 0 } vec3                        
[   0.275][d][vo/gpu-next/libplacebo]     rgb32i               SINT   12   RGB  S-----Vu-H-- n   {32 32 32 0 } {32 32 32 0 } ivec3                       
[   0.275][d][vo/gpu-next/libplacebo]     rgb32u               UINT   12   RGB  S-----Vu-H-- n   {32 32 32 0 } {32 32 32 0 } uvec3                       
[   0.275][d][vo/gpu-next/libplacebo]     rgb8                 UNORM  3    RGB  SsLRbBVutHWG y   {8  8  8  0 } {8  8  8  0 } vec3                  BG24  
[   0.275][d][vo/gpu-next/libplacebo]     rgb16                UNORM  6    RGB  SsLRbBVutHWG y   {16 16 16 0 } {16 16 16 0 } vec3                        
[   0.275][d][vo/gpu-next/libplacebo]     rgb16hf              FLOAT  6    RGB  SsLRbBVutHWG y   {16 16 16 0 } {16 16 16 0 } vec3                        
[   0.275][d][vo/gpu-next/libplacebo]     r16f                 FLOAT  4    R    SsLRbBVutHWG y   {16 0  0  0 } {32 0  0  0 } float      r16f             
[   0.275][d][vo/gpu-next/libplacebo]     rg16f                FLOAT  8    RG   SsLRbBVutHWG y   {16 16 0  0 } {32 32 0  0 } vec2       rg16f            
[   0.275][d][vo/gpu-next/libplacebo]     rgb16f               FLOAT  12   RGB  SsLRbBVutHWG y   {16 16 16 0 } {32 32 32 0 } vec3                        
[   0.275][d][vo/gpu-next/libplacebo]     rgba16f              FLOAT  16   RGBA SsLRbBVutHWG y   {16 16 16 16} {32 32 32 32} vec4       rgba16f          
[   0.275][v][vo/gpu-next/libplacebo] Using flip-model presentation
[   0.275][v][vo/gpu-next/libplacebo] Initial swap chain configuration: format: R10G10B10A2_UNORM, color space: RGB_FULL_G22_NONE_P709.
[   0.275][d][global] cache path: '' -> 'C:\Users\jespe\AppData\Local/mpv/cache'
[   0.276][d][global] cache path: '' -> 'C:\Users\jespe\AppData\Local/mpv/cache'
[   0.283][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-De-Ring-Compute-Statistics
[   0.283][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-De-Ring-Compute-Statistics
[   0.283][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-De-Ring-Clamp
[   0.283][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.283][d][vo/gpu-next/libplacebo] [  1] // MIT License
[   0.283][d][vo/gpu-next/libplacebo] [  2] 
[   0.283][d][vo/gpu-next/libplacebo] [  3] // Copyright (c) 2019-2021 bloc97
[   0.283][d][vo/gpu-next/libplacebo] [  4] // All rights reserved.
[   0.283][d][vo/gpu-next/libplacebo] [  5] 
[   0.283][d][vo/gpu-next/libplacebo] [  6] // Permission is hereby granted, free of charge, to any person obtaining a copy
[   0.283][d][vo/gpu-next/libplacebo] [  7] // of this software and associated documentation files (the "Software"), to deal
[   0.283][d][vo/gpu-next/libplacebo] [  8] // in the Software without restriction, including without limitation the rights
[   0.283][d][vo/gpu-next/libplacebo] [  9] // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
[   0.283][d][vo/gpu-next/libplacebo] [ 10] // copies of the Software, and to permit persons to whom the Software is
[   0.283][d][vo/gpu-next/libplacebo] [ 11] // furnished to do so, subject to the following conditions:
[   0.283][d][vo/gpu-next/libplacebo] [ 12] 
[   0.283][d][vo/gpu-next/libplacebo] [ 13] // The above copyright notice and this permission notice shall be included in all
[   0.283][d][vo/gpu-next/libplacebo] [ 14] // copies or substantial portions of the Software.
[   0.283][d][vo/gpu-next/libplacebo] [ 15] 
[   0.283][d][vo/gpu-next/libplacebo] [ 16] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
[   0.283][d][vo/gpu-next/libplacebo] [ 17] // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
[   0.283][d][vo/gpu-next/libplacebo] [ 18] // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
[   0.283][d][vo/gpu-next/libplacebo] [ 19] // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
[   0.283][d][vo/gpu-next/libplacebo] [ 20] // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
[   0.283][d][vo/gpu-next/libplacebo] [ 21] // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
[   0.283][d][vo/gpu-next/libplacebo] [ 22] // SOFTWARE.
[   0.283][d][vo/gpu-next/libplacebo] [ 23] 
[   0.283][d][vo/gpu-next/libplacebo] [ 24] //!DESC Anime4K-v4.0-De-Ring-Compute-Statistics
[   0.283][d][vo/gpu-next/libplacebo] [ 25] //!HOOK MAIN
[   0.283][d][vo/gpu-next/libplacebo] [ 26] //!BIND HOOKED
[   0.283][d][vo/gpu-next/libplacebo] [ 27] //!SAVE STATSMAX
[   0.283][d][vo/gpu-next/libplacebo] [ 28] //!COMPONENTS 1
[   0.283][d][vo/gpu-next/libplacebo] [ 29] 
[   0.283][d][vo/gpu-next/libplacebo] [ 30] #define KERNELSIZE 5 //Kernel size, must be an positive odd integer.
[   0.283][d][vo/gpu-next/libplacebo] [ 31] #define KERNELHALFSIZE 2 //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).
[   0.283][d][vo/gpu-next/libplacebo] [ 32] 
[   0.283][d][vo/gpu-next/libplacebo] [ 33] float get_luma(vec4 rgba) {
[   0.283][d][vo/gpu-next/libplacebo] [ 34] 	return dot(vec4(0.299, 0.587, 0.114, 0.0), rgba);
[   0.283][d][vo/gpu-next/libplacebo] [ 35] }
[   0.283][d][vo/gpu-next/libplacebo] [ 36] 
[   0.283][d][vo/gpu-next/libplacebo] [ 37] vec4 hook() {
[   0.283][d][vo/gpu-next/libplacebo] [ 38] 
[   0.283][d][vo/gpu-next/libplacebo] [ 39] 	float gmax = 0.0;
[   0.283][d][vo/gpu-next/libplacebo] [ 40] 	
[   0.283][d][vo/gpu-next/libplacebo] [ 41] 	for (int i=0; i<KERNELSIZE; i++) {
[   0.283][d][vo/gpu-next/libplacebo] [ 42] 		float g = get_luma(MAIN_texOff(vec2(i - KERNELHALFSIZE, 0)));
[   0.283][d][vo/gpu-next/libplacebo] [ 43] 		
[   0.283][d][vo/gpu-next/libplacebo] [ 44] 		gmax = max(g, gmax);
[   0.283][d][vo/gpu-next/libplacebo] [ 45] 	}
[   0.283][d][vo/gpu-next/libplacebo] [ 46] 	
[   0.283][d][vo/gpu-next/libplacebo] [ 47] 	return vec4(gmax, 0.0, 0.0, 0.0);
[   0.283][d][vo/gpu-next/libplacebo] [ 48] }
[   0.283][d][vo/gpu-next/libplacebo] [ 49] 
[   0.283][d][vo/gpu-next/libplacebo] [ 50] //!DESC Anime4K-v4.0-De-Ring-Compute-Statistics
[   0.283][d][vo/gpu-next/libplacebo] [ 51] //!HOOK MAIN
[   0.283][d][vo/gpu-next/libplacebo] [ 52] //!BIND HOOKED
[   0.283][d][vo/gpu-next/libplacebo] [ 53] //!BIND STATSMAX
[   0.283][d][vo/gpu-next/libplacebo] [ 54] //!SAVE STATSMAX
[   0.283][d][vo/gpu-next/libplacebo] [ 55] //!COMPONENTS 1
[   0.283][d][vo/gpu-next/libplacebo] [ 56] 
[   0.283][d][vo/gpu-next/libplacebo] [ 57] #define KERNELSIZE 5 //Kernel size, must be an positive odd integer.
[   0.283][d][vo/gpu-next/libplacebo] [ 58] #define KERNELHALFSIZE 2 //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).
[   0.283][d][vo/gpu-next/libplacebo] [ 59] 
[   0.283][d][vo/gpu-next/libplacebo] [ 60] vec4 hook() {
[   0.283][d][vo/gpu-next/libplacebo] [ 61] 
[   0.283][d][vo/gpu-next/libplacebo] [ 62] 	float gmax = 0.0;
[   0.283][d][vo/gpu-next/libplacebo] [ 63] 	
[   0.283][d][vo/gpu-next/libplacebo] [ 64] 	for (int i=0; i<KERNELSIZE; i++) {
[   0.283][d][vo/gpu-next/libplacebo] [ 65] 		float g = STATSMAX_texOff(vec2(0, i - KERNELHALFSIZE)).x;
[   0.283][d][vo/gpu-next/libplacebo] [ 66] 		
[   0.283][d][vo/gpu-next/libplacebo] [ 67] 		gmax = max(g, gmax);
[   0.283][d][vo/gpu-next/libplacebo] [ 68] 	}
[   0.283][d][vo/gpu-next/libplacebo] [ 69] 	
[   0.283][d][vo/gpu-next/libplacebo] [ 70] 	return vec4(gmax, 0.0, 0.0, 0.0);
[   0.283][d][vo/gpu-next/libplacebo] [ 71] }
[   0.283][d][vo/gpu-next/libplacebo] [ 72] 
[   0.283][d][vo/gpu-next/libplacebo] [ 73] //!DESC Anime4K-v4.0-De-Ring-Clamp
[   0.283][d][vo/gpu-next/libplacebo] [ 74] //!HOOK PREKERNEL
[   0.283][d][vo/gpu-next/libplacebo] [ 75] //!BIND HOOKED
[   0.283][d][vo/gpu-next/libplacebo] [ 76] //!BIND STATSMAX
[   0.283][d][vo/gpu-next/libplacebo] [ 77] 
[   0.283][d][vo/gpu-next/libplacebo] [ 78] float get_luma(vec4 rgba) {
[   0.283][d][vo/gpu-next/libplacebo] [ 79] 	return dot(vec4(0.299, 0.587, 0.114, 0.0), rgba);
[   0.283][d][vo/gpu-next/libplacebo] [ 80] }
[   0.283][d][vo/gpu-next/libplacebo] [ 81] 
[   0.283][d][vo/gpu-next/libplacebo] [ 82] vec4 hook() {
[   0.283][d][vo/gpu-next/libplacebo] [ 83] 
[   0.283][d][vo/gpu-next/libplacebo] [ 84] 	float current_luma = get_luma(HOOKED_tex(HOOKED_pos));
[   0.283][d][vo/gpu-next/libplacebo] [ 85] 	float new_luma = min(current_luma, STATSMAX_tex(HOOKED_pos).x);
[   0.283][d][vo/gpu-next/libplacebo] [ 86] 	
[   0.283][d][vo/gpu-next/libplacebo] [ 87] 	//This trick is only possible if the inverse Y->RGB matrix has 1 for every row... (which is the case for BT.709)
[   0.283][d][vo/gpu-next/libplacebo] [ 88] 	//Otherwise we would need to convert RGB to YUV, modify Y then convert back to RGB.
[   0.283][d][vo/gpu-next/libplacebo] [ 89]     return HOOKED_tex(HOOKED_pos) - (current_luma - new_luma); 
[   0.283][d][vo/gpu-next/libplacebo] [ 90] }
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x3
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x3
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.290][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-Restore-CNN-(VL)-Conv-3x1x1x112
[   0.290][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.290][d][vo/gpu-next/libplacebo] [  1] // MIT License
[   0.290][d][vo/gpu-next/libplacebo] [  2] 
[   0.290][d][vo/gpu-next/libplacebo] [  3] // Copyright (c) 2019-2021 bloc97
[   0.290][d][vo/gpu-next/libplacebo] [  4] // All rights reserved.
[   0.290][d][vo/gpu-next/libplacebo] [  5] 
[   0.290][d][vo/gpu-next/libplacebo] [  6] // Permission is hereby granted, free of charge, to any person obtaining a copy
[   0.291][d][vo/gpu-next/libplacebo] [  7] // of this software and associated documentation files (the "Software"), to deal
[   0.291][d][vo/gpu-next/libplacebo] [  8] // in the Software without restriction, including without limitation the rights
[   0.291][d][vo/gpu-next/libplacebo] [  9] // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
[   0.291][d][vo/gpu-next/libplacebo] [ 10] // copies of the Software, and to permit persons to whom the Software is
[   0.291][d][vo/gpu-next/libplacebo] [ 11] // furnished to do so, subject to the following conditions:
[   0.291][d][vo/gpu-next/libplacebo] [ 12] 
[   0.291][d][vo/gpu-next/libplacebo] [ 13] // The above copyright notice and this permission notice shall be included in all
[   0.291][d][vo/gpu-next/libplacebo] [ 14] // copies or substantial portions of the Software.
[   0.291][d][vo/gpu-next/libplacebo] [ 15] 
[   0.291][d][vo/gpu-next/libplacebo] [ 16] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
[   0.291][d][vo/gpu-next/libplacebo] [ 17] // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
[   0.291][d][vo/gpu-next/libplacebo] [ 18] // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
[   0.291][d][vo/gpu-next/libplacebo] [ 19] // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
[   0.291][d][vo/gpu-next/libplacebo] [ 20] // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
[   0.291][d][vo/gpu-next/libplacebo] [ 21] // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
[   0.291][d][vo/gpu-next/libplacebo] [ 22] // SOFTWARE.
[   0.291][d][vo/gpu-next/libplacebo] [ 23] 
[   0.291][d][vo/gpu-next/libplacebo] [ 24] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x3
[   0.291][d][vo/gpu-next/libplacebo] [ 25] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [ 26] //!BIND MAIN
[   0.291][d][vo/gpu-next/libplacebo] [ 27] //!SAVE conv2d_tf
[   0.291][d][vo/gpu-next/libplacebo] [ 28] //!WIDTH MAIN.w
[   0.291][d][vo/gpu-next/libplacebo] [ 29] //!HEIGHT MAIN.h
[   0.291][d][vo/gpu-next/libplacebo] [ 30] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [ 31] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.291][d][vo/gpu-next/libplacebo] [ 32] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [ 33]     vec4 result = mat4(0.1690102, -0.2560719, 0.39658326, -0.3679659, -0.27616683, -0.35619372, -0.3748396, 0.08430813, -0.29574734, -0.31511316, -0.09773105, 0.13616018, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 34]     result += mat4(-0.1326393, -0.259433, 0.025070239, 0.58914864, -0.036478516, 0.30723435, 0.007458902, 0.012962684, 0.2493056, 0.13007334, -0.08448256, -0.38414413, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 35]     result += mat4(-0.11539356, 0.35253766, 0.26143202, 0.2760807, -0.09371543, -0.028165473, -0.028452158, -0.27050856, 0.06718067, -0.0056619495, -0.17654495, 0.17288211, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 36]     result += mat4(-0.16145481, -0.3204927, -0.54317135, 0.11830119, 0.49315026, 0.12008072, 0.50857407, -0.30382085, 0.25807253, 0.020755528, 0.29388228, 0.106109895, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 37]     result += mat4(-0.22728722, 0.50484747, -0.07904469, 0.33114597, 0.50306976, -0.22760947, 0.14773269, 0.17628263, 0.14788547, -0.08223464, -0.10880935, -0.3151985, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 38]     result += mat4(0.3414351, 0.057279214, -0.14419858, 0.09761111, -0.11794496, 0.021717256, -0.22750235, 0.13986664, -0.38932344, 0.28996095, 0.3773904, 0.13175532, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 39]     result += mat4(0.1376552, -0.19587159, -0.35147396, -0.097646296, 0.1686707, -0.14385861, 0.031198, 0.12383533, -0.23089902, 0.08707301, 0.3362293, -0.100579016, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 40]     result += mat4(-0.056774966, 0.047585852, -0.36395878, -0.20211312, 0.4077735, 0.12631284, 0.39813092, -0.033365678, 0.2307249, -0.09131807, 0.20823865, 0.31084216, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 41]     result += mat4(-0.12456089, 0.09755632, 0.31490886, -0.06579996, -0.13386595, 0.07564795, -0.26605195, -0.075180635, -0.11182657, 0.06757017, -0.14351276, -0.16828312, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 42]     result += vec4(-0.046043985, 0.055581126, -0.08791638, -0.13022089);
[   0.291][d][vo/gpu-next/libplacebo] [ 43]     return result;
[   0.291][d][vo/gpu-next/libplacebo] [ 44] }
[   0.291][d][vo/gpu-next/libplacebo] [ 45] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x3
[   0.291][d][vo/gpu-next/libplacebo] [ 46] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [ 47] //!BIND MAIN
[   0.291][d][vo/gpu-next/libplacebo] [ 48] //!SAVE conv2d_tf1
[   0.291][d][vo/gpu-next/libplacebo] [ 49] //!WIDTH MAIN.w
[   0.291][d][vo/gpu-next/libplacebo] [ 50] //!HEIGHT MAIN.h
[   0.291][d][vo/gpu-next/libplacebo] [ 51] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [ 52] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.291][d][vo/gpu-next/libplacebo] [ 53] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [ 54]     vec4 result = mat4(-0.15485518, -0.29363206, -0.22610365, -0.14291525, -0.45240572, -0.18319772, -0.12209436, 0.15031648, 0.09878383, 0.06711082, 0.25763842, -0.084633484, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 55]     result += mat4(-0.10204406, 0.16167697, 0.22371867, -0.37947702, -0.24476196, -0.038824454, 0.060157117, 0.15764871, -0.08072927, -0.2210841, -0.31835055, 0.009979876, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 56]     result += mat4(0.20506924, 0.21132155, -0.0922578, -0.07430473, 0.14529926, 0.20549752, 0.0077948375, 0.13246094, -0.32353187, 0.21074104, 0.092629515, 0.17590871, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 57]     result += mat4(0.04125819, -0.44050243, 0.23729716, 0.3218237, 0.12943116, -0.011674174, 0.10390632, 0.027775545, -0.20308031, -0.16904089, -0.2121676, -0.022515794, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 58]     result += mat4(0.09664124, 0.20127031, 0.60345304, 0.16697013, 0.23093723, -0.38116834, 0.109695725, 0.0007595324, 0.4092646, 0.009624758, 0.11229678, 0.25326383, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 59]     result += mat4(0.014879592, 0.19204311, 0.07102085, -0.7312604, 0.34860876, 0.3429918, -0.027331594, 0.27636307, 0.1342437, 0.107820466, -0.12645108, 0.21081445, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 60]     result += mat4(-0.12687613, -0.09247973, -0.25973785, 0.4350873, -0.18987224, 0.028678741, -0.0903819, -0.63974863, 0.205591, 0.11308998, 0.18458389, -0.4149041, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 61]     result += mat4(0.34691808, -0.025498383, 0.3428986, 0.21663484, 0.23404741, -0.1725327, -0.0036315925, -0.13299675, -0.1873967, 0.031331502, -0.08785591, -0.0013278709, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 62]     result += mat4(-0.35846514, 0.048703704, -0.104165934, 0.16529736, -0.15378916, 0.26030356, -0.07134151, 0.03692383, -0.15807101, -0.18885155, 0.044707954, -0.11444462, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 63]     result += vec4(-0.0022791293, -0.024132347, -0.57621074, 0.028573977);
[   0.291][d][vo/gpu-next/libplacebo] [ 64]     return result;
[   0.291][d][vo/gpu-next/libplacebo] [ 65] }
[   0.291][d][vo/gpu-next/libplacebo] [ 66] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.291][d][vo/gpu-next/libplacebo] [ 67] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [ 68] //!BIND conv2d_tf
[   0.291][d][vo/gpu-next/libplacebo] [ 69] //!BIND conv2d_tf1
[   0.291][d][vo/gpu-next/libplacebo] [ 70] //!SAVE conv2d_1_tf
[   0.291][d][vo/gpu-next/libplacebo] [ 71] //!WIDTH conv2d_tf.w
[   0.291][d][vo/gpu-next/libplacebo] [ 72] //!HEIGHT conv2d_tf.h
[   0.291][d][vo/gpu-next/libplacebo] [ 73] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [ 74] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [ 75] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [ 76] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [ 77] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [ 78] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [ 79]     vec4 result = mat4(0.010346764, 0.07230188, -0.24734616, -0.09937907, 0.02228549, -0.19550583, -0.019540425, -0.1037373, 0.033996485, -0.075554, -0.20228972, 0.07090153, -0.09194035, -0.058972966, 0.1768268, 0.27517542) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.020078976, 0.12433655, -0.1620775, 0.036401592, 0.079748705, 0.11660013, 0.17917652, -0.017513236, -0.18936846, 0.24478136, -0.45726213, -0.045004416, -0.08295188, 0.067733586, -0.080548316, 0.2744211) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.024916803, 0.27562472, 0.043771956, -0.012240604, 0.0786355, 0.042651594, 0.16049327, -0.14577515, -0.032735053, 0.17658092, 0.16382934, -0.02337374, 0.11551492, 0.056343183, -0.17930213, 0.14259394) * go_0(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.20010485, 0.06747722, -0.19026905, 0.11013709, 0.13062745, -0.044626113, -0.0062261797, 0.2189639, 0.1403497, -0.022713251, -0.19452858, -0.010305412, -0.06407589, 0.09836748, 0.025805516, 0.23430973) * go_0(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.14664203, 0.034910418, 0.024714258, -0.066872925, -0.15717538, -0.14179383, -0.14091893, 0.05859166, 0.18919097, -0.18544437, -0.09068573, -0.08615929, -0.051434122, 0.2170678, 0.18409058, -0.17461225) * go_0(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.11354446, 0.10745854, 0.2682663, 0.05949201, -0.10695986, 0.1407851, -0.03551388, 0.10691649, -0.17148238, -0.38287184, 0.2074456, 0.11828914, 0.048535194, 0.1464864, -0.18169662, -0.14074169) * go_0(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.22160622, -0.1513045, -0.053284165, 0.033202525, 0.15574448, -0.043640967, -0.0093824165, -0.0019965349, -0.097964935, -0.08289824, 0.08239996, 0.07868361, 0.05731752, -0.20441617, -0.013016076, -0.253108) * go_0(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.031249097, -0.2272863, 0.23573665, 0.03357689, 0.011395065, -0.10885564, -0.06287508, -0.031719524, 0.10331069, 0.17560169, 0.18303394, 0.022961004, -0.17011635, -0.24371737, 0.10678694, -0.3222825) * go_0(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.1275465, -0.08844758, 0.10994917, -0.00910273, 0.09393154, 0.03894992, 0.14367905, -0.11811715, -0.09077633, -0.015776094, 0.27427456, -0.13283503, 0.18724327, -0.08139094, 0.04933602, -0.051852766) * go_0(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.06764611, -0.27426586, 0.12045272, 0.09410856, -0.14258035, 0.11802992, -0.09093882, 0.0022018093, 0.4590643, 0.046258576, -0.07827223, 0.448011, -0.103631735, -0.016930219, -0.15421398, 0.11045997) * go_1(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.17295076, 0.00151352, 0.14938255, 0.08336512, -0.07496541, -0.07561223, -0.0846474, 0.14979269, -0.09142163, 0.23925088, -0.015199518, -0.37749895, -0.20636298, -0.022585187, -0.20371509, 0.0745308) * go_1(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.06458832, -0.009722021, -0.123604394, 0.06548835, -0.3039139, -0.022024399, 0.05297587, -0.0626883, 0.23556642, 0.1516464, -0.07004877, -0.1845364, -0.05918428, 0.19158973, -0.14983447, 0.030489758) * go_1(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.36604697, 0.17516142, -0.10853731, -0.22694224, -0.107650936, 0.23013335, 0.094055794, -0.17047717, -0.3006048, -0.08621717, -0.18815655, -0.03570218, 0.09676118, -0.017718751, 0.059138596, 0.073388465) * go_1(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.12791575, 0.101956226, 0.13091874, -0.046373338, 0.04955811, -0.04030444, 0.13869923, -0.046699073, -0.42611042, -0.7173929, 0.052184317, 0.6178025, -0.02929954, -0.07638965, -0.15000828, 0.030710017) * go_1(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.057806686, 0.20842272, -0.20148766, 0.006666912, 0.13356528, -0.45265228, -0.07354092, 0.21447696, 0.019552143, -0.13645506, 0.14643854, -0.0071413796, -0.15487236, -0.002250615, 0.30622452, 0.0033902125) * go_1(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.06896002, 0.24397352, -0.06479052, 0.20676947, -0.24259068, 0.055320013, -0.09032122, -0.11222854, -0.08982342, -0.114818625, -0.06399291, -0.3024516, -0.06302166, -0.1925528, 0.03458982, 0.028828239) * go_1(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.09764086, 0.09599894, -0.0073313303, 0.14418933, -0.045712367, 0.12657364, 0.04620374, -0.069778584, 0.30047333, -0.012418192, 0.15516461, -0.18087754, 0.08178273, 0.14262857, -0.01741533, -0.12509112) * go_1(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.04697884, -0.1506804, 0.031823065, 0.13397239, -0.18396698, 0.10681781, -0.29586303, -0.0039136545, 0.17560847, -0.12486726, -0.018646788, -0.20688744, -0.030614454, -0.0527634, 0.23593572, -0.10542146) * go_1(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.19182229, -0.32615846, 0.26283535, -0.1371942, -0.071202695, 0.12056063, -0.11450658, -0.27711076, -0.42096004, 0.0014352369, 0.1559669, -0.14464542, -0.17973948, 0.079166576, -0.12501791, -0.20623216) * go_2(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.12469872, 0.32190827, -0.059510354, 0.1393449, -0.12845798, -0.019571869, -0.22630808, -0.14031963, 0.36072046, 0.05858427, 0.19278921, 0.121090546, -0.067538865, -0.018770566, 0.14318037, -0.15561756) * go_2(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.024663208, 0.21110268, -0.016415706, 0.060093414, -0.03739678, -0.107412934, -0.077527136, 0.30331334, 0.17196326, -0.15512557, -0.09499732, -0.15748607, -0.16680105, -0.015185634, 0.16114107, -0.21288376) * go_2(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.17739037, -0.1190967, 0.13191372, -0.2527187, -0.14992718, -0.30511454, 0.19145966, 0.002194003, -0.12888977, 0.19152176, 0.27528167, 0.099714965, 0.12865707, -0.12051514, -0.055013947, 0.26231763) * go_2(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.46433613, -0.11708138, -0.20157282, 0.32022122, 0.079468675, 0.029407484, 0.2559102, -0.15651533, 0.08644574, -0.09747344, -0.07528584, 0.17354868, 0.19167562, -0.17698488, -0.09896657, 0.17093097) * go_2(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [102]     result += mat4(0.20283653, -0.33680332, 0.2282385, 0.18832158, 0.20866042, 0.00076752366, 0.16471444, -0.21548858, 0.16193539, 0.17141372, 0.03140222, 0.03913644, -0.030161971, 0.00014570929, 0.08993654, -0.064823024) * go_2(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.3075755, 0.19942546, 0.015526995, -0.120868504, -0.254515, -0.07791228, 0.03271691, 0.11794217, 0.11258601, 0.045204375, -0.061196107, -0.115958795, 0.3861869, 0.048215542, 0.07016682, -0.009975758) * go_2(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.07623697, 0.16094944, -0.02283455, 0.14112763, -0.051149167, 0.20429814, 0.011314802, 0.18914083, -0.24240434, -0.08784008, -0.16763984, -0.08492233, 0.31062725, -0.11925119, -0.33195966, 0.2060798) * go_2(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.016709225, -0.14472668, -0.3677625, -0.09832719, 0.030297454, -0.05775362, -0.1401375, 0.08119674, -0.01795042, 0.05183797, -0.24320887, 0.066842034, -0.22245285, -0.02740993, 0.06316751, 0.053399116) * go_2(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.039214406, -0.08876633, 0.045552462, 0.19226661, 0.1355001, -0.13942362, 0.17398876, 0.2914014, -0.191809, 0.037143208, 0.013333581, -0.16632195, 0.113767646, -0.106692605, 0.1589787, 0.030107044) * go_3(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.21997562, 0.13855208, -0.05783191, -0.033682413, -0.010961168, 0.10524961, 0.02177416, 0.18289444, 0.043692037, 0.07853899, -0.039936125, -0.1004449, 0.04494073, -0.020680292, 0.17578089, -0.106598996) * go_3(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.026852835, -0.16037546, 0.11278316, 0.12656097, -0.006857894, -0.03400118, -0.051564034, 0.00085412664, -0.37556714, -0.05279987, 0.029383834, -0.14246808, -0.056380164, -0.002399925, 0.16025752, 0.036324855) * go_3(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.022709966, 0.046350412, 0.03390721, 0.02810572, -0.14394265, 0.04215361, -0.3206118, 0.15034916, -0.0028448137, 0.1682989, -0.042686664, 0.020543462, -0.2786501, -0.007482015, -0.040313292, -0.20745736) * go_3(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.05417556, 0.18728684, -0.046121832, -0.27939513, 0.05907976, -0.09191223, -0.16625418, -0.26038164, 0.39956605, -0.052594025, -0.0596556, 0.29517552, -0.015181923, -0.0763375, 0.25131205, 0.13038464) * go_3(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [111]     result += mat4(-0.036903054, -0.0066989153, -0.062650286, 0.05614359, -0.0064960583, 0.028512698, -0.10906273, -0.010047654, 0.23030473, 0.049983572, 0.10439064, 0.26643834, 0.05041243, 0.09185424, -0.32352915, 0.11295159) * go_3(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [112]     result += mat4(0.09724027, -0.34962535, 0.06586686, 0.016635379, 0.13831381, 0.01707076, -0.04690347, 0.022350075, 0.018352794, 0.022000022, 0.070613205, 0.117735535, -0.025971051, 0.18832101, -0.09643588, -0.08512127) * go_3(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [113]     result += mat4(-0.17324433, 0.06810613, -0.057295907, -0.05115964, -0.101570815, 0.12491774, 0.08762367, -0.005862404, -0.05342927, -0.031942457, -0.039624047, -0.04298937, -0.1303138, -0.11869282, -0.024832053, 0.070463404) * go_3(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [114]     result += mat4(-0.010514842, 0.1376259, -0.11750346, -0.03786737, 0.03459249, 0.015408171, -0.031430878, -0.060825355, -0.072958425, -0.0037895301, 0.041686177, -0.12352204, -0.06261361, 0.054514423, -0.34072715, 0.13860728) * go_3(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [115]     result += vec4(0.018166734, -0.11002478, -0.05554318, -0.0988193);
[   0.291][d][vo/gpu-next/libplacebo] [116]     return result;
[   0.291][d][vo/gpu-next/libplacebo] [117] }
[   0.291][d][vo/gpu-next/libplacebo] [118] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.291][d][vo/gpu-next/libplacebo] [119] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [120] //!BIND conv2d_tf
[   0.291][d][vo/gpu-next/libplacebo] [121] //!BIND conv2d_tf1
[   0.291][d][vo/gpu-next/libplacebo] [122] //!SAVE conv2d_1_tf1
[   0.291][d][vo/gpu-next/libplacebo] [123] //!WIDTH conv2d_tf.w
[   0.291][d][vo/gpu-next/libplacebo] [124] //!HEIGHT conv2d_tf.h
[   0.291][d][vo/gpu-next/libplacebo] [125] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [126] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [127] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [128] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [129] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [130] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [131]     vec4 result = mat4(-0.040142782, 0.0288423, 0.07569487, -0.01490842, 0.14402796, -0.13682005, 0.027765118, 0.03907358, 0.07117706, 0.058157545, -0.23862502, -0.057674367, -0.19220531, 0.0147159435, -0.18028538, 0.0963821) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [132]     result += mat4(-0.1676744, -0.11937339, 0.12137117, 0.07119485, 0.14148116, -0.043578617, -0.029261118, -0.0016938087, -0.057269357, -0.080076694, 0.12193026, 0.07326153, -0.056278303, -0.01630716, -0.03792076, 0.1483611) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [133]     result += mat4(-0.3021578, 0.011601693, 0.11266048, 0.19086999, -0.0122412145, 0.08431291, 0.11615175, -0.008039614, -0.39987534, 0.07820729, 0.03509667, 0.1963505, -0.08839513, -0.21571854, 0.059425723, -0.06830175) * go_0(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [134]     result += mat4(0.23135209, -0.12452708, 0.0943565, 0.0028859286, -0.09836373, 0.10681712, -0.3535964, 0.08457615, 0.045332734, 0.16579892, -0.03809797, -0.021596594, 0.2937497, -0.028294371, 0.046484597, -0.037604347) * go_0(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [135]     result += mat4(0.072675414, -0.16431206, 0.28952035, 0.0076831076, -0.020242939, 0.029483542, -0.092415355, 0.08673106, 0.12109694, 0.14307201, 0.23134442, 0.11731775, 0.09981601, -0.16968462, 0.037470713, 0.14948717) * go_0(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [136]     result += mat4(0.0029752052, 0.06526503, 0.1866458, 0.07451277, -0.31836876, 0.17115082, -0.13969697, 0.23844297, -0.03244903, -0.08832665, 0.023691226, -0.18230624, -0.074933805, -0.00044301842, 0.050572682, 0.081511915) * go_0(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [137]     result += mat4(0.039502528, 0.051221415, -0.13968123, -0.091212444, -0.016925618, 0.15409444, -0.017455677, -0.11653652, 0.03539446, -0.00087720866, -0.12839639, 0.037198763, 0.03674469, -0.26444665, 0.019721227, -0.13013805) * go_0(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [138]     result += mat4(0.039229527, 0.25667152, 0.0032586441, -0.00718359, 0.1617932, 0.10409968, 0.07182867, -0.09810605, 0.07789241, -0.02014911, 0.025767172, -0.14604759, 0.07175764, 0.32513744, -0.20473222, -0.16266066) * go_0(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [139]     result += mat4(0.13418433, 0.061813723, -0.13927278, -0.2498272, 0.03468218, 0.29483125, 0.063289374, -0.04726235, 0.1898295, -0.33132064, 0.032045014, 0.02159535, -0.1148363, 0.31306976, 0.06456038, 0.048988886) * go_0(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [140]     result += mat4(0.07151646, 0.2799246, -0.107190795, -0.16431166, -0.28007045, 0.07206954, 0.06775463, 0.009758042, 0.07032184, -0.20843789, 0.087045245, 0.1360676, -0.25718534, 0.028249472, -0.12614648, 0.009949602) * go_1(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [141]     result += mat4(0.020241471, -0.23390484, -0.0083223935, 0.08344701, 0.08222297, 0.12026539, -0.08652223, -0.08228822, -0.039576706, -0.24677879, -0.1157289, 0.2590508, -0.23809408, 0.19911982, -0.116798095, -0.035870325) * go_1(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [142]     result += mat4(0.024991842, 0.050509237, -0.024134455, -0.12659028, 0.24089767, 0.122712664, -0.10482493, -0.19403952, -0.19177693, -0.06538376, -0.041478425, 0.32176673, -0.1534002, -0.18680622, 0.06763643, 0.020806564) * go_1(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [143]     result += mat4(0.03437814, -0.28067374, 0.2830681, 0.038812317, -0.021698112, -0.120865285, 0.22695538, -0.045419116, -0.030475847, -0.01977341, -0.1265364, -0.3109814, 0.012255813, 0.053917278, -0.018620957, -0.14599285) * go_1(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [144]     result += mat4(-0.016204128, -0.04093018, 0.054571863, 0.02679643, 0.01756274, -0.057685968, 0.16148666, 0.17370272, -0.11065411, 0.06378157, -0.09331551, 0.22985275, 0.057905316, 0.12323568, 0.07748665, 0.09878629) * go_1(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [145]     result += mat4(-0.018112244, 0.063234635, -0.013184602, 0.16241394, 0.08877139, 0.02145378, -0.02490027, -0.038920373, 0.13127136, 0.14391647, 0.020553736, 0.14401346, 0.06685973, -0.25398204, 0.10369067, -0.055949755) * go_1(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [146]     result += mat4(0.07710333, 0.047412727, 0.13813803, 0.18624061, 0.16907091, -0.039532468, 0.06234584, 0.06408178, -0.054543987, -0.045220226, -0.11093376, -0.37399602, 0.20372874, 0.004580967, -0.07742308, 0.017989937) * go_1(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [147]     result += mat4(0.003485311, -0.08897399, -0.013108594, -0.19473282, -0.27081844, -0.16812073, 0.0052992934, -0.055331517, 0.09446357, 0.019280333, 0.16560757, -0.3230032, 0.043096773, 0.059222896, -0.064184934, -0.059852477) * go_1(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [148]     result += mat4(0.06794279, -0.034135245, 0.083064295, 0.13506731, 0.13064219, -0.44978833, -0.03513717, 0.08999715, 0.1124541, 0.42208397, -0.0038724816, -0.014332087, -0.13751853, -0.04929869, 0.09134992, -0.17687531) * go_1(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [149]     result += mat4(0.100909084, -0.0131197255, 0.082274795, -0.2138443, -0.08515947, -0.021058358, 0.10951775, -0.06349191, -0.29129833, -0.029262653, 0.25235432, -0.11748315, 0.121980384, 0.062347785, 0.10916932, -0.15993518) * go_2(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [150]     result += mat4(0.28893283, -0.05677308, -0.2641288, -0.058937225, -0.16187571, 0.006647366, -0.063294955, 0.04766719, 0.60601914, -0.07831864, -0.15710756, -0.011491797, 0.15587467, -0.08105375, 0.07847514, -0.2803333) * go_2(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [151]     result += mat4(-0.077989794, -0.09871811, -0.3516344, 0.15292728, 0.010889273, 0.0011189661, -0.16118282, -0.018821161, -0.039708678, -0.00060983415, -0.06367813, 0.009148068, 0.03919827, 0.18782744, 0.028040757, -0.10230145) * go_2(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [152]     result += mat4(-0.4079609, 0.18640275, -0.12475227, 0.13891742, 0.25121725, 0.16942379, 0.14409852, 0.087600805, 0.045335658, -0.12683709, -0.0077387216, 0.06563413, -0.19857128, 0.106910795, -0.048285246, 0.10768945) * go_2(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [153]     result += mat4(0.5989075, 0.20941062, -0.20086494, 0.13344856, 0.073034994, 0.22358665, 0.101664364, -0.13463663, 0.18816395, -0.061176624, -0.14712185, 0.027320342, -0.09529667, 0.031148786, -0.28744993, 0.18698911) * go_2(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [154]     result += mat4(0.14799193, 0.39471942, -0.23340325, -0.4031061, 0.18926248, -0.11091216, 0.118981816, -0.09155061, 0.17049436, 0.19803695, -0.1513267, 0.023817873, 0.0090933135, -0.04134864, 0.060486555, 0.03536634) * go_2(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [155]     result += mat4(-0.39094314, 0.01779997, 0.12710269, 0.0067333193, -0.31255835, -0.08206612, -0.048528638, 0.369439, -0.19351655, -0.03420455, 0.15831526, -0.052294146, -0.08481741, 0.0787108, 0.1312136, -0.108919285) * go_2(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [156]     result += mat4(-0.16068119, -0.42190582, 0.19383872, -0.018445708, 0.09803051, -0.020769652, -0.022599563, -0.052448895, -0.20645833, -0.031432863, 0.0025441595, 0.03410379, -0.20268854, 0.04481527, 0.05191063, 0.42317194) * go_2(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [157]     result += mat4(-0.12786235, -0.23936178, 0.116561726, 0.30756372, -0.09420156, -0.044529166, -0.03585749, 0.1829332, -0.23939075, 0.24030831, 0.019878127, -0.015069802, 0.24300557, -0.22558568, -0.104956664, -0.09393648) * go_2(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [158]     result += mat4(-0.04607054, 0.012677649, -0.027597688, 0.1618836, 0.29210827, 0.014221155, -0.13591036, -0.06895336, -0.09559534, 0.07956421, -0.11112994, -0.13325493, 0.24562472, 0.11046177, 0.057847694, 0.0016315983) * go_3(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [159]     result += mat4(-0.03365951, 0.027391057, 0.09653403, -0.14718771, -0.049631152, -0.06467214, -0.058545876, 0.1424002, -0.06320376, 0.181183, 0.10249362, -0.16052136, 0.3013475, -0.04156266, 0.08862033, 0.06888033) * go_3(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [160]     result += mat4(0.10045977, -0.004198456, -0.025856055, 0.05739418, -0.1328637, -0.025975171, 0.06553717, 0.11301186, 0.0704087, -0.083569765, 0.16066101, -0.24453588, 0.25370175, 0.037184533, 0.062386766, -0.20025635) * go_3(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [161]     result += mat4(-0.017958941, 0.06417776, -0.1525265, 0.12451173, 0.14567685, -0.0049682115, -0.23973411, -0.0783304, -0.010629432, 0.08055161, 0.2028341, 0.17640644, -0.20445108, -0.055524793, -0.019326134, 0.081288636) * go_3(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [162]     result += mat4(0.007882519, -0.03722546, 0.053249408, 0.00071846246, -0.07053029, -0.21583866, 0.1415364, -0.19486657, 0.20685542, 0.17660026, -0.32156837, 0.1746825, -0.14957622, -0.09224378, -0.098153435, -0.13054638) * go_3(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [163]     result += mat4(0.10051427, -0.17398237, 0.09842799, -0.14187703, 0.116901085, -0.1229543, -0.0007776771, -0.20410055, -0.11373484, -0.111150615, -0.1974002, -0.11641459, 0.024105398, 0.24985977, 0.015871854, -0.10724633) * go_3(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [164]     result += mat4(-0.18081793, 0.1209351, -0.12867971, -0.019415248, 0.062617876, -0.037130393, -0.07803658, -0.22862352, 0.2586428, -0.030090366, -0.11894069, 0.18087515, -0.40921417, 0.070013195, 0.030540073, 0.035120826) * go_3(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [165]     result += mat4(-0.13185939, 0.12992652, 0.08125049, 0.075331174, 0.064219765, 0.056629725, -0.020012032, -0.0855444, -0.044063166, -0.05396545, -0.028002812, 0.21837157, -0.15206428, -0.12681007, 0.14895032, 0.12339962) * go_3(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [166]     result += mat4(0.08066341, -0.14773634, -0.0212227, -0.014011867, -0.048505764, 0.075407125, -0.020620076, 0.0003291325, -0.21815202, -0.23136546, 0.10853532, -0.036058456, 0.10952532, -0.052677035, -0.13005799, 0.18398996) * go_3(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [167]     result += vec4(0.022609137, -0.028548084, 0.024431901, 0.010504478);
[   0.291][d][vo/gpu-next/libplacebo] [168]     return result;
[   0.291][d][vo/gpu-next/libplacebo] [169] }
[   0.291][d][vo/gpu-next/libplacebo] [170] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.291][d][vo/gpu-next/libplacebo] [171] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [172] //!BIND conv2d_1_tf
[   0.291][d][vo/gpu-next/libplacebo] [173] //!BIND conv2d_1_tf1
[   0.291][d][vo/gpu-next/libplacebo] [174] //!SAVE conv2d_2_tf
[   0.291][d][vo/gpu-next/libplacebo] [175] //!WIDTH conv2d_1_tf.w
[   0.291][d][vo/gpu-next/libplacebo] [176] //!HEIGHT conv2d_1_tf.h
[   0.291][d][vo/gpu-next/libplacebo] [177] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [178] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [179] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [180] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [181] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [182] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [183]     vec4 result = mat4(-0.069641694, 0.104958326, 0.14786446, 0.027633663, -0.004279524, -0.020451711, 0.0883571, -0.016224537, 0.13585235, 0.11078269, 0.20198658, -0.042161036, 0.020466218, 0.20994963, 0.20072585, -0.028024657) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [184]     result += mat4(0.050872434, 0.12874635, 0.1298729, 0.115810685, 0.07087254, 0.09885682, 0.23018982, 0.19187538, 0.10953604, 0.0033836907, -0.13325337, 0.09830315, -0.06528767, 0.05096927, -0.016355392, -0.039334368) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [185]     result += mat4(0.027010268, 0.018263958, 0.0360758, 0.016791478, 0.2815702, 0.15517488, 0.43415815, 0.044976447, -0.0070842914, -0.12546758, 0.16874593, 0.077622116, 0.02252915, 0.1769774, 0.07181055, -0.15128697) * go_0(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [186]     result += mat4(0.057129618, 0.118046716, 0.07237424, -0.07842637, -0.044214778, -0.12886304, 0.08603301, -0.10416606, -0.15852053, 0.3788151, 0.26181692, -0.09092249, 0.31635332, 0.064212754, 0.21923725, 0.07500004) * go_0(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [187]     result += mat4(-0.16981383, 0.044409662, -0.3717617, -0.031610407, 0.03658662, -0.09459229, -0.09449437, -0.014000666, -0.19656453, 0.03934163, -0.16304104, -0.12761801, -0.06235523, 0.16438273, -0.036933117, -0.095564745) * go_0(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [188]     result += mat4(0.09725091, 0.034022827, 0.17699842, 0.1079676, -0.13236652, 0.03718181, -0.06968635, -0.23288171, 0.10275666, 0.08464966, -0.37162134, -0.35782215, -0.11023659, 0.2519236, -0.035197742, -0.019324787) * go_0(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [189]     result += mat4(-0.09968464, 0.01102193, 0.0073735216, 0.011999313, -0.004998707, 0.09518938, 0.045727003, -0.21544908, 0.006879454, -0.06398254, -0.12584935, -0.06759933, -0.0820037, -0.07775104, 0.021957919, -0.122708224) * go_0(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [190]     result += mat4(-0.08869767, 0.031296413, -0.0034280645, 0.13778855, 0.10073061, -0.08393937, -0.032959275, -0.0500518, 0.010908757, -0.09189417, -0.057760105, 0.17652664, -0.08729078, -0.09639096, -0.25654703, 0.055152636) * go_0(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [191]     result += mat4(0.0027847723, -0.12885433, 0.038065907, 0.17450769, 0.0864409, 0.04592345, -0.015443841, 0.077010944, 0.08967368, 0.06800111, -0.23636387, 0.35023567, 0.03165923, 0.03132063, 0.17964344, 0.035610788) * go_0(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [192]     result += mat4(-0.032017227, -0.0022808525, -0.08470573, 0.05332408, -0.14674746, 0.025374275, -0.018281924, 0.041163016, 0.00096549373, 0.014724006, 0.004913065, 0.18494442, 0.034953076, -0.15731992, -0.13792977, 0.08041999) * go_1(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [193]     result += mat4(0.08305006, 8.6318905e-05, -0.007895379, 0.02731387, -0.061324496, 0.050034665, 0.22662131, -0.013876427, -0.074468784, -0.008136604, -0.23337875, -0.1742574, 0.011753501, -0.11666686, -0.22541048, -0.14549944) * go_1(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [194]     result += mat4(-0.028333234, 0.121047184, 0.06720256, -0.058930036, 0.030258363, 0.07292774, 0.06455556, 0.0019076486, 0.0073987027, 0.17144889, 0.06084024, -0.08762086, -0.114422195, -0.16595861, -0.08706028, -0.10736261) * go_1(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [195]     result += mat4(-0.02519315, -0.14611271, 0.0388848, 0.19481422, -0.05970354, -0.08391417, 0.18982239, -0.10447052, 0.15587378, -0.023997072, 0.0781739, 0.2182389, -0.023886079, -0.1422596, -0.13352804, 0.005008043) * go_1(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [196]     result += mat4(0.08842712, -0.100292705, 0.18925671, 0.12198875, 0.061771665, -0.04473232, 0.025053164, 0.039047796, -0.1672479, -0.08934517, 0.33099812, -0.20269585, -0.21640155, -0.22029749, 0.16539703, -0.2442679) * go_1(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [197]     result += mat4(-0.16332205, -0.101898365, 0.02919932, -0.11900455, 0.14442924, 0.0916815, 0.037550304, 0.024123482, 0.02042624, 0.033472955, -0.059437107, -0.18735693, -0.013749093, -0.06199881, -0.08685079, 0.04252364) * go_1(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [198]     result += mat4(-0.09047013, -0.055188328, -0.09106191, -0.048969727, 0.05114009, -0.12753403, 0.07116141, 0.060749624, -0.074034564, -0.21952136, -0.09479503, 0.2753584, -0.014141759, -0.14883812, -0.0673838, -0.012279045) * go_1(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [199]     result += mat4(0.013816464, -0.0747162, -0.19202435, -0.064403646, 0.34980014, 0.04375546, 0.20264609, 0.006684355, 0.11523799, 0.024674915, -0.08697566, -0.04662527, -0.12743855, -0.39463726, 0.0057380227, 0.01286557) * go_1(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [200]     result += mat4(-0.08146522, 0.074080914, -0.16856177, -0.183158, 0.19228102, 0.12373886, 0.017574452, -0.01753772, 0.045071773, 0.07725093, 0.023422163, -0.011545186, 0.20751388, -0.10795588, 0.07606346, 0.10282933) * go_1(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [201]     result += mat4(0.12512013, -0.102208994, -0.09125398, 0.12043188, -0.066011876, 0.08831903, -0.017038671, -0.005541508, -0.049607087, 0.08654939, -0.02037085, 0.26887566, 0.005012545, 0.01869507, -0.013064982, -0.010649147) * go_2(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [202]     result += mat4(0.006824864, -0.05071593, -0.20786697, -0.07327317, 0.011382597, 0.030494886, -0.04754353, -0.018284699, 0.01305972, -0.036589053, 0.26637617, 0.021887446, -0.026669119, -0.037982125, -0.063445956, -0.009104248) * go_2(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [203]     result += mat4(0.032602567, 0.07094331, 0.052653246, 0.08342047, -0.085082285, -0.14674088, -0.23073354, -0.07915851, 0.0017120204, 0.032407638, -0.039819505, 0.16942178, 0.023192152, -0.0353237, 0.10930186, 0.22939779) * go_2(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [204]     result += mat4(0.0010455973, -0.11821993, -0.12639599, 0.12250084, -0.12756817, 0.11478416, -0.1862587, 0.016819192, 0.02110181, -0.25492984, -0.1766048, 0.22188173, -0.21305011, 0.113442205, 0.04599144, -0.15840286) * go_2(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [205]     result += mat4(-0.15086032, -0.17428935, 0.39080557, 0.07576757, 0.121703945, 0.17944208, -0.003140103, -0.11231332, 0.12102969, 0.15310267, 0.17578171, 0.40631834, -0.21299168, 0.024928993, 0.030104794, 0.020753227) * go_2(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [206]     result += mat4(-0.098734386, -0.020072265, -0.14308836, -0.08490801, 0.017175158, 0.02250534, 0.04060829, 0.033022214, 0.0046218676, 0.17923212, 0.0112105915, 0.09574084, 0.14819936, -0.14692923, 0.12634254, 0.060762513) * go_2(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [207]     result += mat4(0.030521613, -0.097913325, -0.016720278, 0.11273997, 0.013019863, -0.06557118, 0.0405774, 0.0915019, 0.022414956, -0.053254984, 0.18639986, 0.07820968, 0.06498986, 0.058922634, -0.02240318, -0.086019725) * go_2(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [208]     result += mat4(0.2058775, 0.01502064, 0.05847032, 0.007249146, 0.086483665, 0.19420148, 0.03892261, -0.013546935, -0.07980237, 0.04347281, -0.10376214, -0.1366535, 0.05285337, 0.07213318, 0.3642818, -0.11331124) * go_2(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [209]     result += mat4(-0.025740806, 0.14551482, -0.037410017, -0.17477523, -0.11853099, -0.060820814, -0.102599286, -0.13267937, -0.103053465, -0.014044828, -0.01888072, -0.06499249, 0.22311528, -0.051850274, -0.034120858, 0.044562567) * go_2(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [210]     result += mat4(-0.21360217, 0.10093803, -0.0016407765, -0.1473997, 0.26524043, 0.02112132, 0.23173104, -0.013157391, 0.05945182, 0.044635538, 0.06031638, -0.21435826, -0.10147484, 0.069090195, 0.09641844, -0.09581093) * go_3(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [211]     result += mat4(-0.08576515, -0.122861005, 0.049567085, -0.085854456, 0.23809357, -0.024966082, -0.10294079, 0.046241313, 0.008621132, -0.08323767, 0.20277941, 0.163423, -0.07386535, -0.088738985, 0.05274358, -0.025479877) * go_3(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [212]     result += mat4(-0.041135542, -0.008365642, 0.17088248, 0.04025207, 0.13809255, -0.056895368, -0.01582834, 0.07361908, -0.00068995473, -0.09300962, 0.19117641, 0.24832036, -0.06572358, -0.026025, -0.019093119, -0.049720034) * go_3(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [213]     result += mat4(0.024900286, 0.11525501, 0.025882801, 0.037742402, 0.36976853, 0.052211333, -0.15143296, 0.1802276, -0.059080046, 0.017990451, 0.026395092, -0.12689115, -0.07705386, 0.1232379, 0.13273561, -0.12521964) * go_3(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [214]     result += mat4(-0.19788785, 0.044887315, 0.07663442, 0.16688696, -0.2842248, -0.15684547, 0.028387763, 0.0063470444, -0.012245601, -0.038382255, -0.8187406, -0.25245667, 0.23014604, 0.22746666, 0.1594356, 0.16469443) * go_3(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [215]     result += mat4(-0.12663333, 0.014730006, 0.03765697, 0.15704912, -0.106595434, -0.05317512, -0.081759915, -0.08797109, 0.064620756, -0.06341419, 0.16493447, 0.23102313, 0.068325415, -0.088058695, 0.16885915, 0.036382258) * go_3(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [216]     result += mat4(0.035389822, -0.11811836, -0.035656307, -0.0680554, 0.1338908, 0.065852076, 0.023307983, 0.0675308, 0.09690683, 0.18170924, 0.09862692, -0.20964378, -0.08601271, -0.20016764, -0.01879598, -0.14629345) * go_3(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [217]     result += mat4(-0.27183273, 0.013525998, -0.14995874, -0.23938845, -0.26218823, -0.0009874097, -0.13385512, -0.10664239, -0.048931994, 0.039898522, 0.047444753, 0.10934722, 0.10969629, 0.123539805, 0.11692802, 0.14172275) * go_3(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [218]     result += mat4(-0.1656506, 0.019683002, 0.0221048, 0.12596753, 0.20420644, -0.07930122, 0.04653823, 0.11492255, -0.0050175437, -0.03271697, 0.013389486, 0.034583613, -0.2196601, -0.1615663, -0.013763388, -0.056037936) * go_3(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [219]     result += vec4(-0.022956269, 0.029688787, -0.070148066, -0.07163476);
[   0.291][d][vo/gpu-next/libplacebo] [220]     return result;
[   0.291][d][vo/gpu-next/libplacebo] [221] }
[   0.291][d][vo/gpu-next/libplacebo] [222] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.291][d][vo/gpu-next/libplacebo] [223] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [224] //!BIND conv2d_1_tf
[   0.291][d][vo/gpu-next/libplacebo] [225] //!BIND conv2d_1_tf1
[   0.291][d][vo/gpu-next/libplacebo] [226] //!SAVE conv2d_2_tf1
[   0.291][d][vo/gpu-next/libplacebo] [227] //!WIDTH conv2d_1_tf.w
[   0.291][d][vo/gpu-next/libplacebo] [228] //!HEIGHT conv2d_1_tf.h
[   0.291][d][vo/gpu-next/libplacebo] [229] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [230] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [231] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [232] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [233] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [234] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [235]     vec4 result = mat4(-0.15104648, 0.05522861, -0.0654341, -0.053517453, -0.08264124, -0.0062249107, -0.20364265, -0.05015117, -0.18837251, 0.030655831, 0.046844713, -0.20673253, -0.14042036, -0.05655449, 0.13994302, 0.011745607) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [236]     result += mat4(-0.16517559, 0.1489214, -0.09149559, 0.025003506, -0.124926426, 0.16974348, -0.020857265, 0.08017403, 0.21836148, 0.0025619378, 0.2331612, 0.085599184, -0.030934382, -0.055194855, 0.09527726, -0.10081552) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [237]     result += mat4(0.041800212, 0.028859638, 0.09395546, 0.05211183, -0.038541477, 0.021495212, 0.04862346, -0.007864793, 0.038407274, -0.13841268, -0.14963801, 0.26470762, 0.16691841, -0.07262008, 0.034374326, -0.14709206) * go_0(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [238]     result += mat4(0.00094978884, -0.028974704, -0.0900548, -0.08401967, -0.08935931, -0.043606587, -0.14497143, -0.05226239, -0.21516493, 0.19410603, -0.089924194, -0.04335071, -0.012618276, -0.2671613, 0.020422975, -0.037739716) * go_0(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [239]     result += mat4(-0.13403237, -0.02524383, -0.03474901, 0.054432765, 0.11946775, 0.107336655, -0.1431715, -0.13370377, 0.015087512, -0.1917613, 0.073493585, 0.2788855, -0.010510839, 0.06891479, -0.06741307, -0.05271205) * go_0(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [240]     result += mat4(-0.15432046, 0.04021662, -0.16979513, 0.13660534, -0.10518303, -0.10095502, -0.13092068, 0.022805348, -0.16676381, -0.4273298, 0.020867536, 0.3506733, -0.29459694, -0.055828743, -0.069241956, 0.04106382) * go_0(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [241]     result += mat4(-0.08890133, 0.07549666, -0.040735144, -0.1506932, -0.22227979, -0.0762723, -0.17766447, -0.05741318, -0.21885683, 0.2379157, -0.15525854, -0.07306285, 0.15580738, -0.04394069, -0.19175608, 0.018283797) * go_0(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [242]     result += mat4(-0.08503275, -0.105500385, -0.114987396, -0.07166016, -0.2147138, 0.09378708, 0.24550334, -0.0834075, -0.033147786, -0.022304727, -0.31062204, 0.027651973, 0.109098755, 0.18889032, 0.1163026, 0.13863255) * go_0(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [243]     result += mat4(0.15266588, -0.14901319, 0.033916786, 0.09381096, -0.08196443, -0.16194504, 0.035789456, 0.21234898, -0.48724765, 0.2619442, -0.11215393, 0.25061038, 0.022344576, 0.0116525125, 0.111661114, -0.15242295) * go_0(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [244]     result += mat4(0.020475458, 0.0797404, -0.13576819, 0.009681671, 0.030504882, 0.049232908, 0.022025917, 0.16912088, -0.23914136, -0.084663324, 0.020925451, -0.1023938, 0.035916872, -0.07538111, -0.11470242, 0.15238516) * go_1(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [245]     result += mat4(-0.12941381, 0.08509899, -0.029489802, -0.09148447, -0.089406274, -0.116145454, -0.08979843, 0.11908148, 0.15473351, -0.21687616, 0.12607013, -0.08244334, -0.079580925, -0.16613089, -0.09287793, -0.03412643) * go_1(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [246]     result += mat4(-0.023578499, 0.07394217, -0.13069086, -0.1060499, -0.07559958, -0.21839201, 0.1090753, 0.0787872, 0.07677037, -0.25998843, 0.20039314, 0.046882212, 0.31871012, -0.3048051, 0.15118991, -0.00518087) * go_1(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [247]     result += mat4(-0.15338503, -0.11057532, 0.075839415, -0.18592294, -0.0155324, 0.038140323, -0.10498194, 0.09070477, 0.05108992, -0.047939524, -0.091004305, 0.09649005, -0.10967152, -0.051909525, -0.05314551, 0.09661584) * go_1(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [248]     result += mat4(-0.14458802, -0.053263694, -0.0010885567, 0.23342133, 0.01918937, 0.12026143, -0.15691495, 0.30480555, -0.08725869, 0.19082253, 0.3594973, 0.016653897, 0.045152336, -0.088590585, 0.0069655925, 0.1392425) * go_1(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [249]     result += mat4(0.17944881, -0.17950764, 0.13282645, 0.030974053, 0.32233685, 0.18067117, -0.11472813, 0.097301506, -0.047649745, -0.1053861, -0.081039384, 0.035132434, 0.10204545, 0.085582554, -0.13153993, -0.021741152) * go_1(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [250]     result += mat4(-0.15573682, 0.16409989, -0.22574787, -0.03877603, -0.18285516, 0.11638645, 0.18321282, -0.017770218, 0.18230622, 0.16433364, -0.12795393, -0.03805153, 0.14386104, -0.0891527, -0.056928284, -0.10961495) * go_1(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [251]     result += mat4(0.257622, 0.052519716, -0.25421762, -0.1887382, -0.083568096, -0.0064690276, -0.029110614, 0.103327505, -0.17006217, 0.2254096, -0.29366904, 0.04302887, -0.10198446, -0.24423616, 0.16781262, -0.005019004) * go_1(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [252]     result += mat4(0.103393994, -0.059044626, -0.18192382, 0.0990813, -0.26143607, 0.11036474, 0.04788275, -0.096738026, 0.12825653, 0.13631694, -0.077904984, -0.020790676, -0.25118098, 0.122588515, -0.049440473, -0.10758222) * go_1(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [253]     result += mat4(0.06693113, -0.13647175, 0.131139, 0.13143918, 0.081720434, 0.117537096, 0.15387627, -0.008771362, 0.08513583, 0.023794742, -0.0661625, 0.115793936, 0.0023350024, 0.02215075, -0.0494433, -0.013404977) * go_2(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [254]     result += mat4(0.041419264, -0.17622781, 0.028418267, 0.12114493, -0.23587078, 0.08457395, 0.014364018, -0.103271864, -0.051572207, -0.026424447, 0.16755055, -0.10763651, -0.033440586, 0.068594255, -0.050668504, 0.1941505) * go_2(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [255]     result += mat4(-0.2780181, 0.037816502, -0.11516711, -0.09822884, 0.13762361, -0.14317706, 0.14350282, 0.000623895, -0.08601606, 0.08118504, 0.15497385, -0.04721711, -0.008936935, -0.014223618, -0.09641698, -0.013884213) * go_2(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [256]     result += mat4(0.14349665, -0.03144472, -0.057813704, 0.0667044, 0.09026094, 0.051366236, 0.11139983, -0.015782114, -0.18314016, -0.18774192, 0.0014838242, 0.15759028, 0.062388215, 0.13626057, 0.02576217, -0.06317815) * go_2(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [257]     result += mat4(0.07151769, 0.14508991, 0.1736844, -0.11487795, -0.07999805, -0.07797908, 0.037923355, -0.059138823, -0.23531209, -0.040207293, -0.068355694, -0.024296658, -0.114820175, 0.19726487, 0.21772414, 0.03659222) * go_2(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [258]     result += mat4(0.16858695, -0.12135113, 0.009391182, -0.081519485, 0.13340487, 0.07007004, 0.094124354, 0.035519842, -0.3320139, -0.06624027, -0.14716229, -0.09205287, 0.12664132, -0.05655441, 0.0123263765, 0.04641279) * go_2(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [259]     result += mat4(0.19018422, -0.15428329, -0.009354114, 0.04165953, 0.11024837, -0.107493006, -0.05807292, -0.048029456, 0.24319384, -0.10542357, -0.013699952, 0.06228662, -0.06808749, -0.023227982, 0.16528323, -0.05610251) * go_2(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [260]     result += mat4(-0.008616222, 0.077674195, -0.08638503, 0.09293109, 0.072474636, 0.05004233, -0.20591061, -0.005301386, -0.15486047, 0.15038474, 0.1262478, 0.021724822, 0.02274613, -0.3088281, -0.08437887, -0.10684698) * go_2(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [261]     result += mat4(-0.16960032, 0.09365251, -0.030414175, -0.010766254, 0.18181023, 0.12130318, 0.08913089, -0.06070321, 0.05200306, 0.092584535, 0.17694671, 0.033796314, -0.038107123, -0.04335955, -0.049443472, 0.30465958) * go_2(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [262]     result += mat4(0.07661484, -0.009945252, 0.12866217, -0.07592757, -0.21030053, 0.014371748, -0.072458774, -0.04700072, 0.15534303, 0.2007125, -0.15699059, -0.032897495, 0.08110436, -0.11243608, 0.008632577, -0.10153441) * go_3(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [263]     result += mat4(-0.034697928, 0.06928288, -0.2796273, 0.14405379, 0.12248569, 0.036539096, 0.06607706, 0.077684596, -0.16473202, 0.1665916, -0.29977503, 0.21047153, 0.13114224, -0.091579035, -0.045458574, 0.03254245) * go_3(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [264]     result += mat4(0.053284872, 0.053366095, -0.26152626, -0.03123967, -0.031794485, 0.17670582, -0.07450994, 0.017521491, -0.040290453, 0.38342363, -0.25021288, -0.014660264, 0.1621895, 0.25041878, -0.12124821, 0.068036206) * go_3(-1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [265]     result += mat4(0.11366693, -0.030863572, -0.07411263, 0.12475283, -0.046070684, -0.09033321, 0.013222701, 0.06798592, -0.32814804, 0.057653826, -0.14082801, -0.00217398, -0.22856179, -0.19058353, -0.20992154, -0.03701372) * go_3(0.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [266]     result += mat4(0.20345633, -0.1332355, 0.27152926, -0.13477845, -0.25242096, -0.28281286, 0.31289554, 0.14284514, 0.53362453, -0.46766588, 0.4518293, -0.39291728, -0.3573227, -0.014670052, 0.0051881406, 0.16552156) * go_3(0.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [267]     result += mat4(-0.15017267, -0.07792945, -0.204405, 0.13964304, -0.13642666, -0.10228306, 0.03238279, -0.08689329, -0.072262034, -0.0258388, 0.05689183, 0.055701543, -0.19800112, 0.012217054, -0.033292748, -0.047611095) * go_3(0.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [268]     result += mat4(-0.014704416, -0.12203891, 0.066083655, -0.1409769, 0.0041513643, -0.087383606, -0.17498164, 0.11327789, -0.25947225, -0.0016027623, 0.08202566, 0.042270098, 0.006429511, -0.26576808, -0.08461341, 0.049376782) * go_3(1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [269]     result += mat4(0.0695189, -0.14753938, 0.09578246, -0.16607563, -0.0105561055, 0.17166016, 0.027422488, -0.14175262, -0.009492696, -0.23449713, 0.018270867, 0.14635146, 0.33451268, 0.030959005, -0.46468422, 0.024256868) * go_3(1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [270]     result += mat4(-0.16865666, -0.00015881563, -0.054488145, -0.06222717, -0.032101758, 0.06485387, -0.0028512608, 0.046645947, 0.017593225, -0.19447896, -0.024742266, 0.03970127, 0.29845607, -0.16168733, 0.035172883, 0.07924657) * go_3(1.0, 1.0);
[   0.291][d][vo/gpu-next/libplacebo] [271]     result += vec4(0.103826486, 0.045373913, 0.11565896, -0.06568643);
[   0.291][d][vo/gpu-next/libplacebo] [272]     return result;
[   0.291][d][vo/gpu-next/libplacebo] [273] }
[   0.291][d][vo/gpu-next/libplacebo] [274] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.291][d][vo/gpu-next/libplacebo] [275] //!HOOK MAIN
[   0.291][d][vo/gpu-next/libplacebo] [276] //!BIND conv2d_2_tf
[   0.291][d][vo/gpu-next/libplacebo] [277] //!BIND conv2d_2_tf1
[   0.291][d][vo/gpu-next/libplacebo] [278] //!SAVE conv2d_3_tf
[   0.291][d][vo/gpu-next/libplacebo] [279] //!WIDTH conv2d_2_tf.w
[   0.291][d][vo/gpu-next/libplacebo] [280] //!HEIGHT conv2d_2_tf.h
[   0.291][d][vo/gpu-next/libplacebo] [281] //!COMPONENTS 4
[   0.291][d][vo/gpu-next/libplacebo] [282] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [283] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [284] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [285] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.291][d][vo/gpu-next/libplacebo] [286] vec4 hook() {
[   0.291][d][vo/gpu-next/libplacebo] [287]     vec4 result = mat4(0.1851775, 0.053705044, 0.033816848, -0.018555025, -0.21204336, -0.01706974, 0.088259794, -0.13126148, 0.10729598, -0.043457437, 0.08634712, 0.09220895, 0.062131613, -0.01995871, 0.05181067, 0.18520063) * go_0(-1.0, -1.0);
[   0.291][d][vo/gpu-next/libplacebo] [288]     result += mat4(0.1662002, -0.14197104, -0.052809287, 0.025287712, -0.08330898, -0.08998097, -0.15642618, -0.14941245, -0.03481203, 0.061857622, 0.26051775, -0.0005498248, 0.086427025, 0.024108192, -0.12418039, 0.022286376) * go_0(-1.0, 0.0);
[   0.291][d][vo/gpu-next/libplacebo] [289]     result += mat4(0.058200672, -0.3073398, 0.17150162, -0.13394679, -0.075118184, -0.14607768, -0.006172172, 0.007731589, -0.21818224, -0.06449433, -0.038958784, 0.037722416, 0.28699976, -0.027563032, 0.23295315, 0.028444216) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [290]     result += mat4(0.12871371, 0.0064904913, 0.14985761, -0.10923005, 0.17413563, 0.1599109, -0.08457703, 0.108153716, -0.08871187, -0.06661137, 0.2754416, -0.009667768, 0.39819396, 0.12392097, 0.14145902, 0.0019376524) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [291]     result += mat4(0.13893189, 0.12715353, 0.015191678, -0.21003054, -0.030412354, -0.01676613, -0.19799289, -0.006130075, 0.37676954, -0.14475077, -0.2065198, -0.30432892, -0.14944535, -0.09121536, -0.107600585, -0.24462196) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [292]     result += mat4(-0.11653076, -0.0068671284, -0.02249137, -0.17877012, -0.15063138, -0.13514869, 0.107643366, -0.03196477, -0.086422764, 0.3079287, 0.17584166, -0.032449376, -0.06917114, -0.2682637, -0.18978168, -0.037039287) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [293]     result += mat4(0.12014731, -0.030360512, -0.12954475, -0.110275604, -0.077214256, 0.019689744, 0.22149551, -0.002266716, 0.09697784, -0.124532826, -0.16776511, -0.034212478, -0.36935154, 0.016926935, 0.1363609, 0.20415346) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [294]     result += mat4(-0.11199535, -0.001692563, -0.09058429, -0.08437503, 0.092625685, 0.06046257, 0.25509837, -0.011657033, -0.17949764, -0.10718947, -0.1180669, -0.24681842, -0.1747311, 0.0014518246, -0.042863015, 0.06103357) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [295]     result += mat4(0.14979295, -0.037154514, 0.01957725, 0.012282435, 0.09168596, -0.05552286, 0.111671515, 0.0078630615, -0.10319766, -0.06416261, -0.23097566, -0.13931875, 0.2110811, 0.013095802, -0.2306504, -0.025639111) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [296]     result += mat4(-0.10091975, -0.10095426, -0.023449723, -0.022170888, 0.054953706, -0.13049407, 0.08289061, 0.023241632, 0.08735388, -0.0058387457, 0.17897247, 0.011434436, 0.008181139, -0.0034718404, -0.015372735, -0.07657766) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [297]     result += mat4(-0.023442164, 0.07535702, 0.024391165, -0.050532013, 0.044168636, 0.0062343236, -0.019756999, -0.009695123, 0.10102337, 0.0052776975, -0.14944167, -0.060957722, 0.24367364, -0.08069369, 0.12170072, -0.047048368) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [298]     result += mat4(-0.18376935, -0.08407229, -0.12943378, 0.0738419, -0.12404976, -0.13367929, 0.11265896, -0.021353, 0.003783386, 0.50088304, 0.14058582, 0.041053623, 0.038247623, -0.014179976, 0.007905778, -0.042492237) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [299]     result += mat4(-0.046272535, 0.052449115, 0.17190954, -0.004745371, -0.045572635, -0.09292636, 0.36309823, 0.16673928, -0.099154025, -0.109614775, 0.17803112, 0.19907133, -0.14306267, 0.06898593, 0.11493454, 0.06795014) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [300]     result += mat4(0.26181114, -0.044014625, -0.21605036, -0.08646438, 0.21038742, -0.084986, 0.0504626, 0.17514943, -0.25218952, -0.18691514, 0.057650108, 0.08653614, -0.101205684, 0.03176334, 0.18569492, 0.17973189) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [301]     result += mat4(-0.0339215, 0.20112811, -0.12986277, 0.028961731, -0.056813832, 0.04451147, -0.07827432, -0.0860976, 0.096853435, 0.3483546, -0.35758162, -0.11749375, -0.035918653, 0.06140711, -0.08520154, 0.02418808) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [302]     result += mat4(-0.09643022, -0.10491069, 0.0068604187, 0.023679713, 0.096521445, -0.29323488, 0.33353668, 0.112864286, -0.1172182, -0.07233183, 0.06607239, 0.08589609, 0.055790007, 0.14396138, -0.14191268, 0.00034840964) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [303]     result += mat4(0.15357164, -0.038462736, 0.08143956, 0.1744909, 0.40503287, -0.114508316, 0.003937322, 0.2536635, -0.042445306, -0.15622465, 0.09155284, 0.010992155, -0.20646071, 0.022801135, 0.08894491, 0.069300614) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [304]     result += mat4(-0.12663515, 0.023849454, -0.053604446, 0.12082873, -0.247968, -0.020969635, -0.03831894, -0.014617553, 0.22630337, 0.037801865, 0.052950703, 0.04285706, -0.14487264, 0.20786528, -0.08719664, 0.1752347) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [305]     result += mat4(-0.073527604, -0.050752833, 0.051830504, 0.32868716, 0.17474994, 0.016937364, -0.08792601, -0.024481766, -0.022229593, 0.030706186, 0.09213566, -0.076506205, 0.073404044, 0.10368055, -0.175889, -0.08453031) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [306]     result += mat4(-0.06838216, 0.007698341, 0.063972116, -0.015604406, 0.16135305, 0.18044342, 0.024137018, -0.23326185, 0.13235588, -0.009096587, -0.058368143, -0.077040404, 0.0011419816, -0.09246194, 0.061036937, 0.049564146) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [307]     result += mat4(0.023225296, -0.00060856267, -0.07775185, 0.016958566, -0.2641349, -0.08263046, -0.15350416, -0.30203494, 0.113956556, -0.010813236, -0.017738314, -0.13689043, -0.10318342, 0.025793184, -0.010336172, 0.09733422) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [308]     result += mat4(-0.04462596, 0.052866418, -0.34754288, 0.05540498, -0.24492586, -0.32016864, 0.18145293, 0.24873725, 0.32388234, -0.034801524, -0.1347588, -0.07565546, 0.015183539, 0.05059595, 0.08090056, 0.05930932) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [309]     result += mat4(0.045346696, -0.052527856, 0.052270077, 0.13417454, 0.05200045, 0.028119288, 0.005115497, 0.22952151, -0.2158375, 0.12241308, 0.3507457, 0.08616576, 0.07592416, 0.28470486, 0.3432788, 0.24857087) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [310]     result += mat4(0.21311626, 0.052607164, 0.1248861, 0.20193806, 0.045226507, 0.14512901, -0.15103437, -0.17926466, 0.11657411, -0.32711068, -0.16332194, -0.07793982, -0.21802668, 0.5183869, -0.13567342, 0.07823041) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [311]     result += mat4(0.00796368, 0.048073012, -0.14537893, -0.021708772, 0.036246423, 0.1062395, 0.12605369, 0.007073524, -0.1572743, 0.07439501, 0.089162275, -0.0039608316, 0.332032, -0.05461242, -0.17615359, -0.10240517) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [312]     result += mat4(0.20636982, -0.0024615112, -0.10625786, 0.024270926, 0.061810836, -0.13585201, -0.16581286, 0.23549418, 0.01928842, 0.07404979, -0.054449487, 0.04096373, 0.046939734, 0.003980803, 0.02111498, 0.064925276) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [313]     result += mat4(0.10485388, 0.06850885, -0.11292169, 0.16991565, -0.15282536, 0.124175504, -0.050431166, -0.06689582, -0.00059811946, 0.033696912, 0.11055047, 0.033060126, -0.17472714, 0.0048819613, -0.04478706, -0.1344572) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [314]     result += mat4(-0.20473132, 0.056477875, 0.059559986, 0.115130566, -0.058425788, -0.035971727, 0.08334707, -0.096510135, -0.23206294, 0.10635798, -0.21575621, -0.07063254, 0.03877511, -0.107549034, 0.22248401, 0.21702304) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [315]     result += mat4(-0.02557767, 0.09886609, -0.100499466, 0.16687396, -0.084830604, 0.03150401, -0.049512494, 0.05595696, -0.13193256, -0.08585273, 0.14247662, 0.12290477, -0.07168309, 0.14531752, -0.048359327, 0.27716598) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [316]     result += mat4(0.13297586, 0.20674329, 0.14469388, 0.08981846, -0.004231366, -0.02819193, 0.15470329, 0.17299837, 0.113062344, -0.22716297, -0.21754944, -0.00083956274, -0.14160508, 0.1808253, 0.11268379, 0.27335623) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [317]     result += mat4(0.07497518, -0.06799594, -0.018158078, -0.00038999433, -0.15169668, -0.06928238, -0.33672288, -0.105485775, 0.33106267, 0.06698315, 0.019718744, -0.06810211, -0.35186404, -0.29145968, -0.056863394, 0.21498048) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [318]     result += mat4(-0.013215512, -0.24763754, 0.20965266, 0.1068435, -0.13234195, 0.053566497, 0.05061848, -0.28645232, 0.15518288, 0.23247199, 0.017553907, -0.25181335, -0.048030723, -0.06663929, -0.111026704, -0.12663394) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [319]     result += mat4(-0.010501938, -0.17995767, 0.06010859, 0.050185587, 0.108627126, -0.101203434, 0.07558728, 0.060466755, -0.106942676, -0.35854608, 0.16015992, 0.16823332, -0.06543775, -0.37310675, 0.014043972, -0.18328045) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [320]     result += mat4(0.09712849, 0.013983463, 0.07291423, 0.031715546, 0.030862397, 0.045510456, -0.22066842, 0.063464865, 0.11721659, -0.10596602, -0.20611264, 0.052158818, -0.3961766, -0.03781582, 0.17633812, 0.1316111) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [321]     result += mat4(-0.25029674, 0.07153423, -0.35125682, -0.18255402, -0.19569087, 0.00432772, -0.0969035, -0.24648514, -0.0040922165, 0.037500706, -0.038137026, 0.056214277, -0.048258524, 0.03567822, -0.05033007, -0.24696785) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [322]     result += mat4(-0.03465209, -0.012495964, 0.22782089, 0.012034795, 0.2916752, 0.08264436, 0.15387125, -0.1473455, -0.15614432, 0.05536727, -0.027079755, 0.010725311, -0.03325222, -0.089212805, -0.10559839, -0.19647683) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [323]     result += vec4(0.0001705175, -0.031081453, 0.010100773, -0.027214011);
[   0.292][d][vo/gpu-next/libplacebo] [324]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [325] }
[   0.292][d][vo/gpu-next/libplacebo] [326] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [327] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [328] //!BIND conv2d_2_tf
[   0.292][d][vo/gpu-next/libplacebo] [329] //!BIND conv2d_2_tf1
[   0.292][d][vo/gpu-next/libplacebo] [330] //!SAVE conv2d_3_tf1
[   0.292][d][vo/gpu-next/libplacebo] [331] //!WIDTH conv2d_2_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [332] //!HEIGHT conv2d_2_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [333] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [334] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [335] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [336] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [337] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [338] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [339]     vec4 result = mat4(-0.026301445, -0.021575214, 0.22165509, 0.059994068, 0.03341161, 0.1831188, 0.20342293, 0.110160105, 0.03908121, 0.020673111, 0.07239561, 0.038754333, 0.15266368, 0.16526422, 0.062376205, -0.09759537) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [340]     result += mat4(0.19817191, 0.10267733, 0.17744653, 0.23283184, 0.18810122, 0.2708428, -0.12651879, 0.020756349, 0.039632563, -0.22201295, 0.04873703, 0.09159713, 0.13838065, 0.21169297, 0.30816007, 0.044463675) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [341]     result += mat4(-0.27859214, 0.07277634, 0.0021458792, 0.0089682285, -0.069680706, 0.090415835, -0.057762265, 0.18703683, -0.03514389, -0.102816254, -0.036509827, 0.038066104, -0.0168311, 0.094478935, 0.04079697, -0.049064912) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [342]     result += mat4(-0.20913245, -0.110538535, -0.08584027, -0.1222067, 0.05414807, -0.045247085, 0.07351766, -0.002078549, -0.1270987, -0.10164512, -0.1857815, 0.08845066, -0.03743333, -0.098948084, 0.21244387, 0.10441866) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [343]     result += mat4(0.015990427, 0.36396438, -0.24094687, 0.30236533, -0.13271736, 0.06057376, -0.19678196, -0.28577125, -0.25427434, -0.08400598, 0.07284403, -0.18552442, -0.16425897, 0.097259276, -0.32386774, -0.2190484) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [344]     result += mat4(-0.004581924, -0.13954072, -0.122360416, 0.14132866, -0.08529257, -0.013296556, 0.0848472, 0.09336581, 0.10332182, -0.016313016, 0.07103558, 0.032564916, -0.13478759, -0.20207484, 0.12986964, 0.1219679) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [345]     result += mat4(0.09817874, -0.10573357, 0.100535244, 0.19608764, -0.13303067, 0.024192972, -0.030689823, 0.02574889, 0.051233094, 0.03489235, -0.18465245, -0.06943822, -0.031604882, 0.1519888, 0.09348508, 0.09187296) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [346]     result += mat4(-0.21365458, -0.23696984, 0.13097638, -0.09435498, 0.16467983, -0.066370346, 0.1269104, -0.095128186, 0.09954892, 0.12489504, -0.43418056, 0.106512725, -0.17860703, -0.07114084, -0.07630834, -0.26642478) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [347]     result += mat4(-0.009044342, 0.02711196, -0.14873673, 0.015405045, 0.0071443473, -0.025285944, 0.07409282, 0.06338527, 0.0149676185, 0.011741382, -0.2133069, -0.028912885, 0.19420496, 0.039629057, 0.057636812, 0.15214856) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [348]     result += mat4(0.07629928, 0.25540486, -0.050925937, -0.18136702, 0.02261603, 0.22343902, 0.003270321, 0.10735731, -0.12541203, -0.10208828, 0.012832783, 0.2591262, 0.08122926, -0.009837677, 0.10308358, 0.19236866) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [349]     result += mat4(0.0896358, 0.27571487, 0.04406029, -0.047453407, -0.08587119, 0.16366854, 0.20622262, 0.08347545, -0.3501584, -0.28434548, -0.07592983, 0.09098784, 0.07605388, 0.09677056, 0.0015295541, 0.05102585) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [350]     result += mat4(0.18255898, 0.18618028, 0.0017002645, -0.013004655, -0.06436534, 0.13967068, 0.063077755, -0.10632303, -0.20803222, -0.028537111, -0.03144366, -0.08555215, 0.05154303, 0.02431626, 0.15246728, -0.013708507) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [351]     result += mat4(-0.020998938, -0.05026291, 0.03700117, 0.00830308, -0.1949294, 0.0026698054, -0.034649856, 0.19784226, -0.083901435, -0.069783084, -0.1504053, 0.16595264, -0.07480141, 0.16067508, 0.06010996, -0.021359695) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [352]     result += mat4(-0.040828142, -0.20158486, 0.034770954, -0.1894161, 0.11665004, 0.29729164, -0.10584386, 0.13165873, -0.18863006, -0.26719162, -0.047613148, -0.12728356, -0.2033613, 0.10550052, 0.20095508, -0.11275811) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [353]     result += mat4(-0.0785033, -0.1896073, -0.051492307, -0.1694358, 0.1368308, 0.049355216, -0.05707422, 0.079159185, 0.024578957, -0.0923136, 0.089215435, 0.28670043, 0.027932687, 0.06510816, 0.10810999, 0.05990052) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [354]     result += mat4(0.08135192, 0.0001326522, -0.16098668, -0.18663193, -0.10280192, 0.078255914, 0.047648013, 0.08326376, 0.055962667, 0.06302574, -0.080121025, -0.031820554, -0.019117938, 0.12515336, 0.09794088, -0.03276838) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [355]     result += mat4(0.280923, 0.24079335, 0.007883573, 0.06270414, 0.3055441, 0.19291803, -0.16041607, 0.14836526, 0.0013885222, 0.04538063, 0.10742898, -0.064491205, 0.048174977, 4.237692e-05, -0.15194727, 0.024381457) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [356]     result += mat4(-0.0009164131, -0.031949926, 0.0076425644, -0.036870714, -0.0031292974, 0.017726978, -0.20172147, -0.0770472, 0.26379177, 0.108997814, 0.08069395, 0.2126177, 0.012075376, -0.029457828, 0.062730506, -0.15754452) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [357]     result += mat4(0.09167904, -0.2657421, -0.03443356, 0.03315832, -0.015365421, -0.1029612, -0.108251, 0.04261033, -0.097120754, -0.05616668, -0.09275983, 0.024902184, 0.050058514, -0.013761632, 0.07555132, -0.0046676896) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [358]     result += mat4(-0.10743835, -0.0007361781, -0.042085417, -0.08237517, -0.10094376, -0.24007876, 0.13924706, -0.07526801, 0.01158322, 0.15491122, 0.0069442675, -0.004242352, 0.11429785, 0.02994726, -0.11829945, -0.04108612) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [359]     result += mat4(0.073622055, -0.064717196, -0.0025231615, 0.13256475, 0.20159899, 0.047977835, -0.10289233, -0.18419135, -0.00888952, 0.059428576, -0.053062655, -0.02730631, 0.14545685, -0.08686949, 0.17454128, 0.035443828) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [360]     result += mat4(-0.010146019, 0.06712568, 0.12614638, 0.023590917, 0.025756737, 0.06603747, -0.17108095, -0.06179699, 0.027241204, -0.13196802, 0.043475866, -0.0397495, 0.05306092, 0.035672903, 0.047219284, -0.16680142) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [361]     result += mat4(0.079427816, -0.06716479, 0.19028603, -0.19694683, -0.061598092, -0.07471188, 0.21170339, 0.30140215, -0.0023369973, 0.04688297, -0.14154115, 0.19283508, 0.1339858, -0.09116279, 0.15305163, 0.029108394) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [362]     result += mat4(-0.14902157, -0.03339153, -0.08532003, -0.10736339, 0.08702709, 0.07607574, -0.09955836, -0.016585784, -0.030078214, -0.060374748, -0.2854279, 0.02441719, 0.034877967, 0.2099041, 0.11125731, -0.059071556) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [363]     result += mat4(-0.08436325, 0.06893047, -0.045362443, -0.02237741, -0.07583875, -0.034830183, -0.024008518, -0.2882329, -0.011109783, 0.101859994, 0.091137715, 0.0020565533, -0.044729806, -0.18168025, 0.069466636, 0.04994174) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [364]     result += mat4(0.11915174, 0.089596465, -0.18965814, 0.015218237, 0.13500094, 0.19921367, -0.008298205, 0.29650384, -0.049439427, -0.27590424, 0.36169067, -0.030582754, 0.02151196, 0.019915426, 0.04543398, 0.16126189) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [365]     result += mat4(0.1620274, -0.08264547, 0.082442135, -0.0034478644, 0.09888509, -0.0034957859, -0.107241705, -0.17729597, -0.05138647, 0.02052103, -0.019507123, 0.037574988, -0.1694345, 0.17871588, -0.22510391, 0.019049853) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [366]     result += mat4(-0.10962245, -0.1329873, -0.060855392, 0.025941676, -0.19536193, -0.120365486, -0.04313703, -0.052912965, 0.20854498, 0.08341353, 0.008687068, -0.20432276, 0.15677948, -0.19000018, 0.01821201, -0.041512605) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [367]     result += mat4(0.012287526, -0.14180368, -0.098788455, 0.025949089, 0.09442778, 0.2247651, -0.12453263, 0.10435483, 0.274603, 0.06133054, 0.10506106, 0.14727746, -0.048299775, -0.082819685, 0.07319359, -0.047460355) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [368]     result += mat4(-0.070726536, -0.034744017, 0.07521428, 0.070649154, -0.05958955, -0.100232825, -0.010651838, 0.045392875, 0.2930271, -0.04952355, 0.3112155, 0.117203265, 0.025166962, 0.11176862, 0.06716659, 0.07175864) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [369]     result += mat4(-0.011560962, -0.14032063, -0.17424704, 0.07652749, -0.04220116, 0.052874275, -0.00225693, -0.031843517, -0.07520102, -0.13775803, 0.2449317, 0.069658786, 0.052280303, -0.105218224, 0.03574522, -0.020500354) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [370]     result += mat4(0.08793712, 0.26712346, 0.08315631, 0.23813692, -0.04439029, 0.031587064, 0.09561177, -0.13380238, -0.24982157, 0.31701845, -0.3875432, 0.10487225, 0.09201869, -0.037252493, -0.006935219, -0.14650282) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [371]     result += mat4(0.077635325, 0.13732299, -0.071563005, 0.096517466, -0.15051986, -0.111744404, 0.03996857, -0.052670125, -0.1819665, 0.054554947, -0.13774712, -0.20061246, -0.0023742192, 0.15647805, -0.024121126, 0.075497724) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [372]     result += mat4(0.0073632775, -0.06535298, 0.039895996, 0.20666869, 0.13625242, 0.04823007, -0.07135618, 0.04787906, 0.01383074, 0.15382123, -0.15519714, 0.056721795, 0.061946746, -0.0586851, 0.028934354, -0.02264129) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [373]     result += mat4(-0.19791882, -0.111910924, -0.010451344, -0.30566537, -0.1416239, -0.14523096, 0.116883226, -0.18241516, 0.2680614, -0.18487626, 0.17472346, 0.08346682, -0.14510359, -0.029229192, -0.005879142, 0.050247498) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [374]     result += mat4(0.030153519, -0.092469186, -0.022912916, 0.10200855, -0.04237032, -0.05917764, 0.10479645, -0.05619482, -0.18949397, -0.019547248, 0.013868889, -0.1524476, 0.14048979, -0.032521486, 0.1322921, 0.070972025) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [375]     result += vec4(0.012053958, -4.6962363e-05, 0.0020099226, -0.033494607);
[   0.292][d][vo/gpu-next/libplacebo] [376]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [377] }
[   0.292][d][vo/gpu-next/libplacebo] [378] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [379] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [380] //!BIND conv2d_3_tf
[   0.292][d][vo/gpu-next/libplacebo] [381] //!BIND conv2d_3_tf1
[   0.292][d][vo/gpu-next/libplacebo] [382] //!SAVE conv2d_4_tf
[   0.292][d][vo/gpu-next/libplacebo] [383] //!WIDTH conv2d_3_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [384] //!HEIGHT conv2d_3_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [385] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [386] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [387] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [388] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [389] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [390] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [391]     vec4 result = mat4(-0.06738501, 0.034009207, -0.21538448, 0.14296548, 0.12896985, -0.23526315, -0.08848608, 0.019602662, 0.14937137, 0.11353096, 0.11884168, -0.016765572, 0.030985225, 0.046430565, 0.06614828, -0.19202724) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [392]     result += mat4(-0.10326068, 0.11014975, 0.17069744, -0.21474148, 0.16761585, 0.13434832, -0.101021074, 0.006307025, 0.07478008, -0.1060066, 0.035315692, 0.033488914, -0.24906659, 0.06269967, 0.11120735, -0.040928528) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [393]     result += mat4(0.09334615, 0.057705753, 0.12213245, -0.06402275, 0.30694544, 0.034585163, 0.20345578, 0.07489286, 0.07483618, -0.14240396, 0.034846418, -0.03811241, 0.010882573, 0.13204294, 0.017563924, -0.047203008) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [394]     result += mat4(-0.21673942, -0.024010994, -0.10238504, -0.041160326, 0.06838163, -0.20950818, 0.06526309, -0.079094924, 0.02208821, -0.28130978, 0.086275116, -0.089067616, 0.12133826, -0.062600106, -0.020521903, -0.07654401) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [395]     result += mat4(-0.03055029, -0.15683146, -0.20331301, -0.06252028, 0.13350682, 0.20338707, 0.038425338, 0.1581342, -0.27322498, -0.14999662, -0.16681097, 0.0971585, -0.20014858, -0.081635274, -0.0781877, -0.20625232) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [396]     result += mat4(0.38375977, -0.019825654, 0.1886721, 0.22616312, 0.3402173, 0.1825304, -0.05531195, 0.30973226, -0.2676023, 0.14413352, 0.021706983, 0.01732799, 0.23466855, -0.13805965, 0.22570935, 0.018103868) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [397]     result += mat4(-0.15169825, 0.0270689, -0.2503316, 0.17289825, -0.16437647, 0.039233048, -0.35572487, -0.048393793, 0.19270042, 0.24260359, 0.12041881, -0.0009793913, 0.11656858, 0.11007414, -0.0757491, 0.047933612) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [398]     result += mat4(-0.18657999, -0.11252566, -0.05237504, -0.07368097, 0.13882741, -0.13710637, -0.006996468, -0.062354874, 0.23452504, 0.15333645, -0.0022776406, -0.17910439, 0.03629509, -0.16264829, -0.010011833, -0.15313338) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [399]     result += mat4(-0.060544558, -0.04913478, -0.061717357, 0.02323648, 0.28739056, -0.07434013, 0.19110644, 0.100050166, 0.0073363045, 0.08185653, -0.024797903, -0.14424153, -0.20838726, 0.16154376, -0.048517212, -0.025453888) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [400]     result += mat4(0.14975396, -0.13142908, 0.36210674, -0.054021083, -0.10632155, 0.045697935, -0.18946633, 0.02228141, -0.08919603, 0.09800842, -0.17634438, 0.09512711, -0.03425503, -0.12298555, -0.05354435, -0.17112055) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [401]     result += mat4(0.09958265, -0.057276618, -0.16262266, -0.06415915, 0.14579074, -0.36784375, 0.08034197, -0.04537706, 0.005460582, 0.22313322, 0.07382161, 0.014990379, 0.044636846, -0.2811128, -0.22621547, -0.06044004) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [402]     result += mat4(0.10569276, -0.03738662, 0.16100396, 0.058593616, -0.048862137, -0.08796426, 0.20101094, -0.11039573, 0.17196764, -0.04601554, 0.008571281, -0.073729075, 0.051433694, -0.051276565, 0.087334655, -0.0360379) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [403]     result += mat4(0.011119538, -0.28781965, 0.28637868, -0.1742508, -0.07121849, 0.10379717, 0.012615981, -0.029563965, -0.18678424, 0.05291095, 0.039143506, -0.028248642, -0.014103922, 0.029155696, 0.10433492, 0.16305852) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [404]     result += mat4(-0.2231037, -0.13697462, -0.29124337, 0.08519773, 0.15893684, -0.17763218, 0.06950923, 0.34361118, -0.024844287, 0.044008408, -0.033844844, -0.086971916, -0.07884748, 0.2543499, 0.056884114, 0.10068364) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [405]     result += mat4(-0.07710048, -0.23218372, 0.04346047, 0.21769643, 0.06473219, -0.18066105, -0.2511205, 0.15309611, 0.04535977, 0.16450433, 0.10846344, 0.0016952346, -0.010874939, 0.28966382, -0.121990964, 0.12956186) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [406]     result += mat4(-0.007910202, 0.17766511, 0.14364475, 0.1016258, 0.0051045395, 0.18691733, 0.005813767, -0.0070582186, 0.019418601, -0.1604435, 0.016088275, -0.18265302, -0.15719391, -0.17369832, -0.036745597, -0.19647408) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [407]     result += mat4(0.08938396, -0.0073808245, 0.11225727, -0.012303106, 0.096785046, 0.030483445, 0.027719889, -0.052584838, -0.14887555, -0.03422243, 0.12646855, -0.1722482, 0.010239037, 0.06406088, -0.20053658, 0.01964698) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [408]     result += mat4(-0.120734036, -0.12450362, -0.06582111, 0.1639675, -0.19787048, -0.08049789, -0.014257596, 0.058436662, -0.0009387449, -0.08698089, -0.017400503, 0.06295286, 0.09890349, -0.057190523, -0.103520766, -0.04207548) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [409]     result += mat4(-0.0118413875, -0.031288836, 0.09749554, -0.012266401, -0.07998591, 0.22615653, -0.06207416, 0.03257896, -0.076378696, -0.079426095, -0.13968349, -0.15423697, -0.1091681, -0.02893125, -0.032659534, -0.063735925) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [410]     result += mat4(0.119372696, 0.013176554, -0.029381052, 0.21919228, 0.045041792, 0.24844484, 0.26363325, 0.08480674, 0.087083444, 0.11984778, -0.088715754, 0.06421046, 0.05225977, -0.05140334, -0.055052705, -0.049854077) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [411]     result += mat4(0.0035781674, 0.0861361, -0.07675145, -0.056479637, 0.16973391, -0.12113791, 0.10729832, -0.03773517, 0.058618728, 0.12148276, 0.17260705, -0.06968724, 0.076358154, -0.15307103, 0.17700425, -0.13467014) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [412]     result += mat4(-0.02752418, -0.06366472, -0.025610954, 0.0013539721, -0.06465272, 0.0806373, -0.07336035, 0.10114861, 0.0041146413, 0.15878421, -0.044668555, -0.12150811, -0.1071482, -0.05086587, 0.18589285, 0.05065092) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [413]     result += mat4(0.07200056, 0.021739854, 0.29476613, -0.08475931, 0.15018553, -0.07886365, 0.36336347, -0.020576432, 0.25866082, -0.059272554, 0.054249667, -0.17822553, 0.1755872, 0.3244387, -0.39173844, 0.33894604) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [414]     result += mat4(-0.11570926, 0.1342677, -0.19511898, 0.0075454637, -0.01890476, -0.14239742, 0.18921931, 0.033990458, 0.31306365, -0.006998358, 0.029190077, -0.005679954, -0.15341778, 0.07766778, -0.25691047, -0.0964161) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [415]     result += mat4(0.019746238, 0.0021332854, -0.00879096, -0.1338671, -0.0001600663, -0.29465106, 0.0867611, -0.114963025, 0.07874301, -0.012734178, -0.11124061, -0.010926616, -0.04941506, -0.07516841, 0.116663, -0.29018974) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [416]     result += mat4(-0.01651721, 0.05955898, 0.023618208, 0.098695934, 0.018553663, -0.054378513, 0.1436929, 0.1693743, -0.27483663, 0.029127488, 0.09619316, -0.06109113, -0.08619361, 0.09315214, -0.02478657, 0.18544984) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [417]     result += mat4(0.09570196, -0.016528936, -0.1559397, 0.14312246, 0.04029428, 0.08773151, -0.043646842, 0.17894371, -0.082413055, 0.0027082344, -0.100171275, 0.01547501, 0.18122818, -0.11933676, 0.26404107, -0.3169703) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [418]     result += mat4(-0.12073344, 0.08683522, -0.09249099, 0.058786053, -0.14480567, -0.121013954, 0.033335857, 0.009353379, -0.055087596, -0.13002734, 0.08890566, 0.05508963, -0.0075715426, -0.15936922, -0.03968994, -0.1690259) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [419]     result += mat4(0.2011206, 0.23898427, 0.23656492, 0.1287573, 0.14850396, 0.40532517, -0.107408255, 0.40119782, 0.099813245, -0.03830304, 0.101520434, -0.026478073, -0.048469637, 0.106440455, 0.056632314, -0.17825997) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [420]     result += mat4(-0.076735444, 0.05965795, -0.0052469415, -0.21785147, 0.11887833, 0.067560315, 0.051149055, 0.23626682, -0.1297049, -0.035512198, 0.20352256, -0.025064934, 0.04958706, 0.0454198, 0.0113334535, 0.0417486) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [421]     result += mat4(-0.09055751, 0.033915352, -0.21836667, 0.22006813, -0.099022895, 0.11720966, -0.15686816, -0.13586599, -0.094427735, -0.08831514, -0.06182928, 0.09213704, -0.03642064, 0.18129414, -0.012926811, 0.12179882) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [422]     result += mat4(0.19389409, 0.09512252, 0.14768016, -0.16623649, -0.031052284, -0.026814984, 0.106168024, -0.2026781, -0.04581419, -0.0016849053, -0.04101923, 0.038959503, -0.011938445, 0.20096186, -0.26666564, 0.4824324) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [423]     result += mat4(0.17727576, 0.07309147, 0.12131863, -0.163096, 0.17225246, 0.26256254, 0.27685758, 0.09094053, 0.029605515, -0.20217367, 0.047564875, 0.043115832, 0.15089568, -0.09670934, 0.24131384, 0.03337442) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [424]     result += mat4(-0.34192136, 0.12063195, -0.31159517, 0.04170889, -0.30147067, -0.21330686, -0.1514457, -0.121126845, 0.04409098, 9.2206596e-05, 0.027680017, 0.03230512, -0.27993527, -0.093485355, 0.07568645, -0.23585452) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [425]     result += mat4(0.0537712, -0.20847629, 0.1740093, -0.013894753, -0.32719997, -0.059484575, -0.006098233, -0.10336451, -0.14706188, -0.07424865, -0.07045905, 0.17093194, -0.22147557, 0.09086218, -0.11033544, -0.05306482) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [426]     result += mat4(0.00489003, -0.11509064, -0.021005848, 0.16637677, -0.089347586, 0.17545725, -0.17313693, 0.13742085, -0.14577347, 0.07951095, -0.092139855, 0.017118992, -0.053472433, 0.079414465, 0.0330263, -0.11189824) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [427]     result += vec4(-0.034743138, 0.012946433, -0.082333155, 0.07721756);
[   0.292][d][vo/gpu-next/libplacebo] [428]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [429] }
[   0.292][d][vo/gpu-next/libplacebo] [430] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [431] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [432] //!BIND conv2d_3_tf
[   0.292][d][vo/gpu-next/libplacebo] [433] //!BIND conv2d_3_tf1
[   0.292][d][vo/gpu-next/libplacebo] [434] //!SAVE conv2d_4_tf1
[   0.292][d][vo/gpu-next/libplacebo] [435] //!WIDTH conv2d_3_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [436] //!HEIGHT conv2d_3_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [437] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [438] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [439] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [440] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [441] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [442] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [443]     vec4 result = mat4(-0.25835788, 0.050451655, -0.1845038, -0.07232528, 0.1323318, 0.26276684, 0.10842882, -0.083056524, 0.17426784, -0.3594826, 0.2728965, 0.08388844, -0.004007842, 0.020535901, -0.051425606, 0.07750436) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [444]     result += mat4(-0.11410436, 0.014572361, -0.27057216, -0.023974562, 0.05234827, 0.15328228, -0.17502303, -0.3199359, 0.12188045, -0.095813684, 0.024145132, 0.0856916, -0.027453909, -0.043129764, 0.16971985, 0.021623038) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [445]     result += mat4(0.06611095, 0.038625732, -0.13717118, -0.04497733, 0.15213469, 0.04770935, 0.0729271, -0.062052976, 0.004571303, 0.035141192, -0.059409596, 0.044652313, 0.17520894, 0.09665589, -0.1479193, 0.06528058) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [446]     result += mat4(-0.1845968, 0.091479465, -0.09394898, -0.13545018, -0.029501775, -0.21426639, 0.09255898, 0.1257644, 0.20256902, 0.06267267, 0.10378081, 0.13494423, 0.058310498, 0.03642236, -0.16268995, -0.048100803) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [447]     result += mat4(0.2155119, -0.3683131, 0.049449228, -0.20559964, -0.11761922, -0.2518804, -0.020712897, 0.12895772, -0.07543782, 0.5805017, -0.11301444, -0.038493153, -0.06710986, -0.09321189, 0.108671665, -0.03259695) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [448]     result += mat4(0.035307787, 0.108389005, -0.27493554, 0.27029404, 0.25523573, -0.28636125, -0.20766719, -0.008661457, -0.004480811, -0.046390545, -0.16221444, 0.008979624, -0.061375532, 0.035076566, -0.018924266, 0.01380219) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [449]     result += mat4(-0.051922515, -0.12463486, -0.10383422, 0.02220095, -0.1573033, 0.13980615, 0.13248625, -0.16803266, -0.0692132, -0.21552645, 0.13744529, 0.23034313, 0.0052666534, 0.028977966, 0.07720251, -0.06477756) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [450]     result += mat4(-0.14097473, 0.2770271, -0.172289, -0.03000696, -0.028684044, 0.040578447, -0.2290285, 0.082329154, -0.042402364, -0.20926563, 0.08233207, 0.11862443, -0.07038536, -0.02273004, 0.091550544, -0.065856494) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [451]     result += mat4(0.14879914, -0.023923844, -0.23569296, 0.20306346, 0.17502785, 0.28776234, -0.2788995, 0.10012439, -0.05635638, -0.025840463, 0.09222198, 0.118032, 0.08057015, 0.1286071, 0.060189806, -0.052669708) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [452]     result += mat4(0.07076086, -0.15111323, -0.07427972, 0.008372168, -0.17791592, -0.16254742, 0.013961132, -0.0944912, -0.23380096, 0.17377278, -0.09683394, 0.019931393, -0.12042098, 0.0016406325, 0.09393333, -0.06882231) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [453]     result += mat4(0.21465093, 0.04142968, 0.06840044, -0.37831602, -0.05549571, 0.044905066, -0.07873589, -0.026804, -0.34764197, 0.022487951, -0.077293746, 0.089457795, -0.110094436, 0.24233972, 0.06285107, -0.10851744) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [454]     result += mat4(0.093270175, 0.084138945, 0.03938272, 0.063565865, -0.010733802, 0.13554469, -0.06650261, 0.033002816, 0.011187271, -0.12821455, 0.20785914, -0.030438649, -0.124710515, -0.022294303, 0.09732408, 0.057609864) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [455]     result += mat4(-0.12833868, 0.021577539, -0.02700365, 0.11799592, -0.03655647, -0.04225167, 0.11049353, -0.16036157, 0.049277548, -0.033842396, 0.10020137, 0.095509745, 0.08060231, -0.09237418, -0.035598125, -0.035926737) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [456]     result += mat4(-0.32829186, 0.3492363, 0.030671779, -0.12606762, 0.010437313, 0.2757115, -0.21517593, -0.15800527, -0.12592544, -0.20578934, 0.10444053, 0.12993255, -0.046079267, 0.03834173, -0.19277227, -0.22124454) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [457]     result += mat4(-0.052546192, 0.026082167, 0.13831234, 0.10982424, 0.012946818, -0.12439852, 0.10134106, -0.10050398, -0.04472338, -0.14325236, -0.20579574, 0.0044005127, 0.22013672, -0.32955512, 0.12404084, -0.008160738) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [458]     result += mat4(-0.10774314, -0.31650826, -0.06601711, 0.19635755, -0.12622592, -0.06396423, 0.13856032, 0.16540553, 0.021387719, 0.23377723, -0.053738154, -0.1000186, -0.08338395, -0.052813534, 0.008122962, 0.13732094) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [459]     result += mat4(-0.18270823, 0.06966014, -0.17788303, -0.27303055, -0.077971615, 0.013978423, -0.02039098, 0.12715338, -0.11924171, 0.18900296, -0.085199654, 0.215198, 0.18587974, -0.009749325, 0.0173584, -0.12018259) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [460]     result += mat4(0.052129295, -0.107416354, 0.12711766, 0.03708665, -0.14369462, -0.055359814, -0.16639823, -0.045143317, -0.06925672, -0.040696755, 0.01999809, -0.016040625, -0.02484878, 0.07417094, 0.050875198, 0.2145528) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [461]     result += mat4(0.055696912, -0.16680926, -0.021987487, 0.024941636, -0.0927883, 0.022136632, 0.033782948, -0.10646058, -0.14944647, 0.25457275, 0.046682496, -0.022462368, -0.07886781, 0.08165927, 0.06848105, 0.0063734027) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [462]     result += mat4(0.037053242, 0.033215813, 0.18291366, 0.12340375, 0.08491059, -0.28442004, -0.0127422465, -0.039834313, -0.23321372, 0.26676926, -0.05636355, -0.15672484, -0.12891728, -0.15486577, -0.032004442, -0.092745155) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [463]     result += mat4(0.015779478, -0.18457565, 0.24996394, 0.036197674, 0.15694007, 0.15863103, -0.07332398, 0.0016235278, -0.15536517, -0.056062788, 0.14102836, 0.16915025, -0.08001087, 0.07073164, 0.13796777, 0.123867124) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [464]     result += mat4(0.045792986, -0.15135059, -0.1354885, -0.043678258, -0.35655212, 0.51232076, -0.12816145, -0.046569496, -0.014127674, -0.06282611, -0.098873, -0.06359104, -0.0919222, 0.11822437, 0.079254694, 0.00579688) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [465]     result += mat4(-0.15683417, 0.61610246, -0.3024612, 0.12917964, -0.09303367, 0.23612969, -0.40842506, -0.12374661, -0.07572449, -0.2613284, -0.09970177, -0.015227848, 0.106239066, -0.21411185, 0.051998455, -0.1364518) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [466]     result += mat4(0.23850034, -0.14394449, -0.0031468747, -0.2380617, -0.027200876, -0.041352056, -0.01864445, 0.033848196, -0.12064239, -0.110480845, 0.08450956, -0.22328654, 0.17664163, 0.22268307, 0.050886698, -0.17475672) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [467]     result += mat4(-0.17808256, 0.010803805, 0.03315186, 0.033143792, -0.14205995, 0.25039625, -0.08784382, -0.13454252, 0.19576813, 0.10755282, 0.22821628, 0.019456752, -0.0422955, -0.016182603, -0.12066697, 0.0548465) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [468]     result += mat4(0.11563777, -0.257929, 0.0010403778, 0.080267854, -0.0025255163, 0.2855168, -0.060352214, -0.07816255, -0.00090574916, 0.049510725, 0.03720483, 0.059250016, -0.08674136, 0.20522198, -0.28694284, 0.1299507) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [469]     result += mat4(-0.14638457, 0.04063328, 0.03139636, -0.007934521, 0.07689684, -0.09467145, 0.10607347, 0.054510128, 0.003306194, 0.05347124, 0.062762424, -0.041480847, -0.07677865, -0.139573, 0.010972524, 0.21957156) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [470]     result += mat4(-0.026845628, -0.043439507, 0.034738723, 0.07281683, 0.14474197, 0.031586993, -0.22767854, -0.0707655, 0.105201736, -0.28805482, 0.008668302, -0.16329518, 0.06157049, 0.3803886, 0.26345953, -0.011096537) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [471]     result += mat4(-0.23328833, 0.085731484, -0.07755016, 0.33559516, 0.07704345, 0.115106605, -0.24114038, -0.44630137, 0.2726737, -0.32170138, -0.009236524, -0.11666051, 0.0457048, 0.07876708, 0.13134004, -0.035318643) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [472]     result += mat4(-0.05140272, 0.011605703, 0.13899171, -0.05071015, 0.18413687, -0.31413674, -0.13043414, -0.15118152, -0.15326938, -0.10720126, -0.23738635, 0.13481396, 0.25115076, -0.009316611, -0.2584441, -0.14389823) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [473]     result += mat4(-0.039723795, -0.14869407, -0.1692942, 0.026501274, -0.10685166, -0.121267825, -0.08584318, -0.09580693, -0.10626739, -0.068417974, 0.11321909, -0.13664317, 0.061380867, -0.2587898, 0.14850819, 0.008178645) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [474]     result += mat4(0.06912782, 0.24230564, -0.048150286, 0.2203717, -0.17417085, 0.105546735, -0.16648416, -0.0045053074, 0.09764028, 0.37122592, -0.1939995, -0.27899942, -0.088152565, -0.53869057, 0.21676709, -0.08056594) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [475]     result += mat4(0.07651754, 0.03704878, -0.0197015, 0.1660726, 0.07002748, -0.11820414, -0.23360898, 0.1481592, 0.029847002, 0.054057185, 0.013176299, 0.06552942, -0.13865773, -0.20105527, -0.37550658, 0.005769631) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [476]     result += mat4(-0.22697811, -0.17426412, 0.10148018, 0.008134666, 0.10771455, 0.16943407, -0.016319012, -0.40176705, -0.06854668, -0.049045276, 0.20919096, 0.13240765, -0.050125647, 0.14902508, 0.052697595, -0.13817468) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [477]     result += mat4(0.04301619, 0.23184754, -0.023551717, 0.3768405, 0.028999053, 0.06709736, -0.05993663, -0.059861984, 0.15499207, -0.22217415, 0.111131504, -0.09082529, -0.19389243, 0.024621522, -0.15305442, 0.010799284) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [478]     result += mat4(-0.035496738, 0.010802548, -0.028718363, 0.19263634, 0.16900502, -0.16661702, -0.027631328, 0.18309957, -0.015860107, -0.03309961, -0.091390446, 0.14000848, -0.0036591904, 0.47659522, -0.09373507, -0.29020965) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [479]     result += vec4(0.08895955, -0.027667087, 0.20500831, 0.00037762933);
[   0.292][d][vo/gpu-next/libplacebo] [480]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [481] }
[   0.292][d][vo/gpu-next/libplacebo] [482] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [483] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [484] //!BIND conv2d_4_tf
[   0.292][d][vo/gpu-next/libplacebo] [485] //!BIND conv2d_4_tf1
[   0.292][d][vo/gpu-next/libplacebo] [486] //!SAVE conv2d_5_tf
[   0.292][d][vo/gpu-next/libplacebo] [487] //!WIDTH conv2d_4_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [488] //!HEIGHT conv2d_4_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [489] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [490] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [491] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [492] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [493] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [494] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [495]     vec4 result = mat4(0.018134737, -0.2296755, -0.07276725, -0.029795367, 0.05382051, 0.092847414, -0.024469728, -0.1674685, 0.0017946451, 0.30074653, 0.0034195695, -0.04892261, 0.18229689, -0.20116119, -0.12702174, -0.08259108) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [496]     result += mat4(-0.1357695, -0.08149211, 0.09314453, -0.21966846, 0.34740716, 0.043606415, 0.04225903, 0.034449834, 0.17248215, 0.39148283, -0.13868807, -0.010550686, 0.044238456, -0.09693464, -0.005044985, 0.24383289) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [497]     result += mat4(0.19959371, 0.098685324, 0.058746945, 0.010580748, 0.08051514, 0.031898864, 0.017556064, 0.13004355, -0.01727653, 0.11044019, 0.040673427, -0.20064595, -0.23321067, 0.06398686, -0.19126236, -0.2430858) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [498]     result += mat4(-0.12870286, -0.113455534, 0.23722827, 0.070718594, 0.19049989, -0.1927299, -0.06343845, 0.113127775, 0.082530305, -0.10972526, -0.090779535, 0.05731582, 0.11018802, -0.18049154, 0.09269507, -0.10304576) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [499]     result += mat4(0.15513484, 0.06659583, 0.08125296, -0.012350324, -0.09492788, 0.5048303, 0.13206847, 0.39554298, 0.28953737, -0.20913891, -0.26781562, -0.17539899, 0.023778774, 0.29716817, 0.15768486, 0.37702608) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [500]     result += mat4(0.0724462, 0.015571356, -0.032217246, 0.0050658924, -0.22708446, 0.03968809, 0.016753826, 0.0025668752, -0.055932112, 0.113931604, 0.19766758, -0.030027265, -0.17384295, 0.15013468, -0.0070017707, -0.09469028) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [501]     result += mat4(-0.078361556, -0.0954201, -0.006358101, 0.040500037, 0.4190454, -0.17622913, -0.07234791, 0.05462559, 0.18641087, 0.058313597, -0.0180785, 0.13818781, -0.14640772, 0.0699486, 0.0073663946, -0.076789856) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [502]     result += mat4(-0.21421191, 0.08736062, 0.09041226, 0.03608585, 0.02769972, 0.09641289, 0.11824623, 0.05653645, 0.16464607, 0.19839554, -0.13379547, 0.054417104, 0.067530684, 0.18971571, 0.13785432, -0.097639814) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [503]     result += mat4(-0.32658005, -0.14606023, -0.069448665, 0.032998275, -0.28331423, 0.0011900732, -0.020304207, -0.13535896, 0.08298347, 0.045509677, -0.030503955, -0.037504148, 0.049955815, 0.0925771, 0.00058534974, -0.12398032) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [504]     result += mat4(-0.2955836, 0.29059318, -0.018196672, -0.35866606, -0.01309431, 0.03540315, 0.010609202, 0.11956812, 0.10296229, 0.22536302, 0.015201129, -0.23797737, -0.16960852, -0.11414787, -0.034440614, 0.112644605) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [505]     result += mat4(-0.14952518, 0.07024436, -0.083184876, -0.0814617, -0.13303639, 0.016159372, -0.13521518, 0.2221334, -0.056617837, 0.12958299, 0.064461656, -0.20146395, -0.16023181, 0.2640758, 0.27528805, -0.1426518) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [506]     result += mat4(-0.04382363, 0.09856003, -0.08561442, -0.15699928, -0.121069774, 0.04685383, -0.009170197, -0.031489655, 0.18730178, 0.238442, 0.22497098, 0.032015145, -0.03709115, 0.1535079, 0.21674158, 0.10678019) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [507]     result += mat4(-0.12200952, 0.24224263, 0.034097504, -0.028179523, -0.011962496, -0.04489487, -0.05198827, 0.22194928, -0.045400873, -0.049828544, 0.111477956, -0.098361604, 0.12788995, -0.016093334, -0.19886433, -0.011161484) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [508]     result += mat4(0.30563712, 0.013071727, -0.004799883, 0.12888052, -0.259498, -0.041566677, 0.07311124, 0.162324, 0.28371668, -0.004693743, -0.0019395344, 0.029358242, 0.08730285, 0.12184509, 0.05508437, 0.048439097) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [509]     result += mat4(0.12760857, 0.115813166, -0.217695, -0.10629871, -0.227366, 0.09030426, -0.15313712, 0.020528946, -0.20743734, 0.088583544, 0.04594053, -0.22891994, 0.18949282, -0.042186577, -0.17330512, -0.010711361) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [510]     result += mat4(0.029503195, 0.0063797613, -0.17004286, -0.096844055, 0.010218098, 0.04247233, 0.02362808, 0.14700809, -0.08082364, 0.11159672, -0.018505255, -0.15228583, 0.15693732, -0.025359154, 0.024829186, 0.1943192) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [511]     result += mat4(-0.03912932, -0.21989027, 0.12203028, 0.18702275, -0.118537985, 0.21039696, 0.09102061, 0.012288879, 0.031666897, 0.1318455, -0.04901404, -0.07516063, -0.44782668, 0.04884501, 0.047070876, 0.008728358) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [512]     result += mat4(-0.08669101, 0.3053463, -0.08963947, 0.0034188698, -0.070004664, 0.064788476, 0.093737036, 0.070050925, 0.12728429, -0.13179256, -0.014913502, 0.09308136, -0.027638942, 0.008638711, 0.08794172, -0.05531093) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [513]     result += mat4(0.0728421, 0.07872358, 0.11454748, 0.08497922, 0.071820416, -0.11789207, -0.08184197, 0.1359588, -0.2143346, -0.05876081, 0.023172129, -0.08430511, -0.19276723, 0.14283359, 0.15604696, -0.055187486) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [514]     result += mat4(0.068641685, 0.2732106, -0.2809107, 0.12736696, -0.08642367, 0.023898933, -0.17859498, -0.18299665, -0.06684587, -0.12204666, 0.45898953, -0.24240111, 0.25182098, -0.04395751, 0.10637211, -0.22135144) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [515]     result += mat4(0.0852072, 0.051133018, 0.03333165, -0.0008938216, 0.10251267, 0.0550774, 0.041769378, -0.21259712, 0.286912, 0.123342015, 0.282759, -0.0730124, 0.14275575, -0.15580742, -0.15224406, 0.045376908) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [516]     result += mat4(0.03328225, 0.11563978, -0.07451964, 0.030546209, -0.04698351, -0.18544962, 0.037350416, 0.13969816, 0.0556746, -0.06359919, 0.06478219, -0.031694926, 0.13396506, 0.09443612, -0.01922686, -0.06290365) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [517]     result += mat4(0.07495407, 0.063429266, -0.106221214, -0.085107304, 0.2497817, -0.46598253, -0.18833177, -0.2731128, -0.13024822, 0.56053543, 0.055704467, -0.12331414, -0.031199086, 0.05061188, 0.22097112, -0.6611177) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [518]     result += mat4(0.08276988, -0.044184342, -0.03562185, -0.06159881, 0.27694225, -0.07192965, -0.08663714, 0.020221777, 0.14095962, -0.06229397, 0.051374253, -0.038158998, 0.10664802, -0.041305423, 0.051260717, -0.054698635) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [519]     result += mat4(0.12800686, 0.03485072, 0.039914366, 0.034041498, -0.08305794, -0.046292894, 0.22765331, 0.10904922, 0.0013937047, -0.08750301, 0.009126207, -0.065589435, 0.2837707, 0.08884436, -0.07234862, -0.093502745) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [520]     result += mat4(0.113439895, 0.06081726, 0.1122302, -0.022936966, 0.10329637, -0.31816107, -0.051597945, 0.23846027, -0.083913095, -0.29872265, -0.040147282, -0.08981918, -0.04329814, -0.12339693, -0.034489952, 0.013393211) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [521]     result += mat4(0.33091688, 0.1726297, 0.034332044, -0.091396205, 0.15434311, -0.0022870845, -0.15506189, 0.08710491, -0.16063525, 0.042252056, 0.017086457, 0.08134797, 0.08631321, 0.037843138, 0.088296555, 0.0064518084) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [522]     result += mat4(0.09161051, 0.114355795, -0.15304486, -0.030537153, 0.1835368, -0.3287635, 0.031197926, 0.09717476, 0.04276852, 0.113250345, 0.05949038, -0.10599563, 0.43574792, -0.060788117, 0.18409383, 0.12678055) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [523]     result += mat4(-0.018356865, -0.0072578182, 0.12020777, -0.013127592, 0.20136636, -0.22984362, 0.06896224, 0.00044982752, 0.008428429, -0.123316936, -0.09989286, 0.078248784, -0.16313677, -0.003020313, -0.46285018, -0.08967125) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [524]     result += mat4(-0.03451497, -0.10864502, 0.13207638, 0.17194521, 0.0037514758, -0.20222199, -0.12535086, 0.001511977, 0.056294486, -0.2112898, 0.078261316, 0.10118746, -0.044742294, 0.21793383, -0.19927903, -0.21338293) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [525]     result += mat4(-0.034903776, -0.10167085, 0.031066334, 0.0379958, 0.20532596, -0.17457838, 0.16556816, -0.0021619152, 0.02682665, 0.03396325, -0.059273884, 0.1922813, -0.072151475, -0.010240544, 0.2302027, 0.12385962) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [526]     result += mat4(-0.20170145, -0.08203941, -0.028107846, -0.18003726, 0.44744352, -0.13190243, 0.13233365, 0.03626546, 0.085763134, -0.25613126, -0.11213388, 0.15529087, -0.271649, 0.050587676, -0.062583975, 0.057289865) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [527]     result += mat4(-0.040649455, -0.17949733, 0.35847965, -0.040587306, 0.24314344, -0.23811667, 0.13958354, 0.04961874, 0.09858903, -0.04202913, -0.21850993, 0.0700419, -0.09130745, -0.096835814, 0.0022782686, -0.25416258) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [528]     result += mat4(-0.08215545, -0.019647893, 0.055263475, 0.053733055, 0.098485716, -0.1041945, -0.06541415, -0.08868577, -0.07262986, 0.03513784, -0.110529095, -0.03369232, 0.056786604, 0.2569229, -0.05931065, -0.22081214) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [529]     result += mat4(0.066926084, 0.029664058, -0.10779271, 0.11026963, 0.23927264, -0.16914488, 0.022947345, 0.12303853, -0.07066212, -0.013205378, 0.15348643, 0.035568032, 0.20966691, 0.010149819, -0.08814468, -0.064854674) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [530]     result += mat4(0.11493852, -0.074924305, -0.14840698, -0.16956823, 0.056806292, -0.06387947, -0.06880271, -0.04637334, -0.1929893, 0.18226422, 0.064644486, -0.1594863, 0.027403917, 0.13951495, -0.06569123, -0.07700207) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [531]     result += vec4(-0.043347504, -0.20504741, -0.037821215, -0.014486937);
[   0.292][d][vo/gpu-next/libplacebo] [532]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [533] }
[   0.292][d][vo/gpu-next/libplacebo] [534] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [535] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [536] //!BIND conv2d_4_tf
[   0.292][d][vo/gpu-next/libplacebo] [537] //!BIND conv2d_4_tf1
[   0.292][d][vo/gpu-next/libplacebo] [538] //!SAVE conv2d_5_tf1
[   0.292][d][vo/gpu-next/libplacebo] [539] //!WIDTH conv2d_4_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [540] //!HEIGHT conv2d_4_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [541] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [542] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [543] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [544] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [545] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [546] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [547]     vec4 result = mat4(0.047881734, -0.09396414, -0.2839081, 0.3140853, 0.052613556, 0.09940423, 0.23960467, -0.022228222, -0.12065009, 0.07898222, 0.08657881, 0.010852739, -0.050450284, 0.01683982, 0.031813968, 0.053060856) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [548]     result += mat4(-0.10252411, -0.03116448, -0.30114275, -0.0316799, -0.017501019, -0.03006003, -0.2095696, 0.10134927, -0.3901916, -0.15335023, -0.11955071, 0.1337449, 0.101239376, -0.25044814, 0.2128469, 0.018979514) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [549]     result += mat4(-0.13392173, 0.052036732, 0.1682114, -0.026263753, 0.027221246, -0.15121374, 0.13723798, 0.08950682, -0.1182108, -0.07294226, 0.023392374, 0.052329235, -0.05632852, -0.07036173, 0.06872573, 0.05238042) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [550]     result += mat4(0.18112028, 0.18242362, -0.06812871, 0.032463413, 0.124638766, -0.26765212, -0.07678663, 0.33806562, 0.09674393, 0.15574542, 0.23634006, -0.02873782, -0.1626769, -0.14760062, -0.007274849, 0.09866139) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [551]     result += mat4(-0.10726673, -0.10925056, 0.19967109, -0.19936769, 0.15942842, -0.14870064, 0.15493345, -0.08489036, -0.49053356, -0.17321263, 0.28426084, 0.18721215, -0.09898434, -0.2751838, -0.11833524, 0.028445128) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [552]     result += mat4(-0.11788817, -0.23724948, -0.046072144, 0.035621114, 0.04527003, -0.0073492974, 0.11097195, 0.06806836, 0.04814677, -0.1408476, -0.1325629, 0.00929532, -0.16699041, -0.03034791, 0.08320368, -0.15429299) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [553]     result += mat4(0.2729515, 0.008244692, -0.17441982, -0.39026466, 0.17381759, 0.31194404, 0.055934936, 0.20744409, 0.20119062, 0.0734271, 0.0796807, 0.0031037466, -0.0016392237, 0.033733975, 0.07149338, 0.042083208) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [554]     result += mat4(0.07985744, 0.10945015, 0.018472541, 0.1397503, 0.2005682, 0.42641, 0.23022486, -0.2916921, 0.028285174, -0.31885162, -0.27070364, -0.10390779, 0.0751492, 0.12752363, -0.2279459, 0.08998453) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [555]     result += mat4(0.18450491, -0.140783, -0.008006845, 0.09029298, 0.12536179, 0.26949662, 0.09491545, 0.063907005, 0.11212244, 0.09778506, -0.1835966, -0.053119674, 0.0072294096, 0.25018227, 0.010868525, -0.22721334) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [556]     result += mat4(-0.028011927, -0.20073172, 0.5976166, -0.19494139, 0.17958745, -0.03838646, 0.058325976, -0.29409218, -0.12793432, 0.03245129, 0.35662368, -0.05048354, -0.13368197, -0.06151968, -0.012714591, -0.1763054) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [557]     result += mat4(0.18468465, 0.31682113, 0.12818255, -0.117110476, 0.13709468, -0.10034022, -0.07994527, -0.1259309, 0.04067299, -0.1147398, 0.28361055, 0.27916273, 0.03696692, 0.16829546, 0.27819383, 0.08305029) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [558]     result += mat4(-0.28920117, -0.033877946, 0.01586206, 0.04681198, 0.024248574, -0.045777842, -0.03342128, 0.07525412, -0.063377544, -0.016737273, 0.11235511, -0.04325238, -0.24170023, -0.09993599, -0.03205371, 0.14339828) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [559]     result += mat4(-0.008357902, -0.11038377, 0.03709221, 0.26775306, 0.07963845, -0.25377446, -0.17630441, -0.10966474, 0.057311732, -0.083327, 0.044497233, 0.06903858, -0.26531395, -0.103399664, -0.14806591, 0.269314) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [560]     result += mat4(0.05450808, -0.041993964, -0.07217651, 0.034468375, 0.2117634, 0.0075620585, 0.05825411, -0.2252478, -0.0527787, 0.049732126, -0.032040413, -0.09361454, 0.29585132, 0.018413153, 0.18384546, -0.024226356) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [561]     result += mat4(-0.031109914, 0.19351351, 0.07405522, -0.06313074, -0.09983541, -0.011495182, 0.11749038, -0.16775608, 0.2790974, -0.09338754, 0.07913264, 0.103792936, -0.18679164, -0.15639925, 0.112943865, 0.07930375) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [562]     result += mat4(0.004106195, -0.036833283, 0.12908752, 0.12869535, -0.02472107, 0.17561707, -0.025890926, -0.18789047, 0.096218705, -0.16306408, -0.02198454, -0.010134957, -0.09710009, 0.002062143, -0.046785697, 0.0029441968) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [563]     result += mat4(0.19648251, -0.015663045, -0.0730215, 0.028611008, 0.13529862, -0.015256192, -0.04119306, -0.24628192, 0.02601027, -0.21184283, -0.1962902, 0.09109358, -0.06792383, 0.092336476, 0.12215351, -0.08596062) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [564]     result += mat4(-0.17530201, -0.0351919, -0.31872514, -0.13933206, -0.07000922, -0.049807087, 0.0010997375, -0.033573963, 0.07442056, -0.33290103, -0.40381998, 0.09435, -0.3280128, -0.09953127, -0.11283648, 0.20685865) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [565]     result += mat4(-0.052573867, -0.035328753, -0.11132943, -0.17515652, 0.05021051, 0.058642425, -0.046640664, 0.0799107, -0.027398815, -0.33619994, -0.22135767, 0.07894002, -0.14941697, -0.0940996, -0.11655085, 0.049795926) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [566]     result += mat4(-0.039301276, 0.041062318, 0.20312686, -0.009338705, 0.013706282, -0.0245852, 0.03458311, 0.09601228, -0.18203016, -0.012260314, 0.17984508, -0.056576703, -0.102844186, 0.24047872, 0.05307189, 0.16066082) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [567]     result += mat4(0.1478775, 0.0046362123, 0.05459521, 0.07162838, -0.01896149, 0.23700175, -0.14174299, 0.06988599, -0.32545477, -0.08065096, -0.061227743, -0.0010796773, 0.094327345, -0.20760082, -0.19523263, 0.19859222) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [568]     result += mat4(-0.049676366, -0.10381536, 0.02546116, -0.13127093, 0.10954914, 0.0048147943, 0.06962328, -0.30456528, -0.11956627, 0.0150488885, -0.10711722, 0.1684613, -0.1939089, -0.10577047, -0.11980919, -0.036988296) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [569]     result += mat4(-0.054795764, 0.09491116, -0.08494948, 0.059765853, 0.0131597435, 0.20786162, 0.11999637, 0.024381055, 0.22830428, 0.027053319, -0.011646274, -0.12145409, -0.07899559, -0.012688263, 0.10684157, 0.3824219) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [570]     result += mat4(-0.23994572, -0.0031532666, -0.0050638164, 0.14236279, 0.05690383, -0.06259682, 0.052624144, 0.20461404, -0.19230312, -0.11072268, 0.013023965, 0.08931543, -0.21997221, 0.11760443, -0.40943825, 0.28656834) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [571]     result += mat4(-0.06606179, 0.26007771, 0.033754125, 0.119690455, 0.024669139, -0.06752839, 0.12688096, -0.0063201943, -0.17123021, 0.07548857, -0.14213699, 0.034093797, -0.15632647, -0.123243414, -0.42634043, 0.1715022) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [572]     result += mat4(-0.046503466, 0.13876389, 0.17973013, -0.25938338, -0.18824704, -0.11876702, 0.31065792, -0.041042212, -0.061369427, 0.2057992, 0.17295738, 0.3836555, -0.21109799, -0.10167118, 0.16577047, 0.113483034) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [573]     result += mat4(-0.24534856, -0.014482421, 0.22515748, -0.12773542, 0.12794174, -0.02528619, 0.41710484, 0.09154934, -0.17805946, -0.25428918, 0.07294183, 0.047079418, -0.30949152, -0.08919157, 0.17888431, 0.17706038) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [574]     result += mat4(-0.1741826, 0.046225294, -0.10761791, 0.2619953, 0.007373745, 0.05104337, -0.22309966, 0.34529984, -0.034363825, -0.022187237, -0.08609555, 0.16842419, 0.28136057, 0.17843607, -0.11307746, -0.05668021) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [575]     result += mat4(-0.12310616, -0.29661375, -0.10581025, -0.049584012, 0.19651765, 0.08436489, -0.14533581, -0.029874112, -0.15422897, -0.062741704, -0.22694711, -0.15547274, -0.15181333, 0.0286061, 0.022438493, -0.062447168) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [576]     result += mat4(0.3497046, -0.09455009, 0.060618952, -0.2134236, 0.054515295, 0.07451165, -0.09267233, -0.010513333, 0.13842636, 0.11563433, -0.054750167, 0.050432, 0.1514256, 0.04284002, -0.2095581, 0.07907657) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [577]     result += mat4(-0.11745651, -0.04717057, 0.085377194, -0.065956995, 0.07280491, 0.2730059, 0.11088276, 0.2437957, 0.14018989, 0.1164107, -0.09516929, 0.0022427947, 0.111544006, -0.0680495, 0.09324579, -0.12482022) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [578]     result += mat4(-0.07995795, -0.03387884, 0.019846136, 0.10231208, -0.07017192, 0.18659039, 0.035161644, 0.101182766, -0.14901665, 0.21307294, 0.063894205, -0.27546507, -0.24792959, -0.067731075, 0.13146006, -0.19333683) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [579]     result += mat4(0.034206454, 0.1472648, -0.07406727, 0.014654025, 0.18703444, 0.1319857, -0.10610886, 0.08427947, -0.017536618, -0.06487879, -0.12095286, -0.050414838, 0.03260879, 0.1558894, -0.031887084, 0.11840288) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [580]     result += mat4(0.114811294, -0.14574333, -0.09392587, 0.042283528, 0.08919092, 0.18259068, 0.0980717, 0.21024778, -0.1280008, -0.027260462, -0.1129027, 0.18722472, 0.13733985, 0.047153983, 0.030871978, 0.1998385) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [581]     result += mat4(-0.06783575, 0.004612595, 0.1153467, -0.11531557, -0.048889533, 0.07673577, -0.02041786, 0.22744459, -0.13092506, 0.13484807, 0.40003043, -0.053706612, -0.16985156, -0.04791236, -0.052443005, -0.08363625) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [582]     result += mat4(0.18187882, 0.017893985, 0.17856054, 0.005413129, 0.014147176, 0.15102178, 0.12436294, -0.02176765, -0.16727823, -0.0364111, 0.17074408, 0.12899421, 0.31984514, -0.0072070034, 0.031895883, -0.1991405) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [583]     result += vec4(-0.011865144, 0.11717201, -0.13823777, -0.059450272);
[   0.292][d][vo/gpu-next/libplacebo] [584]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [585] }
[   0.292][d][vo/gpu-next/libplacebo] [586] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [587] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [588] //!BIND conv2d_5_tf
[   0.292][d][vo/gpu-next/libplacebo] [589] //!BIND conv2d_5_tf1
[   0.292][d][vo/gpu-next/libplacebo] [590] //!SAVE conv2d_6_tf
[   0.292][d][vo/gpu-next/libplacebo] [591] //!WIDTH conv2d_5_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [592] //!HEIGHT conv2d_5_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [593] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [594] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [595] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [596] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [597] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [598] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [599]     vec4 result = mat4(-0.082203194, 0.021720003, 0.03725474, -0.08048348, 0.2063248, -0.033020593, -0.17585336, 0.06476272, 0.012244563, 0.026554609, 0.014708393, 0.26606125, 0.14248778, 0.12817341, -0.039826933, -0.12751861) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [600]     result += mat4(0.24573852, 0.19695967, -0.06257417, -0.04782871, 0.3511875, -0.018083302, -0.077342674, 0.15247667, 0.20321761, -0.07479984, -0.09548503, 0.08109568, -0.23808748, 0.07246303, -0.004242619, 0.16162953) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [601]     result += mat4(0.13296306, 0.19495387, 0.009222276, 0.033592198, 0.20443891, 0.16063854, -0.2581601, -0.016132578, -0.2296461, -0.23647323, -0.15407176, -0.18265317, 0.2343241, -0.049697313, -0.09398783, 0.41931856) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [602]     result += mat4(-0.10866088, -0.40605694, -0.0042648134, 0.07943803, 0.26914695, 0.14816476, 0.037706107, -0.123223364, -0.19962949, -0.053534556, -0.08397409, -0.04244924, -0.075791344, 0.29629225, 0.2311928, 0.099177904) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [603]     result += mat4(-0.1748319, -0.2003186, -0.32659066, -0.21007413, 0.20122464, 0.032196607, -0.026299698, 0.33395135, 0.11411664, 0.05971959, 0.09001304, -0.15936212, 0.012322024, 0.19936106, -0.411186, -0.08319479) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [604]     result += mat4(-0.07349218, 0.006184436, 0.096199185, -0.050186496, 0.064047046, -0.03813128, -0.057007037, -0.025550695, -0.2863145, -0.008512981, -0.20615962, 0.18009211, 0.008298396, 0.22452813, 0.010843521, 0.20169461) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [605]     result += mat4(0.2691149, 0.059546687, 0.08922005, 0.2252196, 0.30341956, -0.024489028, 0.087045394, -0.03856442, -0.14083561, -0.17683443, 0.14137806, 0.15520614, 0.2073925, -0.19525874, 0.23661858, 0.3098405) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [606]     result += mat4(0.006530723, 0.04180736, -0.04762067, -0.064395495, 0.02396811, -0.13332283, 0.0037775645, 0.026309434, 0.0033065109, -0.08315753, 0.02917419, 0.12330464, 0.22819455, -0.07489677, 0.12829056, -0.097994626) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [607]     result += mat4(-0.09983759, 0.032783493, 0.11085758, 0.08993078, -0.057110567, -0.018973934, -0.14946178, -0.03921629, 0.039757587, 0.015860094, 0.04989561, -0.19634786, 0.04351146, 0.019315343, 0.25972188, 0.17989321) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [608]     result += mat4(-0.04111906, -0.165601, 0.0003682197, -0.056232415, -0.32716644, -0.24015541, -0.057547837, 0.05966729, 0.06854747, 0.03599213, -0.18798864, 0.1183447, 0.014268468, -0.1310834, 0.06415977, -0.19414157) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [609]     result += mat4(-0.00070661673, 0.17671427, 0.10584568, -0.060910843, -0.104282066, -0.22676118, -0.01907062, 0.24882245, -0.043454725, 0.07691623, -0.48371696, 0.013537671, -0.025488405, 0.061228953, 0.18548754, 0.028671112) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [610]     result += mat4(-0.0121596735, 0.09595702, -0.08244918, -0.1176173, 0.26773354, -0.021729136, 0.075465776, -0.0928876, 0.12461298, 0.16830076, -0.15302569, 0.113850676, 0.09811088, 0.13006307, 0.24999009, 0.10261325) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [611]     result += mat4(-0.032246377, 0.038265374, -0.26476422, -0.1442876, -0.19866082, 0.08649541, 0.041478764, 0.11155026, 0.21576422, -0.09572912, -0.11174068, -0.19722937, -0.15801935, 0.29604745, -0.08606268, -0.15532136) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [612]     result += mat4(-0.06315591, 0.16151646, -0.009230362, -0.04341246, 0.09085519, 0.21924476, 0.38044852, 0.193819, 0.16622902, 0.0025134624, -0.22688466, -0.025276015, 0.07714917, 0.16302192, -0.11767101, -0.11086476) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [613]     result += mat4(-0.04170153, 0.001859292, -0.26352355, 0.10982333, -0.031867817, 0.15773517, -0.060263418, 0.11117763, -0.017359972, 0.0127261225, 0.0782802, -0.16908924, 0.080516845, -0.05691526, -0.07530135, -0.14553802) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [614]     result += mat4(0.06112685, -0.032287434, 0.17445667, -0.044935808, -0.11449107, -0.051394563, -0.029589338, -0.14555557, 0.03440661, 0.11035615, -0.17175, -0.14851089, 0.037362, -0.18740481, 0.17278154, 0.18073405) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [615]     result += mat4(-0.27670652, 0.19484822, 0.2609349, 0.1455016, 0.04438468, 0.1449185, 0.11185832, -0.18598269, -0.019846648, 0.11886126, -0.098498635, 0.15737785, 0.011406795, -0.18860829, -0.13705735, 0.17535745) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [616]     result += mat4(-0.30244905, -0.28695273, 0.1146976, 0.21144345, -0.037980128, -0.027679864, -0.13992494, -0.04884521, -0.032023884, -0.07921183, -0.16042095, -0.06935386, -0.06570237, -0.1107404, -0.018163798, 0.22625941) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [617]     result += mat4(-0.07292955, -0.07321777, -0.045146503, -0.33291966, -0.096732594, -0.07203495, 0.33692798, 0.2870733, 0.122160144, -0.076574564, 0.042844944, 0.26448342, 0.07672146, -0.028775277, -0.12088313, 0.15583947) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [618]     result += mat4(0.21589327, 0.05258274, 0.09705794, -0.024653846, -0.039402515, 0.28485695, 0.14711736, -0.10556087, -0.15140481, 0.09039498, 0.017308712, 0.11862922, 0.08230978, 0.21678248, -0.043815188, -0.226433) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [619]     result += mat4(-0.029258793, 0.26618922, 0.02564014, -0.23189862, -0.24074338, -0.18556763, 0.25973624, 0.04746873, 0.0137007125, -0.22239363, -0.12414957, 0.048228756, -0.22406264, 0.282667, -0.021001073, -0.17465611) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [620]     result += mat4(0.32401654, -0.1495363, -0.20869227, 0.04271639, -0.0087802755, 0.031325378, 0.23834595, 0.039336167, 0.17265107, 0.20947595, 0.28737286, 0.0028783784, -0.057340365, -0.050347418, -0.11915604, -0.1831807) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [621]     result += mat4(0.1811338, 0.07732653, 0.20975596, -0.47129005, 0.07121942, 0.08410583, 0.44170937, -0.19524159, -0.17807977, 0.12837476, 0.20816846, -0.1741958, -0.04411918, 0.06024972, 0.18159702, -0.052485272) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [622]     result += mat4(-0.15229738, 0.27513, 0.28150418, -0.19543962, -0.02045864, -0.07207227, 0.09589587, 0.09110817, 0.061413247, 0.0046052113, 0.11619411, -0.2988938, 0.065739445, 0.10205611, 0.12847126, -0.028355654) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [623]     result += mat4(0.0657154, -0.047568597, -0.16148911, 0.16392621, -0.25281775, -0.061153214, 0.017480455, -0.026288848, 0.20319715, 0.04763355, 0.010444491, -0.26671803, -0.25821987, 0.32863674, -0.30734694, -0.18190521) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [624]     result += mat4(-0.042703815, 0.06633036, -0.048434302, -0.17176376, -0.12699759, -0.1124558, 0.083266065, 0.03354623, -0.13468939, 0.12706263, 0.053659134, -0.06930602, 0.008196115, 0.2034998, -0.06351442, -0.039730288) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [625]     result += mat4(0.09614661, 0.22500272, 0.088511504, -0.16960482, 0.15364788, -0.18854137, -0.13163191, -0.07503735, -0.23177068, -0.0053305267, -0.041978605, 0.0971947, -0.049034655, 0.04486706, 0.09076307, -0.02310868) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [626]     result += mat4(-0.1304683, 0.17743458, -0.09817326, -0.0646786, 0.07886976, 0.20109388, -0.034114968, -0.2029261, -0.03348398, 0.029337432, -0.07302782, -0.02240758, 0.030242773, -0.30032325, 0.02085572, -0.027314361) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [627]     result += mat4(-0.037377544, 0.026350772, -0.07430488, -0.114671774, -0.126935, -0.046512567, -0.033628833, -0.19018382, -0.041053895, -0.031206857, 0.08562848, -0.01875709, 0.21099389, -0.092511, 0.0073047103, -0.009811013) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [628]     result += mat4(0.11358029, 0.17468451, -0.12739041, -0.14332245, -0.22230148, 0.16862972, -0.04462456, 0.2469604, -0.008622369, 0.0081848325, -0.17032363, -0.16024362, 0.21178265, 0.037127133, 0.08559072, 0.11584694) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [629]     result += mat4(0.008993893, -0.08037705, 0.4426555, 0.15593371, 0.15273719, -0.03249998, 0.055109, -0.1512612, -0.037183985, 0.20825677, -0.08516227, -0.06664223, -0.10011001, -0.3505215, -0.17941694, 0.052089088) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [630]     result += mat4(-0.109703645, -0.13505603, 0.1336451, 0.13118869, 0.010915504, 0.12748592, 0.21201555, -0.40841985, -0.11059143, 0.033772044, -0.039282143, 0.03095394, 0.10394723, -0.21343367, -0.10699851, -0.028351074) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [631]     result += mat4(0.019704714, 0.06243651, 0.09896519, -0.17492259, 0.012675787, -0.004239029, 0.21319824, 0.069183126, -0.0071114586, 0.123431124, -0.24479835, 0.00723795, -0.045293927, 0.014101029, 0.15746681, 0.042405806) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [632]     result += mat4(0.023828225, -0.0015190929, 0.1194638, 0.082163885, 0.10532113, 0.042044062, 0.02528007, 0.015175004, 0.026613194, 0.33525538, -0.1627064, -0.29887968, -0.197707, 0.038967777, -0.15811683, -0.106895216) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [633]     result += mat4(0.044362027, -0.04946742, -0.14815849, -0.17660522, -0.034201477, -0.012243106, -0.050183997, 0.06407372, 0.039822515, 0.15880872, -0.0672721, -0.4081093, 0.019489579, -0.060278706, -0.015096743, -0.07799167) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [634]     result += mat4(0.11861756, 0.27113584, -0.14107186, -0.10246008, -0.124051, -0.1627854, 0.10698585, 0.2846401, -0.061731786, 0.1724438, -0.12428688, -0.09986041, -0.034171514, -0.07100923, 0.041739646, -0.11308375) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [635]     result += vec4(-0.02981662, -0.26338395, -0.011632586, 0.15063232);
[   0.292][d][vo/gpu-next/libplacebo] [636]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [637] }
[   0.292][d][vo/gpu-next/libplacebo] [638] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [639] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [640] //!BIND conv2d_5_tf
[   0.292][d][vo/gpu-next/libplacebo] [641] //!BIND conv2d_5_tf1
[   0.292][d][vo/gpu-next/libplacebo] [642] //!SAVE conv2d_6_tf1
[   0.292][d][vo/gpu-next/libplacebo] [643] //!WIDTH conv2d_5_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [644] //!HEIGHT conv2d_5_tf.h
[   0.292][d][vo/gpu-next/libplacebo] [645] //!COMPONENTS 4
[   0.292][d][vo/gpu-next/libplacebo] [646] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [647] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [648] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [649] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.292][d][vo/gpu-next/libplacebo] [650] vec4 hook() {
[   0.292][d][vo/gpu-next/libplacebo] [651]     vec4 result = mat4(0.17082009, 0.031344634, -0.06131912, 0.00887183, -0.01528174, 0.12943709, 0.24537678, 0.008178781, -0.312396, -0.023583878, 0.07827866, -0.1231261, 0.15081584, -0.18161978, -0.25179705, -0.036934935) * go_0(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [652]     result += mat4(-0.05768411, 0.16785417, -0.1788644, -0.0067257965, 0.021445744, 0.10066516, -0.23864186, 0.1450302, 0.12892793, 0.19856106, -0.24444748, 0.16531628, -0.044425935, -0.02775357, 0.009059946, -0.12958384) * go_0(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [653]     result += mat4(-0.025798557, -0.17238182, -0.34056288, -0.20921059, -0.03576266, 0.1476854, -0.06264234, 0.14452787, -0.04130045, -0.07275762, 0.034578666, 0.2914669, 0.20879944, 0.21359251, -0.048695553, 0.2638088) * go_0(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [654]     result += mat4(-0.022791177, 0.4204545, 0.116855636, 0.20241925, -0.010444933, -0.14462502, 0.022550104, -0.24423064, -0.09417524, 0.045358784, -0.11405829, 0.035979558, -0.2283092, -0.06670842, -0.23852053, -0.22417003) * go_0(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [655]     result += mat4(-0.14526704, 0.040880535, 0.14076385, 0.07795045, -0.059177604, -0.13056375, -0.3373641, -0.19344307, -0.29891858, -0.32578763, -0.29061425, 0.1562214, -0.13578376, 0.36586633, 0.24936736, 0.054629393) * go_0(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [656]     result += mat4(-0.025790233, -0.13020341, -0.10084969, 0.15767297, -0.09738769, 0.04034404, 0.0038675873, 0.043515608, 0.16899958, -0.29117966, 0.03420067, 0.14432564, -0.10473084, 0.21014084, 0.07775908, -0.09303797) * go_0(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [657]     result += mat4(-0.07443987, -0.16225167, 0.036251917, 0.028432872, 0.03759333, 0.004027401, -0.033941846, 0.0019474924, 0.02357054, 0.30748722, 0.1652115, -0.17361522, 0.16905582, 0.08048018, -0.23639561, -0.029408466) * go_0(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [658]     result += mat4(0.0461233, -0.09346199, -0.07063276, -0.19447634, -0.049339604, -0.0032855074, -0.22661209, -0.0543389, 0.11924857, -0.21691081, -0.1645725, -0.0075736847, 0.018572787, -0.06552861, -0.01777661, -0.11651732) * go_0(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [659]     result += mat4(-0.06425901, 0.123392984, -0.16395192, -0.093448035, -0.029316641, 0.0986573, -0.23135012, 0.011170849, 0.00023920486, 0.15296175, 0.35453254, -0.05189021, 0.20708887, -0.103900835, 0.081992395, -0.21829562) * go_0(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [660]     result += mat4(-0.019074136, -0.1572586, 0.27919227, 0.09119617, 0.035954695, 0.2941489, 0.18262725, -0.055522963, -0.21364328, -0.1573611, 0.104966134, 0.08228523, 0.19945285, -0.0039229114, -0.1565048, 0.028975379) * go_1(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [661]     result += mat4(-0.18501253, 0.006473006, 0.06637501, 0.04295065, 0.06411007, 0.1166344, -0.10060226, 0.46296063, -0.08600344, -0.03560105, 0.012215349, 0.017885283, 0.061346993, 0.17336361, 0.01935021, 0.20198092) * go_1(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [662]     result += mat4(-0.04451627, -0.10372061, -0.13968691, 0.14479733, 0.1660607, 0.19334625, 0.0085214665, 0.28863636, -0.07600901, -0.014777084, 0.13209191, -0.09045013, 0.104893915, -0.04776884, -0.007936376, 0.104568765) * go_1(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [663]     result += mat4(0.023751335, -0.108048, -0.050531313, 0.15916029, 0.13246661, 0.04644228, -0.09586482, -0.17222965, -0.22898191, -0.033484615, 0.078883134, -0.052609313, -0.2721741, 0.045986425, 0.13972299, -0.28923607) * go_1(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [664]     result += mat4(-0.23364568, -0.008875902, -0.40894926, 0.060443908, -0.2839635, -0.5270991, -0.2500865, 0.002020195, -0.24488612, -0.04982319, -0.009110353, -0.018023955, 0.06647274, -0.25225738, 0.26154432, -0.033934146) * go_1(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [665]     result += mat4(-0.1535129, -0.21257545, -0.16553773, 0.17471452, -0.06203719, 0.15238857, 0.18702018, 0.18572305, 0.07740396, -0.074217625, -0.072156586, -0.2183728, 0.00403749, 0.13750519, 0.30362993, 0.06550286) * go_1(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [666]     result += mat4(0.37164542, -0.1980723, -0.15659203, 0.19498909, 0.01748114, 0.011807152, -0.05424202, 0.11926474, 0.050406165, -0.12925303, -0.020280985, 0.08429331, 0.14769496, -0.077555746, -0.15216178, -0.27070466) * go_1(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [667]     result += mat4(0.35804263, 0.08539285, -0.14785156, -0.13532467, 0.058254432, 0.20448379, -0.006173341, 0.058168225, -0.21714899, -0.13472849, -0.09392532, -0.12753737, -0.097461835, -0.11419082, 0.09384189, 0.06414768) * go_1(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [668]     result += mat4(0.023494452, -0.22187226, -0.16694295, 0.0204334, -0.26720086, 0.15916729, 0.3098874, -0.10292057, 0.008854983, 0.13375004, -0.04409455, 0.09286524, 0.095829524, 0.12427317, -0.048659876, 0.18300754) * go_1(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [669]     result += mat4(-0.119153984, 0.10163183, 0.025017537, -0.40096784, 0.026778705, 0.15821172, -0.19947284, -0.33337715, 0.2952563, 0.16820388, -0.057061996, -0.029319009, -0.12184868, 0.09031512, 0.12028806, 0.021044692) * go_2(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [670]     result += mat4(0.086744264, -0.046958666, 0.2130253, -0.46672252, 0.07135636, 0.0100029735, -0.13828261, -0.012365689, -0.11374441, 0.21084632, -0.059631422, -0.013799735, -0.037889663, -0.10701892, -0.09493782, 0.15516634) * go_2(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [671]     result += mat4(0.031181194, -0.01535001, 0.029270316, 0.13128386, 0.11838377, -0.17051528, 0.12228499, -0.04841128, 0.33350074, -0.006144013, -0.09055018, 0.27470216, -0.26665646, -0.08703671, -0.01719071, -0.23449609) * go_2(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [672]     result += mat4(-0.12856458, 0.005562174, -0.19517267, 0.13270985, 0.2776414, 0.032003902, -0.15778573, 0.15344355, 0.26930434, -0.13459459, 0.035019353, 0.08896612, 0.12847935, -0.122637205, 0.001815178, 0.08290523) * go_2(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [673]     result += mat4(0.33805037, -0.15318587, -0.20955376, -0.26121393, -0.026022578, -0.1617741, 0.1336867, 0.026223289, 0.012059392, -0.17295446, -0.060811974, 0.14027825, -0.21134059, -0.08408573, -0.23773228, 0.110836074) * go_2(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [674]     result += mat4(0.16176093, 0.15307428, -0.07711325, -0.3458805, 0.061291527, 0.023916256, 0.21370678, 0.0015756418, 0.10642374, 0.24807373, 0.11164451, 0.10780487, 0.087194376, -0.2718231, -0.008457387, 0.054078236) * go_2(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [675]     result += mat4(-0.03259038, -0.20923306, 0.165477, 0.098864526, -0.02734457, 0.08871225, -0.01552188, 0.047712058, 0.055032052, -0.13044262, -0.2899521, 0.22230095, -0.029343741, -0.16427459, -0.005436118, -0.05111821) * go_2(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [676]     result += mat4(0.20065974, -0.1556366, -0.12620135, 0.44572976, -0.020925352, 0.12025185, 0.20588058, 0.06391864, 0.046870507, 0.16942503, -0.049370963, 0.008779016, 0.04954915, 0.090298936, -0.16466027, 0.011152038) * go_2(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [677]     result += mat4(0.13587528, 0.047841422, 0.19804007, -0.1672396, -0.072491, 0.04543739, 0.25287256, 0.015226213, 0.02007356, -0.049578942, -0.08796175, 0.1714897, -0.07819061, 0.1509537, 0.093094915, 0.031139288) * go_2(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [678]     result += mat4(-0.013774682, 0.118201815, -0.009592314, -0.10837201, -0.0686881, -0.083380274, 0.107689425, 0.046642892, 0.119898744, -0.05502989, -0.19719897, 0.0005697584, -0.0921928, 0.032281205, 0.2568853, 0.2325449) * go_3(-1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [679]     result += mat4(0.02991112, -0.09898633, 0.06076172, -0.20906185, 0.0026118348, 0.06130956, 0.06760944, -0.16662054, 0.065741204, -0.13144116, 0.011419801, 0.22552124, 0.1465757, -0.07417319, -0.10788749, -0.24952699) * go_3(-1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [680]     result += mat4(-0.19238451, -0.024058497, 0.19580396, -0.067399554, -0.18832864, -0.11752747, -0.078949094, -0.23762032, -0.04141864, 0.022530237, -0.02222157, 0.0054874527, 0.057746816, -0.34854797, 0.028730657, -0.08976777) * go_3(-1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [681]     result += mat4(0.16888975, 0.19949849, -0.08456147, -0.03619044, -0.019596824, 0.11214634, 0.13971676, 0.22926724, 0.03219445, -0.04566354, -0.14948955, -0.22817011, -0.08714846, -0.19684613, 0.15479128, 0.2433362) * go_3(0.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [682]     result += mat4(0.16050309, -0.102841675, 0.20855242, -0.011171905, -0.10309409, 0.22455123, 0.15892951, -0.06582373, 0.010079549, -0.2055006, -0.09385158, 0.006519388, 0.11838815, 0.37134558, -0.165772, 0.12704434) * go_3(0.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [683]     result += mat4(0.11643292, 0.03294274, -0.09800525, -0.13601723, -0.081318736, -0.059975546, -0.039105035, -0.2893635, -0.13024913, -0.058016162, -0.09961072, 0.10532414, 0.24250132, -0.35546342, -0.092634924, 0.093994915) * go_3(0.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [684]     result += mat4(-0.18799333, 0.25611782, 0.014645917, -0.063751906, 0.06498416, 0.16619027, -0.14411639, 0.3914421, -0.07343631, -0.116468735, -0.10941946, -0.2553544, -0.37774643, -0.0018441634, 0.06827239, -0.0122299045) * go_3(1.0, -1.0);
[   0.292][d][vo/gpu-next/libplacebo] [685]     result += mat4(-0.11884597, -0.2477297, 0.048488285, -0.06438257, -0.124703035, 0.25932777, 0.0650111, -0.0930877, 0.06463341, -0.000544085, 0.0147504965, -0.170097, -0.13241997, 0.20983136, -0.15956205, 0.03424298) * go_3(1.0, 0.0);
[   0.292][d][vo/gpu-next/libplacebo] [686]     result += mat4(-0.034574904, 0.06755256, 0.09508443, -0.17162292, 0.046379335, 0.2178781, 0.08699012, -0.055380464, -0.2237568, -0.07427848, -0.028395249, -0.3225617, -0.084454566, -0.24776657, 0.254169, 0.13229847) * go_3(1.0, 1.0);
[   0.292][d][vo/gpu-next/libplacebo] [687]     result += vec4(0.18765923, -0.07697714, 0.028134674, -0.060966115);
[   0.292][d][vo/gpu-next/libplacebo] [688]     return result;
[   0.292][d][vo/gpu-next/libplacebo] [689] }
[   0.292][d][vo/gpu-next/libplacebo] [690] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.292][d][vo/gpu-next/libplacebo] [691] //!HOOK MAIN
[   0.292][d][vo/gpu-next/libplacebo] [692] //!BIND conv2d_6_tf
[   0.292][d][vo/gpu-next/libplacebo] [693] //!BIND conv2d_6_tf1
[   0.292][d][vo/gpu-next/libplacebo] [694] //!SAVE conv2d_7_tf
[   0.292][d][vo/gpu-next/libplacebo] [695] //!WIDTH conv2d_6_tf.w
[   0.292][d][vo/gpu-next/libplacebo] [696] //!HEIGHT conv2d_6_tf.h
[   0.293][d][vo/gpu-next/libplacebo] [697] //!COMPONENTS 4
[   0.293][d][vo/gpu-next/libplacebo] [698] #define go_0(x_off, y_off) (max((conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [699] #define go_1(x_off, y_off) (max((conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [700] #define go_2(x_off, y_off) (max(-(conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [701] #define go_3(x_off, y_off) (max(-(conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [702] vec4 hook() {
[   0.293][d][vo/gpu-next/libplacebo] [703]     vec4 result = mat4(0.21919365, 0.36627784, 0.12603314, 0.24306288, 0.06447028, 0.06472204, -0.05997039, -0.15651788, 0.017059859, -0.006497198, -0.4189735, 0.021636713, -0.23887977, -0.014220949, 0.031113686, -0.17342716) * go_0(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [704]     result += mat4(-0.10818789, -0.03273837, 0.33918005, -0.19290088, 0.0955361, -0.34107623, -0.054906327, -0.18083344, -0.060723677, 0.24395694, 0.112975016, -0.07254578, -0.14389384, 0.13235968, -0.15054801, -0.26216486) * go_0(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [705]     result += mat4(-0.23442148, -0.07857079, 0.022283873, -0.2656417, 0.037092753, -0.037313666, -0.5057047, 0.042533103, -0.120424, 0.00021930189, -0.0044566668, -0.45536995, 0.00040759926, 0.14597592, -0.094990164, -0.036161344) * go_0(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [706]     result += mat4(0.15024352, 0.19903262, -0.0734784, 0.092836305, -0.025753846, 0.024750374, -0.07550193, 0.035420835, 0.11084378, 0.26119822, -0.08443512, -0.0047807065, -0.042685136, 0.24889739, 0.098650105, 0.2088369) * go_0(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [707]     result += mat4(-0.25551823, 0.14455976, 0.19886157, -0.23465924, 0.20711218, -0.20875362, -0.11320392, -0.30852005, -0.06795657, 0.008670962, 0.30601278, 0.6929064, 0.17079145, 0.15744895, 0.06441601, 0.06514001) * go_0(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [708]     result += mat4(0.03142604, -0.006410137, -0.023654792, -0.05708553, 0.062985405, -0.077010594, 0.078804865, 0.050882503, 0.010274228, -0.15558401, 0.09490256, 0.14964707, -0.11966925, -0.36176664, 0.27809814, -0.18862294) * go_0(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [709]     result += mat4(0.05609992, 0.0041612233, -0.08498908, 0.04479823, -0.080117956, -0.17423204, -0.22858045, 0.054569032, -0.050866384, -0.020000307, 0.027000953, -0.67724514, 0.16240878, -0.04641204, 0.0648367, -0.20613132) * go_0(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [710]     result += mat4(0.08542306, -0.08254248, -0.11090553, -0.14140448, -0.10788511, -0.13011602, -0.29319742, -0.26007155, 0.11033401, -0.31966573, 0.32668245, 0.19542319, 0.06329418, 0.20904626, 0.2724067, -0.009155685) * go_0(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [711]     result += mat4(-0.007403411, 0.0012836396, -0.23446666, -0.03017208, 0.062420018, -0.13611084, -0.2975928, 0.13173148, -0.03679939, 0.13743873, -0.10121899, 0.074514665, 0.1497629, -0.09523838, 0.39018926, 0.37807035) * go_0(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [712]     result += mat4(0.11441487, -0.19565523, -0.25757137, -0.16148767, 0.15575317, -0.12657928, 0.10479676, 0.062919036, 0.010544159, 0.22931573, 0.20360178, 0.4637635, -0.3395036, -0.52467215, 0.08759308, 0.028030418) * go_1(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [713]     result += mat4(0.2699195, -0.34218305, 0.15259695, 0.03139074, -0.024053533, -0.029567484, 0.28480124, 0.20525953, 0.15452823, -0.217713, 0.15861876, -0.012275699, 0.21408023, 0.097508304, -0.57126766, -0.14679857) * go_1(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [714]     result += mat4(-0.0755847, -0.09751562, -0.29480466, -0.22285318, 0.14196442, 0.114573136, -0.22294767, 0.12463806, 0.3322209, -0.04631724, -0.11097061, -0.27986854, -0.16099304, -0.060079545, 0.00299308, 0.120776065) * go_1(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [715]     result += mat4(0.050933484, -0.13776319, -0.18809728, 0.24035202, -0.32528606, -0.41684148, -0.029342847, 0.28642926, -0.07963454, -0.12905268, 0.07606093, 0.24670005, -0.08815598, -0.23320907, -0.008099349, 0.21512873) * go_1(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [716]     result += mat4(0.19247563, 0.18083979, -0.09719762, 0.15314941, -0.22350982, 0.46515045, -0.3571128, 0.35953265, 0.06921985, -0.4482386, -0.18732521, -0.5043983, 0.35159567, -0.33315298, -0.21884166, -0.16283798) * go_1(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [717]     result += mat4(-0.021124054, -0.007966742, 0.0052493825, 0.022550896, 0.030403977, 0.3377868, -0.47602004, -0.077664234, -0.07222509, -0.07486097, -0.37971064, -0.5107857, -0.06299477, 0.04930232, -0.3330487, 0.29845512) * go_1(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [718]     result += mat4(-0.063705474, -0.07917637, -0.02026607, -0.05142568, 0.021577014, -0.07379867, 0.033937998, 0.08148773, -0.02717838, -0.03233838, 0.098000035, 0.036476444, -0.13366953, 0.014477577, 0.24064232, 0.39313284) * go_1(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [719]     result += mat4(-0.16046515, -0.094624564, 0.35435164, 0.09942324, -0.07137174, -0.27999225, 0.124644354, -0.0062176553, 0.015016751, -0.05500243, -0.23249559, -0.4508382, 0.1860433, 0.10671491, -0.033345353, -0.06611453) * go_1(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [720]     result += mat4(0.21614046, -0.01307525, -0.18941112, -0.20533535, -0.14481686, -0.47801897, 0.22605121, -0.20298961, -0.06744227, -0.20377496, -0.11926173, 0.15645133, -0.31570885, -0.3495616, -0.024666889, 0.040965475) * go_1(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [721]     result += mat4(-0.11748018, -0.039976366, -0.00084064255, -0.028653437, -0.16216733, -0.036768105, 0.018064514, -0.0928936, 0.14008482, -0.064511225, 0.24329947, -0.0268608, 0.050330248, 0.08540601, -0.07272679, -0.01187671) * go_2(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [722]     result += mat4(-0.09459936, -0.011723822, -0.06952858, -0.07808506, -0.065588176, 0.332501, -0.0120042395, 0.07668016, 0.14735217, -0.14856043, -0.06702449, -0.020953184, -0.023006834, 0.06135422, 0.1491448, -0.028061569) * go_2(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [723]     result += mat4(0.25136968, 0.25146323, -0.108277924, -0.20407207, -0.0013780294, 0.16108194, 0.25143847, 0.06672421, -0.033905584, -0.021144686, -0.019152718, 0.34619498, 0.14560962, 0.034437314, 0.024790365, -0.049976267) * go_2(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [724]     result += mat4(-0.24928351, 0.12637813, 0.23609994, 0.12722939, -0.036997862, -0.16554876, 0.11144095, -0.10040036, -0.020359103, -0.080701865, -0.3142192, 0.27257237, 0.13546956, -0.14416885, 0.028196262, -0.2886465) * go_2(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [725]     result += mat4(0.28524777, -0.4236231, 0.27420738, -0.21095508, 0.23475651, 0.115876295, -0.18837357, -0.0260708, 0.030670704, -0.11516913, -0.11365572, -0.2203149, -0.018612983, -0.10719593, -0.031727783, 0.1403327) * go_2(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [726]     result += mat4(0.07240512, 0.03139215, 0.12328737, -0.021201206, -0.13971715, 0.072742075, -0.0011289873, 0.0053133667, 0.035639685, -0.04322272, -0.19288473, -0.15812221, -0.19126481, 0.0698514, 0.17619178, -0.035605464) * go_2(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [727]     result += mat4(-0.18552057, 0.07259671, 0.011667668, -0.15630563, 0.11414356, 0.14482655, -0.04021029, 0.18495587, -0.11386139, -0.09058561, -0.011265998, 0.23358451, 0.0521358, 0.12495261, 0.021644838, -0.048094347) * go_2(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [728]     result += mat4(-0.09222373, 0.0533347, 0.055820454, 0.22382596, 0.18713981, 0.2668916, -0.019384036, 0.012698582, 0.13325234, 0.20361474, -0.33106443, -0.08571572, -0.21243028, -0.10996386, 0.123459645, 0.1534967) * go_2(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [729]     result += mat4(0.18133277, 0.18108074, -0.05638664, 0.29533157, -0.2108019, -0.033636626, 0.5015888, -0.15116066, -0.041320793, -0.14764231, 0.07314567, -0.18865979, 0.10276937, 0.094240844, -0.1364283, 0.27812913) * go_2(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [730]     result += mat4(0.06040915, 0.23753685, 0.19019844, 0.23948252, -0.07535012, 0.11848904, 0.14389765, 0.050067905, 0.16150077, -0.030053454, 0.12478255, 0.26020208, 0.111198805, 0.06787492, -0.12771018, 0.006687384) * go_3(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [731]     result += mat4(-0.5421617, 0.10414128, -0.21526064, -0.08883624, 0.13145073, -0.29695904, 0.57386386, 0.073361695, -0.09538372, 0.27593842, 0.070922814, 0.21769938, 0.06214975, 0.11847816, 0.10033405, 0.29360098) * go_3(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [732]     result += mat4(-0.16294672, -0.014815565, 0.22046989, 0.16858687, 0.058917344, 0.21384977, 0.18803519, 0.105688855, 0.0355118, 0.20571202, -0.07341922, 0.26624045, -0.0415102, 0.050942056, 0.19727907, 0.20122413) * go_3(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [733]     result += mat4(-0.020470422, 0.15815964, -0.13437317, -0.1967045, 0.074902646, 0.08356444, 0.055913117, -0.12837863, -0.18647918, 0.07002247, 0.038864706, -0.07288784, 0.04135125, -0.016055549, -0.1340297, -0.15578008) * go_3(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [734]     result += mat4(-0.07685624, 0.00079105416, -0.068755336, 0.110282525, -0.014170752, 0.041282844, -0.17035173, 0.19439398, -0.3036256, 0.024148455, -0.19566648, -0.06736254, 0.14203559, -0.13016985, -0.32845357, -0.14266774) * go_3(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [735]     result += mat4(0.0087252045, 0.098839566, -0.08770506, -0.08499465, 0.015245115, -0.110854514, 0.054458305, -0.018121868, -0.09666134, -0.08316006, 0.24617113, -0.17195955, 0.2574254, 0.06734342, -0.13792352, -0.07306126) * go_3(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [736]     result += mat4(-0.0073954533, -0.20126835, -0.22545357, -0.29462856, 0.057408337, 0.11939119, -0.01846476, 0.12534486, 0.15751605, -0.14282645, -0.14219986, 0.14283386, 0.14090413, 0.10500912, 0.03039335, 0.17448832) * go_3(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [737]     result += mat4(0.043910783, -0.09140025, -0.21666165, 0.07616939, 0.104454786, 0.309926, -0.12906921, 0.1140117, 0.09372434, 0.049547072, -0.086615674, -0.034449168, 0.096705064, 0.26001686, 0.027063297, 0.12422948) * go_3(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [738]     result += mat4(0.1365422, 0.2679611, 0.12037257, 0.43346113, 0.08223084, -0.016788265, 0.13570398, -0.017974345, -0.17922844, -0.09475725, 0.073539585, -0.106947675, 0.08998511, 0.04133868, 0.16586913, -0.26291734) * go_3(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [739]     result += vec4(-0.19233678, 0.016725872, -0.008011114, -0.1977463);
[   0.293][d][vo/gpu-next/libplacebo] [740]     return result;
[   0.293][d][vo/gpu-next/libplacebo] [741] }
[   0.293][d][vo/gpu-next/libplacebo] [742] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-4x3x3x16
[   0.293][d][vo/gpu-next/libplacebo] [743] //!HOOK MAIN
[   0.293][d][vo/gpu-next/libplacebo] [744] //!BIND conv2d_6_tf
[   0.293][d][vo/gpu-next/libplacebo] [745] //!BIND conv2d_6_tf1
[   0.293][d][vo/gpu-next/libplacebo] [746] //!SAVE conv2d_7_tf1
[   0.293][d][vo/gpu-next/libplacebo] [747] //!WIDTH conv2d_6_tf.w
[   0.293][d][vo/gpu-next/libplacebo] [748] //!HEIGHT conv2d_6_tf.h
[   0.293][d][vo/gpu-next/libplacebo] [749] //!COMPONENTS 4
[   0.293][d][vo/gpu-next/libplacebo] [750] #define go_0(x_off, y_off) (max((conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [751] #define go_1(x_off, y_off) (max((conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [752] #define go_2(x_off, y_off) (max(-(conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [753] #define go_3(x_off, y_off) (max(-(conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [754] vec4 hook() {
[   0.293][d][vo/gpu-next/libplacebo] [755]     vec4 result = mat4(-0.36016628, 0.019064043, 0.3073228, 0.16891135, 0.026739368, 0.31136194, 0.11260383, -0.26918694, 0.0419928, -0.3365078, 0.20189743, -0.04136312, 0.039564647, 0.033199426, 0.18768296, -0.017119858) * go_0(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [756]     result += mat4(0.28663483, -0.41716507, 0.059281543, 0.043736435, 0.0028875466, 0.13817391, -0.12543318, -0.2794053, -0.023528943, 0.10610115, 0.09100278, 0.040132936, -0.21949205, -0.027810011, -0.0301218, 0.084047124) * go_0(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [757]     result += mat4(0.39674807, -0.0040878756, -0.038235947, 0.11880838, 0.009898328, 0.19107847, -0.009313831, -0.1554276, -0.047341663, 0.18049581, -0.029317195, 0.0708909, 0.0708316, -0.110617444, 0.14584038, -0.022261223) * go_0(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [758]     result += mat4(-0.20400241, 0.0896492, -0.010386381, -0.052133385, 0.005023956, -0.06628705, -0.16436209, -0.25345984, -0.05285192, 0.09706557, -0.03778914, -0.152546, 0.17023252, 0.063713826, 0.00743037, 0.056634087) * go_0(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [759]     result += mat4(-0.080793336, 0.4204207, 0.19098237, 0.20028038, -0.054076545, 0.22064368, -0.25853387, -0.3643562, 0.2085573, -0.023731, -0.06727709, -0.18683033, -0.18032159, -0.06388348, 0.304463, -0.2517781) * go_0(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [760]     result += mat4(0.11940941, 0.10624008, 0.16120581, 0.2369602, 0.3321827, 0.4272075, -0.10403669, -0.31388018, -0.006372124, -0.00653671, 0.109810196, 0.2277172, 0.005771998, 0.086026914, -0.08934813, -0.094941735) * go_0(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [761]     result += mat4(-0.13233568, 0.24112508, -0.0068006413, 0.12466225, 0.11396591, -0.07249253, -0.29090378, -0.12828146, -0.22001141, -0.08532405, -0.11932601, 0.29452974, 0.09572195, 0.017603843, 0.12454017, 0.16321751) * go_0(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [762]     result += mat4(0.042107448, -0.00807216, 0.06580674, -0.1289527, 0.13977426, -0.037159685, -0.21001346, -0.08698161, 0.22370502, -0.29170328, 0.2179206, 0.36621302, 0.0825477, -0.016513655, -0.11157249, 0.12861598) * go_0(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [763]     result += mat4(0.2246826, -0.13262233, 0.12131653, -0.15522355, 0.38104856, 0.030237729, 0.1286289, -0.19770473, -0.16175011, -0.13688888, 0.23505463, 0.21333031, 0.76352316, -0.17949077, -0.13124311, 0.1613879) * go_0(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [764]     result += mat4(-0.050607495, 0.0846705, -0.06136092, -0.033436477, 0.41138348, 0.037043408, -0.02676336, -0.37771952, 0.22147503, 0.06490757, -0.04266158, -0.22606373, 0.045775007, -0.054498192, -0.21495876, -0.036050417) * go_1(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [765]     result += mat4(-0.06242522, 0.2700824, -0.05602621, -0.12361551, 0.14477442, 0.19403581, 0.23505251, -0.072234035, -0.15831544, 0.4640447, -0.104754634, -0.004539681, -0.20246096, 0.23216484, -0.35886365, 0.11360777) * go_1(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [766]     result += mat4(0.14777757, 0.18951412, 0.027219458, 0.11216015, 0.02997997, -0.13466355, -0.0010830094, 0.021302953, 0.23441231, -0.14529245, 0.08068729, 0.10044398, 0.3972878, 0.26570204, 0.0046810666, -0.2863261) * go_1(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [767]     result += mat4(-0.10385485, 0.1053724, 0.16961229, 0.20727012, -0.025148917, -0.011365095, 0.03899919, -0.030950211, 0.079080455, -0.32767853, 0.064670205, -0.035771385, 0.16833797, -0.21567492, 0.30871257, -0.19965471) * go_1(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [768]     result += mat4(-0.23420888, -0.004894698, -0.18162623, -0.31107524, 0.11976508, 0.14924951, -0.08723316, 0.21401922, -0.58200324, -0.01177345, -0.049033508, 0.19593577, -0.21139073, 0.13016601, 0.08734843, 0.4158892) * go_1(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [769]     result += mat4(0.0009789813, 0.33274913, 0.017405733, -0.042906318, -0.26410276, -0.09291333, 0.019387102, 0.105381854, -0.009176527, 0.09483514, -0.28462934, -0.03644404, 0.285194, -0.4260311, 0.14902237, -0.115670316) * go_1(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [770]     result += mat4(-0.09344311, 0.4463103, 0.19984834, -0.09733857, -0.118717775, -0.0708026, 0.24919955, -0.11234634, 0.1246395, -0.052909933, 0.1525815, 0.07724016, 0.0070534665, -0.06404165, -0.18149726, -0.014058336) * go_1(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [771]     result += mat4(-0.17353044, 0.15376104, 0.004588994, -0.13554202, -0.19920237, -0.18918681, 0.11327512, -0.117296435, -0.0785251, 0.013677155, -0.2103214, 0.06843426, -0.27790928, 0.09837545, -0.00019213746, 0.09132539) * go_1(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [772]     result += mat4(-0.01586651, 0.014929441, 0.2426186, -0.1889374, -0.0865462, -0.07454513, -0.20797268, -0.22366855, 0.19704159, 0.0048206006, -0.16707218, -0.14162683, 0.036798395, -0.1663155, -0.12009389, 0.09603803) * go_1(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [773]     result += mat4(-0.041532192, 0.05753804, 0.17927068, -0.042112097, 0.12080969, -0.15052572, -0.34855765, -0.07356988, -0.28199884, -0.18958664, 0.15879883, 0.08511588, 0.0034213227, -0.05338495, -0.37285298, 0.06626709) * go_2(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [774]     result += mat4(-0.20219134, 0.22150375, -0.29405454, 0.06597703, -0.018885285, -0.010551704, -0.010774283, 0.08758955, -0.2015349, -0.17006227, -0.24321876, -0.06864207, -0.118437864, -0.043977212, -0.029736811, 0.14040919) * go_2(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [775]     result += mat4(-0.18709077, -0.09723938, 0.12783436, -0.15167634, 0.29039705, -0.11009911, 0.018371418, -0.060096707, -0.07256923, -0.25799567, -0.06276934, -0.035992302, -0.06729111, -0.059956793, -0.024079734, 0.011838878) * go_2(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [776]     result += mat4(0.010449175, -0.08212451, 0.1409803, 0.11861122, -0.18035835, 0.051930565, 0.01049551, -0.09447962, 0.12029649, 0.040604513, -0.059971705, -0.0044667358, -0.22080486, -0.11187681, 0.124374695, -0.004155485) * go_2(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [777]     result += mat4(-0.28584236, -0.38480133, -0.13987814, -0.4463469, -0.3890419, -0.022498172, 0.17334452, 0.21895568, -0.15450422, -0.10905497, 0.15111905, -0.22554915, 0.106121585, -0.029144369, 0.36059046, 0.22140682) * go_2(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [778]     result += mat4(-0.23780307, -0.023033705, 0.068205886, -0.110635854, -0.26720005, -0.1608183, 0.19523881, 0.07972837, -0.018495852, -0.2793956, 0.17668398, -0.12020479, -0.079556085, -0.02284952, 0.031480275, 0.31818348) * go_2(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [779]     result += mat4(0.22501226, -0.00829407, 0.059581667, 0.16512989, 0.18711442, 0.1200968, 0.11812652, -0.16091056, 0.15733972, 0.045156084, 0.20640492, -0.16852027, -0.11217177, 0.06746273, -0.050218176, 0.08643783) * go_2(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [780]     result += mat4(0.20715691, -0.1082907, 0.027892975, 0.19515261, -0.17838904, 0.1532257, -0.108409844, -0.06632365, -0.13805026, 0.23020233, 0.12416581, -0.14861803, 0.16650471, 0.08158386, -0.09051303, -0.06981649) * go_2(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [781]     result += mat4(-0.04617126, 0.06579221, 0.25964734, 0.28500968, 0.07641255, -0.090885855, -0.0972522, 0.18298368, -0.06393334, 0.103463, -0.23062052, -0.15270731, 0.13633437, 0.074707486, 0.15065335, -0.024602572) * go_2(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [782]     result += mat4(0.118319295, 0.010410938, 0.044655934, -0.104725905, 0.030477569, 0.12867387, 0.039075315, 0.18922117, 0.13301082, -0.1601557, 0.038168408, -0.07372259, -0.09522213, -0.095107146, -0.16679631, 0.044673234) * go_3(-1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [783]     result += mat4(0.46229, -0.30780822, -0.09081465, 0.1433387, -0.0315039, 0.059409115, -0.24948491, -0.17146957, 0.060843736, -0.041989822, 0.054005735, 0.22835566, 0.12036598, -0.0070898845, 0.17276852, -0.17754094) * go_3(-1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [784]     result += mat4(-0.35119572, 0.020034311, 0.08751943, 0.08193488, 0.041884877, 0.22649358, -0.07447533, 0.20845473, -0.04859846, -0.16206735, 0.06819576, -0.053000778, 0.18146423, 0.04694148, 0.045293212, 0.06783575) * go_3(-1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [785]     result += mat4(0.280914, -0.14998704, -0.23485807, -0.015608296, 0.1549556, -0.11992663, -0.094974115, 0.05887284, 0.053392075, 0.10322464, -0.075066686, 0.068358354, -0.18663338, 0.009901499, -0.123370335, -0.12502703) * go_3(0.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [786]     result += mat4(0.7748568, -0.17870626, -0.20770052, 0.024692526, -0.056430295, -0.06324113, -0.03660047, 0.29629672, -0.51896983, -0.027231261, 0.05903762, 0.077677645, -0.061675485, -0.20277846, 0.10352223, -0.08198446) * go_3(0.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [787]     result += mat4(-0.06347568, 0.21643166, -0.09718546, 0.0372257, -0.029537952, -0.0357135, -0.09548363, 0.18225233, -0.29609334, -0.3496132, 0.18245913, -0.10162589, -0.18189451, -0.09077887, 0.117313184, -0.06863874) * go_3(0.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [788]     result += mat4(-0.047373574, -0.020289376, -0.25748715, -0.13568166, 0.15656634, -0.06841899, 0.012100781, -0.13611819, 0.0016357322, -0.23870537, 0.14035743, -0.14700134, 0.2535575, -0.13697346, -0.13693139, -0.10365287) * go_3(1.0, -1.0);
[   0.293][d][vo/gpu-next/libplacebo] [789]     result += mat4(0.4283934, -0.316192, -0.012617617, 0.018468965, 0.21436644, 0.18408814, -0.42651537, 0.12504087, -0.13894933, 0.091662176, -0.20096369, -0.080727175, -0.005487846, 0.17046383, 0.1383948, -0.0054956395) * go_3(1.0, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [790]     result += mat4(0.20014295, -0.027282396, -0.06317007, 0.04452042, 0.064600386, 0.072222926, -0.33409226, 0.08063831, -0.022607977, 0.1308856, -0.39691743, -0.094889864, -0.1810531, 0.011367248, -0.2531222, -0.22468317) * go_3(1.0, 1.0);
[   0.293][d][vo/gpu-next/libplacebo] [791]     result += vec4(0.26886886, 0.05874665, 0.10268232, 0.05833081);
[   0.293][d][vo/gpu-next/libplacebo] [792]     return result;
[   0.293][d][vo/gpu-next/libplacebo] [793] }
[   0.293][d][vo/gpu-next/libplacebo] [794] //!DESC Anime4K-v4.0-Restore-CNN-(VL)-Conv-3x1x1x112
[   0.293][d][vo/gpu-next/libplacebo] [795] //!HOOK MAIN
[   0.293][d][vo/gpu-next/libplacebo] [796] //!BIND MAIN
[   0.293][d][vo/gpu-next/libplacebo] [797] //!BIND conv2d_1_tf
[   0.293][d][vo/gpu-next/libplacebo] [798] //!BIND conv2d_1_tf1
[   0.293][d][vo/gpu-next/libplacebo] [799] //!BIND conv2d_2_tf
[   0.293][d][vo/gpu-next/libplacebo] [800] //!BIND conv2d_2_tf1
[   0.293][d][vo/gpu-next/libplacebo] [801] //!BIND conv2d_3_tf
[   0.293][d][vo/gpu-next/libplacebo] [802] //!BIND conv2d_3_tf1
[   0.293][d][vo/gpu-next/libplacebo] [803] //!BIND conv2d_4_tf
[   0.293][d][vo/gpu-next/libplacebo] [804] //!BIND conv2d_4_tf1
[   0.293][d][vo/gpu-next/libplacebo] [805] //!BIND conv2d_5_tf
[   0.293][d][vo/gpu-next/libplacebo] [806] //!BIND conv2d_5_tf1
[   0.293][d][vo/gpu-next/libplacebo] [807] //!BIND conv2d_6_tf
[   0.293][d][vo/gpu-next/libplacebo] [808] //!BIND conv2d_6_tf1
[   0.293][d][vo/gpu-next/libplacebo] [809] //!BIND conv2d_7_tf
[   0.293][d][vo/gpu-next/libplacebo] [810] //!BIND conv2d_7_tf1
[   0.293][d][vo/gpu-next/libplacebo] [811] //!SAVE MAIN
[   0.293][d][vo/gpu-next/libplacebo] [812] //!WIDTH conv2d_1_tf.w
[   0.293][d][vo/gpu-next/libplacebo] [813] //!HEIGHT conv2d_1_tf.h
[   0.293][d][vo/gpu-next/libplacebo] [814] #define g_0 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [815] #define g_1 (max((conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [816] #define g_2 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [817] #define g_3 (max(-(conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [818] #define g_4 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [819] #define g_5 (max((conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [820] #define g_6 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [821] #define g_7 (max(-(conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [822] #define g_8 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [823] #define g_9 (max((conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [824] #define g_10 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [825] #define g_11 (max(-(conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [826] #define g_12 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [827] #define g_13 (max((conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [828] #define g_14 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [829] #define g_15 (max(-(conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [830] #define g_16 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [831] #define g_17 (max((conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [832] #define g_18 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [833] #define g_19 (max(-(conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [834] #define g_20 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [835] #define g_21 (max((conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [836] #define g_22 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [837] #define g_23 (max(-(conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [838] #define g_24 (max((conv2d_7_tf_tex(conv2d_7_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [839] #define g_25 (max((conv2d_7_tf1_tex(conv2d_7_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [840] #define g_26 (max(-(conv2d_7_tf_tex(conv2d_7_tf_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [841] #define g_27 (max(-(conv2d_7_tf1_tex(conv2d_7_tf1_pos)), 0.0))
[   0.293][d][vo/gpu-next/libplacebo] [842] vec4 hook() {
[   0.293][d][vo/gpu-next/libplacebo] [843]     vec4 result = mat4(0.09689336, 0.06046458, 0.072598994, 0.0, 0.11994565, 0.104477674, 0.09302802, 0.0, -0.05718302, 0.050438102, 0.08814741, 0.0, 0.0308889, 0.0033925986, -0.01715605, 0.0) * g_0;
[   0.293][d][vo/gpu-next/libplacebo] [844]     result += mat4(-0.028314235, 0.06597744, 0.0966897, 0.0, 0.035656154, 0.07770106, 0.075551905, 0.0, 0.0001793458, -0.000479495, -0.00297406, 0.0, -0.053916585, -0.016807461, -0.0057141334, 0.0) * g_1;
[   0.293][d][vo/gpu-next/libplacebo] [845]     result += mat4(-0.047189303, -0.0207, -0.020910334, 0.0, -0.07933196, -0.06961211, -0.086069845, 0.0, 0.0943727, 0.008463375, 0.010755166, 0.0, 0.062410597, 0.022625161, 0.04068433, 0.0) * g_2;
[   0.293][d][vo/gpu-next/libplacebo] [846]     result += mat4(0.10270994, -0.019080428, 0.0050091282, 0.0, -0.004672948, -0.013966742, -0.0063746064, 0.0, -2.5856789e-05, 0.03151499, -0.0023983798, 0.0, 0.113539025, 0.12381699, 0.100360274, 0.0) * g_3;
[   0.293][d][vo/gpu-next/libplacebo] [847]     result += mat4(0.07868885, -0.030913834, -0.009213676, 0.0, 0.04870991, 0.021467991, 0.038739506, 0.0, -0.042969644, -0.07122453, -0.08798675, 0.0, -0.09784122, 0.021434791, 0.02510374, 0.0) * g_4;
[   0.293][d][vo/gpu-next/libplacebo] [848]     result += mat4(0.050420716, 0.0729716, 0.076532185, 0.0, -0.019112485, -0.01037939, -0.026948035, 0.0, -0.02591423, 0.008927897, -0.00042541025, 0.0, 0.1043701, -0.0071186824, -0.041817162, 0.0) * g_5;
[   0.293][d][vo/gpu-next/libplacebo] [849]     result += mat4(-0.16143242, -0.0009298223, -0.01228508, 0.0, 0.07744052, -0.018313263, -0.0488145, 0.0, 0.09241393, 0.07128674, 0.055164956, 0.0, 0.054884013, -0.04834418, -0.06281626, 0.0) * g_6;
[   0.293][d][vo/gpu-next/libplacebo] [850]     result += mat4(-0.049036566, -0.05979936, -0.05594288, 0.0, -0.014564307, 0.031926468, 0.037857566, 0.0, 0.015474487, -0.11385003, -0.11527764, 0.0, -0.07076006, 0.057038613, 0.095983796, 0.0) * g_7;
[   0.293][d][vo/gpu-next/libplacebo] [851]     result += mat4(0.03094887, -0.008734403, 0.00042712069, 0.0, 0.053891554, 0.05837673, 0.06200635, 0.0, 0.09071558, -0.04202184, -0.046172567, 0.0, -0.0425916, 0.04905093, 0.020835675, 0.0) * g_8;
[   0.293][d][vo/gpu-next/libplacebo] [852]     result += mat4(0.096628904, -0.037792254, -0.043241944, 0.0, -0.011923947, -0.025950424, -0.031381752, 0.0, -0.060941868, -0.07859433, -0.07535451, 0.0, -0.026777223, 0.08604982, 0.07829908, 0.0) * g_9;
[   0.293][d][vo/gpu-next/libplacebo] [853]     result += mat4(-0.06435972, 0.0036599538, 0.00786578, 0.0, -0.061972067, -0.05681472, -0.06667608, 0.0, -0.106890626, 0.007406496, 0.029977169, 0.0, -0.20519382, -0.044860814, 0.0021225857, 0.0) * g_10;
[   0.293][d][vo/gpu-next/libplacebo] [854]     result += mat4(-0.16876474, 0.012789643, 0.026692612, 0.0, 0.017817136, 0.026935097, 0.02227043, 0.0, 0.01690181, 0.07716103, 0.086527, 0.0, 0.07923805, -0.10443151, -0.10859543, 0.0) * g_11;
[   0.293][d][vo/gpu-next/libplacebo] [855]     result += mat4(0.003730466, -0.024648283, -0.022169832, 0.0, -0.0062762927, 0.022062732, 0.032966793, 0.0, 0.016349113, 0.017197203, 0.020952817, 0.0, -0.1763789, 0.035497356, 0.053835396, 0.0) * g_12;
[   0.293][d][vo/gpu-next/libplacebo] [856]     result += mat4(0.020886675, -0.07054202, -0.079142675, 0.0, 0.06664387, 0.044960167, 0.042230908, 0.0, -0.095019594, 0.012421141, 0.0142890485, 0.0, 0.056814816, -0.012751135, -0.014684506, 0.0) * g_13;
[   0.293][d][vo/gpu-next/libplacebo] [857]     result += mat4(0.011765893, 0.0008920681, -0.0018258415, 0.0, -0.010473814, -0.023085753, -0.028783914, 0.0, -0.023034256, -0.0024786016, -0.0052162083, 0.0, 0.1643386, -0.06132718, -0.09289065, 0.0) * g_14;
[   0.293][d][vo/gpu-next/libplacebo] [858]     result += mat4(0.016597198, 0.09389637, 0.10833379, 0.0, -0.043163072, -0.04714812, -0.035274632, 0.0, 0.09634976, -0.009292612, -0.022424143, 0.0, -0.08765172, 0.0051558353, 0.010900356, 0.0) * g_15;
[   0.293][d][vo/gpu-next/libplacebo] [859]     result += mat4(0.030815786, 0.021069322, 0.01812191, 0.0, 0.084839165, -0.0080813095, -0.029270556, 0.0, -0.10456346, 0.062386703, 0.0665605, 0.0, 0.11926609, -0.1104228, -0.13291118, 0.0) * g_16;
[   0.293][d][vo/gpu-next/libplacebo] [860]     result += mat4(-0.07159541, -0.007267032, -0.010134558, 0.0, 0.008234213, 0.045609634, 0.040295456, 0.0, 0.018416971, 0.01308482, 0.014649557, 0.0, 0.035107512, -0.02140815, -0.030279048, 0.0) * g_17;
[   0.293][d][vo/gpu-next/libplacebo] [861]     result += mat4(0.01918586, 0.03875863, 0.03229402, 0.0, -0.07917104, 0.041135103, 0.057182517, 0.0, 0.08609541, 0.0079662455, 0.004327576, 0.0, -0.14332893, 0.03120354, 0.056732506, 0.0) * g_18;
[   0.293][d][vo/gpu-next/libplacebo] [862]     result += mat4(0.03200192, -0.0035752193, -0.0031064528, 0.0, -0.010902813, 0.014607456, 0.019431474, 0.0, -0.016461229, -0.004938204, -0.004655488, 0.0, -0.033470232, 0.0026075812, 0.005896968, 0.0) * g_19;
[   0.293][d][vo/gpu-next/libplacebo] [863]     result += mat4(0.037410006, 0.048742272, 0.04348088, 0.0, 0.037719514, 0.030768529, 0.03127472, 0.0, 0.056426726, 0.03066893, 0.016440205, 0.0, -0.010599352, 0.022832409, 0.023211194, 0.0) * g_20;
[   0.293][d][vo/gpu-next/libplacebo] [864]     result += mat4(-0.005733291, 0.06365659, 0.06663611, 0.0, -0.041917093, -0.016493445, -0.020438088, 0.0, -0.0014357592, -0.0022506563, -0.0045095007, 0.0, 0.029893145, -0.009129354, -0.015173116, 0.0) * g_21;
[   0.293][d][vo/gpu-next/libplacebo] [865]     result += mat4(0.013052085, 0.005108175, 0.0025906067, 0.0, -0.021950055, -0.036447693, -0.036141638, 0.0, -0.036296472, 0.0068928464, 0.013102313, 0.0, 0.0060471976, -0.024798103, -0.023548538, 0.0) * g_22;
[   0.293][d][vo/gpu-next/libplacebo] [866]     result += mat4(0.0067743887, -0.06191211, -0.062355213, 0.0, 0.0016080744, -0.020445071, -0.016840393, 0.0, 0.028264903, 0.01852915, 0.015891539, 0.0, -0.023877412, -0.013271666, -0.008158679, 0.0) * g_23;
[   0.293][d][vo/gpu-next/libplacebo] [867]     result += mat4(-0.04317466, -0.018953001, -0.020452993, 0.0, -0.009322576, -0.03022352, -0.030970376, 0.0, 0.05653658, 0.05430553, 0.046692245, 0.0, 0.05615359, 0.059338935, 0.056018773, 0.0) * g_24;
[   0.293][d][vo/gpu-next/libplacebo] [868]     result += mat4(0.022878079, 0.03392234, 0.033057988, 0.0, -0.017554542, -0.0141542535, -0.014122613, 0.0, -0.048634093, -0.05316463, -0.047988772, 0.0, -0.058002178, -0.040221967, -0.034025013, 0.0) * g_25;
[   0.293][d][vo/gpu-next/libplacebo] [869]     result += mat4(-0.018253656, -0.04197674, -0.040467236, 0.0, -0.04358929, -0.028309818, -0.025425073, 0.0, -0.008488672, -0.001727991, 0.00035808363, 0.0, -0.0011709273, 0.0052514165, 0.0059479307, 0.0) * g_26;
[   0.293][d][vo/gpu-next/libplacebo] [870]     result += mat4(-0.08333935, -0.09818201, -0.09476284, 0.0, -0.033692095, -0.046259012, -0.045797516, 0.0, -0.007577072, 0.0022402718, 0.0016200038, 0.0, 0.0029786075, -0.020728534, -0.018938033, 0.0) * g_27;
[   0.293][d][vo/gpu-next/libplacebo] [871]     result += vec4(0.047567394, -0.02504617, -0.028163986, 0.0);
[   0.293][d][vo/gpu-next/libplacebo] [872]     return result + MAIN_tex(MAIN_pos);
[   0.293][d][vo/gpu-next/libplacebo] [873] }
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x3
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x3
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x1x1x112
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x1x1x112
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x1x1x112
[   0.299][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(VL)-Depth-to-Space
[   0.299][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.299][d][vo/gpu-next/libplacebo] [  1] // MIT License
[   0.299][d][vo/gpu-next/libplacebo] [  2] 
[   0.299][d][vo/gpu-next/libplacebo] [  3] // Copyright (c) 2019-2021 bloc97
[   0.299][d][vo/gpu-next/libplacebo] [  4] // All rights reserved.
[   0.299][d][vo/gpu-next/libplacebo] [  5] 
[   0.299][d][vo/gpu-next/libplacebo] [  6] // Permission is hereby granted, free of charge, to any person obtaining a copy
[   0.299][d][vo/gpu-next/libplacebo] [  7] // of this software and associated documentation files (the "Software"), to deal
[   0.299][d][vo/gpu-next/libplacebo] [  8] // in the Software without restriction, including without limitation the rights
[   0.299][d][vo/gpu-next/libplacebo] [  9] // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
[   0.299][d][vo/gpu-next/libplacebo] [ 10] // copies of the Software, and to permit persons to whom the Software is
[   0.299][d][vo/gpu-next/libplacebo] [ 11] // furnished to do so, subject to the following conditions:
[   0.299][d][vo/gpu-next/libplacebo] [ 12] 
[   0.299][d][vo/gpu-next/libplacebo] [ 13] // The above copyright notice and this permission notice shall be included in all
[   0.299][d][vo/gpu-next/libplacebo] [ 14] // copies or substantial portions of the Software.
[   0.299][d][vo/gpu-next/libplacebo] [ 15] 
[   0.299][d][vo/gpu-next/libplacebo] [ 16] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
[   0.299][d][vo/gpu-next/libplacebo] [ 17] // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
[   0.299][d][vo/gpu-next/libplacebo] [ 18] // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
[   0.299][d][vo/gpu-next/libplacebo] [ 19] // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
[   0.299][d][vo/gpu-next/libplacebo] [ 20] // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
[   0.299][d][vo/gpu-next/libplacebo] [ 21] // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
[   0.299][d][vo/gpu-next/libplacebo] [ 22] // SOFTWARE.
[   0.299][d][vo/gpu-next/libplacebo] [ 23] 
[   0.299][d][vo/gpu-next/libplacebo] [ 24] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x3
[   0.299][d][vo/gpu-next/libplacebo] [ 25] //!HOOK MAIN
[   0.299][d][vo/gpu-next/libplacebo] [ 26] //!BIND MAIN
[   0.299][d][vo/gpu-next/libplacebo] [ 27] //!SAVE conv2d_tf
[   0.299][d][vo/gpu-next/libplacebo] [ 28] //!WIDTH MAIN.w
[   0.299][d][vo/gpu-next/libplacebo] [ 29] //!HEIGHT MAIN.h
[   0.299][d][vo/gpu-next/libplacebo] [ 30] //!COMPONENTS 4
[   0.299][d][vo/gpu-next/libplacebo] [ 31] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.299][d][vo/gpu-next/libplacebo] [ 32] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.299][d][vo/gpu-next/libplacebo] [ 33] vec4 hook() {
[   0.299][d][vo/gpu-next/libplacebo] [ 34]     vec4 result = mat4(0.3053028, -0.037464816, 0.113983095, 0.12537485, -0.18630321, 0.084269725, -0.01351514, -0.20190673, -0.12298384, -0.037622184, -0.070214555, -0.19367279, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.299][d][vo/gpu-next/libplacebo] [ 35]     result += mat4(-0.41849324, 0.099702746, -0.04276645, -0.047299717, 0.20074473, 0.14217933, 0.15571699, 0.19553481, 0.21868695, -0.053848714, 0.016413521, 0.14117444, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.299][d][vo/gpu-next/libplacebo] [ 36]     result += mat4(0.030540446, -0.052293833, 0.0715466, -0.31160545, 0.07808315, -0.16860045, 0.032828577, -0.2955024, -0.110374965, 0.04043687, -0.014024628, 0.058699366, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.299][d][vo/gpu-next/libplacebo] [ 37]     result += mat4(-0.10727635, 0.054200135, 0.20853694, 0.21086875, 0.122690216, -0.091823794, 0.310609, -0.01738923, -0.0013488946, 0.10835534, -0.077265196, 0.086751856, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.299][d][vo/gpu-next/libplacebo] [ 38]     result += mat4(-0.77150255, 0.40530515, -0.41257596, -0.14367618, 0.46888494, 0.2650122, -0.934199, 0.40476102, 0.32293493, 0.20251967, 0.19891106, -0.29698747, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.299][d][vo/gpu-next/libplacebo] [ 39]     result += mat4(-0.12505147, -0.41904053, -0.065798186, 0.34075752, 0.026240354, -0.2977496, 0.032647505, -0.003566783, 0.10290523, -0.23417123, -0.06014203, 0.094735645, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.299][d][vo/gpu-next/libplacebo] [ 40]     result += mat4(0.11207838, -0.04062474, 0.023897955, 0.08605987, -0.020888371, 0.045541205, -0.07231824, -0.25884083, -0.11796847, -0.002691391, 0.0050435597, 0.02756291, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 41]     result += mat4(0.4615728, 0.041790638, 0.08971143, 0.20213957, -0.38537467, 0.19938901, 0.08594364, -0.08621994, -0.08163473, -0.133266, -0.09561729, -0.014209637, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 42]     result += mat4(0.0787417, -0.0483673, 0.07621572, -0.060169693, -0.013465177, -0.17152289, 0.02515561, 0.17675288, -0.05173998, 0.10768042, -0.029858522, -0.013957215, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 43]     result += vec4(0.0072128535, -0.05658625, 0.052939568, -0.1760861);
[   0.300][d][vo/gpu-next/libplacebo] [ 44]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [ 45] }
[   0.300][d][vo/gpu-next/libplacebo] [ 46] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x3
[   0.300][d][vo/gpu-next/libplacebo] [ 47] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [ 48] //!BIND MAIN
[   0.300][d][vo/gpu-next/libplacebo] [ 49] //!SAVE conv2d_tf1
[   0.300][d][vo/gpu-next/libplacebo] [ 50] //!WIDTH MAIN.w
[   0.300][d][vo/gpu-next/libplacebo] [ 51] //!HEIGHT MAIN.h
[   0.300][d][vo/gpu-next/libplacebo] [ 52] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [ 53] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [ 54] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.300][d][vo/gpu-next/libplacebo] [ 55] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [ 56]     vec4 result = mat4(-0.112743355, 0.0422517, 0.21350034, -0.0967133, 0.16265953, 0.0022497, 0.015078242, 0.08204187, 0.035236806, -0.0468228, -0.09464228, -0.001864949, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 57]     result += mat4(0.25631642, -0.41485596, -0.16662048, 0.13201024, 0.057921384, 0.2240005, -0.30038536, -0.08305622, 0.2228756, 0.32263795, 0.10608189, -0.18616734, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 58]     result += mat4(0.08997524, 0.11516871, 0.19212262, -0.035154644, 0.11612274, -0.04056247, 0.14974374, 0.029173585, -0.07629641, -0.14353512, 0.041081246, 0.20230265, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 59]     result += mat4(0.2262286, 0.055954933, -0.14499907, 0.17314723, 0.16590612, -0.06688698, -0.11118816, -0.012938116, -0.043101817, 0.026133137, 0.2958395, 0.06543993, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 60]     result += mat4(-0.07311521, -0.3041244, -0.47978505, -0.6350967, -0.17432262, 0.34965977, 0.25399777, -0.16590433, -0.49957857, 0.0549526, -0.40869385, -0.08780993, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 61]     result += mat4(-0.3014447, -0.00021343959, -0.14953177, 0.028001398, -0.14931908, -0.14910097, -0.13287953, -0.45026535, 0.17378895, 0.024704922, -0.027308129, -0.10292025, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 62]     result += mat4(-0.06732655, -0.13119644, 0.066014715, 0.081011154, -0.15154321, 0.2407805, 0.07733481, 0.12312706, 0.1741804, 0.008495716, -0.14125362, -0.043644864, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 63]     result += mat4(0.11465958, 0.42001364, 0.011069392, 0.3203028, -0.058801666, -0.37830314, -0.030540617, 0.2245139, -0.11310525, -0.14845212, 0.19957744, 0.25789997, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 64]     result += mat4(-0.16037206, 0.21326372, 0.020099448, 0.018666709, 0.122083254, -0.16033986, -0.10725163, 0.2556128, 0.1650688, -0.10475823, 0.048623525, -0.103755645, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 65]     result += vec4(0.007717166, -0.027800834, 0.0795002, 0.0053199283);
[   0.300][d][vo/gpu-next/libplacebo] [ 66]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [ 67] }
[   0.300][d][vo/gpu-next/libplacebo] [ 68] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [ 69] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [ 70] //!BIND conv2d_tf
[   0.300][d][vo/gpu-next/libplacebo] [ 71] //!BIND conv2d_tf1
[   0.300][d][vo/gpu-next/libplacebo] [ 72] //!SAVE conv2d_1_tf
[   0.300][d][vo/gpu-next/libplacebo] [ 73] //!WIDTH conv2d_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [ 74] //!HEIGHT conv2d_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [ 75] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [ 76] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [ 77] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [ 78] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [ 79] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [ 80] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [ 81] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [ 82]     vec4 result = mat4(-0.0056740534, -0.21186607, -0.18014967, 0.118979976, -0.0015611284, -0.07708486, 0.060131397, 0.11653345, 0.027150517, 0.10837246, 0.08583816, -0.14032431, 0.017552888, 0.0035846964, 0.03980114, 0.064649396) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.03289318, -0.12004539, 0.26514888, -0.15079662, 0.04214227, -0.027273783, -0.027950313, 0.19614808, 0.18510003, -0.10346252, -0.029836183, 0.09174428, -0.0088710375, -0.18273513, 0.06601674, 0.009983851) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.08476211, 0.043996535, 0.056711517, 0.009976895, 0.07039107, -0.024862664, -0.059921104, 0.046850603, 0.04983447, 0.04863198, 0.21777405, -0.0576961, 0.045321796, -0.0060038245, 0.096396215, -0.10842004) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.15746164, 0.041757874, 0.035169285, -0.1734288, -0.24219254, -0.13318908, 0.2272079, -0.02902605, 0.07750601, -0.1467191, -0.12296749, -0.07533314, -0.07073083, 0.17909113, 0.04789308, 0.17245363) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.057547905, 0.1464685, -0.33115456, -0.26956198, -0.26298407, -0.059824817, 0.022509675, -0.09251868, 0.36277944, -0.2072429, 0.21095088, -0.45492023, 0.07428653, 0.1593302, -0.2945834, 0.12825087) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.1318458, 0.27804148, 0.037600737, 0.12047866, 0.0065036337, 0.0017241207, 0.060497303, -0.14786585, -0.15149063, 0.02731698, 0.048886403, -0.0025970868, -0.026979815, 0.07348884, 0.015636757, -0.107966796) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.079988025, -0.01626299, 0.06517438, 0.086406484, -0.1484504, 0.070595, 0.20620634, 0.09713373, -0.13620836, 0.012067949, -0.00068703433, -0.038030174, 0.22300471, -0.0012400965, -0.014827909, -0.08927486) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(0.15634936, 0.052028038, 0.038081627, 0.12720168, 0.07342066, -0.04318368, -0.0065998454, 0.12109317, -0.45398173, 0.03666754, -0.17773737, 0.038516667, -0.13009632, -0.007457001, -0.013938809, 0.09776142) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.029636936, 0.12864171, 0.11347291, -0.11812842, -0.0870342, 0.035678383, 0.050338242, 0.045754932, -0.07072752, 0.010447726, 0.039642975, -0.08795004, -0.1191525, 0.00967509, 0.13485421, -0.053204738) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.011072695, -0.09613245, -0.09094804, 0.028029291, -0.04031162, 0.15690295, 0.25094184, -0.21776834, 0.06524669, 0.06412185, -0.052852992, -0.08097702, -0.039127756, 0.036357917, 0.104585476, 0.25095442) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.08328618, -0.006246033, 0.099708706, -0.014916097, 0.17727195, 0.4369228, 0.14760216, 0.06707674, 0.025167737, -0.022487842, -0.038962565, 0.15380669, 0.08125089, 0.09844594, 0.33538374, -0.003161368) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.0128195705, -0.05475118, -0.037705053, -0.0012077648, -0.17425515, 0.091487505, -0.12909423, 0.0074876705, 0.13438368, 5.778033e-05, 0.04563314, -0.12185897, -0.053612474, -0.049824294, -0.12851205, 0.12856449) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.025741795, 0.01867236, -0.00027440622, 0.10502768, 0.27042285, -0.14947751, 0.11143123, 0.2575913, -0.07414089, -0.33919522, -0.13194235, -0.20088726, 0.23121537, -0.08197353, 0.06693911, 0.015411386) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.09143717, 0.22842278, 0.06501074, -0.20009698, -0.042117566, -0.23452093, -0.074082755, -0.10612558, 0.077631965, 0.08343657, -0.07657599, -0.43297377, 0.7092466, -0.16272525, 0.17222248, -0.056038965) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.081200436, 0.046752565, 0.028254949, 0.18820632, 0.096592255, 0.05896745, 0.14845169, 0.034777895, 0.07195204, -0.1908046, -0.015341971, 0.02606145, -0.010377239, 0.0755547, -0.15285216, 0.047916733) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.06825636, -0.049540907, -0.024328846, 0.03506251, 0.2060094, 0.054119263, -0.06671269, 0.052428722, 0.055792283, -0.14336903, -0.03180757, 0.013760968, -0.037398104, -0.06880077, -0.023608573, 0.0360965) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.16937497, -0.30156836, 0.0021435453, 0.025772978, -0.17990975, 0.046133514, -0.32447076, -0.083382785, -0.081322014, -0.022132374, -0.05319431, 0.11794733, 0.08943906, 0.12927428, 0.105764806, -0.051034793) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.011012306, 0.047636557, 0.050260928, 0.051847618, 0.010985655, -0.13752967, 0.023869954, 0.07011459, -0.18244945, 0.07239806, -0.013638856, -0.026982805, 0.11395993, -0.031304818, -0.08714153, 0.077115685) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.08707592, 0.2265186, 0.13363098, -0.039588258, -0.029561255, 0.019238092, 0.024606103, -0.0019022018, -0.062285982, -0.0629511, -0.03753033, 0.109805316, 0.016018672, -0.08284564, -0.04092752, -0.030386891) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.0016500859, 0.01616536, -0.099148355, 0.24161765, 0.028064307, -0.028680569, 0.054400917, -0.1978921, -0.08584302, -0.096797146, -0.06546965, -0.09342837, 0.030265866, 0.07057579, -0.02080932, 0.053178705) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.030304352, 0.047440585, -0.04248429, 0.08568772, -0.051317703, 0.036739342, 0.00865767, -0.018183297, -0.07335176, 0.025001721, -0.068509035, 0.1814819, -0.09756565, -0.024179723, -0.05959287, 0.0352454) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.023015196, -0.022870664, -0.12028372, -0.111095205, 0.11065281, -0.19900022, -0.24012049, -0.017028643, -0.13484617, 0.050107025, 0.10741765, 0.037951697, 0.013090438, -0.0010045726, -0.029447839, -0.1859787) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.17922719, -0.24138594, -0.44595388, -0.032014426, 0.06897096, 0.07125395, 0.1944457, -0.035794795, -0.24022278, -0.13230884, -0.1277025, 0.21229011, -0.12249393, 0.06141907, 0.2687936, -0.26896995) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.0397242, -0.30710965, 0.28815824, -0.06642567, -0.07588877, -0.019552408, 0.0057806037, 0.11465521, 0.03560534, -0.10640553, 0.023589289, -0.16667193, 0.02066607, -0.01026633, -0.02655378, 0.082493655) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.007902949, -0.08501038, -0.029395591, -0.07072227, -0.01800967, -0.14564751, -0.08372804, -0.049974415, 0.1756957, -0.02042449, -0.04413007, -0.016873527, -0.2385717, -0.001741017, 0.08298281, -0.019873247) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.01803727, 0.0642893, 0.21513617, 0.066888265, -0.042107955, -0.123470366, 0.045296013, -0.11958806, 0.48208967, -0.027188249, 0.12136116, 0.05246265, 0.13522038, -0.016297493, 0.028486907, -0.059840377) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.1373251, -0.11281026, -0.06418318, 0.08444032, 0.062874556, -0.009133875, -0.049571835, -0.042995855, 0.12483249, -0.025967957, -0.11202483, 0.09862257, 0.099986054, 0.009230306, -0.09042664, 0.046612263) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.03203309, 0.106030256, 0.045741174, -0.020529225, -0.028610658, -0.055219248, -0.21404657, 0.07746393, -0.059359375, 0.0033258004, -0.0054513607, 0.06856653, 0.18043655, -0.119936846, -0.05639265, -0.10240379) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.0004331875, 0.10426754, -0.008130048, 0.012795991, -0.14372933, -0.40797862, 0.105197415, -0.0041354536, -0.079792455, 0.0914027, 0.012418237, -0.11449173, 0.020261409, -0.14681602, -0.13355242, 0.18290488) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [111]     result += mat4(0.052306626, 0.010864275, -0.072627716, -0.009773121, 0.09484167, -0.09631301, 0.14896165, -0.21220942, -0.11994051, -0.002957136, -0.118194886, 0.08661347, 0.10005298, -0.029620873, 0.101668894, 0.0242806) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [112]     result += mat4(-0.055188183, -0.06322889, 0.12994595, 0.03140751, -0.092755616, 0.04239107, 0.18460171, 0.08471877, 0.014203371, 0.13608724, 0.035351243, -0.07883493, -0.10067456, 0.14417742, 0.0054235114, 0.100745104) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [113]     result += mat4(-0.043811034, -0.16055201, -0.11927185, 0.20517266, 0.16734722, 0.27720267, 0.1205665, 0.045803893, -0.07874647, 0.06764307, -0.11157022, 0.080770165, -0.044105835, -0.03276538, -0.10945451, 0.100562036) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [114]     result += mat4(-0.044731796, -0.12854387, -0.061937924, -0.21604767, -0.036132332, -0.024353411, -0.16718283, 0.14903957, -0.11620588, 0.14563644, 0.23363836, 0.08400659, 0.15248756, -0.1424437, 0.112882614, -0.04096889) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [115]     result += mat4(-0.0486021, -0.05714939, 0.042517707, -0.06106919, -0.12970918, -0.071898215, -0.044727243, -0.026308542, 0.05687118, -0.0394057, -0.109454155, -0.0021216893, 0.018588595, 0.08061093, 0.0500373, -0.0034918839) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [116]     result += mat4(0.11269324, -0.17924047, -0.12965205, -0.07287767, -0.015830642, -0.044497102, 0.20014328, -0.14054494, 0.1232692, 0.2395109, 0.14093149, 0.03518561, -0.14088139, -0.09045081, -0.07283352, 0.053434785) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [117]     result += mat4(0.020512339, 0.026349569, -0.06666101, 0.05554806, -0.03044066, 0.26656216, 0.019155584, -0.12118906, 0.087923005, -0.1716557, 0.050843164, 0.037432503, -0.030232614, 0.030457936, 0.04232163, -0.066400655) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [118]     result += vec4(-0.0216415, 0.09015036, -0.030761974, -0.26541537);
[   0.300][d][vo/gpu-next/libplacebo] [119]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [120] }
[   0.300][d][vo/gpu-next/libplacebo] [121] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [122] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [123] //!BIND conv2d_tf
[   0.300][d][vo/gpu-next/libplacebo] [124] //!BIND conv2d_tf1
[   0.300][d][vo/gpu-next/libplacebo] [125] //!SAVE conv2d_1_tf1
[   0.300][d][vo/gpu-next/libplacebo] [126] //!WIDTH conv2d_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [127] //!HEIGHT conv2d_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [128] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [129] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [130] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [131] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [132] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [133] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [134] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [135]     vec4 result = mat4(0.04688368, 0.13853125, 0.1714716, -0.03034447, -0.08090605, 0.1225867, 0.17535992, 0.012508419, -0.0010665918, -0.07481546, -0.15541986, 0.0671128, -0.029307734, -0.076674186, 0.03925896, -0.07140553) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [136]     result += mat4(-0.13273083, 0.062933214, 0.04200143, -0.0080243945, -0.120439716, -0.090192355, -0.022639645, 0.00020024918, -0.11211478, -0.12949537, 0.025783822, 0.009155746, 0.01004339, -0.0661901, 0.10630156, 0.053137038) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [137]     result += mat4(0.07113487, -0.16011865, -0.10838903, -0.0034704183, 0.110606894, -0.14915739, 0.036511585, -0.003103608, -0.0551775, -0.13140677, 0.05270299, 0.12139221, 0.02226174, 0.008415268, -0.06647426, 0.118130066) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [138]     result += mat4(-0.045172617, -0.0020388453, -0.27287582, 0.002428232, -0.2833772, 0.13788106, 0.073339015, 0.10666715, 0.08455194, 0.16499293, 0.089058325, 0.008815447, 0.034657538, -0.109856166, -0.11499077, -0.02918854) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [139]     result += mat4(0.07910854, -0.26334837, -0.3246593, -0.08246522, 0.09211476, 0.40793833, -0.09658794, -0.14430091, -0.50632644, 0.087234974, 0.26298127, 0.3687086, 0.06492316, 0.23082961, 0.18233871, -0.09283792) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [140]     result += mat4(-0.022744032, 0.21690565, 0.2694824, -0.12230013, -0.07969618, 0.21595429, -0.034979805, 0.008938489, 0.21289209, -0.446482, -0.042927746, -0.13587558, -0.032581557, -0.07182814, -0.054092336, -0.009542036) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [141]     result += mat4(-0.0034912943, -0.080354184, -0.08577375, -0.1521193, 0.09809233, 0.034529503, -0.100664355, 0.008191219, -0.014303411, -0.02862216, -0.18669915, -0.12384598, 0.046499267, 0.093707144, 0.10661308, 0.15079576) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [142]     result += mat4(-0.031025652, -0.0384342, 0.14258307, 0.25531343, 0.0075049917, -0.03966595, 0.062381975, 0.19593526, -0.2868182, 0.03162008, -0.4391041, -0.524017, -0.034463473, -0.0066741486, -0.24586639, 0.10521736) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [143]     result += mat4(-0.07452321, -0.0227877, -0.025402244, 0.115727395, -0.039511252, -0.07785703, -0.013689458, 0.0066024344, -0.052957747, 0.011206241, -0.0021671024, 0.077190824, -0.11709912, 0.046635598, 0.123751156, -0.03712064) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [144]     result += mat4(0.055411004, -0.0020031065, 0.06685547, -0.018829947, -0.06378933, -0.18389674, -0.0023551763, 0.0670314, 0.13038594, 0.0601923, -0.03035789, -0.019537423, -0.014483204, -0.056800704, 0.08663347, -0.106859975) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [145]     result += mat4(-0.06603686, 0.07360526, -0.0072026253, -0.06778907, -0.039178446, 0.012397263, -0.13482279, 0.05745685, -0.055182382, -0.10545766, 0.003857615, 0.041947857, -0.15239377, 0.041826613, 0.058879383, -0.0042669442) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [146]     result += mat4(-0.0697229, -0.010702144, -0.032265816, 0.013317131, 0.105028264, 0.21032134, 0.06845646, -0.018358687, 0.064568676, 0.08437135, -0.000723181, 0.1324007, 0.05527932, -0.049871888, -0.10125047, -0.005040889) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [147]     result += mat4(-0.006467578, -0.05120533, -0.011780779, -0.011742203, -0.34242442, -0.020819988, 0.17381702, -0.059836414, -0.028882682, 0.23210457, 0.16579404, -0.03708216, -0.23541835, -0.03290251, 0.029319672, 0.26189178) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [148]     result += mat4(-0.30955994, -0.06408282, -0.16872866, 0.10767772, -0.041430887, 0.051697977, 0.12523535, -0.060389146, 0.026289431, 0.06359533, 0.13526368, 0.2479901, -0.3263977, 0.10216362, -0.0030894123, 0.046437826) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [149]     result += mat4(0.10061438, -0.17047118, -0.21593021, -0.023389054, -0.17507865, -0.30822313, -0.22044766, 0.16078933, 0.07099252, -0.11573018, 0.24712858, -0.0659458, -0.037504572, -0.12297423, 0.03342632, -0.058119852) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [150]     result += mat4(-0.020957774, -0.0224927, 0.04069268, -0.07911167, 0.074009344, 0.065916434, 0.008222278, 0.11625076, -0.25299504, 0.03357169, -0.021988, 0.015821831, -0.0021187372, -0.030700417, -0.004374924, 0.027358979) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [151]     result += mat4(0.06549052, -0.048067164, 0.05489091, -0.28851983, 0.13378961, 0.026875904, -0.09877994, -0.19947459, -0.1274035, -0.022928834, -0.26344195, -0.025870804, 0.022505255, 0.0070861108, 0.121051334, -0.025964163) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [152]     result += mat4(0.059426542, -0.0327433, 0.2313695, -0.07046268, 0.20479666, 0.027021704, 0.2564928, -0.11689885, -0.07407976, -0.019611249, 0.093463086, -0.121553615, 0.035009407, -0.008135333, -0.075931996, 0.047803063) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [153]     result += mat4(-0.059434246, -0.1652242, -0.124611154, 0.04743711, 0.10530296, -0.13869187, -0.036534663, -0.035206333, 0.06067593, 0.06126907, 0.120151915, -0.06722673, 0.008103894, 0.037225723, -0.007520425, 0.065720856) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [154]     result += mat4(-3.6759695e-05, -0.036789574, 0.013370567, -0.037871476, -0.013454664, 0.15086569, 0.10164699, 0.057703357, -0.12871023, 0.12827681, -0.055057358, -0.040753044, -0.0142621, 0.08563361, -0.04615499, -0.03130452) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [155]     result += mat4(-0.117965914, 0.09056485, 0.07272314, 0.009695964, -0.11331058, 0.07467256, -0.08291521, 0.00937355, -0.04097737, 0.07752905, -0.017335521, -0.12539999, 0.039462104, -0.0007037007, 0.06034812, -0.09497377) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [156]     result += mat4(0.20828065, 0.0400099, 0.047638226, -0.046423353, -0.026133502, 0.098207295, 0.056742374, 0.017029466, -0.058164768, -0.046973787, -0.17328712, -0.0012984811, 0.050085854, 0.11296557, 0.12639083, 0.058543045) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [157]     result += mat4(-0.098907426, 0.22031747, 0.101559944, 0.06616554, 0.026110496, 0.56487054, 0.23754556, -0.07540935, 0.31768414, -0.47653618, 0.015073956, -0.33731326, 0.087285936, -0.24593173, -0.26141426, 0.15003823) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [158]     result += mat4(0.046026446, -0.13767281, 0.064847544, 0.07717139, 0.08544123, -0.11092969, 0.072325274, 0.010849038, -0.3055905, 0.66436774, 0.1434729, 0.0494463, 0.07115603, 0.083811216, 0.020431712, 0.06537088) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [159]     result += mat4(-0.15532711, 0.030139687, 0.040853374, 0.11089222, -0.08150315, -0.015851755, -0.06787692, 0.096075505, -0.011956207, -0.0017758606, 0.1277494, 0.16156575, -0.038588695, -0.0626418, -0.041797023, -0.19467135) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [160]     result += mat4(0.12917455, 0.017410474, -0.20125067, -0.08040003, -0.13494664, 0.17789102, -0.19909395, 0.08441434, 0.078570575, -0.06330619, 0.23767303, 0.5442659, -0.009227878, -0.021818208, 0.14318731, -0.09042824) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [161]     result += mat4(0.097801, 0.09345441, 0.17846581, -0.14773296, 0.06536365, 0.07642184, -0.011880635, 0.02086135, 0.013336972, -0.053295113, -0.13410404, 0.027241753, 0.087728985, -0.044033397, -0.13098569, 0.009423933) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [162]     result += mat4(-0.02488427, 0.0134966355, -0.0075000813, 0.07272353, 0.015842725, 0.13765687, 0.028079558, -0.08384948, -0.06666623, -0.023220664, 0.025091043, -0.055167805, -0.18826278, 0.04423603, 0.13499942, 0.059128854) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [163]     result += mat4(0.01935146, -0.030980906, -0.031569187, -0.0036869382, 0.036753897, 0.118464164, 0.15871695, -0.09842428, 0.023324292, 0.071796335, -0.07869346, -0.10751301, -0.2588698, 0.064011686, 0.17386378, -0.039197855) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [164]     result += mat4(0.08590827, 0.005497696, -0.026512025, 0.015661815, 0.1102415, -0.08268483, -0.0032903247, 0.10049029, -0.008157236, -0.035823178, -0.017570151, -0.081716835, -0.3531045, 0.010005245, 0.017141227, -0.016376914) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [165]     result += mat4(-0.16617337, -0.007689783, 0.00954665, 0.07117733, -0.001669262, -0.012331606, 0.051613946, 0.062780835, 0.06123557, -0.20243123, -0.19181818, 0.032895602, 0.19760677, 0.004464939, 0.12754539, -0.27360034) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [166]     result += mat4(0.15006685, -0.083587274, -0.03215495, -0.16992462, -0.011944293, 0.058361508, -0.088097006, 0.023880545, -0.04168166, -0.06960282, -0.092672385, -0.057278465, 0.23540072, -0.1721208, -0.018213503, -0.23494521) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [167]     result += mat4(-0.124885194, 0.1905868, 0.11108704, 0.03163991, 0.11383064, 0.101223364, 0.069428995, -0.14298953, -0.07609092, 0.13704266, -0.07749446, -0.0005389336, -0.04617235, 0.18011934, 0.08350316, 0.09416366) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [168]     result += mat4(0.073356606, 0.067966126, -0.21285574, 0.0782625, -0.0034364646, -0.032581426, -0.05538558, -0.1317288, 0.14552782, -0.1132393, 0.13063973, -0.00833602, 0.0026844777, 0.028135289, -0.02536825, -0.028372496) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [169]     result += mat4(-0.318728, 0.07862527, -0.12176221, 0.35010242, -0.029198067, 0.016302662, 0.17667587, 0.12605923, 0.1556697, -0.06061443, 0.05843511, 0.10891248, 0.01267106, -0.018492714, -0.15945031, -0.050723754) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [170]     result += mat4(-0.21555941, -0.016813517, -0.084676236, -0.07545412, -0.14518794, -0.014592766, -0.2446481, 0.0530632, 0.0847341, 0.12342537, -0.028644923, 0.083479315, -0.04179012, 0.0025225023, 0.16006976, -0.026940256) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [171]     result += vec4(-0.060742114, -0.037577342, 0.055704296, 0.03134311);
[   0.300][d][vo/gpu-next/libplacebo] [172]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [173] }
[   0.300][d][vo/gpu-next/libplacebo] [174] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [175] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [176] //!BIND conv2d_1_tf
[   0.300][d][vo/gpu-next/libplacebo] [177] //!BIND conv2d_1_tf1
[   0.300][d][vo/gpu-next/libplacebo] [178] //!SAVE conv2d_2_tf
[   0.300][d][vo/gpu-next/libplacebo] [179] //!WIDTH conv2d_1_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [180] //!HEIGHT conv2d_1_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [181] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [182] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [183] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [184] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [185] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [186] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [187] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [188]     vec4 result = mat4(0.13129333, -0.022117995, -0.009753253, 0.020439912, 0.044090994, -0.0916335, 0.0036765633, -0.11719207, -0.06413809, 0.04079378, -0.00085516454, -0.06306388, -0.12660664, -0.054126263, -0.005513979, 0.06364538) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [189]     result += mat4(-0.028422508, 0.23270117, -0.28674677, -0.10820166, 0.024321957, -0.0811145, -0.07290707, -0.02125165, -0.064260505, 0.052076746, -0.009654081, 0.08363882, -0.02037171, 0.15006389, 0.121593125, -0.011237004) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [190]     result += mat4(-0.14672333, 0.015381624, 0.1028172, -0.041823238, 0.0072677187, -0.042953942, 0.06426537, -0.0938381, -0.05990813, -0.04599802, -0.11264726, -0.027826328, -0.058160868, 0.10747306, -0.07327458, 0.07998872) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [191]     result += mat4(-0.08702181, -0.03750975, -0.045659006, 0.04488332, 0.09102003, 0.066556975, -0.04353586, 0.08994567, -0.13561495, -0.10653702, 0.006989605, 0.028230097, 0.07177144, 0.2938447, -0.00943923, 0.022120917) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [192]     result += mat4(-0.1801194, -0.11119162, 0.1977298, -0.247902, -0.16654298, -0.07423158, 0.114130594, 0.0014401592, 0.006954727, -0.09810646, -0.051310766, 0.19487657, 0.2545855, -0.06328558, -0.04617056, 0.09444692) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [193]     result += mat4(0.011378825, 0.16044368, 0.017211074, 0.14472178, 0.032992378, -0.008925819, 0.035120245, -0.012409223, 0.074333005, 0.1178002, -0.128956, -0.13624239, -0.2791275, 0.21457297, -0.1476131, 0.04874687) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [194]     result += mat4(-0.03491764, -0.061763793, 0.05779039, 0.0054837577, -0.023937583, 0.08281698, 0.032306053, -0.014566218, 0.12738499, -0.0132100545, -0.051833414, 0.0057818824, 0.012158851, -0.20231532, -0.0043795826, 0.10285843) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [195]     result += mat4(-0.22269921, -0.15135509, -0.039143335, 0.033390045, 0.06770212, -0.14538582, -0.08011057, 0.03796648, -0.025913516, 0.13925864, 0.18309896, 0.012709204, -0.24912506, 0.3217706, 0.0394195, 0.017977878) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [196]     result += mat4(0.00080196525, 0.059145816, 0.05720508, 0.0056548906, 0.005168018, 0.09938438, 0.0200503, -0.05516137, 0.061309986, -0.019621318, -0.1541441, 0.019540716, 0.030571707, -0.09054893, 0.032851614, -0.27210873) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [197]     result += mat4(0.27061436, -0.114008114, -0.0020118617, -0.1656827, 0.09770587, 0.029897455, -0.03307522, -0.04661818, 0.033011347, 0.18498488, -0.05162084, 0.087471776, -0.24665618, -0.12538423, -0.08123797, -0.010210389) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [198]     result += mat4(0.075188264, 0.0020608555, 0.18558815, 0.041179713, 0.11232638, 0.05507779, -0.19599183, 0.027942855, 0.06199144, 0.22141005, -0.06121163, 0.014993597, 0.24105869, -0.019737717, -0.112485714, 0.0157406) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [199]     result += mat4(0.09425698, 0.0207658, 0.12074599, 0.009430481, 0.11889248, -0.025782838, 0.0034711843, 0.05113582, 0.012531833, -0.0018606635, -0.09137569, 0.018120576, 0.4051155, 0.02222076, -0.16001017, 0.10981527) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [200]     result += mat4(-0.03582557, 0.014994796, -6.4688604e-05, 0.24618183, -0.11697727, 0.24388117, 0.038502026, -0.3511993, 0.101741396, -0.10748137, 0.035059888, -0.017535849, 0.09450039, 0.06541661, 0.12149035, 0.28798738) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [201]     result += mat4(-0.27143848, 0.017990451, -0.69144464, 0.037944376, -0.04551905, 0.09263134, 0.4259611, -0.14107811, -0.10641847, 0.23065196, 0.040813655, -0.07789163, 0.3087666, 0.08190437, 0.16409059, -0.06455426) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [202]     result += mat4(-0.08290655, -0.35286915, -0.18082355, -0.32229406, 0.1608227, 0.030915622, 0.09207708, 0.02655054, 0.039464593, 0.026095424, 0.052584656, 0.033881903, -0.01751319, -0.0011676399, 0.04002607, 0.1630013) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [203]     result += mat4(-0.012021132, 0.12163766, -0.07410629, -0.06879096, 0.017859738, -0.039261997, -0.028677614, -0.23610398, -0.15963873, -0.0006119958, 0.11275506, 0.0082659265, 0.05677582, 0.08676638, -0.08669759, -0.10475464) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [204]     result += mat4(0.12792721, 0.06888765, 0.31803077, 0.26002547, -0.067599155, -0.011822328, -0.2589909, -0.30024147, 0.11076704, 0.15200609, -0.018180368, -0.19146141, 0.22298847, 0.059484895, 0.034478076, 0.15610938) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [205]     result += mat4(0.0870121, -0.016420847, -0.011579898, 0.097182855, -0.120095566, -0.06843338, -0.043460473, -0.060684606, -0.027540063, -0.008499213, 0.033570655, -0.06866259, 0.01429712, -0.07424434, 0.0009466247, 0.09142678) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [206]     result += mat4(-0.03781424, 0.04587032, 0.03744051, 0.02712279, -0.051038064, 0.0669144, -0.02640278, 0.12384894, -0.0022533627, -0.010022036, 0.07536463, -0.030489929, 0.09418577, 0.155089, -0.011290433, -0.02102941) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [207]     result += mat4(-0.0053278613, -0.07160643, 0.039028414, 0.04123311, -0.10693177, -0.1170874, 0.07230816, -0.033255517, -0.119176835, 0.0786526, -0.11880206, -0.11354601, -0.037539184, 0.14404313, 0.069760695, 0.024738638) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [208]     result += mat4(0.03413808, -0.006487654, 0.10006853, 0.22228058, -0.13796462, -0.14042488, 0.04017443, -0.031790894, -0.06673143, 0.009888688, 0.08831443, -0.0045771743, -0.028375361, -0.04704813, 0.07128581, -0.07012518) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [209]     result += mat4(-0.06954315, -0.23728988, -0.14192343, -0.08236467, -0.2552115, 0.04102959, -0.06355397, -0.08340241, 0.17617856, 0.20281969, -0.16249381, 0.10843737, -0.04392261, -0.08587206, 0.053069845, -0.15482199) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [210]     result += mat4(0.124981806, 0.12828638, -0.061472785, -0.20108232, -0.14905351, -0.40766275, -0.35427195, -0.13183996, 0.09307428, -0.07697028, 0.06702549, -0.22656697, 0.019868268, -0.19361132, 0.08784669, 0.20249842) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [211]     result += mat4(-0.004661343, -0.09333453, -0.24876262, -0.07906779, 0.110697776, -0.37069768, -0.042212646, -0.0046135853, -0.2254257, -0.023392014, 0.031476703, -0.045574382, -0.12675518, -0.076056994, -0.08228006, -0.040303517) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [212]     result += mat4(0.16182694, 0.0512523, 0.051189836, 0.048962783, -0.05156489, -0.17987493, -0.012037288, 0.06953726, -0.09458492, 0.1610021, -0.004063283, -0.032922342, 0.08995396, 0.1939926, -0.018710036, -0.08153231) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [213]     result += mat4(-0.064830944, 0.06121252, -0.18886387, -0.12976822, -0.031117212, 0.12219633, 0.19070715, 0.12495262, -0.11994464, -0.24687837, -0.08425294, -0.016920334, -0.13286817, -0.3260188, -0.11776061, 0.1651019) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [214]     result += mat4(-0.17652592, 0.002499805, -0.030541016, -0.01393431, 0.031418208, 0.08209422, 0.12430871, 0.4387016, -0.108871914, -0.09041422, 0.031226631, -0.1638517, 0.20756467, 0.014476537, -0.012701195, -0.03440563) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [215]     result += mat4(0.005320072, -0.0032291536, -0.017209187, 0.031944863, -0.2479921, -0.24433962, -0.13832912, 0.07835928, -0.17707248, 0.028202811, -0.19121435, 0.164587, 0.123152815, 0.0050288937, 0.084104605, -0.0380019) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [216]     result += mat4(0.16008669, -0.018608516, -0.013778938, 0.033447385, -0.01242472, -0.070916265, 0.026909694, -0.07318777, 0.15158044, 0.12047607, -0.1709358, 0.2031767, 0.0025611701, -0.21457459, 0.2791286, 0.10159932) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [217]     result += mat4(0.14320926, 0.020023825, -0.0484187, 0.011563084, -0.2640472, -0.013056275, 0.004234292, -0.095376395, 0.28363484, -0.0058227647, -0.0777649, 0.05238444, 0.41757923, -0.07081097, 0.012567031, -0.13029522) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [218]     result += mat4(0.07266207, 0.042793367, -0.08212271, -0.23401663, -0.19457819, 0.4191269, -0.03095442, 0.15339781, -0.28451788, 0.09316364, 0.10231693, -0.22844811, 0.111623526, 0.120017685, 0.18777381, 0.014420896) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [219]     result += mat4(0.15037206, -0.29763284, 0.2601235, 0.0193363, 0.13686465, 0.009907918, -0.37781665, 0.04916627, 0.14114739, 0.5043813, 0.0447959, -0.029427614, 0.041768756, 0.27211213, 0.14163221, 0.086162075) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [220]     result += mat4(0.19159287, 0.21363218, 0.15053211, 0.08992885, 0.100828275, 0.09379921, 0.030783929, 0.11664482, -0.059145752, -0.19400764, -0.09351283, -0.016430443, -0.12910964, -0.067078374, 0.11760082, 0.121194765) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [221]     result += mat4(-0.055059325, 0.09299572, 0.06848913, 0.06334532, -0.1476285, 0.111801244, -0.033960916, 0.06474366, -0.04952303, 0.27885208, -0.052447475, 0.09226763, -0.15024844, -0.0033919013, 0.013498364, 0.09135676) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [222]     result += mat4(-0.017010042, -0.122343406, -0.19097193, -0.27957183, -0.18206005, 0.102321096, 0.22794476, 0.0439245, -0.23710132, -0.08070259, 0.17377135, 0.23811814, 0.17799385, 0.049567625, 0.1470908, 0.07329385) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [223]     result += mat4(0.0038071256, 0.19454515, -0.01222965, -0.07390379, -0.0532754, 0.03942833, 0.123840906, 0.023459576, -0.0658742, -0.023957543, -0.14682837, 0.1221027, -0.010986398, -0.066184506, 0.03026491, -0.0638446) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [224]     result += vec4(-0.06427697, -0.00039365015, 0.011889719, 0.060232002);
[   0.300][d][vo/gpu-next/libplacebo] [225]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [226] }
[   0.300][d][vo/gpu-next/libplacebo] [227] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [228] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [229] //!BIND conv2d_1_tf
[   0.300][d][vo/gpu-next/libplacebo] [230] //!BIND conv2d_1_tf1
[   0.300][d][vo/gpu-next/libplacebo] [231] //!SAVE conv2d_2_tf1
[   0.300][d][vo/gpu-next/libplacebo] [232] //!WIDTH conv2d_1_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [233] //!HEIGHT conv2d_1_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [234] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [235] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [236] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [237] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [238] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [239] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [240] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [241]     vec4 result = mat4(-0.012110923, 0.07818654, 0.07964548, 0.11885079, -0.07694473, -0.01378252, 0.006632789, -0.12876098, 0.0069211307, 0.022278586, 0.069553085, 0.16569804, -0.11123615, 0.06125189, -0.11232848, 0.1559266) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [242]     result += mat4(-0.3261174, -0.25586754, 0.21129315, 0.3135101, 0.1509055, 0.0044283345, 0.024674175, -0.08000473, 0.01213029, 0.09093019, 0.04942677, 0.09806723, -0.16454464, -0.14433062, -0.058094524, -0.060819894) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [243]     result += mat4(0.023174008, 0.02858724, 0.07685972, 0.036857616, -0.10415571, 0.10241035, -0.01893166, 0.02065923, 0.058356714, 0.096426114, -0.03772327, -0.1529002, 0.13740575, -0.048291504, -0.06152548, -0.15199897) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [244]     result += mat4(0.029300174, -0.13222043, 0.0139825605, -0.02274408, 0.062944874, 0.028447356, 0.05960515, 0.034447193, 0.03133432, -0.019283533, -0.024591971, -0.0043914663, 0.15245225, 0.006851478, -0.051783554, 0.17453748) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [245]     result += mat4(-0.09125915, 0.081739366, 0.01196335, 0.23130219, -0.22557035, -0.13537665, 0.0022028848, -0.043430023, 0.22759882, 0.07920754, -0.027986467, -0.14051494, -0.19557038, -0.03585936, -0.4258294, -0.03856216) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [246]     result += mat4(0.18511422, -0.09368415, 0.1551229, 0.04322566, -0.023400841, -0.02261204, 0.15129441, -0.007954805, -0.10739125, 0.019459398, 0.013128325, 0.018073296, 0.20886365, -0.20662378, -0.03814699, -0.09272838) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [247]     result += mat4(-0.027352437, -0.039882626, 0.12598103, -0.093930446, 0.030846786, -0.09325075, -0.009084744, -0.024584265, 0.07159868, 0.14162529, 0.19019091, 0.058855128, -0.09880401, -0.01843218, 0.14753596, -0.2449532) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [248]     result += mat4(0.06565521, 0.09150168, -0.08654865, 0.0829788, -0.07596146, -0.01815166, -0.08786775, -0.03477514, 0.20538878, -0.012766377, 0.020719538, 0.088188395, -0.034300096, 0.29972988, -0.20005241, 0.018425167) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [249]     result += mat4(0.11713916, 0.024167519, 0.05167596, -0.0027117804, -0.016994188, 0.048177514, -0.012556207, 0.010979094, 0.09098878, 0.028514355, 0.06063336, -0.06624107, 0.012754856, 0.013208708, -0.061374772, -0.0025992664) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [250]     result += mat4(-0.09053513, 0.03183455, 0.017340872, 0.12934409, -0.022161964, -0.0015361432, -0.049972344, -0.12763855, 0.12779881, -0.04697911, 0.018968226, -0.119873665, 0.05462772, -0.13919477, -0.10226718, -0.2540179) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [251]     result += mat4(-0.29912186, -0.09291771, 0.050926663, 0.49361777, 0.21372582, 0.076717265, -0.058968987, -0.1572678, 0.3194591, -0.120582424, 0.03942037, 0.023128232, 0.24321598, 0.07046334, -0.21204855, -0.648296) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [252]     result += mat4(0.05366883, -0.020366706, 0.020979457, -0.06893884, 0.04837168, 0.017253762, 0.008874203, -0.020785445, -0.20425391, 0.060179923, 0.046167206, 0.09863377, -0.14381303, 0.038928367, -0.06590863, -0.18408588) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [253]     result += mat4(0.07099762, 0.2029403, -0.033945918, 0.15202214, 0.0901113, -0.27336198, -0.17693861, -0.16206753, -0.17642029, 0.09400492, -0.11165698, -0.07863893, -0.16306102, -0.056210615, 0.22173557, 0.013508989) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [254]     result += mat4(0.08541511, -0.27093616, -0.35273993, -0.48919773, 0.038383547, -0.16013749, 0.012996215, -0.03434873, 0.07024113, -0.28971404, 0.10623425, -0.0019642068, -0.062374946, 0.3291145, 0.22468035, -0.42971882) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [255]     result += mat4(0.020427933, 0.15062793, 0.08308975, -0.025095072, 0.030093266, -0.09649862, -0.03382388, -0.0016017791, 0.105402954, 0.020693144, -0.051065, 0.07704679, 0.02864139, -0.00135146, 0.03762216, 0.029277142) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [256]     result += mat4(0.01700994, 0.12214317, 0.06749582, 0.07354159, -0.093085855, -0.065021954, 0.010773045, -0.00095128635, -0.045384295, -0.072611265, -0.043900184, 0.049471326, 0.029131187, 0.03180158, -0.13313527, 0.05280797) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [257]     result += mat4(0.14751251, -0.15087761, 0.09932281, -0.099232934, -0.062390897, 0.112391844, -0.09159478, 0.15856399, 0.034708973, 0.01819943, -0.02730164, -0.13562973, -0.05687333, -0.0114601655, 0.07025971, 0.02496533) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [258]     result += mat4(-0.0117268525, -0.026162883, 0.07481553, 0.13420302, 0.029870516, 0.07405776, -0.06379041, 0.09631234, -0.07754842, 0.035888605, 0.0034764851, -0.040771756, -0.092022054, -0.034230903, -0.02281844, -0.0028173258) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [259]     result += mat4(-0.059846643, 0.016772347, -0.02287152, 0.07036337, -0.024946844, 0.09826078, -0.068491876, 0.20852126, 0.073890835, -0.058288682, 0.013093785, -0.05776076, 0.0516503, 0.052794468, 0.10837015, 0.038539834) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [260]     result += mat4(-0.16391893, -0.008062687, -0.35022175, 0.2510062, -0.15820411, 0.048403125, 0.024878092, 0.037888516, -0.035924178, -0.068953894, -0.025386479, 0.24405715, -0.018495679, -0.051277515, 0.14754932, -0.031538483) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [261]     result += mat4(-0.038429607, -0.047140498, -0.018157095, -0.029318782, -0.04094171, -0.11870087, 0.11214255, 0.07142628, 0.021007229, -0.005681072, 0.1662777, 0.10829575, 0.112268396, 0.03567479, -0.06738845, 0.0032037434) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [262]     result += mat4(-0.032217573, 0.2102397, -0.20617546, -0.07920811, 0.12918773, 0.054486286, -0.13656865, 0.05806265, 0.01963165, 0.049910642, 0.15538268, 0.10724465, -0.09697837, -0.03070673, -0.0071386313, -0.11899626) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [263]     result += mat4(0.130827, 0.0051715383, -0.07212691, 0.45726067, 0.2773031, 0.2973666, 0.3951691, 0.01333662, -0.14561643, 0.04508669, 0.121690124, 0.13326228, -0.22579186, 0.058161184, 0.09281702, -0.00079749606) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [264]     result += mat4(-0.00771113, 0.09912341, -0.41895548, -0.06705759, 0.029148718, 0.052991726, 0.18665347, -0.031787418, 0.23053595, 0.09444956, 0.10691037, -0.06325714, -0.05335701, 0.1917427, -0.0065284846, 0.032622546) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [265]     result += mat4(-0.056801565, -0.019131258, -0.0939022, -0.08130343, -0.11051993, 0.0035269214, -0.047361933, -0.0543875, 0.10854369, 0.06445185, 0.016828364, -0.022595318, 0.1450623, 0.033027507, -0.020425137, 0.16169788) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [266]     result += mat4(-0.08747717, 0.07770065, 0.018155783, 0.07160794, 0.09860347, -0.04329888, -0.0043579484, -0.2014418, -0.060260013, 0.0036374568, -0.17566042, -0.2268221, 0.001273691, -0.2609373, -0.19417606, -0.04102927) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [267]     result += mat4(-0.086845055, -0.114253804, -0.13433142, -0.025941795, -0.0155711295, -0.13578776, 0.12059696, -0.08760523, -0.0057348222, 0.12164273, 0.07270617, -0.06352636, 0.08894258, 0.04140841, 0.1230304, -0.030357126) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [268]     result += mat4(0.03320213, 0.015911903, -0.06288296, -0.121976145, 0.2713457, 0.13913193, -0.092420585, 0.105714336, 0.10294281, -0.04591945, -0.11767934, 0.032249406, -0.06506192, -0.04639334, 0.08137017, -0.031746846) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [269]     result += mat4(0.13717805, 0.0071242675, -0.077256985, -0.14974317, -0.08467893, -0.20126395, -0.06240603, 0.09554399, -0.075844854, 0.28380412, 0.046030026, 0.053188596, 0.50943077, 0.1179795, 0.32203588, -0.06712207) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [270]     result += mat4(-0.18528835, 0.0016975187, -0.0041140947, 0.11234392, -0.34049067, -0.056880493, -0.04325441, 0.09905571, 0.10978758, 0.009608353, -0.10801905, -0.04071131, -0.09096832, -0.12350487, 0.011801418, 0.22521795) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [271]     result += mat4(0.040283076, -0.034117915, -0.026142653, -0.06058959, 0.12511659, 0.4131219, 0.59190845, 0.39758852, 0.16032091, -0.5975032, -0.14516282, 0.115154505, 0.03874097, 0.18462797, 0.22934213, 0.05285643) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [272]     result += mat4(-0.17804009, 0.33769128, -0.14572927, -0.029545018, 0.3897, -0.055615567, 0.15232995, 0.48788264, -0.21422523, 0.03397293, 0.0337794, -0.19830915, -0.022457365, -0.35096076, 0.42616987, -0.19268763) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [273]     result += mat4(-0.13191561, -0.18337126, 0.017879983, -0.070472844, -0.09409196, -0.025770849, -0.060219247, 0.10869267, -0.17341033, -0.09199785, -0.0667796, -0.093538545, -0.21300837, 0.030474098, -0.04540468, 0.041321553) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [274]     result += mat4(-0.0998177, -0.08669185, -0.0090886615, 0.0021083376, 0.08900095, 0.5062186, 0.45537788, 0.029077586, -0.1001008, -0.0077697043, -0.0096318, 0.11706454, 0.07401959, -0.00650215, 0.06092762, 0.037442297) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [275]     result += mat4(-0.18500404, 0.0024998419, -0.11761331, -0.026825588, 0.27255726, 0.093010515, 0.3281413, -0.051473666, -0.050259475, -0.17258662, -0.23394547, 0.104795866, 0.035074063, -0.061560635, 0.05975411, -0.094255395) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [276]     result += mat4(-0.023440497, -0.021479638, 0.0036277648, 0.004972212, 0.02416659, -0.09856867, -0.03971455, -0.27094853, 0.026615402, -0.0047890246, -0.13755885, 0.16591635, -0.0016293586, 0.133207, 0.047790572, 0.029041538) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [277]     result += vec4(-0.0063728676, -0.029053684, -0.052831043, 0.006475641);
[   0.300][d][vo/gpu-next/libplacebo] [278]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [279] }
[   0.300][d][vo/gpu-next/libplacebo] [280] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [281] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [282] //!BIND conv2d_2_tf
[   0.300][d][vo/gpu-next/libplacebo] [283] //!BIND conv2d_2_tf1
[   0.300][d][vo/gpu-next/libplacebo] [284] //!SAVE conv2d_3_tf
[   0.300][d][vo/gpu-next/libplacebo] [285] //!WIDTH conv2d_2_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [286] //!HEIGHT conv2d_2_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [287] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [288] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [289] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [290] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [291] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [292] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [293] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [294]     vec4 result = mat4(-0.0431447, 0.047972627, 0.09522898, 0.19048582, 0.0015511789, 0.1182684, -0.065335006, 0.061233886, -0.02451869, 0.065670215, -0.015341636, 0.06836347, 0.10215459, 0.17516296, 0.0857072, 0.072732896) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [295]     result += mat4(0.10117189, 0.049022958, -0.016017418, -0.12119866, 0.089112304, 0.016286526, -0.025251161, 0.03239003, -0.0783818, -0.086096615, -0.13673106, -0.15934734, -0.51308054, -0.061430074, -0.16208844, 0.2227776) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [296]     result += mat4(-0.011567444, 0.025550444, -0.018439503, -0.015003767, 0.11606929, -0.11613111, -0.040906087, -0.015202219, 0.03932618, -0.1106059, 0.03703376, 0.018548314, -0.12761284, -0.038109995, -0.23577367, 0.20272344) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [297]     result += mat4(0.025444161, -0.075270735, 0.10999789, 0.16305386, 0.016178958, -0.074034974, 0.1177035, -0.077481024, -0.047774278, -0.029782977, 0.23137823, -0.2389453, 0.033015423, -0.10381626, -0.16437943, 0.20906886) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [298]     result += mat4(-0.098473966, 0.11013442, -0.18486807, 0.1907086, -0.17564997, -0.08509439, -0.42472756, -0.17446618, 0.3440862, 0.12719585, -0.12213955, -0.02246555, 0.18982963, 0.20809166, -0.36067408, 0.51116616) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [299]     result += mat4(-0.019805575, 0.07812505, 0.061653323, -0.08379226, 0.026396899, 0.009063019, -0.10845824, 0.0827647, 0.045301896, -0.07748021, -0.07435832, 0.14860612, -0.077515624, 0.010588131, -0.22704287, 0.26849246) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [300]     result += mat4(-0.02884339, -0.09512523, -0.038564682, 0.08862835, 0.041666254, -0.10532901, 0.040582962, -0.10063983, -0.15736029, -0.03644334, -0.005061672, 0.04302295, -0.046482194, -0.05262547, 0.05110866, 0.03204655) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [301]     result += mat4(-0.005932702, 0.033263832, 0.0044865874, -0.02328917, 0.056534443, -0.14084046, 0.022353357, 0.015087431, -0.2734596, -0.026544483, 0.06297078, 0.11277746, 0.06127936, 0.02466357, -0.04970561, 0.02098484) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [302]     result += mat4(0.013603583, 0.036264602, 0.10985147, 0.01532773, -0.09012781, 0.1132652, -0.17016481, 0.025332611, -0.077462606, 0.02990799, -0.10627784, -0.006231141, -0.089164406, -0.051507175, -0.043900985, 0.09049239) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [303]     result += mat4(-0.15391691, 0.1915742, 0.014101639, -0.022153432, 0.06291936, -0.017871676, -0.016763045, -0.14741553, -0.011252563, -0.20720159, -0.030648025, -0.0142307645, 0.010291614, -0.09243969, -0.052940153, 0.0061574522) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [304]     result += mat4(0.032283742, 0.030768922, 0.1070225, -0.027818602, 0.10032608, 0.0061178426, -0.03561339, -0.26687133, 0.14369439, -0.11362691, -0.08980895, 0.066520914, 0.33414948, 0.006998835, 0.09193012, -0.2857383) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [305]     result += mat4(-0.059588976, -0.02046844, -0.042585023, 0.031939838, 0.12796514, -0.06155685, 0.03540324, 0.009929082, -0.0039611827, 0.10790477, 0.049435645, -0.083034374, 0.23874004, -0.07460337, -0.020173345, -0.2006587) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [306]     result += mat4(-0.13217632, 0.052319963, -0.026713084, -0.0051368694, -0.10380872, -0.28659084, 0.0044393227, 0.005174543, -0.05092618, -0.07092548, -0.027397033, -0.01609789, 0.13699281, -0.14706929, 0.17737861, -0.23746766) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [307]     result += mat4(0.19268502, 0.14133929, -0.1305119, -0.4034132, 0.057504695, -0.24550998, -0.081932545, 0.45489246, -0.29331785, 0.19625074, 0.063166246, 0.15158689, 0.6715147, -0.4610189, 0.08921431, 0.17761138) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [308]     result += mat4(0.044718128, -0.011809122, 0.024131307, -0.30093196, -0.05607289, 0.047759805, 0.004210022, 0.098192796, 0.030430846, 0.008207501, 0.12266905, -0.10549182, 0.11584339, -0.091016166, -0.08635591, -0.13889709) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [309]     result += mat4(-0.19226642, 0.07147627, -0.14759602, 0.4041079, 0.0744628, -0.19612685, 0.1498252, -0.06273549, 0.017959936, 0.10858338, -0.14985329, 0.062042814, -0.13240446, -0.24362786, 0.113626175, -0.15332204) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [310]     result += mat4(0.08383099, -0.13935047, -0.25981048, 0.16491203, 0.07513876, -0.28346774, 0.19722275, -0.044425573, 0.020889329, -0.22140723, 0.025403097, -0.09183192, 0.014202567, -0.18666178, 0.062913105, -0.047674105) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [311]     result += mat4(-0.1862771, 0.25878942, -0.043018065, 0.22144824, 0.016088247, 0.12113542, -0.11965952, -0.01587184, 0.07830932, -0.16069177, 0.13421321, 0.018718706, 0.09548377, 0.018543294, 0.013614677, -0.1054485) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [312]     result += mat4(-0.2121733, -0.015635416, 0.027564054, -0.085904464, 0.064805664, -0.070543915, 0.08966146, -0.06359783, 0.01131311, 0.046913184, -0.09809833, -0.092063695, -0.087217696, 0.012411829, 0.0045399712, 0.027389864) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [313]     result += mat4(-0.19307798, 0.09449126, 0.084036835, 0.30262446, 0.011706106, 0.029800637, 0.04612629, 0.006186647, 0.11228541, 0.055147965, 0.17659879, -0.023410015, 0.19965266, -0.06684007, -0.081968054, -0.052410994) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [314]     result += mat4(-0.058564443, 0.08252549, 0.058217794, 0.0864448, -0.25663558, 0.080260284, -0.0010294432, 0.05830051, -0.07684524, 0.1820709, 0.04438993, 0.019178499, -0.12425012, -0.04596089, -0.010032888, -0.0012803525) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [315]     result += mat4(-0.43352658, 0.15262963, 0.25620222, 0.22428556, 0.09667152, 0.0037820593, -0.07951691, -0.11553085, 0.12982155, 0.17988266, -0.14283511, 0.074744284, 0.03604327, 0.00452661, -0.12865154, -0.020020623) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [316]     result += mat4(0.06850602, -0.18057181, 0.2093389, -0.07333886, 0.28406742, -0.048766967, 0.18114483, 0.47292945, -0.2340266, -0.06862712, 0.28263155, 0.3150323, -0.054724697, -0.16958356, 0.27928987, -0.19666018) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [317]     result += mat4(0.03281329, 0.0038649621, -0.07108877, 0.10791149, 0.15235375, -0.3083721, 0.168294, 0.10379698, 0.029038485, 0.16282903, 0.04483725, -0.018684763, 0.108186625, 0.027885616, -0.019351846, 0.1623065) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [318]     result += mat4(-0.110499054, 0.31347123, 0.030852, 0.01631416, -0.1466389, 0.080429435, -0.18689284, 0.10667815, 0.20645237, -0.18004708, -0.10570413, -0.15435064, -0.019000605, -3.126077e-06, 0.037761535, -0.015040956) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [319]     result += mat4(-0.023364332, -0.023399066, 0.2712722, 0.049637552, -0.10222765, -0.2698945, 0.20991959, 0.04921932, 0.21510898, -0.0751939, -0.19781734, -0.28162366, -0.041881047, 0.0065111094, -0.04102195, 0.0982682) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [320]     result += mat4(-0.032176614, 0.019144032, -0.08985387, 0.091637276, 0.1012352, 0.0003583357, 0.07897295, -0.09531175, -0.001155058, 0.074372366, -0.026186578, 0.07283374, 0.06052053, 0.009307753, -0.03874333, -0.06228009) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [321]     result += mat4(-0.022224072, -0.15717922, -0.1406057, -0.05941157, -0.028769474, -0.21226564, -0.036570027, 0.22266355, 0.14120889, 0.014577123, 0.10216447, 0.018429281, 0.056729726, -0.055834044, 0.058146577, -0.11999068) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [322]     result += mat4(0.009995364, -0.020045493, -0.0057422677, 0.0643022, 0.016475432, -0.030856136, 0.042140726, 0.15077904, -0.32955253, 0.0694449, 0.17931722, 0.3439302, -0.12484157, -0.10958869, -0.15755124, -0.09755644) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [323]     result += mat4(-0.008314924, 0.07704758, 0.043228816, -0.08110893, 0.099286236, -0.053224478, 0.22877018, -0.189486, -0.00798416, 0.018341504, 0.10734141, 0.0752633, -0.042524844, -0.086395286, 0.14299925, 0.026488977) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [324]     result += mat4(-0.052531082, 0.19139186, 0.12205995, -0.2573172, 0.15157184, 0.0073150825, 0.089774385, 0.06604469, -0.16528498, -0.002511137, 0.14287429, -0.07819732, 0.025014274, 0.15338829, 0.0761692, -0.02803716) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [325]     result += mat4(-0.21000335, 0.15277153, 0.08546171, 0.2816124, -0.16559112, -0.11068559, 0.47053605, -0.009787771, -0.0013089112, -0.06985127, 0.44743782, 0.25142467, -0.32670796, 0.044035822, -0.12545367, -0.2996084) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [326]     result += mat4(-0.11526387, 0.15654811, 0.099616654, 0.15473685, 0.21278231, 0.046207245, 0.117993094, -0.26825273, -0.12539764, 0.14013724, 0.17357737, -0.05387817, 0.076738276, -0.13339446, 0.15005626, -0.2108176) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [327]     result += mat4(-0.0008846504, -0.05998622, -0.028892396, 0.04784136, 0.0104263965, 0.10899508, -0.073364735, 0.077516064, -0.074248806, -0.21749993, -0.26203, 0.041161157, 0.09366407, -0.026498007, 0.0122177545, 0.03892727) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [328]     result += mat4(0.04349908, 0.13671173, 0.2242545, -0.028021423, -0.03802222, 0.0052366396, -0.010709643, 0.031290106, 0.06291333, -0.024909683, -0.15439379, -0.04502091, 0.2062182, -0.5983536, -0.09670497, -0.38446042) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [329]     result += mat4(-0.008962513, 0.13044207, 0.04964221, 0.012250417, 0.012129821, 0.019985713, -0.06421885, 0.009168735, -0.044516414, 0.071368866, -0.006634213, 0.06497366, 0.08578495, -0.10586125, 0.06628038, -0.14006054) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [330]     result += vec4(0.056541316, 0.041788545, -0.036094554, -0.021763096);
[   0.300][d][vo/gpu-next/libplacebo] [331]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [332] }
[   0.300][d][vo/gpu-next/libplacebo] [333] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [334] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [335] //!BIND conv2d_2_tf
[   0.300][d][vo/gpu-next/libplacebo] [336] //!BIND conv2d_2_tf1
[   0.300][d][vo/gpu-next/libplacebo] [337] //!SAVE conv2d_3_tf1
[   0.300][d][vo/gpu-next/libplacebo] [338] //!WIDTH conv2d_2_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [339] //!HEIGHT conv2d_2_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [340] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [341] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [342] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [343] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [344] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [345] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [346] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [347]     vec4 result = mat4(0.0647927, 0.053666476, -0.14723225, 0.027874574, -0.0003166473, 0.07337155, -0.061972085, -0.012667777, -0.17071614, 0.091927536, -0.051160213, 0.21336353, 0.13854574, 0.09582817, 0.032316446, 0.13838023) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [348]     result += mat4(-0.0398984, 0.108049214, 0.093780346, -0.022015186, -0.15188989, -0.1381083, 0.2998843, 0.21623154, -0.08862326, 0.025862623, 0.06895634, 0.13529755, 0.06957801, -0.0011681129, 0.105972745, -0.04722446) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [349]     result += mat4(-0.026321493, -0.04828038, -0.012545767, -0.005490858, -0.054038163, 0.075943105, -0.11526662, 0.022242405, -0.03543104, -0.12451852, -0.14911178, 0.013503498, 0.08773292, 0.09695139, -0.013498657, -0.27424073) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [350]     result += mat4(0.018575635, -0.11321618, -0.07853153, 0.04104883, 0.0018416744, 0.11579002, 0.03685964, -0.031546146, -0.1755398, 0.23517849, -0.08095411, 0.031999595, -0.18542038, -0.26171613, -0.20567231, -0.05683613) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [351]     result += mat4(0.1538556, 0.21723682, 0.12131733, -0.15308167, 0.103326, -0.006956118, 0.043583486, -0.23811384, -0.103285454, 0.05543916, -0.37894246, 0.32072112, 0.22651967, 0.03516268, 0.34612176, 0.23688535) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [352]     result += mat4(0.040021293, 0.0029912095, 0.04885362, 0.061496444, 0.016926387, -0.118446946, 0.038948335, -0.0934512, -0.25194243, -0.054018084, -0.07149527, 0.017903058, 0.0845516, 0.33802906, 0.11953944, -0.081294954) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [353]     result += mat4(-0.09558082, -0.36974236, -0.07524102, 0.11131445, 0.047626104, 0.12854609, -0.10264962, -0.044669047, -0.05572307, 0.34475142, -0.16806377, -0.0037204176, 0.03400533, -0.04047774, 0.024379745, 0.09056291) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [354]     result += mat4(-0.039392482, 0.2553437, 0.11705501, 0.03219211, 0.073977776, -0.16610906, -0.032796364, -0.054669864, -0.07123178, 0.00079619256, -0.36920992, -0.029054813, 0.12830003, 0.004987549, 0.08724278, -0.029499404) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [355]     result += mat4(0.021272454, -0.063295126, 0.011779576, 0.103093, -0.011095461, 0.027948728, -0.014605259, -0.04723974, -0.05334346, -0.044831257, -0.07296399, -0.03314197, -0.01687865, -0.09261895, -0.06128567, 0.092708185) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [356]     result += mat4(0.0077418387, 0.00871427, 0.060824487, 0.1093608, -0.021077013, -0.057341542, -0.04769576, -0.08144089, 0.0212823, -0.06731425, -0.04134463, -0.0016761447, -0.03402026, 0.036424547, 0.11689576, -0.14946719) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [357]     result += mat4(0.18536687, 0.020073935, 0.17041959, 0.024790209, 0.08397728, -0.13884324, 0.013950321, -0.055075396, -0.09317963, -0.05723721, -0.060491834, 0.0017911601, -0.109154835, 0.010338362, -0.1982491, -0.21752335) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [358]     result += mat4(0.031852514, 0.031424347, 0.07817056, 0.07770759, 0.019805199, -0.091223724, 0.11914662, 0.1673029, -0.018734453, 0.16275099, 0.23245652, 0.36139074, -0.1396047, -0.14774057, 0.13756078, -0.123794965) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [359]     result += mat4(-0.034937833, 0.20777488, 0.10104809, -0.035140667, 0.2536575, 0.010970045, 0.16896339, -0.081219964, -0.062478427, -0.0010431948, -0.027980985, 0.11446318, -0.127309, 0.21002083, 0.044436257, -0.16986957) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [360]     result += mat4(0.06309646, -0.042341243, 0.36642808, 0.18653205, 0.06973023, 0.06315932, -0.323688, 0.25672218, 0.042820994, 0.13792914, -0.12892757, -0.09220378, -0.18939693, 0.03862022, -0.17376114, -0.24673308) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [361]     result += mat4(-0.02130602, -0.35428852, -0.011634983, -3.9823462e-05, 0.110818714, -0.2981158, 0.060209107, 0.012538829, -0.0744833, -0.050204318, -0.12676497, -0.031484153, -0.28799182, 0.22338839, -0.070876874, -0.02102363) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [362]     result += mat4(-0.07929991, 0.014598492, 0.23034762, 0.024872296, 0.07480494, -0.17139243, -0.014421178, 0.056448363, -0.028626937, -0.022152562, 0.044871796, -0.048653606, 0.009350802, 0.019022083, -0.08554845, -0.0922645) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [363]     result += mat4(-0.027405115, 0.1831188, 0.28516722, 0.19882526, 0.27299204, -0.06910511, 0.03244419, -0.0031333128, 0.061055277, -0.114398144, 0.03729459, -0.07840815, -0.37776002, -0.24129418, -0.54815483, -0.2702045) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [364]     result += mat4(0.053723935, 0.13472083, 0.09563273, 0.19009806, -0.18722993, -0.25939655, -0.016197463, -0.067061596, 0.1647598, 0.061905228, 0.06191816, -0.018582113, -0.07218153, 0.11278394, 0.05478068, -0.104871586) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [365]     result += mat4(0.0036616288, -0.045782693, -0.226954, -0.05043515, -0.078096785, -0.036197383, 0.09269631, 0.016823346, -0.0060579977, -0.041455746, 0.09032774, -0.09217121, 0.058089796, 0.060311552, 0.033079024, 0.022586476) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [366]     result += mat4(0.0436363, -0.079482526, 0.0027447809, 0.039558932, 0.13275702, 6.898711e-05, -0.21961488, -0.11315821, 0.0076181027, -0.025279062, -0.15829584, -0.063141204, 0.062049046, 0.13117202, -0.02435016, 0.109555416) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [367]     result += mat4(-0.010148116, 0.056620967, -0.015910713, -0.07370375, 0.1529919, 0.005792597, 0.02771225, -0.17027487, 0.096740395, 0.063347995, 0.17823112, 0.054105148, 0.04995114, -0.28613812, 0.06369567, 0.15978208) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [368]     result += mat4(-0.13688345, 0.16967694, -0.061759472, 0.013682004, -0.1290496, 0.07167547, -0.065592445, -0.17897636, 0.057080988, 0.035630587, 0.09140394, -0.08695068, 0.16807681, 0.014749346, 0.07875138, 0.034913708) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [369]     result += mat4(-0.098915346, -0.31459075, -0.10892429, 0.1557498, -0.19764107, -0.26881596, -0.03589311, 0.45288458, -0.34171388, 0.12675741, 0.18415868, -0.19770056, 0.29025507, -0.15812592, 0.09685835, 0.0027761247) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [370]     result += mat4(0.06425249, -0.01169722, 0.06379363, 0.053835012, -0.07356561, -0.06367294, 0.108630784, -0.14137438, 0.08536725, -0.03209748, 0.07250959, -0.014214082, 0.07170588, -0.25647813, 0.1092683, 0.18791042) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [371]     result += mat4(-0.023783233, 0.14261739, 0.102011986, -0.03633555, -0.05032627, 0.09378387, 0.11764051, 0.1353335, 0.032817088, -0.1352964, -0.00667997, -0.13388929, 0.022861317, 0.0037358075, 0.018605746, -0.0009892831) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [372]     result += mat4(0.22419162, -0.23105696, -0.09900454, -0.15831396, 0.12398773, 0.097933106, -0.13189293, 0.1330756, -0.19673057, -0.037342317, -0.13462654, -0.08974021, 0.030326528, -0.0815862, -0.118352115, 0.009187904) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [373]     result += mat4(-0.012130391, -0.06408448, 0.13710785, -0.06678414, -0.09970725, -0.14895032, -0.02366641, 0.029581001, -0.07101809, 0.09414698, 0.018300869, 0.009139046, -0.0027311493, -0.2359952, -0.011602826, -0.007582444) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [374]     result += mat4(-0.15473361, -0.06868751, -0.030721204, -0.08650113, 0.071349874, -0.08177769, 0.1611948, 0.18305337, -0.0144878505, 0.10975452, -0.026968453, -0.04909913, -0.059665974, 0.056036238, -0.11623168, -0.10584912) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [375]     result += mat4(-0.096973225, 0.054132458, -0.010600018, 0.089397885, -0.0031138035, 0.037452973, 0.041115325, 0.1924831, 0.14759748, 0.032560788, -0.082884625, 0.0324635, -0.083511285, -0.050381303, 0.025589975, -0.0981257) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [376]     result += mat4(-0.09183111, 0.034952193, -0.048511654, 0.020719057, 0.1863456, 0.01902738, 0.14455654, -0.008500172, 0.16385981, -0.07806569, -0.031216217, -0.17002788, -0.08882952, 0.07335293, -0.2223089, 0.01706056) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [377]     result += mat4(-0.08361569, 0.046698716, -0.016646344, 0.09351987, 0.0054158634, -0.13641126, -0.12396605, 0.011380122, 0.040951792, -0.11222528, -0.0031548145, -0.0022303525, 0.0350846, -0.03280425, -0.09972476, -0.113325305) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [378]     result += mat4(-0.19961461, -0.27561286, -0.12783135, -0.062596925, 0.005870981, -0.24796526, 0.18717633, -0.16945636, -0.076396205, -0.08411448, 0.13751988, 0.21014418, -0.008655945, -0.09848541, -0.14536901, -0.2132181) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [379]     result += mat4(0.14118621, 0.20831147, -0.020545695, 0.008340737, 0.016840864, -0.16912372, -0.121718146, 0.15108089, -0.19803092, -0.07827729, -0.047639225, -0.12277847, 0.04974115, -0.09349339, -0.2756667, -0.19581003) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [380]     result += mat4(-0.0036992705, 0.16539848, 0.022026122, 0.07740234, -0.035687633, -0.004568715, 0.017408118, -0.09757294, -0.094941914, -0.3381112, -0.12724453, 0.025583982, -0.18571027, 0.047607586, -0.0704089, -0.055323426) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [381]     result += mat4(0.13821335, 0.028168043, 0.09990671, -0.032266147, -0.067236245, 0.11512147, -0.112986445, -0.10818019, -0.10062181, 0.21276556, 0.01681818, 0.069806606, 0.09628121, 0.06456379, 0.10394843, -0.02343886) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [382]     result += mat4(0.041937463, 0.072631165, 0.045366894, -0.0046993676, 0.03946691, 0.121010706, -0.030089365, -0.007266469, 0.0092267515, 0.14853416, -0.033248078, -0.027284347, -0.10031526, 0.15864117, -0.16782752, -0.18466589) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [383]     result += vec4(0.07722432, -0.025165567, 0.034291282, -0.09902708);
[   0.300][d][vo/gpu-next/libplacebo] [384]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [385] }
[   0.300][d][vo/gpu-next/libplacebo] [386] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [387] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [388] //!BIND conv2d_3_tf
[   0.300][d][vo/gpu-next/libplacebo] [389] //!BIND conv2d_3_tf1
[   0.300][d][vo/gpu-next/libplacebo] [390] //!SAVE conv2d_4_tf
[   0.300][d][vo/gpu-next/libplacebo] [391] //!WIDTH conv2d_3_tf.w
[   0.300][d][vo/gpu-next/libplacebo] [392] //!HEIGHT conv2d_3_tf.h
[   0.300][d][vo/gpu-next/libplacebo] [393] //!COMPONENTS 4
[   0.300][d][vo/gpu-next/libplacebo] [394] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.300][d][vo/gpu-next/libplacebo] [395] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [396] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [397] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [398] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.300][d][vo/gpu-next/libplacebo] [399] vec4 hook() {
[   0.300][d][vo/gpu-next/libplacebo] [400]     vec4 result = mat4(-0.004729794, -0.0124398535, -0.08538641, -0.058604605, 0.008671952, 0.25604513, 0.020800482, 0.24144122, -0.028920606, -0.04705229, 0.030192787, 0.0010597534, 0.017666103, 0.0041322373, 0.20027764, 0.08919112) * go_0(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [401]     result += mat4(0.0001626656, 0.05816014, -0.0060765734, 0.08811165, 0.35835367, -0.016291425, -0.56892496, 0.083845764, 0.15026698, -0.15916558, 0.08069463, -0.3931291, -0.0123534845, -0.111639686, -0.14637001, -0.08171439) * go_0(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [402]     result += mat4(-0.114976816, 0.023376396, 0.13855027, 0.07438716, -0.069991484, 0.20377779, 0.23929878, -0.040769435, 0.018832395, 0.005638609, -0.091848075, 0.027843866, 0.023744943, -0.06620523, -0.11678267, 0.0844119) * go_0(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [403]     result += mat4(0.0035854098, -0.08432094, -0.17799544, -0.10041983, 0.25605857, 0.021009786, 0.030499447, -0.09928291, 0.052178737, -0.08286175, -0.057888374, 0.024606042, 0.046342995, 0.13875343, 0.11279266, 0.19826262) * go_0(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [404]     result += mat4(-0.016232021, -0.21539623, 0.0936961, 0.021143785, 0.094262615, 0.049040064, 0.40978724, 0.15347758, 0.08884813, -0.24887115, -0.14756748, -0.5020875, 0.112477, 0.1466549, -0.33418837, 0.5769466) * go_0(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [405]     result += mat4(-0.16832942, -0.07354198, -0.12081261, -0.055348314, 0.39716053, 0.25583258, 0.09870877, 0.2151021, -0.025700683, -0.1801462, -0.04616654, -0.02782245, -0.054461803, -0.00042802413, -0.00163228, -0.004240747) * go_0(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [406]     result += mat4(-0.05193433, -0.0018198475, -0.17647028, -0.19462106, 0.1538165, 0.054894235, 0.12183955, 0.07340974, -0.0019901982, 0.0357373, -0.07597063, -0.06681543, -0.00090057997, -0.053894397, -0.010301875, -0.16553953) * go_0(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [407]     result += mat4(-0.30873474, -0.2836045, 0.057037193, -0.5016378, 0.11952749, 0.102353275, 0.2351629, -0.14635189, -0.019398788, -0.08776502, 0.021669978, -0.089918956, -0.2187901, -0.1180891, -0.049789533, -0.16109149) * go_0(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [408]     result += mat4(-0.078335494, -0.08867304, 0.03349591, -0.1000293, -0.20235832, 0.22917585, -0.09905303, 0.08381748, 0.014350217, -0.14478815, -0.027479894, -0.026432173, -0.10309177, -0.09860884, -0.019177807, -0.06963025) * go_0(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [409]     result += mat4(0.008169383, 0.12532842, -0.23369955, 0.077973194, 0.09076616, -0.021277165, 0.1721421, -0.26914293, -0.014729218, -0.023279984, -0.057670787, 0.003598546, -0.015225789, -0.0115396585, -0.26196182, -0.10724508) * go_1(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [410]     result += mat4(0.16542235, 0.06589374, 0.07410237, 0.26753154, -0.3356288, 0.3096256, 0.07112498, -0.0992165, 0.15020338, -0.11021673, 0.18803611, 0.12918204, 0.109007336, -0.031968266, 0.057093572, 0.035949256) * go_1(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [411]     result += mat4(0.065006174, 0.031055925, 0.0390232, -0.01678507, -0.21553491, 0.14171642, -0.19541772, -0.033691674, -0.06241631, 0.07497651, 0.024557155, 0.056778047, -0.060191352, -0.0261998, 0.07493729, -0.0699132) * go_1(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [412]     result += mat4(-0.008541382, 0.020270415, -0.027760057, -0.040962905, -0.26732433, 0.34379438, -0.23012447, 0.0051356517, -0.04059567, 0.0972959, 0.039965224, -0.14796777, -0.0016924662, -0.116963714, -0.026353523, -0.29799464) * go_1(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [413]     result += mat4(0.03329303, -0.12663862, -0.0004959157, -0.11162377, 0.26238343, 0.43260252, -0.16504994, 0.10727678, -0.22505566, 0.43474057, 0.43304008, 0.05143919, 0.40494493, 0.08689636, -0.035733614, 0.25727916) * go_1(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [414]     result += mat4(0.12175736, -0.014467151, -0.17461288, -0.18480565, -0.26439998, 0.307935, -0.058916792, -0.014292711, -0.0569471, 0.10751278, -0.04134206, 0.1847734, -0.07519831, -0.033909313, -0.05001451, -0.136606) * go_1(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [415]     result += mat4(0.1424893, -0.026820501, 0.19645774, -0.0011315406, -0.14680974, 0.07662838, 0.21108222, 0.13260938, 0.17923595, -0.085527614, 0.08217639, 0.06579479, 0.05985784, -0.09016323, 0.11172888, 0.111903176) * go_1(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [416]     result += mat4(0.19842595, 0.0093640275, 0.10433465, 0.13341904, -0.082806975, 0.22555825, -0.1315717, 0.11907785, 0.24012424, 0.47776055, 0.1835734, 0.17483878, 0.079803735, 0.01155073, -0.21146573, -0.16484722) * go_1(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [417]     result += mat4(0.15064004, 0.021381427, 0.18301587, 0.21225913, 0.054995645, 0.03212186, 0.052798916, -0.048424408, 0.03609021, 0.0964704, -0.059469886, -0.05133066, -0.08157349, 0.051145166, -0.09107608, -0.1362262) * go_1(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [418]     result += mat4(0.090521574, -0.014747857, -0.081675015, -0.118686825, 0.04848682, -0.033071827, 0.008534588, 0.023765508, 0.16849907, -0.21797262, -0.17049783, -0.07824179, -0.033794608, 0.052612655, 0.095820345, -0.07262317) * go_2(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [419]     result += mat4(0.22816367, -0.13772108, -0.036353834, -0.47638395, -0.0530902, 0.14089061, 0.076203234, 0.18006112, 0.121814854, -0.20750527, 0.08266107, -0.28634354, 0.14301859, -0.13458411, 0.00501663, -0.039783802) * go_2(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [420]     result += mat4(-0.103384845, -0.14389835, 0.08275834, -0.068423435, 0.22643796, -0.02966374, -0.2847584, 0.037081387, 0.02349005, -0.19353923, -0.00095957273, -0.13623689, -0.073120415, 0.03941467, 0.21864155, -0.014019576) * go_2(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [421]     result += mat4(-0.082576886, 0.17085212, 0.08971252, -0.04213377, -0.032548156, 0.022137715, 0.08399252, -0.0011743539, -0.09410863, -0.41728264, -0.20709297, -0.18933547, 0.027059928, 0.09743364, 0.2504647, -0.041173562) * go_2(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [422]     result += mat4(-0.20924084, 0.291118, 0.029851688, 0.16953468, 0.02936709, 0.12213576, 0.22944322, 0.108747594, 0.0001881129, -0.27398208, -0.009702691, 0.15449248, -0.9472944, -0.26114875, -0.28161275, -0.3495961) * go_2(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [423]     result += mat4(-0.12994622, -0.2758638, -0.1091727, -0.0968308, -0.14323105, 0.035175014, -0.08023811, 0.006023802, -0.031529594, -0.1486306, -0.3398172, -0.23240276, -0.29163983, 0.173475, 0.18809283, 0.22197202) * go_2(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [424]     result += mat4(0.048254848, -0.083444916, -0.014334202, 0.060992356, -0.023099286, -0.09492961, 0.05592045, 0.0026059286, 0.08998117, -0.108810075, -0.053304546, 0.045926623, 0.068255246, 0.099023566, 0.01595483, 0.1336309) * go_2(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [425]     result += mat4(0.21916585, 0.2837387, 0.14624594, 0.18843961, -0.06747584, 0.054924384, -0.082568415, 0.05011459, 0.014297759, -0.3884833, -0.054417178, -0.18970548, 0.088336475, -0.030646667, -0.2980552, -0.030035203) * go_2(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [426]     result += mat4(-0.02748568, -0.011897529, -0.2370837, -0.016740574, -0.0282112, 0.050353892, -0.10761107, -0.00036999505, 0.037646662, -0.17742962, 0.06489219, -0.158852, -0.08016933, 0.07808515, -0.105895035, 0.079869986) * go_2(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [427]     result += mat4(-0.0058994526, -0.037170693, 0.2574696, 0.06199102, -0.04497728, -0.10667442, -0.15183865, 0.0212881, -0.030842574, 0.073473394, 0.010764398, -0.00084518327, -0.03893014, -0.009649613, 0.07443129, 0.15108284) * go_3(-1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [428]     result += mat4(0.11325495, -0.096435815, -0.097331434, -0.049700152, -0.17231967, 0.047090057, -0.019111065, 0.104790315, -0.15004838, 0.13950798, 0.055996202, -0.070548095, 0.047154237, -0.007650949, -0.053611025, -0.012242293) * go_3(-1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [429]     result += mat4(0.12787002, -0.04958212, 0.053988468, 0.0017896162, 0.049493514, -0.009475431, -0.0022641935, 0.03933694, -0.005174597, 0.043754533, -0.1432976, 0.037084177, -0.04601288, -0.032077815, -0.059897035, 0.12584484) * go_3(-1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [430]     result += mat4(0.019409029, 0.10492923, 0.268368, 0.12597778, -0.17733063, -0.0085961, -0.27136415, -0.049664587, 0.012515404, -0.21444482, -0.39275557, -0.12297177, 0.06800057, 0.19228315, 0.06245887, 0.35772634) * go_3(0.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [431]     result += mat4(-0.16317715, 0.2288402, -0.23235172, 0.22230752, -0.1646375, 0.13366091, 0.16681044, -0.17399235, 0.33997267, -0.3179832, -0.34756508, 0.39843196, -0.10748536, 0.322923, 0.23339489, 0.08684083) * go_3(0.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [432]     result += mat4(0.02835275, 0.12314228, 0.24030593, 0.30856124, 0.055735108, -0.044914473, 0.0031432225, 0.07469899, 0.1778018, 0.107083894, -0.023706734, -0.15501897, 0.0943098, -0.034707237, -0.18622099, 0.05257965) * go_3(0.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [433]     result += mat4(0.042839274, 0.12597966, 0.08979042, -0.0647561, -0.050434645, 0.049438696, -0.20008127, -0.05572608, 0.046238814, 0.12622325, -0.019017145, -0.13960391, -0.040050175, 0.14298008, -0.20270552, 0.13391526) * go_3(1.0, -1.0);
[   0.300][d][vo/gpu-next/libplacebo] [434]     result += mat4(-0.0073277587, 0.10606624, -0.08940439, -0.09656414, 0.12387374, -0.0013147948, 0.23607181, -0.00037969893, 0.050353236, -0.17266603, 0.27796733, -0.09877832, 0.02711225, 0.096394345, 0.07457944, 0.21541388) * go_3(1.0, 0.0);
[   0.300][d][vo/gpu-next/libplacebo] [435]     result += mat4(-0.18612787, -0.00027517386, -0.17136407, -0.06413671, 0.025629476, -0.04570916, 0.0008431566, -0.03419168, 0.08123608, 0.09465922, 0.11975521, 0.1269741, 0.08413221, 0.12125001, 0.04727287, 0.072378494) * go_3(1.0, 1.0);
[   0.300][d][vo/gpu-next/libplacebo] [436]     result += vec4(0.04244928, -0.014280219, 0.017129054, -0.08807801);
[   0.300][d][vo/gpu-next/libplacebo] [437]     return result;
[   0.300][d][vo/gpu-next/libplacebo] [438] }
[   0.300][d][vo/gpu-next/libplacebo] [439] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.300][d][vo/gpu-next/libplacebo] [440] //!HOOK MAIN
[   0.300][d][vo/gpu-next/libplacebo] [441] //!BIND conv2d_3_tf
[   0.301][d][vo/gpu-next/libplacebo] [442] //!BIND conv2d_3_tf1
[   0.301][d][vo/gpu-next/libplacebo] [443] //!SAVE conv2d_4_tf1
[   0.301][d][vo/gpu-next/libplacebo] [444] //!WIDTH conv2d_3_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [445] //!HEIGHT conv2d_3_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [446] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [447] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [448] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [449] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [450] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [451] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [452] vec4 hook() {
[   0.301][d][vo/gpu-next/libplacebo] [453]     vec4 result = mat4(0.01973856, -0.05053795, 0.015545361, 0.10867395, 0.33441806, 0.14731607, 0.6793983, -0.21394718, -0.00846322, 0.09146322, -0.07427475, -0.078477465, -0.090998545, 0.133366, 0.105515696, -0.13784988) * go_0(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [454]     result += mat4(-0.05404873, 0.09784018, -0.1337389, -0.18082313, 0.13461179, -0.3816801, 0.12209786, 0.08176651, 0.10461896, -0.43315184, 0.017470734, 0.20423968, -0.03941875, -0.101959296, -0.09440259, 0.09154717) * go_0(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [455]     result += mat4(0.17229515, -0.06907825, -0.008382803, -0.16671611, -0.01576541, 0.03985307, 0.08209482, -0.11707446, -0.11793074, 0.13702396, -0.02013158, 0.07302033, -0.022301994, -0.11464677, 0.036753565, -0.093276784) * go_0(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [456]     result += mat4(-0.017650167, 0.009475923, -0.17856382, 0.15925962, 0.06434641, -0.15568036, 0.038135886, 0.18855911, -0.04427734, 0.1878215, 0.10856261, 0.0041275816, -0.12046199, 0.13610138, 0.3741596, -0.12934728) * go_0(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [457]     result += mat4(-0.24631616, 0.0169485, -0.035534818, 0.37795424, -0.08546174, 0.07817259, 0.42897213, -0.47965595, -0.0146556785, -0.20510523, -0.18889453, 0.06476019, 0.1021008, -0.35398817, -0.031071864, -0.21416448) * go_0(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [458]     result += mat4(0.32810766, 0.050585747, -0.17658374, -0.13881154, 0.16417882, -0.21286008, -0.106835455, -0.1722344, -0.14151084, 0.08962986, 0.057395387, -0.01623662, 0.02570415, 0.15626897, -0.12687978, 0.080729105) * go_0(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [459]     result += mat4(-0.050597478, -0.018753758, -0.036346875, -0.017908493, 0.058593344, 0.008303028, 0.05254987, -0.06635018, -0.022532012, 0.029511122, 0.026682215, -0.054647952, 0.069466785, -0.08892492, 0.025351115, -0.023130694) * go_0(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [460]     result += mat4(0.2412473, -0.16138165, -0.15117447, 0.11851003, -0.096868426, 0.082690425, 0.27923304, 0.11590443, 0.19363573, -0.15770023, -0.066793665, 0.011681678, 0.14037277, -0.112065665, -0.048159517, 0.009453693) * go_0(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [461]     result += mat4(0.1580054, -0.0060506654, 0.05267837, -0.09178131, -0.09107123, 0.23191126, 0.21108283, -0.070422985, 0.024321035, 0.06131459, 0.066626504, 0.032481454, 0.044402298, 0.1390604, -0.14432502, 0.040869843) * go_0(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [462]     result += mat4(0.10264861, 0.013504324, 0.012482852, -0.1781206, -0.12799414, -0.27026084, -0.123830505, 0.098105, -0.039127555, 0.09367889, 0.122323096, 0.1416734, 0.044763107, -0.21801683, -0.14018978, 0.17646866) * go_1(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [463]     result += mat4(0.017453065, 0.11498537, -0.10998983, -0.3116098, -0.3099762, 0.5024706, 0.051817298, 0.03170681, -0.18937826, 0.07946567, -0.11978771, -0.09523745, -0.0033551592, -0.11768945, 0.08932359, -0.06689581) * go_1(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [464]     result += mat4(0.1507582, -0.013266159, -0.073085934, -0.07252967, -0.06301927, -0.13218755, 0.12984878, -0.13678701, 0.023422396, 0.082123175, 0.006906731, -0.004018426, -0.15813835, 0.13711788, 0.016018609, 0.13443229) * go_1(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [465]     result += mat4(-0.06960673, 0.16156524, -0.1374069, -0.05803206, -0.077960715, -0.10676749, 0.26282015, 0.03521529, 0.058099385, -0.014738148, 0.0011174522, 0.24279532, -0.023991548, -0.108812414, -0.08886019, 0.20584475) * go_1(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [466]     result += mat4(-0.08043308, 0.063343, 0.055290066, -0.15991378, -0.08096304, -0.23888679, 0.019161629, 0.38381267, 0.3672934, -0.119608454, -0.43623593, -0.46014485, -0.5323366, 0.1318621, 0.087373205, -0.05535459) * go_1(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [467]     result += mat4(0.20640239, -0.1369444, -0.21677823, 0.08202178, 0.10515278, 0.06810837, 0.073207974, 0.23623931, 0.102422275, -0.05016664, -0.0039228587, -0.1810343, -0.2235563, -0.1246854, 0.1428113, -0.10609135) * go_1(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [468]     result += mat4(-0.031941894, -0.08905056, 0.21501167, 0.11244667, -0.011811734, 0.21630247, 0.07589472, -0.040489636, -0.11824066, -0.11520391, -0.10075633, -0.035642453, 0.062144946, 0.0073282206, 0.14119269, -0.060479023) * go_1(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [469]     result += mat4(-0.29382935, -0.056808118, 0.051812876, -0.061358813, -0.08344258, 0.124203674, 0.037964176, -0.01961274, -0.000951725, 0.50005037, -0.24176972, 0.06487161, -0.15469861, 0.04336187, 0.17826353, 0.040010225) * go_1(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [470]     result += mat4(0.02044482, -0.0879271, -0.01053958, -0.31148303, 0.07497373, -0.11548258, -0.1666126, 0.02369657, -0.058044076, 0.010801491, -0.005933901, -0.08910467, 0.007953008, 0.03761974, -0.029501524, 0.16816042) * go_1(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [471]     result += mat4(0.1779597, -0.10213089, 0.29942423, -0.016642543, -0.015537001, -0.04676146, 0.09585872, -0.0055750017, -0.014361908, -0.20667697, -0.11348746, 0.13081487, -0.10437329, 0.14328459, 0.11648822, -0.09163837) * go_2(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [472]     result += mat4(0.019033967, -0.12420627, -0.07748253, 0.43203858, -0.109799065, 0.07605535, 0.060791396, -0.24517195, -0.15674245, 0.21267459, 0.10665515, -0.073150024, -0.1358355, 0.0054066703, -0.16434059, -0.06031853) * go_2(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [473]     result += mat4(-0.18834068, 0.26840356, -0.12937617, 0.16103932, -0.0062331813, -0.13630053, -0.013911821, 0.022389365, -0.044232946, -0.056454606, 0.022426741, 0.18010215, 0.041900013, 0.03375041, -0.11376866, -0.010313381) * go_2(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [474]     result += mat4(0.12497669, -0.31161824, 0.097568035, 0.19443443, -0.05056519, -0.0031457904, 0.1055554, -0.083650924, 0.07630523, -0.34177595, -0.093093194, 0.20701368, -0.030962149, -0.054470222, -0.23853977, 0.004326528) * go_2(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [475]     result += mat4(0.34370202, 0.085750066, -0.16071722, -0.54335934, -0.35595295, -0.050744478, -0.17405547, 0.008628697, -0.007086256, 0.23164117, 0.340156, 0.5475976, -0.15292351, 0.28019544, 0.038059216, 0.0044727) * go_2(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [476]     result += mat4(-0.08231968, -0.0052294536, 0.07451547, 0.22278999, -0.3305531, 0.0017458396, 0.10818422, -0.21325395, -0.08807993, -0.110342845, 0.10082142, -0.051594347, 0.24192205, -0.18042035, -0.0095462985, -0.08757798) * go_2(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [477]     result += mat4(0.096379586, 0.021887815, -0.05097233, -0.06797989, -0.026171045, 0.022944937, -0.015915364, 0.037667938, 0.17216732, -0.014889412, 0.07343887, 0.028236505, 0.0015047621, 0.1355103, -0.09918284, -0.07673695) * go_2(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [478]     result += mat4(-0.25385055, 0.15163356, 0.0030003798, 0.18464413, 0.05611221, 0.099498056, -0.07128191, 0.042955168, 0.027493173, 0.07440157, 0.07814497, 0.096160784, 0.13571084, 0.056412842, -0.031997006, -0.16073681) * go_2(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [479]     result += mat4(-0.21634746, 0.025153082, -0.064477116, 0.0005679147, -0.0029436245, 0.12794618, 0.024849026, 0.03018052, 0.11723976, 0.059955597, -0.013594654, 0.09091745, 0.04775348, 0.21260159, -0.07463213, -0.06727042) * go_2(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [480]     result += mat4(-0.12166018, 0.024545137, 0.08611618, -0.17627168, 0.09042604, -0.14157623, -0.22147785, 0.09100581, 0.11078359, 0.031410985, -0.17170976, 0.09532806, -0.059569277, 0.09392676, 0.11784347, -0.21471368) * go_3(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [481]     result += mat4(0.1483187, -0.2217563, 0.12032977, 0.14932398, 0.27428308, -0.04568031, 0.12670338, 0.09586169, 0.06700745, 0.005126449, 0.0027694793, -0.033667028, 0.06447861, -0.08585174, -0.05509812, -0.11358761) * go_3(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [482]     result += mat4(-0.22750492, 0.032906335, -0.029479047, 0.11580199, -0.05812372, -0.032269973, 0.05219915, 0.041658226, 0.010897959, 0.065550454, 0.0076911976, -0.045743827, 0.11614996, -0.10393113, -0.0012606392, -0.034367524) * go_3(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [483]     result += mat4(0.09350742, 0.09561609, 0.3735968, 0.031685118, -0.042026598, 0.17006761, -0.3910107, 0.16984761, 0.25679177, 0.036610503, -0.13772772, 0.11101589, -0.1137049, 0.07211461, 0.18065079, -0.12324793) * go_3(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [484]     result += mat4(-0.020749722, 0.14413361, -0.061903823, -0.21550268, 0.31306142, -0.11532895, 0.029482557, 0.03282164, -0.09800627, -0.20765196, 0.33030233, 0.075725295, 0.49252015, 0.042455837, -0.07264194, -0.10401895) * go_3(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [485]     result += mat4(-0.22697076, -0.15738785, 0.09740376, -0.072098814, -0.06638972, 0.12336611, 0.0073687397, 0.048267826, 0.06717852, -0.027047804, -0.123397194, 0.17829034, 0.04215185, 0.066311836, -0.061742183, -0.046373066) * go_3(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [486]     result += mat4(0.041311592, 0.2813485, 0.055084586, -0.01823069, 0.08105147, -0.087944716, -0.10135052, -0.02653456, 0.063169874, -0.1351186, 0.06722432, -0.016406318, 0.08666922, 0.0555909, 0.12086502, -0.17224412) * go_3(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [487]     result += mat4(0.26026788, -0.18303715, 0.029279215, -0.12858874, 0.027197823, 0.0919464, 0.00849638, 0.10547888, -0.12952055, -0.14414985, 0.1903315, 0.05004528, -0.12657289, 0.038008716, -0.036606666, -0.054025438) * go_3(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [488]     result += mat4(0.069167465, 0.2699947, -0.11137602, -0.05888806, -0.107324794, -0.07598601, 0.06042177, 0.0064530694, -0.039780665, -0.076666445, -0.00846108, -0.06165907, -0.06978219, -0.19108103, -0.040026028, -0.120319635) * go_3(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [489]     result += vec4(-0.14375664, -0.0056876075, 0.052177623, 0.07152566);
[   0.301][d][vo/gpu-next/libplacebo] [490]     return result;
[   0.301][d][vo/gpu-next/libplacebo] [491] }
[   0.301][d][vo/gpu-next/libplacebo] [492] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.301][d][vo/gpu-next/libplacebo] [493] //!HOOK MAIN
[   0.301][d][vo/gpu-next/libplacebo] [494] //!BIND conv2d_4_tf
[   0.301][d][vo/gpu-next/libplacebo] [495] //!BIND conv2d_4_tf1
[   0.301][d][vo/gpu-next/libplacebo] [496] //!SAVE conv2d_5_tf
[   0.301][d][vo/gpu-next/libplacebo] [497] //!WIDTH conv2d_4_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [498] //!HEIGHT conv2d_4_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [499] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [500] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [501] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [502] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [503] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [504] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [505] vec4 hook() {
[   0.301][d][vo/gpu-next/libplacebo] [506]     vec4 result = mat4(-0.15667982, -0.31441393, 0.29112124, -0.15737213, 0.022372838, 0.10690639, -0.12019085, -0.051941186, -0.30367845, 0.02612279, 0.2372532, 0.2021648, -0.20481086, -0.003770439, 0.14981231, 0.066780254) * go_0(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [507]     result += mat4(0.03270688, -0.42270073, 0.044317324, 0.15907793, 0.14681059, -0.2934784, 0.24933252, -0.067273855, 0.07752533, -0.23194817, 0.0686707, 0.08999225, 0.121678345, -0.12916678, 0.012397381, 0.012315053) * go_0(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [508]     result += mat4(-0.10090412, -0.20792678, 0.11076032, -0.02938975, -0.1944187, -0.2003259, 0.04438032, 0.36946484, -0.019868722, -0.15830222, 0.042811528, 0.015641417, 0.113098525, 0.080257006, 0.011135628, -0.2877629) * go_0(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [509]     result += mat4(0.15482685, 0.06579119, 0.28301102, 0.23729764, 0.15990537, 0.4529694, 0.107880585, 0.10668121, -0.42430598, -0.2631025, 0.10513542, -0.036242936, -0.09827965, -0.0069260495, -0.11689201, -0.041436482) * go_0(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [510]     result += mat4(0.08472191, -0.13051608, 0.047930017, 0.36831668, 0.1164478, 0.21384816, 0.22062506, 0.2094167, 0.48668453, 0.32302913, 0.36268055, -0.091801375, -0.079141125, -0.26613805, -0.16608004, 0.03810683) * go_0(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [511]     result += mat4(-0.13474251, -0.04824603, 0.23303726, -0.116136365, 0.0056330245, 0.15829784, 0.0012259148, 0.12648389, 0.038680512, 0.05131116, 0.024099711, 0.4555406, 0.0035716395, 0.11633299, 0.094744846, -0.2457627) * go_0(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [512]     result += mat4(-0.0576871, -0.04037522, 0.16857862, 0.0031084458, -0.027274646, -0.18154246, 0.13337846, 0.035422433, -0.0030749738, -0.17288287, 0.019983152, -0.31871706, -0.03280405, 0.06825421, -0.1563798, 0.05031885) * go_0(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [513]     result += mat4(-0.066631876, 0.012560506, 0.1690693, -0.018248236, 0.0450104, 0.016296914, -0.14910112, -0.16191053, 0.5078224, -0.017615631, 0.15226597, -0.13373777, 0.20148668, 0.060258996, 0.13215344, 0.18430072) * go_0(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [514]     result += mat4(0.12976126, -0.072738245, 0.053067926, 0.09752956, -0.04716214, 0.04136464, 0.014162617, -0.06621296, -0.09617736, 0.057469178, 0.01280261, -0.042976785, -0.12570308, 0.006027807, 0.031038594, 0.06569918) * go_0(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [515]     result += mat4(-0.12655424, -0.41563693, -0.030971345, -0.06357555, -0.14121394, -0.15667427, 0.14398985, 0.05995984, 0.0821605, 0.12462943, 0.007492498, -0.0030187522, -0.22804567, -0.10487421, 0.13180672, -0.13978589) * go_1(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [516]     result += mat4(-0.075991526, 0.12352044, -0.17844258, 0.010614991, -0.18293494, 0.25009897, -0.080779895, 0.21548378, 0.22215544, 0.048670914, -0.057372037, 0.078176, 0.17490411, 0.004919551, 0.059619516, 0.12660357) * go_1(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [517]     result += mat4(-0.06282951, 0.10929357, 0.026720649, -0.15939257, 0.17107709, -0.04334904, -0.03047162, -0.101681694, 0.03118431, 0.19994627, 0.025729552, 0.035035726, -0.0012207883, -0.08618888, 0.061205562, 0.009940555) * go_1(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [518]     result += mat4(-0.23581573, 0.08002133, -0.15170844, 0.08872338, -0.25767094, -0.09273545, 0.18153891, 0.2544269, -0.084598936, -0.089766875, -0.14610913, 0.002247754, 0.1802837, -0.019625561, 0.30239686, -0.032793984) * go_1(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [519]     result += mat4(0.5223286, 0.10347663, 0.4000593, 0.25440502, -0.07646958, -0.31940606, 0.053407036, -0.09356492, 0.2738851, 0.23945184, -0.2907089, -0.45822915, 0.13415676, 0.17187089, 0.08731114, -0.27670014) * go_1(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [520]     result += mat4(0.059273496, -0.107137166, 0.12087539, 0.179237, -0.021209063, -0.02548005, 0.061256204, 0.033822674, 0.54491127, -0.2475085, 0.08055858, -0.4071213, -0.045093834, 0.07161349, 0.08219979, -0.31735933) * go_1(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [521]     result += mat4(-0.29527053, 0.021469543, 0.07202354, -0.07103959, 0.03990857, 0.2490762, -0.19419849, -0.13916986, -0.05325315, 0.12922864, -0.041463424, -0.031249814, 0.073991664, -0.09723187, 0.35132217, 0.024760868) * go_1(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [522]     result += mat4(0.09606787, -0.0951808, -0.0059865676, -0.052033573, -0.3118038, 0.4432636, -0.12943317, 0.09484738, 0.10621756, -0.10550469, 0.11264014, 0.1402276, -0.012679125, -0.08809835, 0.029994955, -0.15121669) * go_1(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [523]     result += mat4(0.123397775, 0.048338536, -0.00975707, -0.103767075, -0.041053303, -0.07228534, 0.046792876, 0.0668788, 0.29554394, 0.012451002, 0.19568972, 0.112091154, 0.10882395, -0.0995439, 0.051324263, 0.24967718) * go_1(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [524]     result += mat4(0.2699648, 0.17300771, -0.16056584, 0.1099392, 0.11674778, -0.19811755, 0.111880325, -0.06075038, -0.095849104, -0.04510651, -0.04180761, -0.0052786698, 0.11037549, -0.24115366, 0.018509468, -0.07819484) * go_2(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [525]     result += mat4(0.10981622, 0.044488225, 0.050722387, -0.3146652, -0.0013019707, -0.24084032, -0.10475088, 0.026944289, 0.1592903, 0.33087498, 0.061839584, -0.043863457, -0.06904603, -0.08635262, 0.088630445, -0.15485142) * go_2(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [526]     result += mat4(-0.06810522, 0.19927117, -0.08130387, 0.11612667, -0.015104349, -7.738651e-05, -0.06419643, -0.14813533, 0.026650215, 0.015038833, 0.08161237, 0.058321163, 0.015005185, -0.16189656, 0.024501886, 0.1927279) * go_2(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [527]     result += mat4(0.31858218, 0.11962043, -0.20560326, -0.13190113, 0.02138715, -0.057066392, -0.085771754, -0.124566585, 0.044749223, 0.13687828, 0.1195792, 0.14021616, 0.26204133, 0.05119197, -0.13980037, 0.050747477) * go_2(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [528]     result += mat4(-0.21238558, -0.0734057, -0.2036023, -0.34308743, -0.29370925, 0.2393742, -0.37877437, 0.036869828, -0.17053255, -0.26900926, -0.23330869, 0.32902205, -0.4882585, 0.27430108, -0.033711653, 0.15501487) * go_2(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [529]     result += mat4(0.23487025, 0.085289046, -0.14281847, 0.12543266, 0.15871634, -0.13858907, 0.14810285, -0.0239261, 0.1286852, 0.07754033, 0.01072327, -0.14313328, 0.05480442, -0.12195059, 0.11341822, 0.08224607) * go_2(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [530]     result += mat4(0.19490337, 0.023521842, -0.24548791, 0.0035114093, -0.07937166, -0.07674376, 0.08365873, -0.003286068, 0.023862893, 0.009626835, 0.032829892, 0.0078141205, 0.053484406, -0.08297165, 0.09303188, 0.004273738) * go_2(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [531]     result += mat4(-0.0032906602, 0.13636959, 0.027821168, 0.06270053, 0.024775786, -0.077529594, 0.03799126, 0.030000908, 0.031749167, 0.04360487, 0.004448846, -0.17835903, -0.30834544, 0.013150946, -0.13758293, -0.03296242) * go_2(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [532]     result += mat4(-0.14166978, 0.034131095, 0.049779188, 0.09453289, -0.011406557, -0.07020709, -0.0031981543, -0.03443845, -0.00010218944, 0.0855161, -0.10951453, 0.042758763, 0.1718446, -0.1577923, 0.0410027, -0.04992991) * go_2(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [533]     result += mat4(0.1219178, 0.105126485, -0.041097324, -0.08110963, -0.04857337, -0.11544925, -0.14572923, 0.092435546, 0.091857366, 0.15425235, -0.020324683, -0.05764375, -0.020458939, -0.10527823, -0.085554086, 0.16358297) * go_3(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [534]     result += mat4(-0.12372687, -0.009976829, 0.14252265, -0.1321053, -0.05965866, -0.1393898, -0.017603246, -0.02714342, -0.16824952, -0.23083204, -0.012299022, -0.06689838, -0.015830487, 0.21299921, -0.11637202, 0.0074968333) * go_3(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [535]     result += mat4(-0.01979935, -0.182785, -0.015397454, 0.14175794, -0.011465284, 0.11285164, -0.036115747, 0.07150463, -0.083641894, -0.10221778, -0.13871445, 0.099696055, 0.04603662, -0.06463785, -0.007984529, -0.0032940735) * go_3(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [536]     result += mat4(0.072830334, -0.057334073, 0.09086239, 0.13039105, 0.06350303, 0.17130788, -0.2181585, -0.09137403, -0.31397742, -0.019071499, -0.017274613, 0.13762084, 0.10195637, -0.021455176, 0.04011394, -0.08029658) * go_3(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [537]     result += mat4(-0.26982597, -0.40265098, -0.4151411, 0.038557775, -0.095602125, 0.3503172, -0.029988842, -0.03484708, 0.095536314, -0.0030311556, 0.31589827, 0.52763534, -0.12629713, -0.24356791, 0.0059487303, 0.42298427) * go_3(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [538]     result += mat4(0.054166105, 0.18827972, -0.081673265, -0.06720384, 0.09375001, 0.22173035, -0.14050071, 0.108400136, -0.15553835, -0.08716729, -0.037366748, 0.10971073, -0.02560103, -0.26702073, -0.05201882, 0.2432563) * go_3(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [539]     result += mat4(0.16196893, 0.0889265, -0.09887943, -0.042956755, -0.054403376, -0.123823255, 0.045847844, 0.017027669, 0.00539936, -0.112265736, 0.050549984, -0.104931094, -0.06883012, -0.25745714, 0.11155538, -0.15363649) * go_3(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [540]     result += mat4(-0.22157209, 0.18200903, -0.13290548, 0.026721261, -0.06066069, -0.18150693, 0.08768983, 0.037362453, -0.1073367, -0.070236765, -0.41223463, -0.168915, -0.15517351, -0.13949952, -0.13307643, -0.15935421) * go_3(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [541]     result += mat4(-0.026589906, 0.0930502, 0.05195435, 0.06301585, -0.01107014, -0.019382332, 0.027223695, -0.004045145, -0.15238355, -0.0345132, 0.06355168, 0.0011230056, 0.16690113, 0.0017829507, -0.0023939044, -0.09471834) * go_3(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [542]     result += vec4(0.024455175, 0.01669877, -0.066231176, 0.036848705);
[   0.301][d][vo/gpu-next/libplacebo] [543]     return result;
[   0.301][d][vo/gpu-next/libplacebo] [544] }
[   0.301][d][vo/gpu-next/libplacebo] [545] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.301][d][vo/gpu-next/libplacebo] [546] //!HOOK MAIN
[   0.301][d][vo/gpu-next/libplacebo] [547] //!BIND conv2d_4_tf
[   0.301][d][vo/gpu-next/libplacebo] [548] //!BIND conv2d_4_tf1
[   0.301][d][vo/gpu-next/libplacebo] [549] //!SAVE conv2d_5_tf1
[   0.301][d][vo/gpu-next/libplacebo] [550] //!WIDTH conv2d_4_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [551] //!HEIGHT conv2d_4_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [552] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [553] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [554] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [555] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [556] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [557] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [558] vec4 hook() {
[   0.301][d][vo/gpu-next/libplacebo] [559]     vec4 result = mat4(0.01763509, -0.17156707, -0.06841296, -0.026132878, -0.10600523, 0.11245994, 0.121395074, -0.09331501, 0.12764473, 0.0428028, -0.11837395, 0.2092563, -0.04357652, -0.0490096, 0.024701532, 0.10518723) * go_0(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [560]     result += mat4(-0.17130826, -0.31987694, -0.07639005, 0.21362033, 0.058639023, 0.066175915, -0.25344703, -0.07923442, -0.14766373, 0.040518284, -0.031103026, -0.040075514, -0.051108997, -0.28214613, -0.18504949, 0.27544948) * go_0(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [561]     result += mat4(0.030991005, -0.011353306, 0.15237464, 0.15458584, 0.1250524, 0.19959912, 0.14049476, 0.38410887, 0.07378578, -0.017728366, 0.0963528, -0.043756213, -0.039577194, -0.11800575, -0.08392266, -0.07599512) * go_0(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [562]     result += mat4(0.022089608, -0.027317125, 0.051330008, -0.0075439885, 0.021650828, -0.0009390209, -0.12043464, 0.049332134, -0.055557396, -0.053297505, -0.0918705, -0.13089466, -0.10994107, 0.072746456, 0.11496739, -0.05225977) * go_0(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [563]     result += mat4(0.29730305, 0.26317745, 0.052159555, -0.32006654, 0.48288685, -0.049926184, -0.08091092, -0.13825637, -0.1485706, -0.288657, -0.41443697, 0.06856032, -0.23809211, -0.12953928, 0.4783034, -0.47557938) * go_0(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [564]     result += mat4(0.026139118, -0.23031352, 0.04861487, 0.033556074, 0.2702056, 0.22802536, -0.15385233, 0.1664119, 0.18749923, 0.36927548, -0.011473684, -0.11771165, -0.16859052, -0.4513202, 0.12863952, 0.02482837) * go_0(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [565]     result += mat4(0.0073229345, -0.061915245, 0.06710329, 0.0062416573, -0.00555983, 0.14592186, 0.11201052, -0.123630054, 0.32611257, -0.11279885, -0.059449438, 0.2891043, -0.10519016, 0.040108994, -0.012468261, 0.02083298) * go_0(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [566]     result += mat4(-0.057483062, 0.08454755, -0.15529329, -0.12572923, 0.2600099, -0.02319978, -0.04037675, 0.11496361, 0.07728194, -0.12908956, -0.025529336, 0.112581626, 0.02971823, 0.11659056, -0.01298622, 0.017061908) * go_0(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [567]     result += mat4(0.22417091, -0.00222947, 0.04980858, 0.12260437, -0.025507605, 0.042577885, 0.120813504, -0.048522256, -0.038494784, -0.0072195013, -0.23012944, -0.020850847, -0.078296244, -0.014830018, 0.19759563, -0.10000253) * go_0(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [568]     result += mat4(-0.032090195, 0.023757193, -0.08989734, 0.14419042, 0.0112194475, -0.093776144, -0.020197887, 0.29295877, 0.06872183, 0.09511462, -0.03245769, -0.06504889, 0.05132126, 0.00399527, 0.075911656, 0.250893) * go_1(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [569]     result += mat4(-0.3418496, 0.25525784, 0.0018161442, 0.028484365, -0.17573346, -0.12457501, 0.18466166, 0.20209278, 0.10282706, 0.16353399, 0.025052028, -0.059714165, -0.055806916, -0.28651386, 0.112798095, 0.11624314) * go_1(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [570]     result += mat4(-0.018793896, 0.07500149, -0.01728254, -0.1726998, -0.13333, 0.09590344, -0.036537904, -0.11522523, 0.19445558, 0.22680458, 0.12061006, -0.06225618, 0.1127748, 0.28380096, -0.07099846, -0.007440302) * go_1(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [571]     result += mat4(-0.43887648, -0.10018577, -0.29267642, 0.12149727, -0.14333835, 0.04161915, 0.19442867, 0.16506511, 0.09655387, -0.0014398015, 0.13189743, -0.14068556, 0.049408, 0.0829072, 0.2950336, 0.36965907) * go_1(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [572]     result += mat4(0.41486958, -0.023498302, -0.37900022, -0.31752598, 0.13758768, -0.18782206, -0.31358528, 0.3330786, -0.4039293, -0.06539036, 0.032599606, 0.10663507, -0.26369813, -0.17365438, 0.20723309, 0.1801556) * go_1(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [573]     result += mat4(0.004117444, -0.14894462, 0.14915143, -0.047375835, -0.2609916, -0.10172324, -0.14925237, -0.33830285, 0.12131607, -0.18156646, -0.42382464, -0.052582145, 0.2329045, -0.4576963, 0.13756892, 0.055571318) * go_1(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [574]     result += mat4(-0.31689477, 0.017058033, -0.01904924, -0.016893756, -0.011479519, 0.07316262, -0.07086077, 0.08923511, -0.08190091, -0.025866933, -0.06909204, -0.028601022, 0.023224542, 0.03082087, 0.2230426, -0.16713654) * go_1(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [575]     result += mat4(0.13457374, 0.110913865, -0.1130815, -0.031438913, -0.55201167, 0.04831016, 0.25107765, -0.014003224, 0.19532952, 0.02062346, 0.04839241, 0.088673405, 0.30325848, -0.20222804, -0.085780576, 0.22512968) * go_1(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [576]     result += mat4(0.076354, 0.021940092, -0.16170324, 0.0025543426, -0.0032400405, -0.0046705627, 0.06241069, -0.031247333, 0.098353796, 0.03723474, 0.22971998, -0.017877292, 0.119858086, 0.008041448, 0.2140585, 0.10343376) * go_1(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [577]     result += mat4(0.08627595, 0.04532834, 0.027579082, -0.16222088, 0.15583228, -0.14371829, -0.07243855, -0.111895435, -0.14438897, -0.10250594, 0.0034202964, -0.066547595, -0.034390844, -0.021545287, 0.014540157, -0.10215731) * go_2(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [578]     result += mat4(0.19720152, 0.21534947, 0.1130938, -0.011730973, 0.013247983, -0.10344174, -0.1906514, -0.015767017, -0.020093633, -0.26487067, -0.005960781, -0.057149183, 0.030110173, 0.047692046, -0.19308545, -0.25292158) * go_2(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [579]     result += mat4(0.039498243, 0.053682897, -0.01844695, -0.017540915, 0.039454967, -0.27696076, 0.09503274, -0.038958035, 0.17321438, -0.036311295, 0.03123055, 0.02310311, 0.040591653, 0.0054627894, -0.03520426, -0.026101988) * go_2(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [580]     result += mat4(0.055991564, 0.06512919, -0.12532505, 0.024075158, -0.04926237, -0.11701171, 0.026792146, 0.013033238, -0.052847516, -0.01550091, -0.008442071, -0.077945165, -0.033220004, -0.13678443, -0.07040586, 0.121846326) * go_2(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [581]     result += mat4(-0.19537796, -0.016634773, 0.10707109, -0.024361614, -0.16002733, -0.44066608, 0.16488662, 0.013152995, 0.22407806, 0.12854017, 0.19028598, -0.08379244, -0.05594235, -0.15909895, 0.511962, 0.39027596) * go_2(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [582]     result += mat4(-0.032652248, 0.06004893, 0.011166194, 0.102761306, -0.035113614, -0.29961765, -0.013817978, 0.20938557, 0.08488225, -0.1118558, -0.0375328, -0.035511103, 0.0046933405, 0.20203683, -0.13552529, -0.12685429) * go_2(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [583]     result += mat4(0.03054923, 0.08224908, -0.059128158, -0.02583655, -0.02133876, 0.0048713544, 0.10848829, 0.06324404, 0.028332822, -0.011002306, -0.027557913, -0.06072362, 0.1019048, -0.02587316, 0.08563405, -0.08119947) * go_2(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [584]     result += mat4(-0.10568117, 0.1075248, 0.19379964, -0.14337265, 0.019374132, -0.0907804, -0.13827625, -0.03628561, 0.014735499, -0.026882607, -0.25948793, 0.034926686, -0.05988073, -0.22735636, 0.053511668, 0.04765336) * go_2(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [585]     result += mat4(-0.029848114, 0.09183966, 0.084713496, 0.09422864, 0.069713995, -0.10584984, -0.020899031, 0.059645247, -0.075805016, -0.01828552, 0.06689195, -0.13804196, -0.023465823, -0.034038994, -0.12946706, 0.058709413) * go_2(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [586]     result += mat4(0.061918218, 0.038984764, 0.013660938, -0.19340219, -0.014949839, 0.12946278, 0.12725051, 0.13429146, 0.05993008, -0.015394284, 0.011232483, 0.0344157, 0.022161875, -0.023923954, 0.061736204, 0.025963215) * go_3(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [587]     result += mat4(0.048136763, 0.03162042, -0.01967249, 0.06374493, 0.034645267, 0.22403605, 0.036197048, -0.06903216, -0.1024706, -0.0005459356, 0.049185563, 0.16309108, 0.07394778, 0.10351343, 0.28430694, -0.13531347) * go_3(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [588]     result += mat4(-0.14705071, -0.09458433, 0.03063114, 0.07901115, -0.11911086, -0.06428132, -0.013549552, -0.041342866, -0.20770676, -0.15104479, 0.054365363, -0.11652907, 0.05639815, 0.070518605, 0.0017846811, -0.00056205114) * go_3(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [589]     result += mat4(0.27148908, 0.07358356, 0.13644488, -0.13824654, 0.0112991175, -0.021521023, -0.10197379, 0.007816017, -0.13314332, 0.12318473, -0.043214846, -0.15759036, -0.19744353, -0.10267182, -0.28249928, 0.11233295) * go_3(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [590]     result += mat4(-0.096474804, 0.17893109, 0.014679829, -0.21218887, -0.24170275, 0.10603527, 0.05375366, -0.059315052, 0.17087384, 0.13633691, -0.37958893, 0.43264794, 0.17829923, 0.06485103, -0.37551817, -0.22082718) * go_3(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [591]     result += mat4(-0.30536333, -0.033212308, -0.25232, 0.11730442, -0.11176368, 0.26223183, -0.049025323, -0.01375941, -0.29028055, 0.16842811, -0.035684332, -0.4180911, -0.1611732, 0.07683385, -0.14263596, 0.17508087) * go_3(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [592]     result += mat4(0.23580009, 0.025621435, -0.15757325, 0.008123166, -0.021905439, -0.02162503, -0.059497356, -0.01636353, 0.047654126, -0.084423855, -0.033733923, 0.0127116265, -0.059593942, -0.053935718, -0.050729543, 0.013887048) * go_3(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [593]     result += mat4(-0.19232626, 0.07915767, -0.05909752, 0.007695347, 0.058876406, 0.057521783, -0.080253534, 0.2011056, -0.27965516, -0.08033169, -0.13025513, 0.12854645, 0.053400308, -0.18445957, -0.18463044, 0.27920377) * go_3(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [594]     result += mat4(-0.061806213, -0.020037206, 0.003183183, -0.029844081, -0.039553937, 0.028905323, -0.11367984, -0.097321615, -0.10112643, 0.0039709485, -0.06020118, -0.23871279, -0.077974856, 0.05806996, -0.21440302, 0.11898043) * go_3(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [595]     result += vec4(-0.023832673, 0.03702965, -0.04749135, -0.10982549);
[   0.301][d][vo/gpu-next/libplacebo] [596]     return result;
[   0.301][d][vo/gpu-next/libplacebo] [597] }
[   0.301][d][vo/gpu-next/libplacebo] [598] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.301][d][vo/gpu-next/libplacebo] [599] //!HOOK MAIN
[   0.301][d][vo/gpu-next/libplacebo] [600] //!BIND conv2d_5_tf
[   0.301][d][vo/gpu-next/libplacebo] [601] //!BIND conv2d_5_tf1
[   0.301][d][vo/gpu-next/libplacebo] [602] //!SAVE conv2d_6_tf
[   0.301][d][vo/gpu-next/libplacebo] [603] //!WIDTH conv2d_5_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [604] //!HEIGHT conv2d_5_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [605] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [606] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [607] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [608] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [609] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [610] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [611] vec4 hook() {
[   0.301][d][vo/gpu-next/libplacebo] [612]     vec4 result = mat4(0.030931145, 0.013683292, -0.0650242, -0.028732346, 0.120067924, -0.029404473, 0.0038229884, -0.14631765, 0.041900825, -0.076596744, -0.11096378, -0.27100095, 0.0052598766, -0.05929686, -0.06816563, -0.086864315) * go_0(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [613]     result += mat4(-0.043620087, -0.16360405, 0.006527374, 0.15706524, 0.08338088, -0.19027525, 0.22595987, -0.054963548, 0.01825031, -0.03149212, 0.025471251, 0.06429379, -0.011633275, -0.079389006, -0.0030728737, 0.17345747) * go_0(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [614]     result += mat4(-0.011275288, -0.10668036, 0.05718997, 0.010336089, 0.33393976, -0.2029354, 0.075444475, -0.092244044, 0.07605498, 0.20125951, 0.10493973, -0.12306946, 0.03658231, 0.08233366, -0.12205888, -0.116969004) * go_0(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [615]     result += mat4(-0.0070305974, 0.105127215, 0.006041873, 0.26743913, 0.028119443, 0.14823505, -0.28344348, 0.12362866, -0.1215781, 0.08104382, 0.102011785, 0.085380934, 0.061244503, -0.06230063, -0.05353345, 0.1166729) * go_0(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [616]     result += mat4(0.08945733, 0.4101902, -0.06404005, 0.040728435, 0.13076581, -0.20805469, -0.10897316, -0.14924604, 0.10090762, 0.015475414, 0.26346552, 0.12096677, -0.20199244, 0.2780031, 0.18515368, 0.35105625) * go_0(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [617]     result += mat4(0.07463155, 0.26932517, -0.06768551, 0.10470878, -0.1423996, 0.013550665, -0.06167201, -0.1022994, -0.3107166, -0.15609552, 0.1695213, -0.1277181, 0.12582655, -0.1596128, 0.015612055, -0.19826376) * go_0(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [618]     result += mat4(0.011745468, 0.006471601, 0.008110513, 0.025831396, 0.1272883, -0.221959, 0.11993834, -0.007903633, 0.009993582, -0.10170755, 0.026594637, -0.027883623, 0.030666083, -0.036415886, 0.007469573, 0.0674783) * go_0(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [619]     result += mat4(-0.022760388, -0.10911659, -0.012589904, -0.046462692, 0.36987287, 0.71668935, -0.04466556, 0.12082762, 0.0026539841, 0.07070946, -0.00020439121, -0.13925348, 0.08672072, 0.20075354, -0.066352285, 0.14655356) * go_0(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [620]     result += mat4(-0.081081845, -0.21956222, 0.06781787, -0.106362104, -0.03016425, -0.010460211, -0.009725996, -0.009805538, 0.07037355, 0.19254607, 0.038890257, 0.29580075, -0.10355764, 0.12613009, 0.02485986, -0.031927988) * go_0(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [621]     result += mat4(-0.13882205, 0.21770848, 0.015392157, 0.010310204, 0.008225721, 0.07457836, 0.09984027, -0.25452816, 0.2193511, -0.22262146, -0.12950355, 0.026151875, 0.022114651, -0.030566849, 0.034688126, 0.03047327) * go_1(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [622]     result += mat4(0.0363441, 0.19290726, -0.1143055, 0.30871987, -0.05780708, 0.082128406, -0.115280904, 0.07636388, 0.48947453, -0.29715258, 0.146737, -0.3275992, -0.055972476, -0.09991753, 0.17435446, 0.10917291) * go_1(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [623]     result += mat4(0.026389305, 0.054523308, -0.028950177, 0.06913328, -0.18626037, 0.08829993, 0.10407121, 0.001246911, 0.103938825, -0.3117343, -0.045564886, 0.07316613, 0.0027089121, 0.099437356, -0.046500806, -0.0927284) * go_1(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [624]     result += mat4(0.051037624, -0.2068234, 0.061572235, -0.3345198, 0.16960172, -0.30289862, -0.002583443, 0.39312238, 0.08246557, 0.16374862, -0.31902805, -0.13205275, -0.032050006, 0.01670186, 0.13852347, 0.120012194) * go_1(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [625]     result += mat4(-0.67096996, -0.06274476, 0.18575665, 0.80282855, 0.23201196, -0.0054729837, 0.050396994, -0.42014772, 0.34904522, 0.26281372, 0.24697208, 0.55475426, 0.49850988, -0.06581312, -0.0068906257, -0.15741143) * go_1(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [626]     result += mat4(-0.04252036, -0.28224963, 0.009723064, 0.116357096, 0.2992567, -0.26702902, -0.05648925, 0.12729199, -0.37574205, 0.54211813, -0.25248805, -0.13023548, 0.18903324, -0.5182459, 0.0141203115, -0.19444294) * go_1(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [627]     result += mat4(-0.0017735233, -0.010132458, -0.040924776, -0.13767008, 0.20757031, -0.06509882, -0.09756446, 0.018974079, 0.090851985, -0.010158765, -0.03999607, -0.12055641, 0.03629025, -0.018645551, -0.05506811, -0.014202848) * go_1(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [628]     result += mat4(0.16203491, 0.011118734, -0.18486023, -0.024290733, -0.3673846, -0.20295864, 0.23055002, -0.1555852, -0.02706522, 0.03262891, 0.008724611, -0.03760652, -0.20946771, -0.01951837, 0.16955496, 0.11690098) * go_1(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [629]     result += mat4(0.0783421, 0.22656651, -0.15715368, -0.024174158, 0.020260733, 0.032390315, -0.029133298, 0.086601086, 0.13871798, -0.12525433, 0.16097449, 0.058946393, 0.029865682, 0.08508385, 0.040569812, -0.09402932) * go_1(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [630]     result += mat4(-0.05063873, 0.11269313, -0.057484943, -0.13579641, 0.047973365, -0.07103839, -0.07838756, -0.0028928046, -0.019466015, 0.018428024, 0.010016324, -0.057396665, -0.19495595, 0.034307264, -0.022888038, 0.08112259) * go_2(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [631]     result += mat4(-0.09790086, 0.10613111, 0.06611674, 0.19356097, -0.00073371036, -0.019078335, 0.076719105, -0.016212497, -0.3283475, -0.07547389, -0.08140701, 0.3185625, -0.25060275, 0.16820994, -0.123497784, 0.43272668) * go_2(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [632]     result += mat4(-0.06365342, 0.11186735, -0.17493224, -0.04207358, 0.0003117533, 0.034089327, -3.067692e-05, -0.03422754, 0.16267666, 0.054771993, 0.048384454, -0.041866794, 0.0036008756, 0.0021496525, 0.20258942, -0.06297619) * go_2(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [633]     result += mat4(0.03578836, 0.08763908, -0.22370125, -0.32465744, 0.019142643, 0.011316954, 0.17920344, 0.031633645, 0.03766343, -0.116487674, -0.05281752, -0.018965483, 0.049297336, -0.34511214, 0.42598158, 0.051361635) * go_2(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [634]     result += mat4(0.26638633, -0.33628765, 0.04437907, 0.09616201, -0.020049393, 0.2560829, -0.027108455, 0.255752, 0.3666511, 0.052277412, -0.46667686, 0.48482272, 0.51302284, -0.06941614, -0.17967525, -0.07889891) * go_2(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [635]     result += mat4(0.18503937, 0.088710256, 0.2083147, -0.20758459, -0.036416974, 0.018303726, 0.03729963, -0.035969947, -0.2685231, -0.42169708, -0.039593916, -0.02642618, 0.29050872, -0.25723743, -0.111259766, 0.15001127) * go_2(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [636]     result += mat4(-0.026473878, -0.07241443, 0.022400148, -0.03214132, 0.0859297, -0.0036677981, -0.07039137, 0.03703108, 0.042322673, -0.01222808, -0.08151938, 0.033109214, -0.048737407, 0.25929528, -0.40535828, -0.123594694) * go_2(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [637]     result += mat4(0.10233285, 0.22455986, -0.13368733, 0.033236265, -0.052114893, -0.11709317, 0.009709581, 0.19201641, -0.02973698, 0.032114245, -0.09771862, 0.085680574, 0.15827927, -0.15042172, 0.21833214, -0.13262676) * go_2(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [638]     result += mat4(-0.08460587, -0.09473209, 0.019323658, -0.057233352, 0.0019434267, -0.14437936, 0.034232683, 0.0030602294, -0.023598112, 0.10692026, -0.09960999, 0.005887181, 0.014738836, -0.32473162, -0.10886747, -0.08365826) * go_2(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [639]     result += mat4(0.10900178, 0.00080280803, -0.14009437, -0.053074867, -0.07811151, -0.03456029, -0.104943685, 0.016918905, -0.11335709, 0.079421654, 0.13481963, 0.037818357, -0.027339859, 0.05856774, -0.044562265, 0.03908084) * go_3(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [640]     result += mat4(0.07628258, -0.23815769, 0.2840278, -0.3541637, -0.044292126, -0.09310441, -0.1335055, -0.031899665, -0.11981227, 0.24012394, -0.041896038, -0.10168982, 0.20248915, -0.10036763, -0.044115108, 0.08520525) * go_3(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [641]     result += mat4(0.07234102, -0.119480744, -0.01401321, -0.025182616, -0.031284854, -0.050089385, 0.014808948, 0.038662236, -0.18539418, 0.017342187, 0.023812262, 0.13428104, 0.020824855, -0.07433546, 0.054307282, 0.08511016) * go_3(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [642]     result += mat4(-0.11046813, -0.04663274, 0.33497185, 0.023273284, -0.24681108, 0.116665915, 0.12045893, 0.13306482, -0.039098527, 0.04747061, 0.042796664, 0.053514794, 0.011861975, -0.048702, 0.008408589, -0.09497112) * go_3(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [643]     result += mat4(0.34634927, 0.37973458, -0.79267627, -0.7362719, 0.35489878, -0.07635863, 0.24082923, -0.27480397, -0.3236968, -0.25523046, 0.05118527, -0.040529836, -0.6000509, 0.39020586, 0.27632973, 0.5141453) * go_3(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [644]     result += mat4(0.16761221, -0.033125393, 0.00561569, 0.083019435, -0.101278506, 0.07810264, 0.12060661, 0.16048536, 0.14257826, -0.15996903, 0.018831912, -0.094429865, -0.22227801, 0.426937, -0.054677445, 0.05067348) * go_3(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [645]     result += mat4(0.02233958, 0.02608942, -0.045318656, 0.06509929, 0.035911568, 0.025316885, 0.0840986, 0.08326237, 0.048455603, -0.13630742, 0.07230253, -0.047261715, -0.092630014, 0.04786565, 0.10354939, -0.07094341) * go_3(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [646]     result += mat4(-0.1463382, -0.14900577, 0.2835977, -0.106733374, -0.11554754, -0.168429, -0.1411373, -0.20654152, -0.06388508, 0.039648015, 0.08543832, -0.13253337, 0.017264463, -0.06346233, -0.10823598, 0.067361064) * go_3(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [647]     result += mat4(0.04419582, 0.039152585, 0.06222691, 0.05757103, 0.012084537, 0.051425997, -0.061130576, 0.16752882, 0.07497411, 0.13495837, -0.15585983, -0.02050144, -0.08555421, -0.09147339, 0.025115604, 0.05948922) * go_3(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [648]     result += vec4(0.00590038, 0.03082865, 0.002111702, -0.03330112);
[   0.301][d][vo/gpu-next/libplacebo] [649]     return result;
[   0.301][d][vo/gpu-next/libplacebo] [650] }
[   0.301][d][vo/gpu-next/libplacebo] [651] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x3x3x16
[   0.301][d][vo/gpu-next/libplacebo] [652] //!HOOK MAIN
[   0.301][d][vo/gpu-next/libplacebo] [653] //!BIND conv2d_5_tf
[   0.301][d][vo/gpu-next/libplacebo] [654] //!BIND conv2d_5_tf1
[   0.301][d][vo/gpu-next/libplacebo] [655] //!SAVE conv2d_6_tf1
[   0.301][d][vo/gpu-next/libplacebo] [656] //!WIDTH conv2d_5_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [657] //!HEIGHT conv2d_5_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [658] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [659] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [660] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [661] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [662] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [663] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [664] vec4 hook() {
[   0.301][d][vo/gpu-next/libplacebo] [665]     vec4 result = mat4(0.009029573, 0.029218858, 0.029705316, -0.019268971, -0.0023235187, -0.072589695, 0.1424836, 0.09049359, 0.04342995, 0.18134294, 0.018145641, 0.14789368, 0.050923645, 0.06524081, 0.036812488, 0.11108108) * go_0(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [666]     result += mat4(-0.026506428, 0.016968496, 0.015961196, 0.010030791, -0.3141888, -0.06769598, -0.23920257, -0.031002127, -0.07351358, -0.19290134, -0.24282931, -0.18831016, -0.0928966, 0.075177215, -0.19699521, -0.05810917) * go_0(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [667]     result += mat4(-0.017991852, -0.079427645, 0.035970494, -0.017095685, -0.27197137, -0.20046075, 0.2616644, 0.021876303, -0.077394076, -0.04978692, 0.20363241, -0.013741705, -0.032103598, 0.14403099, 0.01442474, 0.048115995) * go_0(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [668]     result += mat4(-0.16939245, -0.001777, 0.026244136, -0.14122388, -0.056853324, 0.54357284, -0.19769607, -0.03187079, 0.04559263, -0.16048127, 0.12830622, 0.1442168, 0.006611398, -0.01618195, 0.012860053, -0.16539487) * go_0(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [669]     result += mat4(0.13116026, -0.006161343, 0.7209969, 0.18338475, 0.3099777, 0.6500026, 0.3883795, -0.021434233, 0.31667513, 0.008917659, 0.14124091, -0.22335114, 0.12198921, -0.16449445, 0.08773425, 0.30054978) * go_0(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [670]     result += mat4(-0.10413989, -0.10316161, 0.04342709, -0.021252686, 0.120892406, 0.37798002, -0.35963747, 0.021069285, 0.37587845, -0.08159587, 0.011139747, 0.2501104, -0.094568014, 0.037900843, -0.025109999, -0.030106556) * go_0(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [671]     result += mat4(0.09680291, -0.040868275, 0.051731605, 0.089064725, -0.56098557, -0.38148618, -0.017037416, 0.08508287, -0.019247344, 0.019857002, -0.03512887, 0.031057188, -0.09648583, -0.04474188, 0.028748507, -0.11880965) * go_0(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [672]     result += mat4(-0.010236943, 0.04257042, -0.08202597, -0.004203426, -0.26801527, -0.11716526, -0.017402772, -0.05819106, -0.13394608, 0.0234606, -0.15404865, -0.06801164, -0.0047627664, -0.1975249, 0.09420144, 0.23249897) * go_0(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [673]     result += mat4(0.107361935, 0.07373787, 0.06242962, 0.05236332, -0.028867323, 0.025924044, -0.042526353, -0.0015729597, -0.1323144, -0.4040712, 0.023919407, -0.09535502, 0.049100045, 0.081110805, 0.08946112, 0.058505684) * go_0(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [674]     result += mat4(0.13236825, -0.04468476, -0.04426802, 0.031087106, -0.09093992, -0.07470971, -0.01591504, 0.05924266, -0.21910913, 0.065537, -0.18358919, -0.02533145, -0.1512009, -0.04953928, 0.015540006, -0.0043442883) * go_1(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [675]     result += mat4(-0.14016777, -0.1086958, 0.16316028, 0.050777458, 0.23148167, 0.04944809, -0.10599886, -0.10447021, -0.40729257, -0.10926556, 0.069055155, 0.110635415, 0.108922414, -0.1716362, 0.10743909, -0.102534756) * go_1(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [676]     result += mat4(0.017795928, -0.066930935, 0.09396082, 0.092585504, 0.14223933, 0.059458215, 0.072033696, -0.04507726, -0.19956456, 0.1251282, -0.31733638, -0.10465904, 0.08546377, 0.048638333, 0.031372465, -0.08720661) * go_1(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [677]     result += mat4(0.108719654, -0.092161916, -0.014724377, 0.20068261, -0.24350016, 0.2113636, -0.07483714, -0.45665312, -0.25134233, 0.2753893, -0.11324696, -0.04472, 0.1576102, -0.045395147, 0.06013951, -0.12507361) * go_1(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [678]     result += mat4(0.546225, -0.281897, 0.19477816, -0.116612464, -0.3145171, -0.41660902, 0.333625, 0.35902345, 0.48333502, 0.4662005, 0.10222491, -0.15314859, -0.3036888, 0.22849742, 0.20740797, 0.41399437) * go_1(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [679]     result += mat4(0.007284074, 0.0393942, -0.31192186, -0.15687793, -0.289214, -0.015956698, -0.24718472, -0.1637855, -0.00765037, 0.26677555, 0.20215511, 0.37790874, -0.22096673, 0.25287116, -0.2446764, -0.13610223) * go_1(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [680]     result += mat4(-0.16734968, 0.16721225, -0.053508647, -0.041097626, 0.062356673, 0.07812319, -0.263546, -0.39739034, 0.003389846, 0.12676363, -0.13175991, -0.19019242, -0.011847587, -0.007580052, -0.023946386, 0.046034034) * go_1(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [681]     result += mat4(-0.17047611, 0.13298693, -0.07506747, -0.045542978, 0.33571973, 0.20192616, 0.30674616, 0.25668672, -0.24134545, 0.031693842, -0.009647641, 0.040534843, 0.03159419, -0.1100516, 0.11371316, 0.06098735) * go_1(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [682]     result += mat4(-0.05518961, 0.19402988, -0.09646874, -0.059196774, -0.0073436056, -0.1381309, 0.06868669, 0.061328378, -0.1480867, -0.15774113, -0.022572191, 0.122521356, -0.04067007, -0.10145177, 0.13006335, -0.099452734) * go_1(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [683]     result += mat4(0.06962972, 0.07768411, 0.021085173, 0.108355984, -0.03132525, 0.10220273, -0.11626593, -0.14104277, 0.018778645, -0.024237925, 0.048783034, 0.09074447, 0.4120426, -0.01948466, 0.073218934, 0.055681944) * go_2(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [684]     result += mat4(-0.22553118, -0.12923603, -0.22068842, -0.35037905, 0.005709937, -0.09528472, 0.08718399, 0.13200706, 0.17220478, 0.096844435, -0.30439013, -0.14122063, 0.15733318, -0.1014675, 0.33836862, 0.042193163) * go_2(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [685]     result += mat4(0.15826897, -0.034870047, 0.09295099, -0.17674965, -0.042326324, 0.06680338, -0.074267656, -0.0631393, -0.11267909, -0.19795708, 0.22005288, 0.35703793, 0.033995766, -0.12663686, -0.02449896, -0.123250045) * go_2(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [686]     result += mat4(0.021434195, 0.058398597, 0.04828315, -0.0016824572, -0.04291545, -0.0744907, -0.07698706, -0.15937585, -0.18852457, -0.17966963, 0.023800725, 0.025979731, -0.51412296, -0.018316887, -0.23076254, -0.12298674) * go_2(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [687]     result += mat4(0.16054317, -0.0002730893, -0.54173076, -0.62443435, 0.04300197, -0.08529622, 0.15392275, 0.15742144, 0.025834514, -0.2800517, -0.17600477, 0.0020806703, -0.3010582, 0.45233512, 0.25595665, 0.103661336) * go_2(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [688]     result += mat4(-0.024034392, -0.43800178, 0.28606912, -0.20908915, 0.078471914, -0.030501373, -0.059055753, 0.050494444, 0.063274644, -0.025071034, 0.17561312, -0.100698635, -0.25631955, 0.039981876, -0.18506624, 0.08366402) * go_2(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [689]     result += mat4(-0.1413656, 0.03589635, -0.020917566, 0.017598262, 0.020156413, -0.018854238, 0.027228508, -0.03806087, -0.021715842, 0.071974196, -0.040065665, 0.08459291, -0.23530225, 0.16599682, -0.2772327, 0.10041177) * go_2(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [690]     result += mat4(-0.055056706, 0.1286236, -0.11890451, -0.1790546, 0.16517544, -0.040448934, 0.12548013, 0.017075695, 0.07185459, -0.13236302, 0.19354409, 0.12767012, 0.31120765, 0.16378082, -0.036915366, -0.19724306) * go_2(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [691]     result += mat4(-0.02225051, 0.033263147, 0.003279449, 0.08826271, -0.047833472, 6.574577e-05, 0.13721916, 0.04801998, -0.014958419, 0.08791209, -0.08076282, 0.024002168, -0.18028922, 0.23835851, -0.23309888, -0.119310364) * go_2(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [692]     result += mat4(0.044960875, 0.18821983, 0.027640678, 0.013462449, 0.19011214, 0.21559924, -0.03329638, 0.07234414, 0.030880248, -0.11273214, 0.102028474, 0.12203351, 0.035855662, 0.008828778, 0.007218363, -0.012421797) * go_3(-1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [693]     result += mat4(-0.09450626, 0.025191775, -0.10738468, 0.16237053, 0.073676676, 0.12488881, -0.048748355, 0.007877263, 0.3572506, -0.07911043, 0.14684045, 0.0015310893, -0.33411503, -0.1151223, 0.004201752, 0.017775744) * go_3(-1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [694]     result += mat4(-0.10607509, -0.008143826, -0.08448629, -0.27557802, 0.0046665915, 0.008158659, 0.030826218, 0.020516023, 0.2333065, -0.017463414, -0.041772116, -0.03027809, -0.028166672, -0.080471426, 0.048199337, 0.08341059) * go_3(-1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [695]     result += mat4(-0.14640257, -0.18334304, -0.061674733, 0.0008892598, -0.2374775, -0.2721524, -0.040371176, 0.26362613, 0.19872928, -0.11246391, 0.0842288, 0.11188515, 0.0045209546, -0.04250933, -0.0738212, -0.069005966) * go_3(0.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [696]     result += mat4(-0.08760266, 0.4816288, -0.21241407, 0.22734411, -0.1783721, -0.26842996, 0.099888, -0.2867675, 0.085521065, -0.3780281, -0.018543908, -0.039699722, 0.75688565, -0.5333645, 0.47567275, 0.09518891) * go_3(0.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [697]     result += mat4(-0.04072665, 0.05998423, -0.48314768, -0.29495844, 0.10358383, -0.09816629, 0.028586809, -0.047708735, 0.008320228, 0.04089551, -0.18359782, -0.27615002, 0.12414414, -0.072417594, 0.25932562, 0.30268723) * go_3(0.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [698]     result += mat4(0.14481631, 0.06484443, -0.09898657, -0.06553556, 0.25750044, -0.07265585, 0.12903488, -0.022347894, -0.04693863, -0.000107379274, 0.030295763, -0.0325354, 0.086214684, -0.021326948, 0.039682828, -0.034843277) * go_3(1.0, -1.0);
[   0.301][d][vo/gpu-next/libplacebo] [699]     result += mat4(-0.031971477, -0.25145087, 0.03931631, 0.14262606, -0.06044626, 0.22820354, -0.10506207, 0.18064679, 0.0069641788, 0.01477993, -0.003626875, 0.118767865, 0.109416224, -0.002998205, 0.035680585, 0.07843882) * go_3(1.0, 0.0);
[   0.301][d][vo/gpu-next/libplacebo] [700]     result += mat4(0.03375426, -0.059815384, 0.11632834, -0.12411481, 0.022583738, 0.02544465, -0.054889992, -0.07031964, -0.10140042, 0.16750422, -0.1448294, -0.09316004, 0.035582513, -0.026138382, -0.031955894, 0.040148776) * go_3(1.0, 1.0);
[   0.301][d][vo/gpu-next/libplacebo] [701]     result += vec4(-0.03573331, 0.032919675, 0.011109369, 0.008329268);
[   0.301][d][vo/gpu-next/libplacebo] [702]     return result;
[   0.301][d][vo/gpu-next/libplacebo] [703] }
[   0.301][d][vo/gpu-next/libplacebo] [704] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x1x1x112
[   0.301][d][vo/gpu-next/libplacebo] [705] //!HOOK MAIN
[   0.301][d][vo/gpu-next/libplacebo] [706] //!BIND conv2d_tf
[   0.301][d][vo/gpu-next/libplacebo] [707] //!BIND conv2d_tf1
[   0.301][d][vo/gpu-next/libplacebo] [708] //!BIND conv2d_1_tf
[   0.301][d][vo/gpu-next/libplacebo] [709] //!BIND conv2d_1_tf1
[   0.301][d][vo/gpu-next/libplacebo] [710] //!BIND conv2d_2_tf
[   0.301][d][vo/gpu-next/libplacebo] [711] //!BIND conv2d_2_tf1
[   0.301][d][vo/gpu-next/libplacebo] [712] //!BIND conv2d_3_tf
[   0.301][d][vo/gpu-next/libplacebo] [713] //!BIND conv2d_3_tf1
[   0.301][d][vo/gpu-next/libplacebo] [714] //!BIND conv2d_4_tf
[   0.301][d][vo/gpu-next/libplacebo] [715] //!BIND conv2d_4_tf1
[   0.301][d][vo/gpu-next/libplacebo] [716] //!BIND conv2d_5_tf
[   0.301][d][vo/gpu-next/libplacebo] [717] //!BIND conv2d_5_tf1
[   0.301][d][vo/gpu-next/libplacebo] [718] //!BIND conv2d_6_tf
[   0.301][d][vo/gpu-next/libplacebo] [719] //!BIND conv2d_6_tf1
[   0.301][d][vo/gpu-next/libplacebo] [720] //!SAVE conv2d_last_tf
[   0.301][d][vo/gpu-next/libplacebo] [721] //!WIDTH conv2d_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [722] //!HEIGHT conv2d_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [723] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [724] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [725] #define g_0 (max((conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [726] #define g_1 (max((conv2d_tf1_tex(conv2d_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [727] #define g_2 (max(-(conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [728] #define g_3 (max(-(conv2d_tf1_tex(conv2d_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [729] #define g_4 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [730] #define g_5 (max((conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [731] #define g_6 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [732] #define g_7 (max(-(conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [733] #define g_8 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [734] #define g_9 (max((conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [735] #define g_10 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [736] #define g_11 (max(-(conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [737] #define g_12 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [738] #define g_13 (max((conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [739] #define g_14 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [740] #define g_15 (max(-(conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [741] #define g_16 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [742] #define g_17 (max((conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [743] #define g_18 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [744] #define g_19 (max(-(conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [745] #define g_20 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [746] #define g_21 (max((conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [747] #define g_22 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [748] #define g_23 (max(-(conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [749] #define g_24 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [750] #define g_25 (max((conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [751] #define g_26 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [752] #define g_27 (max(-(conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [753] vec4 hook() {
[   0.301][d][vo/gpu-next/libplacebo] [754]     vec4 result = mat4(-0.11498094, -0.053904895, -0.11520678, -0.05479549, 0.028396055, 0.032767884, 0.052479446, 0.05257866, -0.25706592, -0.3454966, -0.24713765, -0.2854201, -0.10287636, 0.0023146886, -0.09190338, -0.011193905) * g_0;
[   0.301][d][vo/gpu-next/libplacebo] [755]     result += mat4(-0.05461422, 0.008780496, -0.07738697, -0.032230727, -0.047554165, -0.025061952, -0.051897213, -0.009545297, -0.14548294, -0.15184018, -0.01313442, -0.015299784, -0.0007883845, -0.12866738, -0.15260352, -0.27081275) * g_1;
[   0.301][d][vo/gpu-next/libplacebo] [756]     result += mat4(0.11007706, 0.035344437, 0.11020841, 0.0425353, 0.1613199, 0.18417408, 0.09274313, 0.11943135, 0.106862, 0.079875536, 0.0937752, 0.068030775, 0.029093558, -0.06441164, 0.06467169, -0.021989612) * g_2;
[   0.301][d][vo/gpu-next/libplacebo] [757]     result += mat4(0.049548414, -0.012455486, 0.07185561, 0.021865537, 0.020969186, -0.03374196, -0.024260623, -0.07739141, 0.07164591, 0.12741035, 0.0379913, 0.076403245, 0.07049977, 0.0744538, 0.0062989634, 0.01818882) * g_3;
[   0.301][d][vo/gpu-next/libplacebo] [758]     result += mat4(-0.12511204, -0.010836819, 0.13709816, 0.22472954, 0.21280868, -0.006484726, 0.17554289, -0.009977173, 0.078398876, 0.20698707, 0.13432744, 0.29740283, -0.24750128, -0.32757792, -0.19807857, -0.2537023) * g_4;
[   0.301][d][vo/gpu-next/libplacebo] [759]     result += mat4(-0.27207088, -0.1385644, -0.2166476, -0.07687419, -0.20300622, -0.29678395, -0.13135734, -0.20851587, 0.0361364, 0.011243289, -0.06845459, -0.11796941, 0.11575868, 0.070215136, -0.10295678, -0.12281369) * g_5;
[   0.301][d][vo/gpu-next/libplacebo] [760]     result += mat4(0.13619795, -0.0019436983, -0.12701888, -0.25933513, -0.20134166, 0.00062823144, -0.076756015, 0.11002947, 0.0059049693, -0.18756741, -0.0718802, -0.2589954, 0.23413423, 0.30107784, 0.14445266, 0.18920745) * g_6;
[   0.301][d][vo/gpu-next/libplacebo] [761]     result += mat4(0.1494216, 0.0587532, 0.05478662, -0.039123338, 0.23322394, 0.29950607, 0.24384268, 0.27843767, -0.16094431, -0.04705998, -0.016345032, 0.028868208, -0.102872886, -0.04659664, 0.104105346, 0.14305067) * g_7;
[   0.301][d][vo/gpu-next/libplacebo] [762]     result += mat4(-0.001037014, 0.010001526, -0.0052278573, 0.024779709, 0.06857274, 0.067640975, 0.085439384, 0.09242789, -0.066597246, -0.055928994, 0.0015658981, 0.016131008, -0.03524695, -0.018364554, -0.047754433, -0.014295886) * g_8;
[   0.301][d][vo/gpu-next/libplacebo] [763]     result += mat4(-0.042207, 0.02835915, -0.1404656, -0.08563323, -0.030979915, -0.0673764, 0.10733943, 0.057902794, 0.00022424995, -0.0023634837, -0.10778953, -0.10202357, -0.020368295, -0.019088887, -0.06875738, -0.08504131) * g_9;
[   0.301][d][vo/gpu-next/libplacebo] [764]     result += mat4(-0.00043458896, 0.00045652856, -0.02016843, -0.020062413, -0.08740103, -0.042085808, -0.10644177, -0.09226477, 0.11212161, -0.00048174805, 0.021872435, -0.05868698, 0.0333954, 0.058184672, 0.05532576, 0.07621587) * g_10;
[   0.301][d][vo/gpu-next/libplacebo] [765]     result += mat4(0.054245148, 0.001020329, 0.09106849, 0.05303779, 0.009889632, 0.01309413, -0.09187347, -0.08618193, -0.011621187, 0.016222361, 0.061095525, 0.060885344, 0.078050986, 0.0111776795, 0.08829944, 0.032022282) * g_11;
[   0.301][d][vo/gpu-next/libplacebo] [766]     result += mat4(0.01643529, 0.02285545, -0.03498564, 0.00769657, -0.0042474116, 0.015836312, -0.025771018, -0.0016368, -0.008897948, -0.012588166, -0.01416411, -0.003578984, 0.025991246, 0.021237152, 0.017450012, 0.025172485) * g_12;
[   0.301][d][vo/gpu-next/libplacebo] [767]     result += mat4(0.014568868, 0.017796224, -0.036679734, -0.03138748, 0.019457601, -0.027607411, -0.004529679, -0.038048342, -0.054055385, -0.03876025, 0.041948095, 0.005869784, 0.02439633, 0.05177997, 0.016000897, 0.0057169925) * g_13;
[   0.301][d][vo/gpu-next/libplacebo] [768]     result += mat4(-0.03021866, 0.017678728, -0.01371109, 0.013548159, -0.0038099394, -0.014066414, 0.028093752, 0.0027308422, -0.010615999, 0.012673458, -0.03028171, -0.016818244, -0.06530097, -0.018845048, -0.0072947564, -0.0038243714) * g_14;
[   0.301][d][vo/gpu-next/libplacebo] [769]     result += mat4(-0.019006258, -0.007847591, 0.03690709, 0.06714211, 0.0073993434, -0.009766907, -0.0021441753, -0.01308625, 0.06658726, 0.06701995, -0.027305668, -0.016032105, -0.028976806, -0.0036668575, -0.0027825525, 0.0105632655) * g_15;
[   0.301][d][vo/gpu-next/libplacebo] [770]     result += mat4(0.028945107, -0.0014701135, 0.048950657, -0.01923516, -0.0014054152, 0.002650635, -0.005300331, 0.004860559, 0.011158468, 0.005940625, -0.012095051, 0.0041518128, -0.020433836, -0.025870577, -0.0007547932, -0.026509356) * g_16;
[   0.301][d][vo/gpu-next/libplacebo] [771]     result += mat4(-0.004545374, 0.04264545, 0.021741537, 0.029115127, 0.04225599, -0.0055392785, 0.026570829, -0.031795148, -0.008307126, 0.020176455, 0.010904648, 0.017765503, -0.10806103, -0.01776947, 0.00070428237, -0.06356262) * g_17;
[   0.301][d][vo/gpu-next/libplacebo] [772]     result += mat4(-0.05663172, 0.05908046, -0.03837452, 0.06636983, -0.007960516, -0.06384041, 0.023125881, -0.030108837, 0.0038054318, -0.023263922, 0.020264054, -0.0062937695, 0.031630237, 0.020909082, 0.03594235, 0.035879835) * g_18;
[   0.301][d][vo/gpu-next/libplacebo] [773]     result += mat4(-0.0050448794, 0.033650696, -0.002830413, 0.035174295, -0.024521282, 0.013054315, -0.020833842, 0.037953895, 0.08249671, 0.024239466, -0.012758333, -0.027316988, 0.051040914, 0.0005025873, 0.039778862, 0.0024668393) * g_19;
[   0.301][d][vo/gpu-next/libplacebo] [774]     result += mat4(0.017232442, 0.022482058, 0.020233413, 0.024337437, 0.07986929, 0.06234036, 0.12662584, -0.05271183, -0.009718745, -0.0046989853, -0.0030333172, -0.04034237, -0.0113442, 0.022746231, -0.035293855, -0.009433693) * g_20;
[   0.301][d][vo/gpu-next/libplacebo] [775]     result += mat4(0.015766997, 0.013647276, -0.029327558, 0.039106004, -0.010398323, -0.032851525, 0.02908329, -0.003789618, 0.12963496, 0.010851003, 0.1126276, -0.049255487, 0.06867432, 0.07970792, 0.017840397, -0.026481882) * g_21;
[   0.301][d][vo/gpu-next/libplacebo] [776]     result += mat4(-0.058729574, -0.07886952, 0.033267397, 0.02755372, -0.0172006, 0.012404398, -0.0230168, -0.015059758, -0.09239916, -0.029533267, -0.043251917, 0.0035152994, 0.022931995, 0.101714484, -0.044946067, 0.094993) * g_22;
[   0.301][d][vo/gpu-next/libplacebo] [777]     result += mat4(-0.04708704, -0.032475296, -0.03228093, -0.08810475, 0.013745045, 0.027828002, -0.031922746, 0.022986397, -0.061620213, -0.03694645, -0.055026993, 0.0031291894, -0.028799903, -0.0025357977, -0.03441407, 0.0028600092) * g_23;
[   0.301][d][vo/gpu-next/libplacebo] [778]     result += mat4(0.058981724, -0.10447273, -0.088705614, 0.16546178, -0.023549391, -0.008831522, -0.018411588, 0.029640056, -0.068086684, -0.05414636, -0.029401174, 0.036180343, -0.031988926, -0.047249753, 0.008162177, 0.00548062) * g_24;
[   0.301][d][vo/gpu-next/libplacebo] [779]     result += mat4(0.05287462, -0.030657746, 0.02821435, 0.037005343, 0.03534311, -0.15614955, 0.07085459, -0.11997641, -0.009156166, -0.021968868, -0.054147746, -0.07307657, -0.006428544, -0.017528288, 0.012614676, 0.037840024) * g_25;
[   0.301][d][vo/gpu-next/libplacebo] [780]     result += mat4(-0.021977803, 0.047799855, 0.02660416, -0.07292106, 0.045195807, -0.0056674764, 0.10824326, -0.112114795, 0.1447127, -0.0119616175, 0.0011661504, -0.04553905, 0.13048342, 0.14574122, -0.105522245, -0.102792375) * g_26;
[   0.301][d][vo/gpu-next/libplacebo] [781]     result += mat4(-0.16397473, 0.15785863, -0.06666504, -0.01682913, 0.06070918, 0.070222184, 0.037701584, 0.026657054, -0.0835267, -0.009457008, 0.13232987, 0.13508691, -0.056414206, -0.06818828, 0.079076104, 0.032249212) * g_27;
[   0.301][d][vo/gpu-next/libplacebo] [782]     result += vec4(-0.10795144, -0.09953324, -0.055413827, -0.03875493);
[   0.301][d][vo/gpu-next/libplacebo] [783]     return result;
[   0.301][d][vo/gpu-next/libplacebo] [784] }
[   0.301][d][vo/gpu-next/libplacebo] [785] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x1x1x112
[   0.301][d][vo/gpu-next/libplacebo] [786] //!HOOK MAIN
[   0.301][d][vo/gpu-next/libplacebo] [787] //!BIND conv2d_tf
[   0.301][d][vo/gpu-next/libplacebo] [788] //!BIND conv2d_tf1
[   0.301][d][vo/gpu-next/libplacebo] [789] //!BIND conv2d_1_tf
[   0.301][d][vo/gpu-next/libplacebo] [790] //!BIND conv2d_1_tf1
[   0.301][d][vo/gpu-next/libplacebo] [791] //!BIND conv2d_2_tf
[   0.301][d][vo/gpu-next/libplacebo] [792] //!BIND conv2d_2_tf1
[   0.301][d][vo/gpu-next/libplacebo] [793] //!BIND conv2d_3_tf
[   0.301][d][vo/gpu-next/libplacebo] [794] //!BIND conv2d_3_tf1
[   0.301][d][vo/gpu-next/libplacebo] [795] //!BIND conv2d_4_tf
[   0.301][d][vo/gpu-next/libplacebo] [796] //!BIND conv2d_4_tf1
[   0.301][d][vo/gpu-next/libplacebo] [797] //!BIND conv2d_5_tf
[   0.301][d][vo/gpu-next/libplacebo] [798] //!BIND conv2d_5_tf1
[   0.301][d][vo/gpu-next/libplacebo] [799] //!BIND conv2d_6_tf
[   0.301][d][vo/gpu-next/libplacebo] [800] //!BIND conv2d_6_tf1
[   0.301][d][vo/gpu-next/libplacebo] [801] //!SAVE conv2d_last_tf1
[   0.301][d][vo/gpu-next/libplacebo] [802] //!WIDTH conv2d_tf.w
[   0.301][d][vo/gpu-next/libplacebo] [803] //!HEIGHT conv2d_tf.h
[   0.301][d][vo/gpu-next/libplacebo] [804] //!COMPONENTS 4
[   0.301][d][vo/gpu-next/libplacebo] [805] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.301][d][vo/gpu-next/libplacebo] [806] #define g_0 (max((conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [807] #define g_1 (max((conv2d_tf1_tex(conv2d_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [808] #define g_2 (max(-(conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [809] #define g_3 (max(-(conv2d_tf1_tex(conv2d_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [810] #define g_4 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [811] #define g_5 (max((conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.301][d][vo/gpu-next/libplacebo] [812] #define g_6 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [813] #define g_7 (max(-(conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [814] #define g_8 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [815] #define g_9 (max((conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [816] #define g_10 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [817] #define g_11 (max(-(conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [818] #define g_12 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [819] #define g_13 (max((conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [820] #define g_14 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [821] #define g_15 (max(-(conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [822] #define g_16 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [823] #define g_17 (max((conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [824] #define g_18 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [825] #define g_19 (max(-(conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [826] #define g_20 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [827] #define g_21 (max((conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [828] #define g_22 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [829] #define g_23 (max(-(conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [830] #define g_24 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [831] #define g_25 (max((conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [832] #define g_26 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [833] #define g_27 (max(-(conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [834] vec4 hook() {
[   0.302][d][vo/gpu-next/libplacebo] [835]     vec4 result = mat4(0.024905335, -0.0020974763, 0.02695263, 0.00016802056, -0.024053082, -0.02133723, -0.031614035, -0.031826317, 0.120421864, 0.10555479, 0.08609448, 0.116875134, 0.046175968, 0.04224941, 0.059216674, 0.035143953) * g_0;
[   0.302][d][vo/gpu-next/libplacebo] [836]     result += mat4(0.059397914, 0.016519934, 0.07189327, 0.047407165, 0.04808963, 0.02792908, 0.057017103, 0.034324065, 0.14228246, 0.11275426, 0.088058695, 0.059600517, 0.02063494, 0.052596953, 0.047207687, 0.08789091) * g_1;
[   0.302][d][vo/gpu-next/libplacebo] [837]     result += mat4(-0.013453174, 0.008474715, -0.017593835, 0.009218917, 0.070580654, 0.040542338, 0.08812338, 0.074653216, -0.016356857, 0.015809007, -0.008739107, 0.0097674895, -0.018381525, -0.007775341, -0.040571664, -0.011188163) * g_2;
[   0.302][d][vo/gpu-next/libplacebo] [838]     result += mat4(-0.026196122, -0.034825727, -0.042998232, -0.033436514, -0.01678153, -0.004592797, -0.010311677, 0.0008815291, -0.08899181, -0.10274026, -0.066960976, -0.082430154, -0.057137426, -0.07554528, -0.030993424, -0.050372377) * g_3;
[   0.302][d][vo/gpu-next/libplacebo] [839]     result += mat4(0.022921838, -0.010479244, -0.050794605, -0.073633075, -0.053708922, 0.009594084, -0.071259, -0.01054356, 0.005165821, -0.08024963, -0.049251772, -0.09581235, 0.17995799, 0.09743011, 0.13533138, 0.11643848) * g_4;
[   0.302][d][vo/gpu-next/libplacebo] [840]     result += mat4(0.09727046, 0.07292666, 0.06820908, 0.041535784, -0.0049705, 0.0048759184, -0.035702795, -0.015944308, -0.010730028, 0.018847652, 0.06466244, 0.086318985, -0.05661574, -0.040698618, 0.010839972, 0.0027009705) * g_5;
[   0.302][d][vo/gpu-next/libplacebo] [841]     result += mat4(-0.04628466, 0.010060396, 0.02609333, 0.08664702, 0.057045907, 0.033591177, 0.02186063, -0.024303377, 0.006569828, 0.08025825, 0.016128821, 0.10180713, -0.12228169, -0.112990454, -0.078443415, -0.09126021) * g_6;
[   0.302][d][vo/gpu-next/libplacebo] [842]     result += mat4(-0.12733299, -0.087755, -0.07374111, -0.044979006, -0.025347412, -0.004083168, 0.023782173, 0.02900392, -0.017815407, -0.041119996, -0.057978686, -0.13521095, 0.08364004, 0.06950181, 0.023554614, 0.008043734) * g_7;
[   0.302][d][vo/gpu-next/libplacebo] [843]     result += mat4(0.009062775, -0.003570175, -0.007378757, -0.0018487388, 0.01145638, 0.05217187, -0.008250244, 0.008433307, -0.056756936, -0.044681005, -0.08096105, -0.08033185, -0.023784965, -0.01859799, 0.013042476, 0.021188647) * g_8;
[   0.302][d][vo/gpu-next/libplacebo] [844]     result += mat4(-0.0071619656, -0.012498299, -0.05144986, -0.078112476, -0.034992415, -0.017038302, -0.04464615, -0.044504963, 0.024249, -0.004297534, 0.03674578, 0.03090718, 0.04698553, 0.008344952, 0.057619847, -0.0338724) * g_9;
[   0.302][d][vo/gpu-next/libplacebo] [845]     result += mat4(-0.011845145, -0.0045043705, -1.6646482e-06, -0.0038495932, -0.01992515, 0.004827126, 0.019493148, 0.00862289, 0.10151322, 0.0021909082, 0.09940764, 0.03728846, 0.027824005, 0.04358071, 0.014909185, 0.036326095) * g_10;
[   0.302][d][vo/gpu-next/libplacebo] [846]     result += mat4(0.022513246, 0.028257169, 0.0102195935, 0.03301329, 0.052253865, -0.0021944977, 0.08247392, 0.03256867, -0.040685873, -0.0052207555, -0.0451257, -0.054165114, 0.01647699, 0.0028809097, -0.015233776, -0.0008741886) * g_11;
[   0.302][d][vo/gpu-next/libplacebo] [847]     result += mat4(0.017371105, 0.01597189, -0.052552313, -0.008554715, -0.0023150423, 0.006076517, -0.012868931, 0.0039361073, -0.007524978, -0.004284313, -0.021520883, -0.010327569, 0.02543678, 0.008725823, -0.0073885336, 0.005528395) * g_12;
[   0.302][d][vo/gpu-next/libplacebo] [848]     result += mat4(0.019192757, 0.016561812, 0.0027538154, 0.0013078215, 0.007916496, -0.042525183, -0.013173432, -0.05265476, -0.062195376, -0.011255499, 0.020898128, 0.021532273, -0.001524097, 0.034835674, -0.004051403, -0.0292426) * g_13;
[   0.302][d][vo/gpu-next/libplacebo] [849]     result += mat4(-0.049191684, -9.43322e-06, -0.009106849, 0.012845289, -0.019482708, -0.011163468, 0.0034011535, -0.007062845, -0.006469714, 0.03177786, -0.033006195, -0.0006813464, -0.053963087, 0.00085209147, 0.02734121, 0.034086403) * g_14;
[   0.302][d][vo/gpu-next/libplacebo] [850]     result += mat4(-0.03232248, -0.004037002, -0.010319106, 0.030889064, 0.019604538, 0.0020888883, 0.010277864, 0.000661223, 0.057915937, 0.030683514, 0.00042533095, -0.013019287, -0.015896408, 0.0038484468, -0.0042103594, 0.02174542) * g_15;
[   0.302][d][vo/gpu-next/libplacebo] [851]     result += mat4(0.032975145, 0.0011456647, 0.04913679, -0.017063798, 0.0117176045, 0.007440557, 0.0020480808, 0.009415731, 0.027573857, 0.015140836, -0.01679426, -0.006124731, -0.03206279, -0.029842237, -0.010428016, -0.028513178) * g_16;
[   0.302][d][vo/gpu-next/libplacebo] [852]     result += mat4(-0.00506859, 0.055869613, 0.010164368, 0.027031485, 0.042289548, -0.0054258504, 0.032214936, -0.029970925, -0.0058315448, 0.022889478, 0.01681123, 0.02985076, -0.111186065, -0.02202099, 0.0030994313, -0.062343158) * g_17;
[   0.302][d][vo/gpu-next/libplacebo] [853]     result += mat4(-0.060951103, 0.06079555, -0.0396464, 0.070911355, -0.011480358, -0.06803282, 0.01637355, -0.043100975, -0.00423709, -0.028337711, 0.021635853, 0.0014857082, 0.030084312, 0.018155476, 0.043694943, 0.038795974) * g_18;
[   0.302][d][vo/gpu-next/libplacebo] [854]     result += mat4(-0.0060662925, 0.029721662, -0.008117774, 0.034551267, -0.024477571, 0.018841071, -0.027095588, 0.034495078, 0.082398005, 0.008998768, -0.016399248, -0.043801688, 0.05936684, 0.006066549, 0.045399766, 3.5319943e-05) * g_19;
[   0.302][d][vo/gpu-next/libplacebo] [855]     result += mat4(0.019259382, 0.02494012, 0.029301709, 0.028329274, 0.09122267, 0.06900443, 0.1412115, -0.043169618, -0.01627418, -0.004989528, -0.0042651827, -0.04556752, -0.023623291, 0.013007996, -0.04483056, -0.015727345) * g_20;
[   0.302][d][vo/gpu-next/libplacebo] [856]     result += mat4(0.016332543, 0.016384754, -0.030676385, 0.045312885, -0.0100853555, -0.032632045, 0.031514473, -0.0070776115, 0.13642761, 0.0023589598, 0.12214136, -0.062155515, 0.08240989, 0.08894205, 0.03325406, -0.016589595) * g_21;
[   0.302][d][vo/gpu-next/libplacebo] [857]     result += mat4(-0.06494277, -0.08158925, 0.030425413, 0.019835634, -0.012624623, 0.013942616, -0.030527417, -0.021668324, -0.09444672, -0.033064254, -0.044167448, 0.0011024752, 0.03210801, 0.12662941, -0.03912534, 0.1112649) * g_22;
[   0.302][d][vo/gpu-next/libplacebo] [858]     result += mat4(-0.04716062, -0.03751481, -0.031030515, -0.09067383, 0.0077815712, 0.02169541, -0.035285182, 0.02290573, -0.0704085, -0.03916127, -0.058103334, 0.004915147, -0.0333844, -0.011548617, -0.031151932, -0.00043817286) * g_23;
[   0.302][d][vo/gpu-next/libplacebo] [859]     result += mat4(0.05976319, -0.107285, -0.097245865, 0.17706421, -0.021453341, -0.0047738464, -0.017621001, 0.033400454, -0.07225561, -0.05599672, -0.027600193, 0.038664024, -0.03762786, -0.052429967, 0.0104017975, 0.007116869) * g_24;
[   0.302][d][vo/gpu-next/libplacebo] [860]     result += mat4(0.06014114, -0.029824806, 0.03209269, 0.04392036, 0.031300627, -0.16249833, 0.06878509, -0.12658615, -0.012383169, -0.025043553, -0.06527381, -0.08149099, -0.014006842, -0.018669648, 0.014510818, 0.042045828) * g_25;
[   0.302][d][vo/gpu-next/libplacebo] [861]     result += mat4(-0.023342922, 0.047104675, 0.029629575, -0.082307704, 0.04035797, -0.0013049254, 0.11085582, -0.11031226, 0.14778149, -0.016699014, -0.00634342, -0.055320874, 0.14306462, 0.15896587, -0.110229075, -0.1069649) * g_26;
[   0.302][d][vo/gpu-next/libplacebo] [862]     result += mat4(-0.17449625, 0.15787153, -0.06711028, -0.023110518, 0.06862914, 0.074063435, 0.042682912, 0.029800726, -0.08768606, -0.009814701, 0.14180017, 0.14780663, -0.05672417, -0.074305914, 0.07873489, 0.028458012) * g_27;
[   0.302][d][vo/gpu-next/libplacebo] [863]     result += vec4(0.06026231, 0.040204916, 0.037672628, 0.023496555);
[   0.302][d][vo/gpu-next/libplacebo] [864]     return result;
[   0.302][d][vo/gpu-next/libplacebo] [865] }
[   0.302][d][vo/gpu-next/libplacebo] [866] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Conv-4x1x1x112
[   0.302][d][vo/gpu-next/libplacebo] [867] //!HOOK MAIN
[   0.302][d][vo/gpu-next/libplacebo] [868] //!BIND conv2d_tf
[   0.302][d][vo/gpu-next/libplacebo] [869] //!BIND conv2d_tf1
[   0.302][d][vo/gpu-next/libplacebo] [870] //!BIND conv2d_1_tf
[   0.302][d][vo/gpu-next/libplacebo] [871] //!BIND conv2d_1_tf1
[   0.302][d][vo/gpu-next/libplacebo] [872] //!BIND conv2d_2_tf
[   0.302][d][vo/gpu-next/libplacebo] [873] //!BIND conv2d_2_tf1
[   0.302][d][vo/gpu-next/libplacebo] [874] //!BIND conv2d_3_tf
[   0.302][d][vo/gpu-next/libplacebo] [875] //!BIND conv2d_3_tf1
[   0.302][d][vo/gpu-next/libplacebo] [876] //!BIND conv2d_4_tf
[   0.302][d][vo/gpu-next/libplacebo] [877] //!BIND conv2d_4_tf1
[   0.302][d][vo/gpu-next/libplacebo] [878] //!BIND conv2d_5_tf
[   0.302][d][vo/gpu-next/libplacebo] [879] //!BIND conv2d_5_tf1
[   0.302][d][vo/gpu-next/libplacebo] [880] //!BIND conv2d_6_tf
[   0.302][d][vo/gpu-next/libplacebo] [881] //!BIND conv2d_6_tf1
[   0.302][d][vo/gpu-next/libplacebo] [882] //!SAVE conv2d_last_tf2
[   0.302][d][vo/gpu-next/libplacebo] [883] //!WIDTH conv2d_tf.w
[   0.302][d][vo/gpu-next/libplacebo] [884] //!HEIGHT conv2d_tf.h
[   0.302][d][vo/gpu-next/libplacebo] [885] //!COMPONENTS 4
[   0.302][d][vo/gpu-next/libplacebo] [886] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.302][d][vo/gpu-next/libplacebo] [887] #define g_0 (max((conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [888] #define g_1 (max((conv2d_tf1_tex(conv2d_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [889] #define g_2 (max(-(conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [890] #define g_3 (max(-(conv2d_tf1_tex(conv2d_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [891] #define g_4 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [892] #define g_5 (max((conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [893] #define g_6 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [894] #define g_7 (max(-(conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [895] #define g_8 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [896] #define g_9 (max((conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [897] #define g_10 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [898] #define g_11 (max(-(conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [899] #define g_12 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [900] #define g_13 (max((conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [901] #define g_14 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [902] #define g_15 (max(-(conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [903] #define g_16 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [904] #define g_17 (max((conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [905] #define g_18 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [906] #define g_19 (max(-(conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [907] #define g_20 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [908] #define g_21 (max((conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [909] #define g_22 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [910] #define g_23 (max(-(conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [911] #define g_24 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [912] #define g_25 (max((conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [913] #define g_26 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [914] #define g_27 (max(-(conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   0.302][d][vo/gpu-next/libplacebo] [915] vec4 hook() {
[   0.302][d][vo/gpu-next/libplacebo] [916]     vec4 result = mat4(0.1765669, 0.14268716, 0.19186598, 0.15799578, 0.016374417, 0.018578433, 0.0039475, 0.0046772263, 0.39840183, 0.36909792, 0.35409746, 0.37422222, -0.108508386, -0.1331279, -0.10336035, -0.14776541) * g_0;
[   0.302][d][vo/gpu-next/libplacebo] [917]     result += mat4(-0.057757027, -0.14071062, -0.025283009, -0.09397916, -0.09031894, -0.14219165, -0.08299535, -0.13970287, -0.12259208, -0.14382727, -0.22002274, -0.25016093, -0.048906635, 0.06620249, 0.016965045, 0.1295978) * g_1;
[   0.302][d][vo/gpu-next/libplacebo] [918]     result += mat4(-0.16748372, -0.13718611, -0.18565705, -0.15029612, -0.080749065, -0.09955825, 0.032431383, 0.023855643, -0.2748885, -0.23232168, -0.29121292, -0.26405892, 0.16556135, 0.18657646, 0.1424068, 0.18855052) * g_2;
[   0.302][d][vo/gpu-next/libplacebo] [919]     result += mat4(0.10960496, 0.10851629, 0.095003806, 0.11053746, 0.09885307, 0.14437789, 0.13191165, 0.17365928, 0.16558935, 0.15473324, 0.21136154, 0.19976667, -0.07267957, -0.11469687, -0.029134216, -0.06817615) * g_3;
[   0.302][d][vo/gpu-next/libplacebo] [920]     result += mat4(0.10202856, 0.04216857, -0.03959349, -0.09849683, -0.1576996, -0.049997438, -0.1579918, -0.058789205, 0.029792828, -0.07311781, -0.045432188, -0.11312683, 0.24257647, 0.16204113, 0.17869382, 0.16024388) * g_4;
[   0.302][d][vo/gpu-next/libplacebo] [921]     result += mat4(0.17193612, 0.12692013, 0.13177487, 0.0796725, 0.0797928, 0.08952722, -0.012468046, 0.011071511, -0.068559825, -0.024852324, 0.0526428, 0.07917346, -0.085534215, -0.09591339, 0.04615827, 0.024577664) * g_5;
[   0.302][d][vo/gpu-next/libplacebo] [922]     result += mat4(-0.14653449, -0.067267366, -0.002524394, 0.086243175, 0.13660401, 0.08039592, 0.09179008, 0.022573143, -0.024744196, 0.09120211, 0.017654825, 0.14114714, -0.16093308, -0.14538004, -0.09950235, -0.111152865) * g_6;
[   0.302][d][vo/gpu-next/libplacebo] [923]     result += mat4(-0.188637, -0.12968326, -0.1200479, -0.06537649, -0.12589337, -0.106242515, -0.02788782, -0.025949068, 0.04948153, 0.02222735, -0.025291357, -0.12379292, 0.11074645, 0.11902375, -0.00056989543, -0.0024386419) * g_7;
[   0.302][d][vo/gpu-next/libplacebo] [924]     result += mat4(0.018286629, 0.0072215167, 0.00037828335, 0.0047001047, 0.011478272, 0.041745186, -0.015742473, -0.002282524, -0.03440817, -0.02196847, -0.07838253, -0.07993771, -0.010155526, -0.017590692, 0.027141469, 0.029741213) * g_8;
[   0.302][d][vo/gpu-next/libplacebo] [925]     result += mat4(0.016512005, 0.004950637, -0.0238836, -0.05587327, -0.03164328, -0.009499985, -0.059880238, -0.061794154, 0.023154303, -0.013266373, 0.04701534, 0.0415862, 0.06357814, 0.033057794, 0.08389772, 0.00035060212) * g_9;
[   0.302][d][vo/gpu-next/libplacebo] [926]     result += mat4(-0.016403968, -0.012538788, -0.0015746636, -0.004771009, -0.021361275, -0.009695242, 0.020548422, -0.0024130535, 0.07796766, -0.01516671, 0.09961382, 0.042754963, 0.017363647, 0.03729065, -0.004795824, 0.01550197) * g_10;
[   0.302][d][vo/gpu-next/libplacebo] [927]     result += mat4(-0.0028093113, 0.011869523, -0.02216933, 0.011177349, 0.033342455, -0.021146454, 0.07830085, 0.032490104, -0.03281833, 0.0060484232, -0.04081057, -0.04945058, -0.0056189033, -0.010636801, -0.041949317, -0.025739705) * g_11;
[   0.302][d][vo/gpu-next/libplacebo] [928]     result += mat4(0.012979897, 0.016758928, -0.049062215, -0.0035748442, 0.0085972, 0.0036381132, -0.0055621094, 0.0041307937, -0.0008907763, -0.0034079372, -0.025680453, -0.015531803, 0.012816766, 0.009977763, -0.016416566, 0.0034859509) * g_12;
[   0.302][d][vo/gpu-next/libplacebo] [929]     result += mat4(0.021753248, 0.016452711, 0.009833835, 0.0065052663, 0.0014061348, -0.046160888, -0.0132271005, -0.05051269, -0.05746351, -0.0012690664, 0.017191738, 0.018192926, -0.008879476, 0.026354216, -0.012801991, -0.029587373) * g_13;
[   0.302][d][vo/gpu-next/libplacebo] [930]     result += mat4(-0.04220692, -0.0015560482, -0.0019648245, 0.013402305, -0.018259782, -0.0036008905, 0.0035650074, -0.0019178417, 0.00051580026, 0.027355857, -0.017914988, 0.004937948, -0.046335887, 0.00013612259, 0.030293299, 0.030688645) * g_14;
[   0.302][d][vo/gpu-next/libplacebo] [931]     result += mat4(-0.036683388, -0.0031274238, -0.026074665, 0.021684237, 0.022639066, 0.0022493738, 0.011508554, -0.0006385944, 0.04890418, 0.020119468, 0.004167364, -0.008356099, -0.008598796, 0.0089028, -0.0029575853, 0.016687104) * g_15;
[   0.302][d][vo/gpu-next/libplacebo] [932]     result += mat4(0.027207986, 0.0011099194, 0.042383645, -0.015179333, 0.014744431, 0.006148344, 0.005165422, 0.0070196544, 0.030286826, 0.016620956, -0.01611366, -0.00667594, -0.029524863, -0.024751091, -0.013321004, -0.025199674) * g_16;
[   0.302][d][vo/gpu-next/libplacebo] [933]     result += mat4(0.0027477827, 0.054622147, 0.010154094, 0.025437292, 0.031773083, -0.01055473, 0.022864206, -0.029010754, -0.0029999653, 0.025018329, 0.015316208, 0.027188798, -0.10096525, -0.017268656, 0.0012529213, -0.062078856) * g_17;
[   0.302][d][vo/gpu-next/libplacebo] [934]     result += mat4(-0.053670805, 0.057336535, -0.037418038, 0.06443577, -0.016027879, -0.058168363, 0.007034215, -0.03390141, -0.0019346164, -0.027947908, 0.021723913, -0.0018286633, 0.030507812, 0.018293543, 0.042917266, 0.033528328) * g_18;
[   0.302][d][vo/gpu-next/libplacebo] [935]     result += mat4(-0.004559579, 0.029667616, -0.001870353, 0.0378995, -0.017147437, 0.020192018, -0.021574946, 0.031568103, 0.07487145, 0.0032376775, -0.018893708, -0.041981626, 0.054478757, 0.0061423797, 0.041280247, 0.000878061) * g_19;
[   0.302][d][vo/gpu-next/libplacebo] [936]     result += mat4(0.017076394, 0.023647636, 0.029403262, 0.029923365, 0.08866472, 0.060613394, 0.1314274, -0.04490231, -0.016304834, -0.0062647443, -0.0031828512, -0.03989252, -0.024330825, 0.00741213, -0.04075287, -0.01615817) * g_20;
[   0.302][d][vo/gpu-next/libplacebo] [937]     result += mat4(0.017866978, 0.017720113, -0.02846163, 0.040761847, -0.0063438355, -0.02347501, 0.029564403, -0.0029562064, 0.12505588, -0.0073986333, 0.11250363, -0.06179967, 0.07854423, 0.08546533, 0.034743227, -0.010757377) * g_21;
[   0.302][d][vo/gpu-next/libplacebo] [938]     result += mat4(-0.06416677, -0.08344284, 0.030138884, 0.017635904, -0.012087523, 0.014205202, -0.03221233, -0.023834767, -0.091186255, -0.028958676, -0.04724334, 0.00013161585, 0.027391518, 0.1249978, -0.045047652, 0.10737729) * g_22;
[   0.302][d][vo/gpu-next/libplacebo] [939]     result += mat4(-0.04326348, -0.03543181, -0.029558217, -0.08582413, 0.007812453, 0.014296562, -0.028779754, 0.018517692, -0.063755795, -0.036619596, -0.050809663, 0.005431336, -0.029205568, -0.011827915, -0.031110523, -0.005648626) * g_23;
[   0.302][d][vo/gpu-next/libplacebo] [940]     result += mat4(0.05499293, -0.10000709, -0.0943537, 0.16143042, -0.019952895, -0.0039807972, -0.014841254, 0.0320363, -0.065173544, -0.049425576, -0.023904482, 0.03759679, -0.03207411, -0.047782745, 0.01352581, 0.008140566) * g_24;
[   0.302][d][vo/gpu-next/libplacebo] [941]     result += mat4(0.055923894, -0.025134467, 0.029583648, 0.04096879, 0.027551858, -0.14995384, 0.06467113, -0.11633077, -0.01563784, -0.026909819, -0.06292879, -0.078409635, -0.009081105, -0.015533088, 0.019585673, 0.04334208) * g_25;
[   0.302][d][vo/gpu-next/libplacebo] [942]     result += mat4(-0.021717606, 0.042464726, 0.02743202, -0.07388838, 0.03460472, 0.0038285658, 0.099842004, -0.098247, 0.13276267, -0.020793032, -0.008603039, -0.051913783, 0.12959045, 0.14735717, -0.10888226, -0.10263746) * g_26;
[   0.302][d][vo/gpu-next/libplacebo] [943]     result += mat4(-0.16819532, 0.141579, -0.062480718, -0.021918943, 0.06348125, 0.06849444, 0.03888676, 0.027375204, -0.08194279, -0.012574497, 0.13523251, 0.13739482, -0.047547445, -0.058767617, 0.07009549, 0.028136581) * g_27;
[   0.302][d][vo/gpu-next/libplacebo] [944]     result += vec4(0.069033325, 0.040207114, 0.027286075, 0.0065334598);
[   0.302][d][vo/gpu-next/libplacebo] [945]     return result;
[   0.302][d][vo/gpu-next/libplacebo] [946] }
[   0.302][d][vo/gpu-next/libplacebo] [947] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(VL)-Depth-to-Space
[   0.302][d][vo/gpu-next/libplacebo] [948] //!HOOK MAIN
[   0.302][d][vo/gpu-next/libplacebo] [949] //!BIND MAIN
[   0.302][d][vo/gpu-next/libplacebo] [950] //!BIND conv2d_last_tf
[   0.302][d][vo/gpu-next/libplacebo] [951] //!BIND conv2d_last_tf1
[   0.302][d][vo/gpu-next/libplacebo] [952] //!BIND conv2d_last_tf2
[   0.302][d][vo/gpu-next/libplacebo] [953] //!SAVE MAIN
[   0.302][d][vo/gpu-next/libplacebo] [954] //!WIDTH conv2d_last_tf.w 2 *
[   0.302][d][vo/gpu-next/libplacebo] [955] //!HEIGHT conv2d_last_tf.h 2 *
[   0.302][d][vo/gpu-next/libplacebo] [956] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.302][d][vo/gpu-next/libplacebo] [957] vec4 hook() {
[   0.302][d][vo/gpu-next/libplacebo] [958]     vec2 f0 = fract(conv2d_last_tf_pos * conv2d_last_tf_size);
[   0.302][d][vo/gpu-next/libplacebo] [959]     ivec2 i0 = ivec2(f0 * vec2(2.0));
[   0.302][d][vo/gpu-next/libplacebo] [960]     float c0 = conv2d_last_tf_tex((vec2(0.5) - f0) * conv2d_last_tf_pt + conv2d_last_tf_pos)[i0.y * 2 + i0.x];
[   0.302][d][vo/gpu-next/libplacebo] [961]     vec2 f1 = fract(conv2d_last_tf1_pos * conv2d_last_tf1_size);
[   0.302][d][vo/gpu-next/libplacebo] [962]     ivec2 i1 = ivec2(f1 * vec2(2.0));
[   0.302][d][vo/gpu-next/libplacebo] [963]     float c1 = conv2d_last_tf1_tex((vec2(0.5) - f1) * conv2d_last_tf1_pt + conv2d_last_tf1_pos)[i1.y * 2 + i1.x];
[   0.302][d][vo/gpu-next/libplacebo] [964]     vec2 f2 = fract(conv2d_last_tf2_pos * conv2d_last_tf2_size);
[   0.302][d][vo/gpu-next/libplacebo] [965]     ivec2 i2 = ivec2(f2 * vec2(2.0));
[   0.302][d][vo/gpu-next/libplacebo] [966]     float c2 = conv2d_last_tf2_tex((vec2(0.5) - f2) * conv2d_last_tf2_pt + conv2d_last_tf2_pos)[i2.y * 2 + i2.x];
[   0.302][d][vo/gpu-next/libplacebo] [967]     float c3 = c2;
[   0.302][d][vo/gpu-next/libplacebo] [968]     return vec4(c0, c1, c2, c3) + MAIN_tex(MAIN_pos);
[   0.302][d][vo/gpu-next/libplacebo] [969] }
[   0.311][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v4.0-AutoDownscalePre-x2
[   0.311][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.311][d][vo/gpu-next/libplacebo] [  1] // This is free and unencumbered software released into the public domain.
[   0.311][d][vo/gpu-next/libplacebo] [  2] 
[   0.311][d][vo/gpu-next/libplacebo] [  3] // Anyone is free to copy, modify, publish, use, compile, sell, or
[   0.311][d][vo/gpu-next/libplacebo] [  4] // distribute this software, either in source code form or as a compiled
[   0.311][d][vo/gpu-next/libplacebo] [  5] // binary, for any purpose, commercial or non-commercial, and by any
[   0.311][d][vo/gpu-next/libplacebo] [  6] // means.
[   0.311][d][vo/gpu-next/libplacebo] [  7] 
[   0.311][d][vo/gpu-next/libplacebo] [  8] // In jurisdictions that recognize copyright laws, the author or authors
[   0.311][d][vo/gpu-next/libplacebo] [  9] // of this software dedicate any and all copyright interest in the
[   0.311][d][vo/gpu-next/libplacebo] [ 10] // software to the public domain. We make this dedication for the benefit
[   0.311][d][vo/gpu-next/libplacebo] [ 11] // of the public at large and to the detriment of our heirs and
[   0.311][d][vo/gpu-next/libplacebo] [ 12] // successors. We intend this dedication to be an overt act of
[   0.311][d][vo/gpu-next/libplacebo] [ 13] // relinquishment in perpetuity of all present and future rights to this
[   0.311][d][vo/gpu-next/libplacebo] [ 14] // software under copyright law.
[   0.311][d][vo/gpu-next/libplacebo] [ 15] 
[   0.311][d][vo/gpu-next/libplacebo] [ 16] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
[   0.311][d][vo/gpu-next/libplacebo] [ 17] // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
[   0.311][d][vo/gpu-next/libplacebo] [ 18] // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
[   0.311][d][vo/gpu-next/libplacebo] [ 19] // IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
[   0.311][d][vo/gpu-next/libplacebo] [ 20] // OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
[   0.311][d][vo/gpu-next/libplacebo] [ 21] // ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
[   0.311][d][vo/gpu-next/libplacebo] [ 22] // OTHER DEALINGS IN THE SOFTWARE.
[   0.311][d][vo/gpu-next/libplacebo] [ 23] 
[   0.311][d][vo/gpu-next/libplacebo] [ 24] // For more information, please refer to <https://unlicense.org>
[   0.311][d][vo/gpu-next/libplacebo] [ 25] 
[   0.311][d][vo/gpu-next/libplacebo] [ 26] //!DESC Anime4K-v4.0-AutoDownscalePre-x2
[   0.311][d][vo/gpu-next/libplacebo] [ 27] //!HOOK MAIN
[   0.311][d][vo/gpu-next/libplacebo] [ 28] //!BIND HOOKED
[   0.311][d][vo/gpu-next/libplacebo] [ 29] //!BIND NATIVE
[   0.311][d][vo/gpu-next/libplacebo] [ 30] //!WHEN OUTPUT.w NATIVE.w / 2.0 < OUTPUT.h NATIVE.h / 2.0 < * OUTPUT.w NATIVE.w / 1.2 > OUTPUT.h NATIVE.h / 1.2 > * *
[   0.311][d][vo/gpu-next/libplacebo] [ 31] //!WIDTH OUTPUT.w
[   0.311][d][vo/gpu-next/libplacebo] [ 32] //!HEIGHT OUTPUT.h
[   0.311][d][vo/gpu-next/libplacebo] [ 33] 
[   0.311][d][vo/gpu-next/libplacebo] [ 34] vec4 hook() {
[   0.311][d][vo/gpu-next/libplacebo] [ 35] 	return HOOKED_tex(HOOKED_pos);
[   0.311][d][vo/gpu-next/libplacebo] [ 36] }
[   0.319][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-AutoDownscalePre-x4
[   0.319][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.319][d][vo/gpu-next/libplacebo] [  1] // This is free and unencumbered software released into the public domain.
[   0.319][d][vo/gpu-next/libplacebo] [  2] 
[   0.319][d][vo/gpu-next/libplacebo] [  3] // Anyone is free to copy, modify, publish, use, compile, sell, or
[   0.319][d][vo/gpu-next/libplacebo] [  4] // distribute this software, either in source code form or as a compiled
[   0.319][d][vo/gpu-next/libplacebo] [  5] // binary, for any purpose, commercial or non-commercial, and by any
[   0.319][d][vo/gpu-next/libplacebo] [  6] // means.
[   0.319][d][vo/gpu-next/libplacebo] [  7] 
[   0.319][d][vo/gpu-next/libplacebo] [  8] // In jurisdictions that recognize copyright laws, the author or authors
[   0.319][d][vo/gpu-next/libplacebo] [  9] // of this software dedicate any and all copyright interest in the
[   0.319][d][vo/gpu-next/libplacebo] [ 10] // software to the public domain. We make this dedication for the benefit
[   0.319][d][vo/gpu-next/libplacebo] [ 11] // of the public at large and to the detriment of our heirs and
[   0.319][d][vo/gpu-next/libplacebo] [ 12] // successors. We intend this dedication to be an overt act of
[   0.319][d][vo/gpu-next/libplacebo] [ 13] // relinquishment in perpetuity of all present and future rights to this
[   0.319][d][vo/gpu-next/libplacebo] [ 14] // software under copyright law.
[   0.319][d][vo/gpu-next/libplacebo] [ 15] 
[   0.319][d][vo/gpu-next/libplacebo] [ 16] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
[   0.319][d][vo/gpu-next/libplacebo] [ 17] // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
[   0.319][d][vo/gpu-next/libplacebo] [ 18] // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
[   0.319][d][vo/gpu-next/libplacebo] [ 19] // IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
[   0.319][d][vo/gpu-next/libplacebo] [ 20] // OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
[   0.319][d][vo/gpu-next/libplacebo] [ 21] // ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
[   0.319][d][vo/gpu-next/libplacebo] [ 22] // OTHER DEALINGS IN THE SOFTWARE.
[   0.319][d][vo/gpu-next/libplacebo] [ 23] 
[   0.319][d][vo/gpu-next/libplacebo] [ 24] // For more information, please refer to <https://unlicense.org>
[   0.319][d][vo/gpu-next/libplacebo] [ 25] 
[   0.319][d][vo/gpu-next/libplacebo] [ 26] //!DESC Anime4K-v3.2-AutoDownscalePre-x4
[   0.319][d][vo/gpu-next/libplacebo] [ 27] //!HOOK MAIN
[   0.319][d][vo/gpu-next/libplacebo] [ 28] //!BIND HOOKED
[   0.319][d][vo/gpu-next/libplacebo] [ 29] //!BIND NATIVE
[   0.319][d][vo/gpu-next/libplacebo] [ 30] //!WHEN OUTPUT.w NATIVE.w / 4.0 < OUTPUT.h NATIVE.h / 4.0 < * OUTPUT.w NATIVE.w / 2.4 > OUTPUT.h NATIVE.h / 2.4 > * *
[   0.319][d][vo/gpu-next/libplacebo] [ 31] //!WIDTH OUTPUT.w 2 /
[   0.319][d][vo/gpu-next/libplacebo] [ 32] //!HEIGHT OUTPUT.h 2 /
[   0.319][d][vo/gpu-next/libplacebo] [ 33] 
[   0.319][d][vo/gpu-next/libplacebo] [ 34] vec4 hook() {
[   0.319][d][vo/gpu-next/libplacebo] [ 35] 	return HOOKED_tex(HOOKED_pos);
[   0.319][d][vo/gpu-next/libplacebo] [ 36] }
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x3
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x1x1x56
[   0.326][v][vo/gpu-next/libplacebo] Registering hook pass: Anime4K-v3.2-Upscale-CNN-x2-(M)-Depth-to-Space
[   0.326][d][vo/gpu-next/libplacebo] Loaded user shader:
[   0.326][d][vo/gpu-next/libplacebo] [  1] // MIT License
[   0.326][d][vo/gpu-next/libplacebo] [  2] 
[   0.326][d][vo/gpu-next/libplacebo] [  3] // Copyright (c) 2019-2021 bloc97
[   0.326][d][vo/gpu-next/libplacebo] [  4] // All rights reserved.
[   0.326][d][vo/gpu-next/libplacebo] [  5] 
[   0.326][d][vo/gpu-next/libplacebo] [  6] // Permission is hereby granted, free of charge, to any person obtaining a copy
[   0.326][d][vo/gpu-next/libplacebo] [  7] // of this software and associated documentation files (the "Software"), to deal
[   0.326][d][vo/gpu-next/libplacebo] [  8] // in the Software without restriction, including without limitation the rights
[   0.326][d][vo/gpu-next/libplacebo] [  9] // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
[   0.326][d][vo/gpu-next/libplacebo] [ 10] // copies of the Software, and to permit persons to whom the Software is
[   0.326][d][vo/gpu-next/libplacebo] [ 11] // furnished to do so, subject to the following conditions:
[   0.326][d][vo/gpu-next/libplacebo] [ 12] 
[   0.326][d][vo/gpu-next/libplacebo] [ 13] // The above copyright notice and this permission notice shall be included in all
[   0.326][d][vo/gpu-next/libplacebo] [ 14] // copies or substantial portions of the Software.
[   0.326][d][vo/gpu-next/libplacebo] [ 15] 
[   0.326][d][vo/gpu-next/libplacebo] [ 16] // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
[   0.326][d][vo/gpu-next/libplacebo] [ 17] // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
[   0.326][d][vo/gpu-next/libplacebo] [ 18] // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
[   0.326][d][vo/gpu-next/libplacebo] [ 19] // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
[   0.326][d][vo/gpu-next/libplacebo] [ 20] // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
[   0.326][d][vo/gpu-next/libplacebo] [ 21] // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
[   0.326][d][vo/gpu-next/libplacebo] [ 22] // SOFTWARE.
[   0.326][d][vo/gpu-next/libplacebo] [ 23] 
[   0.326][d][vo/gpu-next/libplacebo] [ 24] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x3
[   0.326][d][vo/gpu-next/libplacebo] [ 25] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [ 26] //!BIND MAIN
[   0.326][d][vo/gpu-next/libplacebo] [ 27] //!SAVE conv2d_tf
[   0.326][d][vo/gpu-next/libplacebo] [ 28] //!WIDTH MAIN.w
[   0.326][d][vo/gpu-next/libplacebo] [ 29] //!HEIGHT MAIN.h
[   0.326][d][vo/gpu-next/libplacebo] [ 30] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [ 31] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [ 32] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.326][d][vo/gpu-next/libplacebo] [ 33] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [ 34]     vec4 result = mat4(-0.010995803, 0.077095956, -0.043992598, 0.06048717, 0.1164834, -0.11689607, 0.072985925, -0.078805886, 0.01182932, 0.054985743, -0.09018186, 0.044907484, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 35]     result += mat4(0.1813623, -0.14752422, 0.025720436, -0.17639883, 0.15697388, 0.10445984, -0.1843076, 0.5264643, 0.047516696, -0.097305484, 0.09740847, -0.29619336, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 36]     result += mat4(-0.014534763, 0.09486465, 0.046173926, 0.039391946, 0.09609376, -0.060574662, 0.042200956, -0.3269777, 0.051006425, 0.059818447, 0.04366627, 0.17699827, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 37]     result += mat4(0.04268535, -0.08152529, 0.10577459, -0.036936995, -0.051562306, 0.054872766, 0.09194519, 0.0025066638, -0.01073954, 0.00064474024, 0.10038221, 0.02131141, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 38]     result += mat4(-0.51751363, -0.40028602, 0.3469574, 0.5933738, -0.91357684, -0.67692596, 0.57815677, 0.39809322, -0.16341521, -0.27169713, 0.12232366, 0.4318641, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 39]     result += mat4(0.12601124, -0.06263236, -0.45907676, -0.41514075, 0.3330334, -0.1929565, -0.6333532, -0.6552794, -0.045809917, 0.046351526, -0.26173338, -0.30252662, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 40]     result += mat4(0.0030332592, 0.012103107, 0.010537323, -0.02038607, 0.095558085, 0.097704545, 0.083433494, 0.026790185, 0.01943357, -0.061712462, -0.00015703632, -0.032268334, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 41]     result += mat4(0.016870102, 0.5215812, -0.11525501, 0.027527615, -0.09045733, 0.61310345, -0.1575268, 0.1905386, 0.020172214, 0.3503187, -0.08209157, -0.051328037, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 42]     result += mat4(0.005494087, -0.010656317, 0.07682753, -0.08116042, -0.03934524, 0.16589017, 0.101483546, -0.066603065, 0.03494657, -0.07885597, 0.074227594, 0.0016264897, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 43]     result += vec4(0.014463938, -0.0031906287, 0.007015422, -0.003888468);
[   0.326][d][vo/gpu-next/libplacebo] [ 44]     return result;
[   0.326][d][vo/gpu-next/libplacebo] [ 45] }
[   0.326][d][vo/gpu-next/libplacebo] [ 46] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][d][vo/gpu-next/libplacebo] [ 47] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [ 48] //!BIND conv2d_tf
[   0.326][d][vo/gpu-next/libplacebo] [ 49] //!SAVE conv2d_1_tf
[   0.326][d][vo/gpu-next/libplacebo] [ 50] //!WIDTH conv2d_tf.w
[   0.326][d][vo/gpu-next/libplacebo] [ 51] //!HEIGHT conv2d_tf.h
[   0.326][d][vo/gpu-next/libplacebo] [ 52] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [ 53] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [ 54] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [ 55] #define go_1(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [ 56] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [ 57]     vec4 result = mat4(-0.08532478, -0.14302494, -0.017921071, -0.0032664281, -0.09841952, 0.024187077, 0.10701477, 0.14110753, -0.05714981, -0.10897174, 0.073803626, 0.103992954, 0.07914382, 0.032193683, -0.18346278, -0.09723936) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 58]     result += mat4(-0.034482613, -0.10742312, -0.047286414, -0.08641124, -0.33896688, -0.036533825, -0.48337597, 0.034040943, -0.13598205, -0.080917805, 0.08540263, -0.012667689, -0.009171425, -0.120026454, -0.20536867, -0.032149274) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 59]     result += mat4(0.18687321, 0.066278316, 0.024327392, 0.08816582, -0.08017908, 0.09488853, 0.26018232, -0.101504356, 0.17487666, 0.31057635, 0.14785016, -0.09622089, -0.07537452, -0.13844088, -0.05810814, 0.09907489) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 60]     result += mat4(-0.04183032, 0.15207712, 0.005002397, 0.32277516, -0.16169126, -0.119836345, -0.04068436, -0.096728764, 0.11943901, 0.1789597, -0.20412198, 0.19009817, 0.36630696, 0.06946421, -0.5254373, -0.11896399) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 61]     result += mat4(-0.31916487, -0.98911583, 1.0728644, -0.39280394, 0.33458877, -0.17325239, -0.645045, -0.28524077, -0.14512783, 0.24996442, -0.09837877, 0.05468934, 0.31559715, -0.020504637, -0.026724018, 0.24507573) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 62]     result += mat4(-0.23759829, -0.08530173, -0.16665787, -0.22463752, 0.109896734, 0.13446991, -0.049552456, -0.02385489, -0.01245375, 0.3833208, 0.05758832, 0.1528937, 0.0501858, -0.19651426, 0.0076587177, -0.03297025) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 63]     result += mat4(0.14554465, -0.01826686, 0.10284085, -0.19152659, -0.017585073, -0.05511482, 0.06362406, 0.023924058, -0.0018977845, -0.103172876, 0.03287086, -0.20085956, 0.36062446, 0.10749464, -0.20984372, 0.018256644) * go_0(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 64]     result += mat4(-0.005534592, 0.3709197, -0.18287498, 0.1720451, 0.030155553, -0.023265475, 0.0058617783, -0.031765483, 0.037328955, -0.2730994, 0.35090837, -0.3269043, -0.028477207, 0.32756507, -0.15989502, 0.12158258) * go_0(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 65]     result += mat4(0.10873739, 0.19583772, 0.060394943, 0.09410379, -0.04739245, 0.026561242, 0.022990001, 0.1093272, -0.01071349, -0.022938967, -0.046423864, 0.2385325, -0.0319821, 0.046962265, 0.09081178, -0.11001857) * go_0(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 66]     result += mat4(0.13012704, 0.112289295, 0.030790284, -0.050499484, 0.11784853, 0.08107028, -0.07556717, -0.15643, 0.015249331, 0.015299608, 0.07748125, 0.054485757, 0.044857923, 0.12161275, -0.048292994, -0.033995003) * go_1(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 67]     result += mat4(0.12931514, 0.15114146, 0.070513315, 0.11246343, 0.4142387, 0.213479, -0.5439916, 0.07776645, 0.13109331, 0.2021147, 0.25932786, -0.22157331, 0.02377734, -0.014970623, -0.1943276, 0.18440372) * go_1(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 68]     result += mat4(-0.22365458, -0.19829084, -0.06881161, -0.06468993, 0.17202774, 0.0048758537, -0.09235021, 0.18941896, 0.064125344, -0.09067088, 0.09748182, 0.13561936, -0.05876288, -0.0122420965, -0.054380875, -0.17743628) * go_1(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 69]     result += mat4(0.18582906, -0.09263032, -0.08210888, -0.20515606, 0.11484005, 0.08557595, 0.0009253741, -0.051202174, -0.18535301, -0.1529345, -0.13092944, 0.03770747, -0.020947013, 0.19187425, -0.15494856, -0.048979875) * go_1(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 70]     result += mat4(-0.38131633, 0.4278787, 0.19763695, 0.27655518, -0.08711912, 0.07374453, -0.064803004, 0.5983854, 0.2361923, -0.057221692, -0.37138999, -0.24259573, 0.13890724, 0.25706333, -0.54021406, 0.08095518) * go_1(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 71]     result += mat4(0.0991328, -0.022651536, -0.029148921, -0.009812537, -0.09523686, -0.15704902, 0.052389514, 0.21561539, 0.1950314, -0.08572602, 0.0016523858, 0.14125621, -0.030999828, 0.12009709, 0.0373512, -0.105043754) * go_1(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 72]     result += mat4(-0.11251988, 0.12106985, 0.011923068, 0.3662747, 0.004800994, 0.017972551, 0.004761366, -0.07934206, -0.13755941, -0.022852683, 0.1502225, 0.009758547, -0.16964264, 0.00984782, 0.07855833, 0.035730787) * go_1(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 73]     result += mat4(0.01964957, -0.27226487, 0.033933397, -0.117632054, -0.009058229, 0.047830686, -0.01125145, 0.136628, 0.0056388285, 0.3028781, -0.12286517, 0.23498532, -0.009319075, -0.444048, 0.16174883, -0.06367683) * go_1(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 74]     result += mat4(0.02343933, -0.010915871, -0.058680378, -0.21886891, -0.010750894, -0.06671997, 0.0602906, -0.07903071, 0.066891186, 0.06650588, 0.14362891, -0.101870626, 0.02264628, -0.06940821, -0.077616625, 0.110911585) * go_1(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 75]     result += vec4(0.032014452, -0.020821465, 0.0826416, -0.002838458);
[   0.326][d][vo/gpu-next/libplacebo] [ 76]     return result;
[   0.326][d][vo/gpu-next/libplacebo] [ 77] }
[   0.326][d][vo/gpu-next/libplacebo] [ 78] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][d][vo/gpu-next/libplacebo] [ 79] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [ 80] //!BIND conv2d_1_tf
[   0.326][d][vo/gpu-next/libplacebo] [ 81] //!SAVE conv2d_2_tf
[   0.326][d][vo/gpu-next/libplacebo] [ 82] //!WIDTH conv2d_1_tf.w
[   0.326][d][vo/gpu-next/libplacebo] [ 83] //!HEIGHT conv2d_1_tf.h
[   0.326][d][vo/gpu-next/libplacebo] [ 84] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [ 85] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [ 86] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [ 87] #define go_1(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [ 88] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [ 89]     vec4 result = mat4(-0.06963679, -0.07560548, -0.069522075, 0.0038078027, -0.08002613, 0.13671301, 0.084461786, -0.039376218, 0.19136548, -0.123174496, 0.26566333, -0.16583005, -0.18664864, -0.023539122, -0.21928434, -0.026818147) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.16660932, -0.18558703, 0.37230486, 0.118128106, -0.14098641, 0.14659132, -0.22217897, 0.12952235, -0.4139033, -0.04308319, 0.12885277, -0.17986743, -0.23556231, -0.08351981, -0.43240538, 0.019033253) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.18008037, -0.04448665, 0.011906908, -0.023056917, 0.18136618, -0.04723555, -0.0050158803, -0.14823224, -0.2105281, 0.023047728, -0.14040631, -0.03178526, -0.13477588, -0.01820428, 0.058358394, 0.23792502) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.07363309, -0.061728477, 0.03573137, -0.0050971056, -0.012813505, -0.17236637, 0.1697835, 0.055788577, -0.22263195, 0.10324512, 0.58971673, -0.4872246, -0.1555681, 0.032747746, -0.096495196, 0.070196226) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.14174286, 0.099460006, -0.088765986, 0.58350676, -0.025177564, -0.46004987, 0.37007022, -0.11437029, -0.5164534, -0.60465246, 0.38859612, -0.32846406, 0.050266482, -0.20334712, 0.18316261, -0.19327633) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.09377763, -0.0012762006, -0.028991895, -0.26523829, 0.20173682, 0.037923716, -0.03174243, 0.07103378, -0.10764164, -0.30752546, 0.20556998, -0.1892279, 0.08115748, -0.023550175, -0.07627362, 0.11746628) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(-0.06998859, -0.017997518, 0.069938794, -0.14943017, -0.14179112, 0.16643842, -0.110231474, 0.08895815, -0.24074875, 0.3277253, -0.07435203, -0.23452802, 0.039962552, -0.07145652, -0.022511544, -0.04571222) * go_0(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.059785757, -0.23771374, -0.030571314, 0.25222278, 0.106601834, 0.34398326, 0.14511436, -0.03867526, -0.38982397, -0.11944689, 0.12997924, -0.13079585, 0.005729482, 0.012653905, -0.063693404, 0.09632285) * go_0(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.04933823, 0.0547175, 0.050636575, -0.10060694, 0.1344485, 0.19752938, -0.100068115, -0.028829506, -0.14096203, -0.079092234, 0.092109434, 0.011606209, -0.04052607, -0.008347507, 0.06956573, -0.028109524) * go_0(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.21918017, -0.11115073, 0.2262453, -0.06889667, -0.11256312, -0.07438075, -0.088454485, 0.13672407, -0.06905764, 0.08128395, 0.016103368, 0.050190717, 0.09691516, 0.05845721, 0.4886816, 0.041121427) * go_1(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.3449472, 0.09711974, -0.13881907, -0.018265123, 0.27855873, -0.07030004, 0.29545054, 0.37216932, 0.08657718, 0.099066615, -0.10574013, -0.17667885, -0.14855732, -0.11351448, 0.66945946, 0.11312157) * go_1(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.2526151, -0.04594331, -0.06606611, 0.09104881, 0.06857995, -0.075284235, -0.17664689, 0.21578754, 0.0696524, 0.09142951, 0.080997564, -0.0682772, -0.0011445724, -0.11736295, 0.2519232, -0.101926275) * go_1(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.12913518, 0.058357026, 0.195421, -0.15651494, 0.2877076, 0.0033844314, -0.07831594, 0.052855384, -0.031295884, 0.03301088, -0.18408822, 0.06732994, 0.23742151, -0.12568143, 0.22810535, -0.11545694) * go_1(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.49203303, -0.22656603, 0.1723193, -0.51250046, -0.09742038, 0.758559, -0.3387505, -0.6193586, 0.14136684, 0.27679884, -0.050113205, 0.31041816, -0.36475047, -0.48746544, 0.3233227, 0.4579754) * go_1(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.46636763, 0.1507748, -0.2581362, 0.15413165, -0.17160143, 0.14256273, -0.074575804, -0.099299066, -0.0017214464, 0.13778336, -0.07378213, -0.15489665, -0.10533715, -0.0011083825, 0.39584312, 0.0023906573) * go_1(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.026959421, -0.06391859, 0.0034752619, 0.14521928, -0.0010877338, -0.032619733, 0.005375293, -0.018952755, 0.03381545, -0.007652831, 0.034141563, 0.046016496, 0.11219674, 0.030913852, 0.077403754, 0.17192438) * go_1(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.040326044, 0.17290725, -0.1220239, -0.09594783, -0.025229257, 0.17913155, -0.26623353, -0.033396784, -0.03075146, 0.009143897, -0.0136083895, -0.13886899, 0.075683735, -0.11584183, 0.22182357, 0.19350322) * go_1(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.15726025, -0.10215694, -0.060057458, 0.26487043, -0.04075552, -0.016496127, 0.0015382086, 0.108562306, 0.026795091, 0.0441233, -0.08754318, -0.0460157, 0.048422016, 0.14107347, 0.07986661, 0.1047697) * go_1(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [107]     result += vec4(0.0766796, 0.08115133, -0.05703058, 0.14025708);
[   0.326][d][vo/gpu-next/libplacebo] [108]     return result;
[   0.326][d][vo/gpu-next/libplacebo] [109] }
[   0.326][d][vo/gpu-next/libplacebo] [110] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][d][vo/gpu-next/libplacebo] [111] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [112] //!BIND conv2d_2_tf
[   0.326][d][vo/gpu-next/libplacebo] [113] //!SAVE conv2d_3_tf
[   0.326][d][vo/gpu-next/libplacebo] [114] //!WIDTH conv2d_2_tf.w
[   0.326][d][vo/gpu-next/libplacebo] [115] //!HEIGHT conv2d_2_tf.h
[   0.326][d][vo/gpu-next/libplacebo] [116] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [117] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [118] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [119] #define go_1(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [120] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [121]     vec4 result = mat4(-0.18038331, 0.21830973, -0.10019419, -0.022745568, -0.14944611, -0.15669158, 0.46361133, -0.07289843, 0.02976627, -0.09000817, 0.113060996, 0.05635241, 0.012762965, -0.022688959, 0.01629751, 0.061114635) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [122]     result += mat4(0.024338024, -0.10004009, -0.13709056, -0.0851965, 0.23927099, -0.024349794, -0.16574804, 0.084686354, -0.047885604, 0.09688507, -0.12733915, 0.06980246, 0.11480734, 0.014669346, -0.07505829, 0.04676309) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [123]     result += mat4(0.054203495, 0.011881634, -0.036115017, -0.0686298, -0.13682245, -0.15678032, 0.057050128, -0.03368558, 0.13011025, 0.033391044, -0.09841339, -0.027057761, -0.18701133, 0.20852546, -0.13660902, 0.0005817616) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [124]     result += mat4(-0.08077834, 0.35952288, -0.07647382, -0.0033230998, 0.13929126, -0.09155619, 0.14128102, 0.16005981, 0.18161216, -0.09485738, 0.0029118075, 0.052682754, 0.03242074, 0.08299826, 0.073796146, -0.06446532) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [125]     result += mat4(-0.36655015, 0.4606936, 0.19073649, 0.31655258, -0.006838053, -0.579939, 0.089126326, -0.14021218, -0.3437716, 0.16714323, 0.17705944, -0.22418492, -0.3883696, -0.2302651, 0.2581861, 0.21983066) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [126]     result += mat4(0.0992383, -0.014257871, -0.023896435, 0.19868234, 0.0408007, 0.07995299, 0.16102871, -0.11668251, 0.22458278, -0.05587917, 0.19373615, -0.016202094, -0.25106144, 0.15634494, 0.11624891, -0.2930768) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [127]     result += mat4(0.024616942, 0.36248252, -0.14779098, -0.019894283, -0.007111256, 0.010641561, -0.09541178, 0.21236233, 0.009501827, 0.08132797, -0.13983901, 0.027207611, 0.038444366, -0.013995817, -0.16242191, 0.03294123) * go_0(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [128]     result += mat4(0.0131698875, -0.18124102, -0.13503514, -0.06099072, 0.07422735, -0.20906176, -0.049005672, 0.08739405, -0.031758767, -0.1978915, 0.23094437, 0.54512614, 0.21338555, -0.011205669, -0.23727885, -0.29533875) * go_0(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [129]     result += mat4(-0.0010255767, -0.07168225, -0.033568826, 0.22161655, -0.087293416, 0.11350447, 0.13653576, 0.061226424, -0.13074352, 0.058425818, 0.038460605, 0.2749964, -0.012814839, 0.085885845, -0.038151987, -0.17960808) * go_0(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [130]     result += mat4(0.19728905, -0.040724937, -0.18270236, 0.046735186, 0.03507326, 0.119867206, -0.12691991, 0.18119748, -0.052895024, 0.11348764, -0.043787055, 0.004703516, 0.006752757, -0.06939761, -0.009801806, -0.075640485) * go_1(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [131]     result += mat4(0.051735226, 0.1732299, -0.10672899, 0.0320877, -0.4913656, 0.2102274, 0.43920282, 0.059108034, 0.08349019, -0.16517872, 0.15436842, -0.1075667, 0.022741623, -0.26693836, 0.3645307, 0.017874828) * go_1(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [132]     result += mat4(0.034464058, 0.014929155, 0.054227423, 0.14167373, -0.0023630706, -0.08904212, 0.11918041, -0.034539603, 0.06048089, -0.06807333, 0.14447778, 0.035260547, 0.09979546, -0.1924939, 0.14596114, -0.12069667) * go_1(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [133]     result += mat4(-0.04427228, -0.23673469, 0.010357103, -0.2907043, -0.06845721, -0.078984015, 0.06867713, -0.058163825, -0.12154615, 0.08430951, 0.1922373, 0.030108064, -0.43081748, -0.38715646, -0.022240646, -0.15403675) * go_1(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [134]     result += mat4(0.46885306, -0.33421394, -0.6695223, -0.41841158, 0.30317923, 0.24244753, -0.1047785, -0.18656285, 0.06261881, -0.4405616, 0.24233986, 0.40070608, 0.81440526, 0.11305212, -0.8826317, -0.023478031) * go_1(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [135]     result += mat4(-0.07879348, -0.024378026, -0.041883785, -0.17030984, 0.23229122, -0.011237109, 0.12058088, 0.20766267, -0.36519575, 0.09599417, -0.1271098, 0.06990154, 0.21161246, 0.041002538, -0.36046275, 0.007304667) * go_1(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [136]     result += mat4(0.10873893, 0.003872542, -0.13476561, -0.036068805, -0.054637462, 0.02304618, 0.04707738, -0.2856381, 0.07124422, 0.010866545, 0.20484549, -0.008342406, -0.43660247, -0.041055538, 0.33536008, -0.060022205) * go_1(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [137]     result += mat4(0.1966458, 0.0016302796, -0.25712642, -0.09639119, -0.006955351, 0.10882133, 0.1107341, 0.062697805, -0.1074494, 0.17361663, 0.6429869, -0.39846307, -0.26302996, 0.048710946, 0.40387508, 0.4299715) * go_1(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [138]     result += mat4(0.18948616, 0.24086732, -0.064474985, -0.11069709, 0.1279659, -0.13438123, -0.028438117, 0.125883, 0.018153818, -0.21942288, 0.020390838, -0.22797634, -0.10821287, -0.17175092, 0.122016855, 0.20699544) * go_1(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [139]     result += vec4(-0.05101961, -0.060740646, -0.024465766, 0.058471628);
[   0.326][d][vo/gpu-next/libplacebo] [140]     return result;
[   0.326][d][vo/gpu-next/libplacebo] [141] }
[   0.326][d][vo/gpu-next/libplacebo] [142] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][d][vo/gpu-next/libplacebo] [143] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [144] //!BIND conv2d_3_tf
[   0.326][d][vo/gpu-next/libplacebo] [145] //!SAVE conv2d_4_tf
[   0.326][d][vo/gpu-next/libplacebo] [146] //!WIDTH conv2d_3_tf.w
[   0.326][d][vo/gpu-next/libplacebo] [147] //!HEIGHT conv2d_3_tf.h
[   0.326][d][vo/gpu-next/libplacebo] [148] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [149] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [150] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [151] #define go_1(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [152] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [153]     vec4 result = mat4(-0.14533128, 0.07266841, 0.13238011, -0.23328504, 0.031516243, 0.058471266, -0.06394412, 0.090752736, -0.0042359144, 0.12357294, -0.04377495, 0.0011743477, 0.05412243, -0.08146249, 0.04002749, -0.032876283) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [154]     result += mat4(-0.036972385, -0.15238069, -0.3453321, -0.36025128, 0.07597202, -0.02368151, -0.3889606, 0.34607083, 0.3133179, -0.21712309, -0.4210954, 0.21450534, 0.15226828, 0.25326282, 0.45327064, -0.3350824) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [155]     result += mat4(0.019018406, -0.33060563, -0.092601225, 0.14970545, 0.1441509, -0.19228427, -0.032771986, 0.26331595, 0.052981265, -0.06627376, -0.08634131, 0.038706224, 0.13403937, -4.4842476e-05, 0.049002815, -0.12719193) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [156]     result += mat4(0.17527401, -0.0035254909, -0.047959115, -0.4526988, -0.07510284, 0.0013256798, -0.07539148, 0.24220634, -0.08708839, -0.14494033, -0.17085724, -0.099797316, 0.0068515535, -0.08918779, 0.27164719, -0.1702649) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [157]     result += mat4(0.31848368, 0.48983255, -0.44140294, -0.65174145, -0.004199057, 0.19494705, 0.5196497, -0.027118586, 0.032509074, -0.23900363, -0.14489244, 0.36314297, -0.23168536, -0.20960593, 0.61471456, 0.12401275) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [158]     result += mat4(-0.24317405, 0.21560913, 0.15564032, 0.11606844, -0.15039803, -0.59578896, 0.14100945, -0.026194477, 0.37237462, -0.49472088, -0.15215331, -0.38820064, -0.25089455, -0.29643852, -0.09513793, 0.019779462) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [159]     result += mat4(0.12498539, 0.0710632, -0.25012368, -0.2272255, -0.08647026, 0.12277892, 0.011025097, -0.12168395, -0.13489573, 0.016708186, -0.15583871, -0.057124946, 0.1216943, 0.019803725, 0.06952334, -0.032985855) * go_0(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [160]     result += mat4(0.28794885, 0.33783793, -0.14469545, -0.081780486, -0.50320613, -0.067601606, -0.06847453, -0.021648854, -0.34295765, 0.15071863, -0.06619896, -0.084465064, 0.31909832, 0.015414661, 0.14930317, -0.11295768) * go_0(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [161]     result += mat4(0.24530606, 0.25526014, 0.09971985, -0.07749641, -0.2361951, -0.07997673, 0.03617294, 0.02959561, -0.4498983, -0.014073485, -0.20587012, 0.06396779, 0.1262825, 0.027433183, 0.14469334, 0.011538011) * go_0(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [162]     result += mat4(-0.038572453, -0.023108613, -0.039481267, -0.012160024, -0.004521989, -0.028665857, 0.04295255, 0.10580258, 0.05439479, -0.072261885, 0.11030243, 0.08934696, 0.09133867, 0.017547369, 0.097613186, 0.05491059) * go_1(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [163]     result += mat4(-0.09972817, 0.057730395, 0.12665828, 0.32861367, -0.16186063, 0.0745509, 0.2394045, -0.08687853, -0.034404907, -0.05843572, 0.0684561, -0.1355754, 0.19248672, -0.60372186, 0.12583947, 0.4388962) * go_1(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [164]     result += mat4(0.10341107, 0.061113223, 0.08773817, -0.082504354, -0.16612078, 0.2681751, 0.019737698, -0.17122322, -0.135949, 0.3048101, 0.087803006, 0.11373851, 0.013192192, -0.27022064, 0.35529897, -0.15321451) * go_1(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [165]     result += mat4(-0.032835662, 0.11123062, -0.11322452, -0.17300649, 0.04680824, 0.12849288, 0.17269878, -0.048671383, 0.05189037, -0.009078046, 0.22105052, 0.013008137, -0.009738674, 0.15391739, 0.20969556, 0.14189166) * go_1(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [166]     result += mat4(-0.47377753, 0.3038031, 0.18604809, 0.1931698, -0.2964668, -0.12287907, -0.7107761, 0.26619422, -0.33923018, 0.19200724, 0.013786281, -0.17496964, 0.079325035, -0.3694445, 0.0054486147, -0.33018264) * go_1(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [167]     result += mat4(0.14903802, -0.028043179, 1.5238678e-05, 0.021232028, 0.16025065, 0.14746875, -0.22831628, -0.12177345, 0.038778774, 0.32188168, -0.042017702, 0.27155936, 0.17920609, 0.04099755, 0.28527525, 0.074623376) * go_1(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [168]     result += mat4(0.057019282, -0.112741895, 0.030361209, 0.14567861, 0.056265317, -0.01573537, -0.06707608, 0.016657263, 0.09829025, -0.026795063, 0.023042196, 0.09438241, -0.025483066, -0.052787006, 0.19730279, 0.021218104) * go_1(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [169]     result += mat4(0.19868211, -0.01531125, 0.108596824, -0.035456363, 0.0033609823, 0.057961613, -0.013726211, 0.101742364, 0.33357215, 0.14468077, 0.29711527, -0.24662566, -0.119014986, -0.1899639, 0.11246697, -0.0035374009) * go_1(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [170]     result += mat4(-0.05602109, -0.15539522, 0.010730943, 0.057116497, -0.02037749, 0.084210664, -0.028235348, 0.10574697, 0.056925274, 0.07922333, -0.090088, 0.1615985, -0.0044301567, -0.089945644, 0.024176618, -0.041844133) * go_1(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [171]     result += vec4(0.0015292584, -0.043625206, -0.09429898, -0.06280405);
[   0.326][d][vo/gpu-next/libplacebo] [172]     return result;
[   0.326][d][vo/gpu-next/libplacebo] [173] }
[   0.326][d][vo/gpu-next/libplacebo] [174] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][d][vo/gpu-next/libplacebo] [175] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [176] //!BIND conv2d_4_tf
[   0.326][d][vo/gpu-next/libplacebo] [177] //!SAVE conv2d_5_tf
[   0.326][d][vo/gpu-next/libplacebo] [178] //!WIDTH conv2d_4_tf.w
[   0.326][d][vo/gpu-next/libplacebo] [179] //!HEIGHT conv2d_4_tf.h
[   0.326][d][vo/gpu-next/libplacebo] [180] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [181] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [182] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [183] #define go_1(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [184] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [185]     vec4 result = mat4(0.06051604, -0.028152643, -0.21418124, 0.13032125, 0.42565975, -0.09571944, -0.34494513, 0.30004, -0.073245734, -0.028659137, 0.0032105136, -0.05009555, -0.048971225, 0.04814533, 0.002843805, -0.046224426) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [186]     result += mat4(-0.07495975, 0.018714864, 0.21229684, -0.13614887, 0.79988647, -0.0697328, 0.38232988, 0.24165109, 0.25947478, -0.0009418982, -0.17369923, 0.10007766, 0.024117598, 0.028611807, 0.15090801, -0.06344829) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [187]     result += mat4(-0.07982219, 0.0900347, 0.007609254, -0.0034791247, 0.013611781, -0.13560618, 0.09685799, 0.06276075, 0.134693, -0.14370437, -0.25175703, -0.0016138123, -0.0075672898, -0.13325731, -0.061100446, 0.0059743375) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [188]     result += mat4(-0.039018434, -0.19668463, -0.43018532, 0.31886247, 0.4965479, 0.114569925, 0.19110382, 0.27343535, 0.0707728, -0.11877004, -0.25827697, 0.37012872, 0.1474777, 0.07056952, -0.14965728, 0.061595406) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [189]     result += mat4(0.506543, -0.16268773, 0.455319, -0.0702646, 0.70102173, -0.14041683, 0.70184857, 0.4817842, -0.3389246, -0.14463086, 0.13763213, -1.1259074, 0.47722015, 0.38352612, -0.04293366, -0.5604627) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [190]     result += mat4(0.17606944, 0.15897374, 0.13499324, 0.29241478, -0.032824475, 0.11128662, -0.22204424, -0.051803727, 0.013195331, -0.42040786, -0.3950585, 0.70745844, 0.38646924, -0.19080774, -0.15171832, -0.10742828) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [191]     result += mat4(-0.039278325, 0.18421806, -0.044948544, 0.07902063, -0.2149251, 0.09913459, -0.09743655, -0.26899317, -0.002695496, -0.07554527, -0.22373366, 0.17830558, -0.047994815, -0.06789183, -0.06755918, -0.104452066) * go_0(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [192]     result += mat4(-0.0493473, -0.30411786, -0.056439694, -0.06582185, -0.21309847, 0.100670904, -0.22966193, -0.045954112, 0.12728062, -0.25081897, -0.094699375, -0.4036555, 0.060854495, -0.64373237, -0.21522263, -0.6683476) * go_0(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [193]     result += mat4(0.063481025, 0.11744312, -0.043330096, 0.33817932, -0.06679828, -0.23207302, -0.10188898, -0.10590511, 0.058780864, 0.047292337, -0.11834696, 0.10076128, -0.036641665, 0.30200714, -0.0002892557, -0.10303763) * go_0(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [194]     result += mat4(-0.10842604, 0.042055763, 0.29702973, -0.07409644, -0.030164458, -0.012098744, -0.06396587, -0.08787527, 0.051854923, 0.12997511, 0.11468497, 0.15022379, 0.007814715, 0.014517445, 0.025484756, 0.01078619) * go_1(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [195]     result += mat4(-0.29229385, 0.040265664, -0.15376821, 0.075579196, -0.05593569, -0.045405343, 0.12099204, 0.1571252, 0.17841713, 0.04673325, 0.14550509, 0.08603346, -0.049786013, 0.06121843, -0.16273825, -0.13857752) * go_1(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [196]     result += mat4(0.06903744, 0.2628764, -0.13582836, -0.35678583, -0.13821034, -0.019381443, -0.19570538, -0.09298511, 0.08965436, 0.09745909, 0.20055099, 0.024967568, 0.08144204, 0.004633625, 0.12809834, -0.009431525) * go_1(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [197]     result += mat4(0.09784006, 0.010729353, 0.046643205, -0.110926524, -0.21556224, 0.00016300633, 0.122175336, 0.15004392, 0.013864355, 0.24767809, 0.13865592, 0.0155424485, -0.1450483, -0.15688781, -0.06195043, -0.13745981) * go_1(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [198]     result += mat4(0.018991318, 0.55401963, 0.11709872, -0.028442185, -0.46035343, -0.10215539, -0.60193926, 0.47882316, -0.23346989, 0.037200127, 0.22814943, -0.08231696, -0.36430013, -0.011152757, 0.48752213, 0.29796222) * go_1(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [199]     result += mat4(-0.07258066, -0.023222538, 0.23230423, -0.30317304, 0.03942911, -0.06899803, 0.23778579, 0.07418621, -0.17443737, 0.33387753, 0.007354842, -0.123447575, -0.1745315, 0.11071779, -0.11949625, -0.22832453) * go_1(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [200]     result += mat4(-0.024909232, -0.0308135, 0.12170621, -0.13298757, 0.045828197, -0.1532345, -0.06633672, 0.23591088, 0.04964077, 0.14091493, 0.038343724, -0.029780807, 0.05762822, -0.048930667, -0.02434709, 0.07109019) * go_1(1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [201]     result += mat4(-0.16039175, 0.3004474, -0.17278233, 0.13677922, 0.18838613, 0.15054552, 0.32901475, -0.1288333, 0.26378244, -0.05119892, 0.34533516, 0.25180495, 0.19452183, 0.0843233, -0.08029368, 0.39877903) * go_1(1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [202]     result += mat4(-0.07097129, -0.26492423, -0.055032317, -0.093516104, -0.11795062, 0.04086253, -0.07989471, 0.059686553, 0.09378249, 0.45851848, 0.2510942, 0.19599153, 0.019765077, -0.02920918, -0.04125142, -0.13859107) * go_1(1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [203]     result += vec4(0.04400571, -0.04015565, 0.0140529545, 0.05474095);
[   0.326][d][vo/gpu-next/libplacebo] [204]     return result;
[   0.326][d][vo/gpu-next/libplacebo] [205] }
[   0.326][d][vo/gpu-next/libplacebo] [206] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x3x3x8
[   0.326][d][vo/gpu-next/libplacebo] [207] //!HOOK MAIN
[   0.326][d][vo/gpu-next/libplacebo] [208] //!BIND conv2d_5_tf
[   0.326][d][vo/gpu-next/libplacebo] [209] //!SAVE conv2d_6_tf
[   0.326][d][vo/gpu-next/libplacebo] [210] //!WIDTH conv2d_5_tf.w
[   0.326][d][vo/gpu-next/libplacebo] [211] //!HEIGHT conv2d_5_tf.h
[   0.326][d][vo/gpu-next/libplacebo] [212] //!COMPONENTS 4
[   0.326][d][vo/gpu-next/libplacebo] [213] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.326][d][vo/gpu-next/libplacebo] [214] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [215] #define go_1(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.326][d][vo/gpu-next/libplacebo] [216] vec4 hook() {
[   0.326][d][vo/gpu-next/libplacebo] [217]     vec4 result = mat4(-0.014236042, -0.0031431736, -0.1551387, 0.12515116, -0.28528872, 0.36161992, 0.15750743, -0.17111474, 0.13792591, -0.0657419, -0.17471549, 0.14650472, 0.034169197, -0.019157575, 0.23520657, -0.20358163) * go_0(-1.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [218]     result += mat4(0.02015035, 0.12993371, 0.11199667, -0.09854378, 0.5001741, 0.03462961, 0.24919736, 0.08505297, -0.20902094, -0.24141377, -0.15360375, 0.049974803, -0.037157424, -0.048510186, 0.20106035, -0.118480384) * go_0(-1.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [219]     result += mat4(0.086798504, -0.009607818, 0.034812123, -0.005187592, 0.0351509, 0.021755, -0.04996161, -0.041231696, 0.0020545553, 0.015730752, -0.07507172, 0.018597523, -0.02393343, 0.07624775, 0.03892451, -0.0025574185) * go_0(-1.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [220]     result += mat4(0.035725456, 0.06809103, 0.51926994, -0.39983147, -0.16402833, -0.1243394, -0.25922915, 0.28285915, 0.15959994, -0.2351732, 0.2650535, -0.30193794, -0.11468332, 0.050777763, -0.51894253, 0.4408367) * go_0(0.0, -1.0);
[   0.326][d][vo/gpu-next/libplacebo] [221]     result += mat4(-0.27042082, 0.22243942, 0.14902467, 0.38428563, 0.46612173, 0.5169912, -0.22330502, -0.11300288, -0.36141354, 0.0668681, 0.2984152, 0.1275798, -0.24121419, 0.2952039, -0.45109174, -0.3822957) * go_0(0.0, 0.0);
[   0.326][d][vo/gpu-next/libplacebo] [222]     result += mat4(0.26543504, -0.05742226, -0.052103903, -0.013124308, -0.14358385, -0.04024543, 0.07665455, -0.012301872, -0.18752757, -0.03913891, 0.038205814, -0.006583095, -0.25550908, -0.25725332, -0.12454206, -0.0058936924) * go_0(0.0, 1.0);
[   0.326][d][vo/gpu-next/libplacebo] [223]     result += mat4(-0.0018946569, 0.019746022, -0.13080788, 0.11450627, -0.013743845, -0.027179785, -0.14425103, 0.07109661, 0.023703793, 0.086905524, 0.03151253, 0.0132474145, 0.041018624, 0.04548913, 0.2718715, -0.20008296) * go_0(1.0, -1.0);
[   0.327][d][vo/gpu-next/libplacebo] [224]     result += mat4(-0.076830454, 0.11652955, 0.5068201, -0.3082819, 0.058615055, -0.006765798, -0.057522714, 0.049981344, -0.006897243, -0.21763432, 0.16896053, -0.21176189, -0.061227098, 0.03566485, 0.08901554, -0.050980624) * go_0(1.0, 0.0);
[   0.327][d][vo/gpu-next/libplacebo] [225]     result += mat4(0.02327798, 0.07662976, 0.034811985, -0.03238033, -0.0021881019, -0.030997375, -0.069672935, 0.04040273, -0.1217442, 0.104173124, 0.09862539, 0.020557549, -0.022286594, 0.10287763, -0.021694934, 0.07542515) * go_0(1.0, 1.0);
[   0.327][d][vo/gpu-next/libplacebo] [226]     result += mat4(0.124069154, -0.08579466, -0.07816314, 0.11332851, -0.034682628, -0.11038275, 0.04750615, -0.096100725, 0.039588403, -0.15149672, -0.05529172, 0.034304325, -0.022520235, -0.05023852, -0.2674731, 0.21886522) * go_1(-1.0, -1.0);
[   0.327][d][vo/gpu-next/libplacebo] [227]     result += mat4(-0.1948599, -0.14946899, -0.39548838, 0.18042913, -0.007919619, 0.19826505, 0.23789087, 0.009140256, 0.11857748, 0.18215668, 0.13606293, -0.09209675, -0.080678545, -0.020431137, -0.07728839, -0.051353537) * go_1(-1.0, 0.0);
[   0.327][d][vo/gpu-next/libplacebo] [228]     result += mat4(-0.07616472, -0.0032800382, -0.045657665, -0.039144326, -0.37786487, -0.08877774, 0.053579114, -0.070886396, 0.011311804, 0.107276045, 0.013236154, 0.009832061, 0.08292063, 0.12258811, 0.0005569043, -0.009806432) * go_1(-1.0, 1.0);
[   0.327][d][vo/gpu-next/libplacebo] [229]     result += mat4(-0.28062925, 0.15946878, -0.1021801, -0.06471589, -0.26999477, 0.21230288, -0.14243907, 0.2555922, -0.09608517, 0.26339412, 0.20891234, -0.23538485, 0.33958244, -0.12569186, 0.43289876, -0.33462036) * go_1(0.0, -1.0);
[   0.327][d][vo/gpu-next/libplacebo] [230]     result += mat4(0.16265294, 0.2625464, -0.34452894, 0.2233622, 0.13850005, -0.42999864, -0.5385177, -0.11035979, 0.51662, -0.78238726, -0.09422375, 0.83759475, 0.44468537, 0.14301361, 0.108906105, 1.1596143) * go_1(0.0, 0.0);
[   0.327][d][vo/gpu-next/libplacebo] [231]     result += mat4(-0.73757625, -0.12369605, 0.23523071, 0.006587637, -0.15445381, 0.22757277, 0.052819528, 0.10183905, -0.07912228, -0.16998893, -0.13360223, 0.014348178, -0.17778571, -0.41047302, 0.10241381, -0.08526306) * go_1(0.0, 1.0);
[   0.327][d][vo/gpu-next/libplacebo] [232]     result += mat4(0.14712952, 0.048995696, 0.05299946, -0.06817572, 0.1498064, -0.079825334, 0.40354064, -0.31789717, -0.1998377, 0.00955295, -0.32318407, 0.30898204, -0.039571725, -0.026203401, -0.16292085, 0.08574385) * go_1(1.0, -1.0);
[   0.327][d][vo/gpu-next/libplacebo] [233]     result += mat4(-0.6353329, -0.56000775, -0.17279743, 0.18198174, -0.19555812, 0.056538377, 0.34365895, -0.07799055, 0.19011354, -0.13952748, 0.029196098, -0.19596763, -0.069196045, -0.17402656, 0.07948411, -0.016226962) * go_1(1.0, 0.0);
[   0.327][d][vo/gpu-next/libplacebo] [234]     result += mat4(0.25592864, 0.083498634, -0.28515807, 0.10789751, 0.0043962947, 0.07085363, 0.048724182, -0.025131436, -0.0049440865, -0.033094388, -0.032935806, 0.04266025, 0.20026933, 0.0927841, -0.006839351, -0.013012285) * go_1(1.0, 1.0);
[   0.327][d][vo/gpu-next/libplacebo] [235]     result += vec4(0.02021373, 0.0014037411, 0.0012718709, 0.017278494);
[   0.327][d][vo/gpu-next/libplacebo] [236]     return result;
[   0.327][d][vo/gpu-next/libplacebo] [237] }
[   0.327][d][vo/gpu-next/libplacebo] [238] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Conv-4x1x1x56
[   0.327][d][vo/gpu-next/libplacebo] [239] //!HOOK MAIN
[   0.327][d][vo/gpu-next/libplacebo] [240] //!BIND conv2d_tf
[   0.327][d][vo/gpu-next/libplacebo] [241] //!BIND conv2d_1_tf
[   0.327][d][vo/gpu-next/libplacebo] [242] //!BIND conv2d_2_tf
[   0.327][d][vo/gpu-next/libplacebo] [243] //!BIND conv2d_3_tf
[   0.327][d][vo/gpu-next/libplacebo] [244] //!BIND conv2d_4_tf
[   0.327][d][vo/gpu-next/libplacebo] [245] //!BIND conv2d_5_tf
[   0.327][d][vo/gpu-next/libplacebo] [246] //!BIND conv2d_6_tf
[   0.327][d][vo/gpu-next/libplacebo] [247] //!SAVE conv2d_last_tf
[   0.327][d][vo/gpu-next/libplacebo] [248] //!WIDTH conv2d_tf.w
[   0.327][d][vo/gpu-next/libplacebo] [249] //!HEIGHT conv2d_tf.h
[   0.327][d][vo/gpu-next/libplacebo] [250] //!COMPONENTS 4
[   0.327][d][vo/gpu-next/libplacebo] [251] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.327][d][vo/gpu-next/libplacebo] [252] #define g_0 (max((conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [253] #define g_1 (max(-(conv2d_tf_tex(conv2d_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [254] #define g_2 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [255] #define g_3 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [256] #define g_4 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [257] #define g_5 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [258] #define g_6 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [259] #define g_7 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [260] #define g_8 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [261] #define g_9 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [262] #define g_10 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [263] #define g_11 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [264] #define g_12 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [265] #define g_13 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   0.327][d][vo/gpu-next/libplacebo] [266] vec4 hook() {
[   0.327][d][vo/gpu-next/libplacebo] [267]     vec4 result = mat4(-0.0067711817, 0.08160003, 0.0247279, 0.03084815, -0.026977416, -0.02120602, -0.025078611, -0.029852165, -0.011627478, -0.012742972, 0.022736797, -0.0028815821, -0.007515677, 0.0172887, -0.023259213, 0.009608947) * g_0;
[   0.327][d][vo/gpu-next/libplacebo] [268]     result += mat4(-0.028660107, -0.014015208, -0.027838672, -0.013171922, 0.0029435428, 0.027047642, -0.017478354, 0.022834882, -0.037572853, -0.0034044068, -0.0149029335, -0.013362301, 0.009827443, -0.015742151, -0.0074795415, -0.0022266617) * g_1;
[   0.327][d][vo/gpu-next/libplacebo] [269]     result += mat4(-0.07579662, -0.039754186, -0.066026606, -0.046816852, 0.1099032, 0.043956704, 0.073109835, 0.04680284, -0.06896613, -0.008838632, -0.044584926, -0.01319039, -0.0021152915, -0.04503326, 0.027061926, -0.028334105) * g_2;
[   0.327][d][vo/gpu-next/libplacebo] [270]     result += mat4(0.15458213, 0.059769996, 0.09327123, -0.028782733, 0.023459995, -0.15390377, -0.13432898, -0.1127775, 0.072764635, -0.0020463336, 0.034736466, -0.0012086042, -0.05847183, -0.029952323, 0.052969377, 0.09590908) * g_3;
[   0.327][d][vo/gpu-next/libplacebo] [271]     result += mat4(-0.07476772, -0.016574614, 0.04131183, 0.017335678, 0.009654406, 0.072183535, -0.002266456, 0.086873695, 9.310129e-05, 0.0056416965, -0.004188391, 0.023132093, -0.05183336, -0.025825873, -0.03684392, -0.0075729224) * g_4;
[   0.327][d][vo/gpu-next/libplacebo] [272]     result += mat4(0.00878842, 0.03869637, -0.035759524, 0.003345386, -0.064184256, -0.034568302, -0.06672922, -0.0686381, -0.06794392, -0.10685906, 0.04679947, -0.012535639, 0.006932529, -0.007783515, 0.109123886, 0.13804391) * g_5;
[   0.327][d][vo/gpu-next/libplacebo] [273]     result += mat4(-0.03160699, 0.050473, -0.09030729, 0.0649397, 0.11466501, 0.17912874, -0.0081851315, 0.052244574, 0.051632743, 0.061941486, 0.06546816, 0.12174249, -0.05104755, -0.018193979, -0.032196652, -0.035292786) * g_6;
[   0.327][d][vo/gpu-next/libplacebo] [274]     result += mat4(0.013612735, -0.0024100312, -0.068611205, -0.07369285, -0.019647537, -0.066944756, -0.010012875, -0.06785739, -0.062246565, -0.087313406, -0.044278186, -0.09368995, 0.052555013, 0.13604961, 0.05645059, 0.08763303) * g_7;
[   0.327][d][vo/gpu-next/libplacebo] [275]     result += mat4(0.04218486, -0.05028401, 0.059086576, -0.03545452, 0.027737848, 0.0043074046, 0.0011001764, -0.073026665, -0.04094988, 0.044061556, -0.009812515, 0.06841999, -0.06612581, 0.037223976, -0.07759491, -0.04356598) * g_8;
[   0.327][d][vo/gpu-next/libplacebo] [276]     result += mat4(-0.027558247, 0.014248466, -0.019813016, -0.058107473, -0.016717663, -0.020424338, 0.0053625097, -0.009917319, 0.013678771, 0.0113340765, 0.0061787106, -0.036083996, -0.020179711, -0.011310535, 0.054827053, -0.0008278952) * g_9;
[   0.327][d][vo/gpu-next/libplacebo] [277]     result += mat4(0.028690035, -0.012079616, 0.11931408, -0.048533775, 0.069336995, 0.0049852817, 0.013774468, 0.035233382, -0.07384821, 0.0003354423, -0.0059171803, -0.04503906, 0.08727279, 0.005138857, -0.17724465, 0.055782065) * g_10;
[   0.327][d][vo/gpu-next/libplacebo] [278]     result += mat4(-0.20744391, 0.24348328, -0.3145766, 0.17026486, -0.022870807, -0.01648648, -0.05912279, -0.012555373, -0.066004686, 0.03182394, 0.16285324, -0.1221846, -0.31816196, 0.007928748, 0.43180224, -0.015949022) * g_11;
[   0.327][d][vo/gpu-next/libplacebo] [279]     result += mat4(0.16363169, 0.14781676, -0.2377973, -0.1571377, -0.09038187, 0.0046504294, 0.033955004, -0.051421452, 0.046735536, 0.006827522, -0.121338, 0.12671822, 0.15833299, -0.1858712, -0.1942371, 0.17336044) * g_12;
[   0.327][d][vo/gpu-next/libplacebo] [280]     result += mat4(-0.018145572, -0.015550516, 0.044410378, 0.046016492, 0.084021375, 0.05327457, -0.008270992, -0.045435544, 0.07185879, -0.131923, 0.26721445, -0.26745328, -0.07093472, 0.042701527, 0.13793674, -0.095621444) * g_13;
[   0.327][d][vo/gpu-next/libplacebo] [281]     result += vec4(0.016836504, 0.010161949, 0.021351453, 0.01278978);
[   0.327][d][vo/gpu-next/libplacebo] [282]     return result;
[   0.327][d][vo/gpu-next/libplacebo] [283] }
[   0.327][d][vo/gpu-next/libplacebo] [284] //!DESC Anime4K-v3.2-Upscale-CNN-x2-(M)-Depth-to-Space
[   0.327][d][vo/gpu-next/libplacebo] [285] //!HOOK MAIN
[   0.327][d][vo/gpu-next/libplacebo] [286] //!BIND MAIN
[   0.327][d][vo/gpu-next/libplacebo] [287] //!BIND conv2d_last_tf
[   0.327][d][vo/gpu-next/libplacebo] [288] //!SAVE MAIN
[   0.327][d][vo/gpu-next/libplacebo] [289] //!WIDTH conv2d_last_tf.w 2 *
[   0.327][d][vo/gpu-next/libplacebo] [290] //!HEIGHT conv2d_last_tf.h 2 *
[   0.327][d][vo/gpu-next/libplacebo] [291] //!WHEN OUTPUT.w MAIN.w / 1.200 > OUTPUT.h MAIN.h / 1.200 > *
[   0.327][d][vo/gpu-next/libplacebo] [292] vec4 hook() {
[   0.327][d][vo/gpu-next/libplacebo] [293]     vec2 f0 = fract(conv2d_last_tf_pos * conv2d_last_tf_size);
[   0.327][d][vo/gpu-next/libplacebo] [294]     ivec2 i0 = ivec2(f0 * vec2(2.0));
[   0.327][d][vo/gpu-next/libplacebo] [295]     float c0 = conv2d_last_tf_tex((vec2(0.5) - f0) * conv2d_last_tf_pt + conv2d_last_tf_pos)[i0.y * 2 + i0.x];
[   0.327][d][vo/gpu-next/libplacebo] [296]     float c1 = c0;
[   0.327][d][vo/gpu-next/libplacebo] [297]     float c2 = c1;
[   0.327][d][vo/gpu-next/libplacebo] [298]     float c3 = c2;
[   0.327][d][vo/gpu-next/libplacebo] [299]     return vec4(c0, c1, c2, c3) + MAIN_tex(MAIN_pos);
[   0.327][d][vo/gpu-next/libplacebo] [300] }
[   0.327][d][vo/gpu-next] Render options updated, resetting render state.
[   0.327][v][vo/gpu-next/win32] DPI detected from the new API: 96
[   0.327][v][vo/gpu-next/win32] display-fps: 144.062000
[   0.328][v][vo/gpu-next/win32] color-profile: C:\WINDOWS\system32\spool\drivers\color\sRGB Color Space Profile.icm
[   0.328][v][vo/gpu-next] Assuming 144.062000 FPS for display sync.
[   0.329][v][vd] Container reported FPS: 14.985015
[   0.331][v][vd] Codec list:
[   0.331][v][vd]     h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.331][v][vd]     h264_qsv (h264) - H264 video (Intel Quick Sync Video acceleration)
[   0.331][v][vd]     h264_amf (h264) - H264 AMD AMF video decoder
[   0.331][v][vd]     h264_cuvid (h264) - Nvidia CUVID H264 decoder
[   0.331][v][vd] Opening decoder h264
[   0.331][v][vd] No hardware decoding requested.
[   0.331][v][vd] Using software decoding.
[   0.331][v][vd] Detected 16 logical cores.
[   0.331][v][vd] Requesting 16 threads for decoding.
[   0.334][v][vd] Selected decoder: h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.334][v][vf] User filter list:
[   0.334][v][vf]   (empty)
[   0.334][v][cplayer] Starting playback...
[   0.335][d][modernz] osc_init
[   0.336][d][global] config path: 'fonts' -> 'C:\Users\jespe\AppData\Roaming/mpv/fonts'
[   0.336][d][osd/libass] ASS library version: 0x1704000 (runtime 0x1704000)
[   0.336][v][osd/libass] libass API version: 0x1704000
[   0.336][v][osd/libass] libass source: meson, commit: 0.17.4-13-ge4215b0d175a5a340c0dbd7a990df82f07d71a34
[   0.336][v][osd/libass] Shaper: FriBidi 1.0.16 (SIMPLE) HarfBuzz-ng 11.3.3 (COMPLEX)
[   0.336][d][global] config path: 'subfont.ttf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/subfont.ttf'
[   0.336][d][global] config path: 'subfont.ttf' -/-> 'C:/Program Files/mpv/subfont.ttf'
[   0.336][d][global] config path: 'subfont.ttf' -/-> 'C:/Program Files/mpv/mpv/subfont.ttf'
[   0.336][d][global] config path: 'fonts.conf' -/-> 'C:\Users\jespe\AppData\Roaming/mpv/fonts.conf'
[   0.336][d][global] config path: 'fonts.conf' -/-> 'C:/Program Files/mpv/fonts.conf'
[   0.336][d][global] config path: 'fonts.conf' -> 'C:/Program Files/mpv/mpv/fonts.conf'
[   0.336][v][osd/libass] Setting up fonts...
[   0.337][v][osd/libass] Loading font file 'C:\Users\jespe\AppData\Roaming/mpv/fonts\fluent-system-icons.ttf'
[   0.338][v][osd/libass] Using font provider directwrite (with GDI)
[   0.338][v][osd/libass] Done.
[   0.338][v][cplayer] Set property: options/term-status-msg="V: 00:00:00 / 00:00:05 (0%)" -> 1
[   0.339][d][ffmpeg/video] h264: Reinit context to 1088x624, pix_fmt: yuv420p
[   0.339][d][vd] DR parameter change to 1088x642 yuv420p align=64
[   0.339][d][vd] Allocating new (host-cached) DR image...
[   0.339][d][vd] ...failed..
[   0.339][v][vd] DR failed - disabling.
[   0.352][v][vd] Using software decoding.
[   0.352][v][vd] Decoder format: 1080x610 [0:1] yuv420p auto/auto/auto/auto/auto CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.352][v][vf] [in] 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.352][v][vf] [userdeint] 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.352][v][vf] [userdeint] (disabled)
[   0.352][v][vf] [autovflip] 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.352][v][vf] [autovflip] (disabled)
[   0.352][v][vf] [autorotate] 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.352][v][vf] [autorotate] (disabled)
[   0.352][v][vf] [convert] 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.352][v][vf] [convert] (disabled)
[   0.352][v][vf] [out] 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.353][i][cplayer] VO: [gpu-next] 1080x610 yuv420p
[   0.353][v][cplayer] VO: Description: Video output based on libplacebo
[   0.353][v][vo/gpu-next] reconfig to 1080x610 yuv420p bt.709/bt.709/bt.1886/limited/display CL=mpeg2/4/h264 crop=1080x610+0+0 A=none
[   0.353][d][vo/gpu-next] max content size: 1904x1041
[   0.353][d][vo/gpu-next] monitor size: 1920x1080
[   0.353][v][vo/gpu-next/win32] reset window bounds: 420:246:1080:610
[   0.354][v][vo/gpu-next/win32] resize window: 1080:610
[   0.376][v][vo/gpu-next/win32] resize window: 1080:610
[   0.390][v][vo/gpu-next] Window size: 1080x610 (Borders: l=0 t=0 r=0 b=0)
[   0.390][v][vo/gpu-next] Video source: 1080x610 (1:1)
[   0.390][v][vo/gpu-next] Video display: (0, 0) 1080x610 -> (0, 0) 1080x610
[   0.390][v][vo/gpu-next] Video scale: 1.000000/1.000000
[   0.390][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.390][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.390][v][vo/gpu-next/libplacebo] Attempting to reconfigure swap chain format: R8G8B8A8_UNORM -> R10G10B10A2_UNORM
[   0.403][v][vo/gpu-next] Window size: 1080x610 (Borders: l=0 t=0 r=0 b=0)
[   0.403][v][vo/gpu-next] Video source: 1080x610 (1:1)
[   0.403][v][vo/gpu-next] Video display: (0, 0) 1080x610 -> (0, 0) 1080x610
[   0.403][v][vo/gpu-next] Video scale: 1.000000/1.000000
[   0.403][v][vo/gpu-next] OSD borders: l=0 t=0 r=0 b=0
[   0.403][v][vo/gpu-next] Video borders: l=0 t=0 r=0 b=0
[   0.404][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.404][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.405][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   0.405][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format rg8: src/renderer.c:1676
[   0.405][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.405][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.405][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_texture_gather : enable
[   0.405][d][vo/gpu-next/libplacebo] [  3] layout(binding=0) uniform  sampler2D _2;
[   0.405][d][vo/gpu-next/libplacebo] [  4] layout(binding=1) uniform  sampler2D _8002;
[   0.405][d][vo/gpu-next/libplacebo] [  5] layout(location=0) in vec2 _7;
[   0.405][d][vo/gpu-next/libplacebo] [  6] layout(location=0) out vec2 _3;
[   0.405][d][vo/gpu-next/libplacebo] [  7] layout(location=1) in vec2 _8;
[   0.405][d][vo/gpu-next/libplacebo] [  8] layout(location=1) out vec2 _8003;
[   0.405][d][vo/gpu-next/libplacebo] [  9] layout(location=2) in vec2 _9;
[   0.405][d][vo/gpu-next/libplacebo] [ 10] void main() {
[   0.405][d][vo/gpu-next/libplacebo] [ 11] _3 = _7;
[   0.405][d][vo/gpu-next/libplacebo] [ 12] _8003 = _8;
[   0.405][d][vo/gpu-next/libplacebo] [ 13] vec2 va_pos = _9; 
[   0.405][d][vo/gpu-next/libplacebo] [ 14] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.405][d][vo/gpu-next/libplacebo] [ 15] }
[   0.405][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.405][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.405][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_texture_gather : enable
[   0.405][d][vo/gpu-next/libplacebo] [  3] layout(binding=0) uniform  sampler2D _2;
[   0.405][d][vo/gpu-next/libplacebo] [  4] layout(binding=1) uniform  sampler2D _8002;
[   0.405][d][vo/gpu-next/libplacebo] [  5] layout(location=0) in vec2 _3;
[   0.405][d][vo/gpu-next/libplacebo] [  6] layout(location=1) in vec2 _8003;
[   0.405][d][vo/gpu-next/libplacebo] [  7] layout(location=0) out vec4 out_color;
[   0.405][d][vo/gpu-next/libplacebo] [  8] 
[   0.405][d][vo/gpu-next/libplacebo] [  9] const float _4 = float(1); 
[   0.405][d][vo/gpu-next/libplacebo] [ 10] const float _8004 = float(1); 
[   0.405][d][vo/gpu-next/libplacebo] [ 11] vec4 _8001() {
[   0.405][d][vo/gpu-next/libplacebo] [ 12] // pl_shader_sample_direct                                  
[   0.405][d][vo/gpu-next/libplacebo] [ 13] vec4 color = vec4(_8004) * vec4(textureLod(_8002, _8003, 0.0));   
[   0.405][d][vo/gpu-next/libplacebo] [ 14] return color;
[   0.405][d][vo/gpu-next/libplacebo] [ 15] }
[   0.405][d][vo/gpu-next/libplacebo] [ 16] 
[   0.405][d][vo/gpu-next/libplacebo] [ 17] vec4 _1() {
[   0.405][d][vo/gpu-next/libplacebo] [ 18] // pl_shader_sample_direct                                  
[   0.405][d][vo/gpu-next/libplacebo] [ 19] vec4 color = vec4(_4) * vec4(textureLod(_2, _3, 0.0));   
[   0.405][d][vo/gpu-next/libplacebo] [ 20] {                 
[   0.405][d][vo/gpu-next/libplacebo] [ 21] vec4 tmp = _8001(); 
[   0.405][d][vo/gpu-next/libplacebo] [ 22] color[1] = tmp[0]; 
[   0.405][d][vo/gpu-next/libplacebo] [ 23] } 
[   0.405][d][vo/gpu-next/libplacebo] [ 24] return color;
[   0.405][d][vo/gpu-next/libplacebo] [ 25] }
[   0.405][d][vo/gpu-next/libplacebo] [ 26] 
[   0.405][d][vo/gpu-next/libplacebo] [ 27] void main() {
[   0.405][d][vo/gpu-next/libplacebo] [ 28] out_color = _1();
[   0.405][d][vo/gpu-next/libplacebo] [ 29] }
[   0.473][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.473][v][vo/gpu-next/libplacebo] Spent 67.572 ms translating GLSL to SPIR-V
[   0.474][d][vo/gpu-next/libplacebo] Spent 0.615 ms translating SPIR-V to HLSL
[   0.475][d][vo/gpu-next/libplacebo] Spent 1.187 ms translating HLSL to DXBC
[   0.475][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.475][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.475][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.475][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.475][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.475][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.475][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.475][d][vo/gpu-next/libplacebo] [  7] 
[   0.475][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.475][d][vo/gpu-next/libplacebo] [  9] {
[   0.475][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.475][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.475][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.475][d][vo/gpu-next/libplacebo] [ 13] };
[   0.475][d][vo/gpu-next/libplacebo] [ 14] 
[   0.475][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.475][d][vo/gpu-next/libplacebo] [ 16] {
[   0.475][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.475][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.475][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.475][d][vo/gpu-next/libplacebo] [ 20] };
[   0.475][d][vo/gpu-next/libplacebo] [ 21] 
[   0.475][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.475][d][vo/gpu-next/libplacebo] [ 23] {
[   0.475][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.475][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.475][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.475][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.475][d][vo/gpu-next/libplacebo] [ 28] }
[   0.475][d][vo/gpu-next/libplacebo] [ 29] 
[   0.475][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.475][d][vo/gpu-next/libplacebo] [ 31] {
[   0.475][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.475][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.475][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.475][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.475][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.475][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.475][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.475][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.475][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.475][d][vo/gpu-next/libplacebo] [ 41] }
[   0.477][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.477][d][vo/gpu-next/libplacebo] Spent 1.629 ms translating GLSL to SPIR-V
[   0.477][d][vo/gpu-next/libplacebo] Spent 0.179 ms translating SPIR-V to HLSL
[   0.479][d][vo/gpu-next/libplacebo] Spent 1.713 ms translating HLSL to DXBC
[   0.479][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.479][d][vo/gpu-next/libplacebo] [  1] Texture2D<float4> _20 : register(t0);
[   0.479][d][vo/gpu-next/libplacebo] [  2] SamplerState __20_sampler : register(s0);
[   0.479][d][vo/gpu-next/libplacebo] [  3] Texture2D<float4> _33 : register(t1);
[   0.479][d][vo/gpu-next/libplacebo] [  4] SamplerState __33_sampler : register(s1);
[   0.479][d][vo/gpu-next/libplacebo] [  5] 
[   0.479][d][vo/gpu-next/libplacebo] [  6] static float2 _24;
[   0.479][d][vo/gpu-next/libplacebo] [  7] static float2 _35;
[   0.479][d][vo/gpu-next/libplacebo] [  8] static float4 _52;
[   0.479][d][vo/gpu-next/libplacebo] [  9] 
[   0.479][d][vo/gpu-next/libplacebo] [ 10] struct SPIRV_Cross_Input
[   0.479][d][vo/gpu-next/libplacebo] [ 11] {
[   0.479][d][vo/gpu-next/libplacebo] [ 12]     float2 _35 : TEXCOORD0;
[   0.479][d][vo/gpu-next/libplacebo] [ 13]     float2 _24 : TEXCOORD1;
[   0.479][d][vo/gpu-next/libplacebo] [ 14] };
[   0.479][d][vo/gpu-next/libplacebo] [ 15] 
[   0.479][d][vo/gpu-next/libplacebo] [ 16] struct SPIRV_Cross_Output
[   0.479][d][vo/gpu-next/libplacebo] [ 17] {
[   0.479][d][vo/gpu-next/libplacebo] [ 18]     float4 _52 : SV_Target0;
[   0.479][d][vo/gpu-next/libplacebo] [ 19] };
[   0.479][d][vo/gpu-next/libplacebo] [ 20] 
[   0.479][d][vo/gpu-next/libplacebo] [ 21] void frag_main()
[   0.479][d][vo/gpu-next/libplacebo] [ 22] {
[   0.479][d][vo/gpu-next/libplacebo] [ 23]     float4 _60 = _33.SampleLevel(__33_sampler, _35, 0.0f);
[   0.479][d][vo/gpu-next/libplacebo] [ 24]     _60.y = _20.SampleLevel(__20_sampler, _24, 0.0f).x;
[   0.479][d][vo/gpu-next/libplacebo] [ 25]     _52 = _60;
[   0.479][d][vo/gpu-next/libplacebo] [ 26] }
[   0.479][d][vo/gpu-next/libplacebo] [ 27] 
[   0.479][d][vo/gpu-next/libplacebo] [ 28] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.479][d][vo/gpu-next/libplacebo] [ 29] {
[   0.479][d][vo/gpu-next/libplacebo] [ 30]     _24 = stage_input._24;
[   0.479][d][vo/gpu-next/libplacebo] [ 31]     _35 = stage_input._35;
[   0.479][d][vo/gpu-next/libplacebo] [ 32]     frag_main();
[   0.479][d][vo/gpu-next/libplacebo] [ 33]     SPIRV_Cross_Output stage_output;
[   0.479][d][vo/gpu-next/libplacebo] [ 34]     stage_output._52 = _52;
[   0.479][d][vo/gpu-next/libplacebo] [ 35]     return stage_output;
[   0.479][d][vo/gpu-next/libplacebo] [ 36] }
[   0.482][d][vo/gpu-next] cache_save_obj: key(183f85fe9956ba9d), size(1673), save time(2.887 ms)
[   0.482][d][vo/gpu-next/libplacebo] LUT invalidated, regenerating..
[   0.482][d][vo/gpu-next/libplacebo] Spent 0.001 ms generating shader LUT
[   0.483][d][vo/gpu-next/libplacebo] (Re)creating 540x610x0 texture with format rg16hf: src/renderer.c:762
[   0.483][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.483][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.483][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.483][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.483][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.483][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _6;
[   0.483][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _11 {
[   0.483][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.483][d][vo/gpu-next/libplacebo] [  8] };
[   0.483][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _12;
[   0.483][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec2 _3;
[   0.483][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) in vec2 _13;
[   0.483][d][vo/gpu-next/libplacebo] [ 12] void main() {
[   0.483][d][vo/gpu-next/libplacebo] [ 13] _3 = _12;
[   0.483][d][vo/gpu-next/libplacebo] [ 14] vec2 va_pos = _13; 
[   0.483][d][vo/gpu-next/libplacebo] [ 15] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.483][d][vo/gpu-next/libplacebo] [ 16] }
[   0.483][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.483][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.483][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.483][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.483][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.483][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _6;
[   0.483][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _11 {
[   0.483][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.483][d][vo/gpu-next/libplacebo] [  8] };
[   0.483][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _3;
[   0.483][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec4 out_color;
[   0.483][d][vo/gpu-next/libplacebo] [ 11] 
[   0.483][d][vo/gpu-next/libplacebo] [ 12] const float _8 = float(0.5); 
[   0.483][d][vo/gpu-next/libplacebo] [ 13] const float _9 = float(0.25); 
[   0.483][d][vo/gpu-next/libplacebo] [ 14] #define _7(x) (_8 * (x) + _9) 
[   0.483][d][vo/gpu-next/libplacebo] [ 15] const float _b = float(0.99609375); 
[   0.483][d][vo/gpu-next/libplacebo] [ 16] const float _c = float(0.001953125); 
[   0.483][d][vo/gpu-next/libplacebo] [ 17] #define _a(x) (_b * (x) + _c) 
[   0.483][d][vo/gpu-next/libplacebo] [ 18] #define _5(pos) (textureLod(_6, vec2(\
[   0.483][d][vo/gpu-next/libplacebo] [ 19]     _7(vec2(pos).x)\
[   0.483][d][vo/gpu-next/libplacebo] [ 20]    ,_a(vec2(pos).y)\
[   0.483][d][vo/gpu-next/libplacebo] [ 21]   ), 0.0).xyzw)
[   0.483][d][vo/gpu-next/libplacebo] [ 22] const uint _d = uint(6); 
[   0.483][d][vo/gpu-next/libplacebo] [ 23] const float _e = float(0); 
[   0.483][d][vo/gpu-next/libplacebo] [ 24] const float _f = float(1); 
[   0.483][d][vo/gpu-next/libplacebo] [ 25] vec4 _1() {
[   0.483][d][vo/gpu-next/libplacebo] [ 26] /* pl_shader_sample_ortho */
[   0.483][d][vo/gpu-next/libplacebo] [ 27] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.483][d][vo/gpu-next/libplacebo] [ 28] {
[   0.483][d][vo/gpu-next/libplacebo] [ 29] vec2 pos = /*pos*/_3, pt = /*pt*/_4;
[   0.483][d][vo/gpu-next/libplacebo] [ 30] vec2 size = vec2(textureSize(/*src_tex*/_2, 0));
[   0.483][d][vo/gpu-next/libplacebo] [ 31] vec2 dir = vec2(float(0), float(1));
[   0.483][d][vo/gpu-next/libplacebo] [ 32] pt *= dir;
[   0.483][d][vo/gpu-next/libplacebo] [ 33] vec2 fcoord2 = fract(pos * size - vec2(0.5));
[   0.483][d][vo/gpu-next/libplacebo] [ 34] float fcoord = dot(fcoord2, dir);
[   0.483][d][vo/gpu-next/libplacebo] [ 35] vec2 base = pos - fcoord * pt - pt * vec2(float(2));
[   0.483][d][vo/gpu-next/libplacebo] [ 36] vec4 ws;
[   0.483][d][vo/gpu-next/libplacebo] [ 37] float off;
[   0.483][d][vo/gpu-next/libplacebo] [ 38] vec2 c, ca = vec2(0.0);
[   0.483][d][vo/gpu-next/libplacebo] [ 39] #pragma unroll 4
[   0.483][d][vo/gpu-next/libplacebo] [ 40] for (uint n = 0u; n < /*n*/_d; n += uint(1)) {
[   0.483][d][vo/gpu-next/libplacebo] [ 41]     if (n % 4u == 0u)
[   0.483][d][vo/gpu-next/libplacebo] [ 42]         ws = /*lut*/_5(vec2(float(n / 4u) / float(1), fcoord));
[   0.483][d][vo/gpu-next/libplacebo] [ 43]     off = float(n);
[   0.483][d][vo/gpu-next/libplacebo] [ 44]     c = textureLod(/*src_tex*/_2, base + pt * off, 0.0).rg;
[   0.483][d][vo/gpu-next/libplacebo] [ 45]     ca += ws[n % 4u] * c;
[   0.483][d][vo/gpu-next/libplacebo] [ 46] }
[   0.483][d][vo/gpu-next/libplacebo] [ 47] color.rg = /*scale*/_f * ca;
[   0.483][d][vo/gpu-next/libplacebo] [ 48] }
[   0.483][d][vo/gpu-next/libplacebo] [ 49] return color;
[   0.483][d][vo/gpu-next/libplacebo] [ 50] }
[   0.483][d][vo/gpu-next/libplacebo] [ 51] 
[   0.483][d][vo/gpu-next/libplacebo] [ 52] void main() {
[   0.483][d][vo/gpu-next/libplacebo] [ 53] out_color = _1();
[   0.483][d][vo/gpu-next/libplacebo] [ 54] }
[   0.485][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.485][d][vo/gpu-next/libplacebo] Spent 2.002 ms translating GLSL to SPIR-V
[   0.485][d][vo/gpu-next/libplacebo] Spent 0.210 ms translating SPIR-V to HLSL
[   0.487][d][vo/gpu-next/libplacebo] Spent 1.530 ms translating HLSL to DXBC
[   0.487][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.487][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.487][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.487][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.487][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   0.487][d][vo/gpu-next/libplacebo] [  5] 
[   0.487][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   0.487][d][vo/gpu-next/libplacebo] [  7] {
[   0.487][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   0.487][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   0.487][d][vo/gpu-next/libplacebo] [ 10] };
[   0.487][d][vo/gpu-next/libplacebo] [ 11] 
[   0.487][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   0.487][d][vo/gpu-next/libplacebo] [ 13] {
[   0.487][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   0.487][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   0.487][d][vo/gpu-next/libplacebo] [ 16] };
[   0.487][d][vo/gpu-next/libplacebo] [ 17] 
[   0.487][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   0.487][d][vo/gpu-next/libplacebo] [ 19] {
[   0.487][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   0.487][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   0.487][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   0.487][d][vo/gpu-next/libplacebo] [ 23] }
[   0.487][d][vo/gpu-next/libplacebo] [ 24] 
[   0.487][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.487][d][vo/gpu-next/libplacebo] [ 26] {
[   0.487][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   0.487][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   0.487][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   0.487][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   0.487][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   0.487][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   0.487][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   0.487][d][vo/gpu-next/libplacebo] [ 34] }
[   0.492][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.492][d][vo/gpu-next/libplacebo] Spent 4.789 ms translating GLSL to SPIR-V
[   0.492][d][vo/gpu-next/libplacebo] Spent 0.558 ms translating SPIR-V to HLSL
[   0.499][d][vo/gpu-next/libplacebo] Spent 7.098 ms translating HLSL to DXBC
[   0.500][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.500][d][vo/gpu-next/libplacebo] [  1] cbuffer _23_25 : register(b0)
[   0.500][d][vo/gpu-next/libplacebo] [  2] {
[   0.500][d][vo/gpu-next/libplacebo] [  3]     float2 _25_m0 : packoffset(c0);
[   0.500][d][vo/gpu-next/libplacebo] [  4] };
[   0.500][d][vo/gpu-next/libplacebo] [  5] 
[   0.500][d][vo/gpu-next/libplacebo] [  6] Texture2D<float4> _35 : register(t0);
[   0.500][d][vo/gpu-next/libplacebo] [  7] SamplerState __35_sampler : register(s0);
[   0.500][d][vo/gpu-next/libplacebo] [  8] Texture2D<float4> _92 : register(t1);
[   0.500][d][vo/gpu-next/libplacebo] [  9] SamplerState __92_sampler : register(s1);
[   0.500][d][vo/gpu-next/libplacebo] [ 10] 
[   0.500][d][vo/gpu-next/libplacebo] [ 11] static float2 _20;
[   0.500][d][vo/gpu-next/libplacebo] [ 12] static float4 _150;
[   0.500][d][vo/gpu-next/libplacebo] [ 13] 
[   0.500][d][vo/gpu-next/libplacebo] [ 14] struct SPIRV_Cross_Input
[   0.500][d][vo/gpu-next/libplacebo] [ 15] {
[   0.500][d][vo/gpu-next/libplacebo] [ 16]     float2 _20 : TEXCOORD0;
[   0.500][d][vo/gpu-next/libplacebo] [ 17] };
[   0.500][d][vo/gpu-next/libplacebo] [ 18] 
[   0.500][d][vo/gpu-next/libplacebo] [ 19] struct SPIRV_Cross_Output
[   0.500][d][vo/gpu-next/libplacebo] [ 20] {
[   0.500][d][vo/gpu-next/libplacebo] [ 21]     float4 _150 : SV_Target0;
[   0.500][d][vo/gpu-next/libplacebo] [ 22] };
[   0.500][d][vo/gpu-next/libplacebo] [ 23] 
[   0.500][d][vo/gpu-next/libplacebo] [ 24] uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
[   0.500][d][vo/gpu-next/libplacebo] [ 25] {
[   0.500][d][vo/gpu-next/libplacebo] [ 26]     uint2 ret;
[   0.500][d][vo/gpu-next/libplacebo] [ 27]     Tex.GetDimensions(Level, ret.x, ret.y, Param);
[   0.500][d][vo/gpu-next/libplacebo] [ 28]     return ret;
[   0.500][d][vo/gpu-next/libplacebo] [ 29] }
[   0.500][d][vo/gpu-next/libplacebo] [ 30] 
[   0.500][d][vo/gpu-next/libplacebo] [ 31] void frag_main()
[   0.500][d][vo/gpu-next/libplacebo] [ 32] {
[   0.500][d][vo/gpu-next/libplacebo] [ 33]     uint _172_dummy_parameter;
[   0.500][d][vo/gpu-next/libplacebo] [ 34]     float2 _176 = _25_m0 * float2(0.0f, 1.0f);
[   0.500][d][vo/gpu-next/libplacebo] [ 35]     float2 _181 = frac((_20 * float2(int2(spvTextureSize(_35, uint(0), _172_dummy_parameter)))) - 0.5f.xx);
[   0.500][d][vo/gpu-next/libplacebo] [ 36]     float _184 = _181.y;
[   0.500][d][vo/gpu-next/libplacebo] [ 37]     float2 _192 = (_20 - (_176 * _184)) - (_25_m0 * float2(0.0f, 2.0f));
[   0.500][d][vo/gpu-next/libplacebo] [ 38]     float2 _258;
[   0.500][d][vo/gpu-next/libplacebo] [ 39]     _258 = 0.0f.xx;
[   0.500][d][vo/gpu-next/libplacebo] [ 40]     float2 _241;
[   0.500][d][vo/gpu-next/libplacebo] [ 41]     float4 _162;
[   0.500][d][vo/gpu-next/libplacebo] [ 42]     for (uint _257 = 0u; _257 < 6u; _258 = _241, _257++)
[   0.500][d][vo/gpu-next/libplacebo] [ 43]     {
[   0.500][d][vo/gpu-next/libplacebo] [ 44]         uint _199 = _257 % 4u;
[   0.500][d][vo/gpu-next/libplacebo] [ 45]         if (_199 == 0u)
[   0.500][d][vo/gpu-next/libplacebo] [ 46]         {
[   0.500][d][vo/gpu-next/libplacebo] [ 47]             _162 = _92.SampleLevel(__92_sampler, float2((0.5f * float(_257 / 4u)) + 0.25f, (0.99609375f * _184) + 0.001953125f), 0.0f);
[   0.500][d][vo/gpu-next/libplacebo] [ 48]         }
[   0.500][d][vo/gpu-next/libplacebo] [ 49]         _241 = _258 + (_35.SampleLevel(__35_sampler, _192 + (_176 * float(_257)), 0.0f).xy * _162[_199]);
[   0.500][d][vo/gpu-next/libplacebo] [ 50]     }
[   0.500][d][vo/gpu-next/libplacebo] [ 51]     float2 _247 = _258 * 1.0f;
[   0.500][d][vo/gpu-next/libplacebo] [ 52]     float4 _254 = float4(0.0f, 0.0f, 0.0f, 1.0f);
[   0.500][d][vo/gpu-next/libplacebo] [ 53]     _254.x = _247.x;
[   0.500][d][vo/gpu-next/libplacebo] [ 54]     _254.y = _247.y;
[   0.500][d][vo/gpu-next/libplacebo] [ 55]     _150 = _254;
[   0.500][d][vo/gpu-next/libplacebo] [ 56] }
[   0.500][d][vo/gpu-next/libplacebo] [ 57] 
[   0.500][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.500][d][vo/gpu-next/libplacebo] [ 59] {
[   0.500][d][vo/gpu-next/libplacebo] [ 60]     _20 = stage_input._20;
[   0.500][d][vo/gpu-next/libplacebo] [ 61]     frag_main();
[   0.500][d][vo/gpu-next/libplacebo] [ 62]     SPIRV_Cross_Output stage_output;
[   0.500][d][vo/gpu-next/libplacebo] [ 63]     stage_output._150 = _150;
[   0.500][d][vo/gpu-next/libplacebo] [ 64]     return stage_output;
[   0.500][d][vo/gpu-next/libplacebo] [ 65] }
[   0.502][d][vo/gpu-next] cache_save_obj: key(b560644d7538e97d), size(2505), save time(2.592 ms)
[   0.513][d][vo/gpu-next/libplacebo] LUT invalidated, regenerating..
[   0.513][d][vo/gpu-next/libplacebo] Spent 0.001 ms generating shader LUT
[   0.514][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgb16hf: src/renderer.c:1066
[   0.514][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.514][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.514][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.514][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.514][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _c002;
[   0.514][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _2002;
[   0.514][d][vo/gpu-next/libplacebo] [  6] layout(binding=2) uniform  sampler2D _2006;
[   0.514][d][vo/gpu-next/libplacebo] [  7] layout(std140, binding=3) uniform _4007 {
[   0.514][d][vo/gpu-next/libplacebo] [  8]     layout(offset=0) vec2 _2004;
[   0.514][d][vo/gpu-next/libplacebo] [  9] };
[   0.514][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) in vec2 _4008;
[   0.514][d][vo/gpu-next/libplacebo] [ 11] layout(location=0) out vec2 _c003;
[   0.514][d][vo/gpu-next/libplacebo] [ 12] layout(location=1) in vec2 _4009;
[   0.514][d][vo/gpu-next/libplacebo] [ 13] layout(location=1) out vec2 _2003;
[   0.514][d][vo/gpu-next/libplacebo] [ 14] layout(location=2) in vec2 _400a;
[   0.514][d][vo/gpu-next/libplacebo] [ 15] void main() {
[   0.514][d][vo/gpu-next/libplacebo] [ 16] _c003 = _4008;
[   0.514][d][vo/gpu-next/libplacebo] [ 17] _2003 = _4009;
[   0.514][d][vo/gpu-next/libplacebo] [ 18] vec2 va_pos = _400a; 
[   0.514][d][vo/gpu-next/libplacebo] [ 19] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.514][d][vo/gpu-next/libplacebo] [ 20] }
[   0.514][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.514][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.514][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.514][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.514][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _c002;
[   0.514][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _2002;
[   0.514][d][vo/gpu-next/libplacebo] [  6] layout(binding=2) uniform  sampler2D _2006;
[   0.514][d][vo/gpu-next/libplacebo] [  7] layout(std140, binding=3) uniform _4007 {
[   0.514][d][vo/gpu-next/libplacebo] [  8]     layout(offset=0) vec2 _2004;
[   0.514][d][vo/gpu-next/libplacebo] [  9] };
[   0.514][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) in vec2 _c003;
[   0.514][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) in vec2 _2003;
[   0.514][d][vo/gpu-next/libplacebo] [ 12] layout(location=0) out vec4 out_color;
[   0.514][d][vo/gpu-next/libplacebo] [ 13] 
[   0.514][d][vo/gpu-next/libplacebo] [ 14] const float _4002 = float(0.062745101749897); 
[   0.514][d][vo/gpu-next/libplacebo] [ 15] const float _4003 = float(0.501960813999176); 
[   0.514][d][vo/gpu-next/libplacebo] [ 16] const float _c004 = float(1); 
[   0.514][d][vo/gpu-next/libplacebo] [ 17] vec4 _c001() {
[   0.514][d][vo/gpu-next/libplacebo] [ 18] // pl_shader_sample_direct                                  
[   0.514][d][vo/gpu-next/libplacebo] [ 19] vec4 color = vec4(_c004) * vec4(textureLod(_c002, _c003, 0.0));   
[   0.514][d][vo/gpu-next/libplacebo] [ 20] return color;
[   0.514][d][vo/gpu-next/libplacebo] [ 21] }
[   0.514][d][vo/gpu-next/libplacebo] [ 22] 
[   0.514][d][vo/gpu-next/libplacebo] [ 23] const float _4004 = float(1); 
[   0.514][d][vo/gpu-next/libplacebo] [ 24] const float _2008 = float(0.5); 
[   0.514][d][vo/gpu-next/libplacebo] [ 25] const float _2009 = float(0.25); 
[   0.514][d][vo/gpu-next/libplacebo] [ 26] #define _2007(x) (_2008 * (x) + _2009) 
[   0.514][d][vo/gpu-next/libplacebo] [ 27] const float _200b = float(0.99609375); 
[   0.514][d][vo/gpu-next/libplacebo] [ 28] const float _200c = float(0.001953125); 
[   0.514][d][vo/gpu-next/libplacebo] [ 29] #define _200a(x) (_200b * (x) + _200c) 
[   0.514][d][vo/gpu-next/libplacebo] [ 30] #define _2005(pos) (textureLod(_2006, vec2(\
[   0.514][d][vo/gpu-next/libplacebo] [ 31]     _2007(vec2(pos).x)\
[   0.514][d][vo/gpu-next/libplacebo] [ 32]    ,_200a(vec2(pos).y)\
[   0.514][d][vo/gpu-next/libplacebo] [ 33]   ), 0.0).xyzw)
[   0.514][d][vo/gpu-next/libplacebo] [ 34] const uint _200d = uint(6); 
[   0.514][d][vo/gpu-next/libplacebo] [ 35] const float _200e = float(0); 
[   0.514][d][vo/gpu-next/libplacebo] [ 36] const float _200f = float(1); 
[   0.514][d][vo/gpu-next/libplacebo] [ 37] vec4 _2001() {
[   0.514][d][vo/gpu-next/libplacebo] [ 38] /* pl_shader_sample_ortho */
[   0.514][d][vo/gpu-next/libplacebo] [ 39] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.514][d][vo/gpu-next/libplacebo] [ 40] {
[   0.514][d][vo/gpu-next/libplacebo] [ 41] vec2 pos = /*pos*/_2003, pt = /*pt*/_2004;
[   0.514][d][vo/gpu-next/libplacebo] [ 42] vec2 size = vec2(textureSize(/*src_tex*/_2002, 0));
[   0.514][d][vo/gpu-next/libplacebo] [ 43] vec2 dir = vec2(float(1), float(0));
[   0.514][d][vo/gpu-next/libplacebo] [ 44] pt *= dir;
[   0.514][d][vo/gpu-next/libplacebo] [ 45] vec2 fcoord2 = fract(pos * size - vec2(0.5));
[   0.514][d][vo/gpu-next/libplacebo] [ 46] float fcoord = dot(fcoord2, dir);
[   0.514][d][vo/gpu-next/libplacebo] [ 47] vec2 base = pos - fcoord * pt - pt * vec2(float(2));
[   0.514][d][vo/gpu-next/libplacebo] [ 48] vec4 ws;
[   0.514][d][vo/gpu-next/libplacebo] [ 49] float off;
[   0.514][d][vo/gpu-next/libplacebo] [ 50] vec2 c, ca = vec2(0.0);
[   0.514][d][vo/gpu-next/libplacebo] [ 51] #pragma unroll 4
[   0.514][d][vo/gpu-next/libplacebo] [ 52] for (uint n = 0u; n < /*n*/_200d; n += uint(1)) {
[   0.514][d][vo/gpu-next/libplacebo] [ 53]     if (n % 4u == 0u)
[   0.514][d][vo/gpu-next/libplacebo] [ 54]         ws = /*lut*/_2005(vec2(float(n / 4u) / float(1), fcoord));
[   0.514][d][vo/gpu-next/libplacebo] [ 55]     off = float(n);
[   0.514][d][vo/gpu-next/libplacebo] [ 56]     c = textureLod(/*src_tex*/_2002, base + pt * off, 0.0).rg;
[   0.514][d][vo/gpu-next/libplacebo] [ 57]     ca += ws[n % 4u] * c;
[   0.514][d][vo/gpu-next/libplacebo] [ 58] }
[   0.514][d][vo/gpu-next/libplacebo] [ 59] color.rg = /*scale*/_200f * ca;
[   0.514][d][vo/gpu-next/libplacebo] [ 60] }
[   0.514][d][vo/gpu-next/libplacebo] [ 61] return color;
[   0.514][d][vo/gpu-next/libplacebo] [ 62] }
[   0.514][d][vo/gpu-next/libplacebo] [ 63] 
[   0.514][d][vo/gpu-next/libplacebo] [ 64] const float _4005 = float(1); 
[   0.514][d][vo/gpu-next/libplacebo] [ 65] vec4 _4001() {
[   0.514][d][vo/gpu-next/libplacebo] [ 66] vec4 color = vec4(_4002, vec2(_4003), 1.0);   
[   0.514][d][vo/gpu-next/libplacebo] [ 67] // pass_read_image                        
[   0.515][d][vo/gpu-next/libplacebo] [ 68] {                                         
[   0.515][d][vo/gpu-next/libplacebo] [ 69] vec4 tmp;                                 
[   0.515][d][vo/gpu-next/libplacebo] [ 70] tmp = vec4(_4004) * _c001(); 
[   0.515][d][vo/gpu-next/libplacebo] [ 71] color[0] = tmp[0];
[   0.515][d][vo/gpu-next/libplacebo] [ 72] tmp = vec4(_4005) * _2001(); 
[   0.515][d][vo/gpu-next/libplacebo] [ 73] color[1] = tmp[0];
[   0.515][d][vo/gpu-next/libplacebo] [ 74] color[2] = tmp[1];
[   0.515][d][vo/gpu-next/libplacebo] [ 75] }
[   0.515][d][vo/gpu-next/libplacebo] [ 76] return color;
[   0.515][d][vo/gpu-next/libplacebo] [ 77] }
[   0.515][d][vo/gpu-next/libplacebo] [ 78] 
[   0.515][d][vo/gpu-next/libplacebo] [ 79] void main() {
[   0.515][d][vo/gpu-next/libplacebo] [ 80] out_color = _4001();
[   0.515][d][vo/gpu-next/libplacebo] [ 81] }
[   0.516][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.516][d][vo/gpu-next/libplacebo] Spent 1.548 ms translating GLSL to SPIR-V
[   0.516][d][vo/gpu-next/libplacebo] Spent 0.133 ms translating SPIR-V to HLSL
[   0.518][d][vo/gpu-next/libplacebo] Spent 1.292 ms translating HLSL to DXBC
[   0.518][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.518][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.518][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.518][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.518][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.518][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.518][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.518][d][vo/gpu-next/libplacebo] [  7] 
[   0.518][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.518][d][vo/gpu-next/libplacebo] [  9] {
[   0.518][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.518][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.518][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.518][d][vo/gpu-next/libplacebo] [ 13] };
[   0.518][d][vo/gpu-next/libplacebo] [ 14] 
[   0.518][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.518][d][vo/gpu-next/libplacebo] [ 16] {
[   0.518][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.518][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.518][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.518][d][vo/gpu-next/libplacebo] [ 20] };
[   0.518][d][vo/gpu-next/libplacebo] [ 21] 
[   0.518][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.518][d][vo/gpu-next/libplacebo] [ 23] {
[   0.518][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.518][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.518][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.518][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.518][d][vo/gpu-next/libplacebo] [ 28] }
[   0.518][d][vo/gpu-next/libplacebo] [ 29] 
[   0.518][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.518][d][vo/gpu-next/libplacebo] [ 31] {
[   0.518][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.518][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.518][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.518][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.518][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.518][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.518][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.518][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.518][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.518][d][vo/gpu-next/libplacebo] [ 41] }
[   0.521][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.521][d][vo/gpu-next/libplacebo] Spent 3.482 ms translating GLSL to SPIR-V
[   0.521][d][vo/gpu-next/libplacebo] Spent 0.329 ms translating SPIR-V to HLSL
[   0.527][d][vo/gpu-next/libplacebo] Spent 5.921 ms translating HLSL to DXBC
[   0.527][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.527][d][vo/gpu-next/libplacebo] [  1] cbuffer _41_43 : register(b0)
[   0.527][d][vo/gpu-next/libplacebo] [  2] {
[   0.527][d][vo/gpu-next/libplacebo] [  3]     float2 _43_m0 : packoffset(c0);
[   0.527][d][vo/gpu-next/libplacebo] [  4] };
[   0.527][d][vo/gpu-next/libplacebo] [  5] 
[   0.527][d][vo/gpu-next/libplacebo] [  6] Texture2D<float4> _22 : register(t0);
[   0.527][d][vo/gpu-next/libplacebo] [  7] SamplerState __22_sampler : register(s0);
[   0.527][d][vo/gpu-next/libplacebo] [  8] Texture2D<float4> _50 : register(t1);
[   0.527][d][vo/gpu-next/libplacebo] [  9] SamplerState __50_sampler : register(s1);
[   0.527][d][vo/gpu-next/libplacebo] [ 10] Texture2D<float4> _107 : register(t2);
[   0.527][d][vo/gpu-next/libplacebo] [ 11] SamplerState __107_sampler : register(s2);
[   0.527][d][vo/gpu-next/libplacebo] [ 12] 
[   0.527][d][vo/gpu-next/libplacebo] [ 13] static float2 _26;
[   0.527][d][vo/gpu-next/libplacebo] [ 14] static float2 _38;
[   0.527][d][vo/gpu-next/libplacebo] [ 15] static float4 _187;
[   0.527][d][vo/gpu-next/libplacebo] [ 16] 
[   0.527][d][vo/gpu-next/libplacebo] [ 17] struct SPIRV_Cross_Input
[   0.527][d][vo/gpu-next/libplacebo] [ 18] {
[   0.527][d][vo/gpu-next/libplacebo] [ 19]     float2 _26 : TEXCOORD0;
[   0.527][d][vo/gpu-next/libplacebo] [ 20]     float2 _38 : TEXCOORD1;
[   0.527][d][vo/gpu-next/libplacebo] [ 21] };
[   0.527][d][vo/gpu-next/libplacebo] [ 22] 
[   0.527][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Output
[   0.527][d][vo/gpu-next/libplacebo] [ 24] {
[   0.527][d][vo/gpu-next/libplacebo] [ 25]     float4 _187 : SV_Target0;
[   0.527][d][vo/gpu-next/libplacebo] [ 26] };
[   0.527][d][vo/gpu-next/libplacebo] [ 27] 
[   0.527][d][vo/gpu-next/libplacebo] [ 28] uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
[   0.527][d][vo/gpu-next/libplacebo] [ 29] {
[   0.527][d][vo/gpu-next/libplacebo] [ 30]     uint2 ret;
[   0.527][d][vo/gpu-next/libplacebo] [ 31]     Tex.GetDimensions(Level, ret.x, ret.y, Param);
[   0.527][d][vo/gpu-next/libplacebo] [ 32]     return ret;
[   0.527][d][vo/gpu-next/libplacebo] [ 33] }
[   0.527][d][vo/gpu-next/libplacebo] [ 34] 
[   0.527][d][vo/gpu-next/libplacebo] [ 35] void frag_main()
[   0.527][d][vo/gpu-next/libplacebo] [ 36] {
[   0.527][d][vo/gpu-next/libplacebo] [ 37]     float4 _318 = float4(0.062745101749897003173828125f, 0.501960813999176025390625f, 0.501960813999176025390625f, 1.0f);
[   0.527][d][vo/gpu-next/libplacebo] [ 38]     _318.x = _22.SampleLevel(__22_sampler, _26, 0.0f).x;
[   0.527][d][vo/gpu-next/libplacebo] [ 39]     uint _235_dummy_parameter;
[   0.527][d][vo/gpu-next/libplacebo] [ 40]     float2 _239 = _43_m0 * float2(1.0f, 0.0f);
[   0.527][d][vo/gpu-next/libplacebo] [ 41]     float2 _244 = frac((_38 * float2(int2(spvTextureSize(_50, uint(0), _235_dummy_parameter)))) - 0.5f.xx);
[   0.527][d][vo/gpu-next/libplacebo] [ 42]     float _247 = _244.x;
[   0.527][d][vo/gpu-next/libplacebo] [ 43]     float2 _255 = (_38 - (_239 * _247)) - (_43_m0 * float2(2.0f, 0.0f));
[   0.528][d][vo/gpu-next/libplacebo] [ 44]     float2 _330;
[   0.528][d][vo/gpu-next/libplacebo] [ 45]     _330 = 0.0f.xx;
[   0.528][d][vo/gpu-next/libplacebo] [ 46]     float2 _304;
[   0.528][d][vo/gpu-next/libplacebo] [ 47]     float4 _225;
[   0.528][d][vo/gpu-next/libplacebo] [ 48]     for (uint _329 = 0u; _329 < 6u; _330 = _304, _329++)
[   0.528][d][vo/gpu-next/libplacebo] [ 49]     {
[   0.528][d][vo/gpu-next/libplacebo] [ 50]         uint _262 = _329 % 4u;
[   0.528][d][vo/gpu-next/libplacebo] [ 51]         if (_262 == 0u)
[   0.528][d][vo/gpu-next/libplacebo] [ 52]         {
[   0.528][d][vo/gpu-next/libplacebo] [ 53]             _225 = _107.SampleLevel(__107_sampler, float2((0.5f * float(_329 / 4u)) + 0.25f, (0.99609375f * _247) + 0.001953125f), 0.0f);
[   0.528][d][vo/gpu-next/libplacebo] [ 54]         }
[   0.528][d][vo/gpu-next/libplacebo] [ 55]         _304 = _330 + (_50.SampleLevel(__50_sampler, _255 + (_239 * float(_329)), 0.0f).xy * _225[_262]);
[   0.528][d][vo/gpu-next/libplacebo] [ 56]     }
[   0.528][d][vo/gpu-next/libplacebo] [ 57]     float2 _310 = _330 * 1.0f;
[   0.528][d][vo/gpu-next/libplacebo] [ 58]     _318.y = _310.x;
[   0.528][d][vo/gpu-next/libplacebo] [ 59]     _318.z = _310.y;
[   0.528][d][vo/gpu-next/libplacebo] [ 60]     _187 = _318;
[   0.528][d][vo/gpu-next/libplacebo] [ 61] }
[   0.528][d][vo/gpu-next/libplacebo] [ 62] 
[   0.528][d][vo/gpu-next/libplacebo] [ 63] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.528][d][vo/gpu-next/libplacebo] [ 64] {
[   0.528][d][vo/gpu-next/libplacebo] [ 65]     _26 = stage_input._26;
[   0.528][d][vo/gpu-next/libplacebo] [ 66]     _38 = stage_input._38;
[   0.528][d][vo/gpu-next/libplacebo] [ 67]     frag_main();
[   0.528][d][vo/gpu-next/libplacebo] [ 68]     SPIRV_Cross_Output stage_output;
[   0.528][d][vo/gpu-next/libplacebo] [ 69]     stage_output._187 = _187;
[   0.528][d][vo/gpu-next/libplacebo] [ 70]     return stage_output;
[   0.528][d][vo/gpu-next/libplacebo] [ 71] }
[   0.530][d][vo/gpu-next] cache_save_obj: key(dc93c39b2cc78d92), size(2809), save time(2.550 ms)
[   0.530][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgb16hf: src/renderer.c:1066
[   0.531][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.531][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.531][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.531][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.531][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.531][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _8 {
[   0.531][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) mat3 _5;
[   0.531][d][vo/gpu-next/libplacebo] [  7]     layout(offset=48) vec3 _6;
[   0.531][d][vo/gpu-next/libplacebo] [  8] };
[   0.531][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _9;
[   0.531][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec2 _3;
[   0.531][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) in vec2 _a;
[   0.531][d][vo/gpu-next/libplacebo] [ 12] void main() {
[   0.531][d][vo/gpu-next/libplacebo] [ 13] _3 = _9;
[   0.531][d][vo/gpu-next/libplacebo] [ 14] vec2 va_pos = _a; 
[   0.531][d][vo/gpu-next/libplacebo] [ 15] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.531][d][vo/gpu-next/libplacebo] [ 16] }
[   0.531][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.531][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.531][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.531][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.531][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.531][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _8 {
[   0.531][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) mat3 _5;
[   0.531][d][vo/gpu-next/libplacebo] [  7]     layout(offset=48) vec3 _6;
[   0.531][d][vo/gpu-next/libplacebo] [  8] };
[   0.531][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _3;
[   0.531][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec4 out_color;
[   0.531][d][vo/gpu-next/libplacebo] [ 11] 
[   0.531][d][vo/gpu-next/libplacebo] [ 12] const float _4 = float(1); 
[   0.531][d][vo/gpu-next/libplacebo] [ 13] vec4 _1() {
[   0.531][d][vo/gpu-next/libplacebo] [ 14] // pl_shader_sample_direct                                  
[   0.531][d][vo/gpu-next/libplacebo] [ 15] vec4 color = vec4(_4) * vec4(textureLod(_2, _3, 0.0));   
[   0.531][d][vo/gpu-next/libplacebo] [ 16] // pl_shader_decode_color 
[   0.531][d][vo/gpu-next/libplacebo] [ 17] { 
[   0.531][d][vo/gpu-next/libplacebo] [ 18] color.rgb = _5 * color.rgb + _6; 
[   0.531][d][vo/gpu-next/libplacebo] [ 19] }
[   0.531][d][vo/gpu-next/libplacebo] [ 20] return color;
[   0.531][d][vo/gpu-next/libplacebo] [ 21] }
[   0.531][d][vo/gpu-next/libplacebo] [ 22] 
[   0.531][d][vo/gpu-next/libplacebo] [ 23] void main() {
[   0.531][d][vo/gpu-next/libplacebo] [ 24] out_color = _1();
[   0.531][d][vo/gpu-next/libplacebo] [ 25] }
[   0.532][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.532][d][vo/gpu-next/libplacebo] Spent 1.567 ms translating GLSL to SPIR-V
[   0.533][d][vo/gpu-next/libplacebo] Spent 0.128 ms translating SPIR-V to HLSL
[   0.534][d][vo/gpu-next/libplacebo] Spent 1.158 ms translating HLSL to DXBC
[   0.534][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.534][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.534][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.534][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.534][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   0.534][d][vo/gpu-next/libplacebo] [  5] 
[   0.534][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   0.534][d][vo/gpu-next/libplacebo] [  7] {
[   0.534][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   0.534][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   0.534][d][vo/gpu-next/libplacebo] [ 10] };
[   0.534][d][vo/gpu-next/libplacebo] [ 11] 
[   0.534][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   0.534][d][vo/gpu-next/libplacebo] [ 13] {
[   0.534][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   0.534][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   0.534][d][vo/gpu-next/libplacebo] [ 16] };
[   0.534][d][vo/gpu-next/libplacebo] [ 17] 
[   0.534][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   0.534][d][vo/gpu-next/libplacebo] [ 19] {
[   0.534][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   0.534][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   0.534][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   0.534][d][vo/gpu-next/libplacebo] [ 23] }
[   0.534][d][vo/gpu-next/libplacebo] [ 24] 
[   0.534][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.534][d][vo/gpu-next/libplacebo] [ 26] {
[   0.534][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   0.534][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   0.534][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   0.534][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   0.534][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   0.534][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   0.534][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   0.534][d][vo/gpu-next/libplacebo] [ 34] }
[   0.535][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.535][d][vo/gpu-next/libplacebo] Spent 1.637 ms translating GLSL to SPIR-V
[   0.536][d][vo/gpu-next/libplacebo] Spent 0.154 ms translating SPIR-V to HLSL
[   0.537][d][vo/gpu-next/libplacebo] Spent 1.876 ms translating HLSL to DXBC
[   0.537][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.537][d][vo/gpu-next/libplacebo] [  1] cbuffer _29_31 : register(b0)
[   0.537][d][vo/gpu-next/libplacebo] [  2] {
[   0.537][d][vo/gpu-next/libplacebo] [  3]     row_major float3x3 _31_m0 : packoffset(c0);
[   0.537][d][vo/gpu-next/libplacebo] [  4]     float3 _31_m1 : packoffset(c3);
[   0.537][d][vo/gpu-next/libplacebo] [  5] };
[   0.537][d][vo/gpu-next/libplacebo] [  6] 
[   0.537][d][vo/gpu-next/libplacebo] [  7] Texture2D<float4> _18 : register(t0);
[   0.537][d][vo/gpu-next/libplacebo] [  8] SamplerState __18_sampler : register(s0);
[   0.537][d][vo/gpu-next/libplacebo] [  9] 
[   0.537][d][vo/gpu-next/libplacebo] [ 10] static float2 _22;
[   0.537][d][vo/gpu-next/libplacebo] [ 11] static float4 _60;
[   0.537][d][vo/gpu-next/libplacebo] [ 12] 
[   0.538][d][vo/gpu-next/libplacebo] [ 13] struct SPIRV_Cross_Input
[   0.538][d][vo/gpu-next/libplacebo] [ 14] {
[   0.538][d][vo/gpu-next/libplacebo] [ 15]     float2 _22 : TEXCOORD0;
[   0.538][d][vo/gpu-next/libplacebo] [ 16] };
[   0.538][d][vo/gpu-next/libplacebo] [ 17] 
[   0.538][d][vo/gpu-next/libplacebo] [ 18] struct SPIRV_Cross_Output
[   0.538][d][vo/gpu-next/libplacebo] [ 19] {
[   0.538][d][vo/gpu-next/libplacebo] [ 20]     float4 _60 : SV_Target0;
[   0.538][d][vo/gpu-next/libplacebo] [ 21] };
[   0.538][d][vo/gpu-next/libplacebo] [ 22] 
[   0.538][d][vo/gpu-next/libplacebo] [ 23] void frag_main()
[   0.538][d][vo/gpu-next/libplacebo] [ 24] {
[   0.538][d][vo/gpu-next/libplacebo] [ 25]     float4 _67 = _18.SampleLevel(__18_sampler, _22, 0.0f);
[   0.538][d][vo/gpu-next/libplacebo] [ 26]     float3 _76 = mul(_67.xyz, _31_m0) + _31_m1;
[   0.538][d][vo/gpu-next/libplacebo] [ 27]     float4 _85 = _67;
[   0.538][d][vo/gpu-next/libplacebo] [ 28]     _85.x = _76.x;
[   0.538][d][vo/gpu-next/libplacebo] [ 29]     _85.y = _76.y;
[   0.538][d][vo/gpu-next/libplacebo] [ 30]     _85.z = _76.z;
[   0.538][d][vo/gpu-next/libplacebo] [ 31]     _60 = _85;
[   0.538][d][vo/gpu-next/libplacebo] [ 32] }
[   0.538][d][vo/gpu-next/libplacebo] [ 33] 
[   0.538][d][vo/gpu-next/libplacebo] [ 34] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.538][d][vo/gpu-next/libplacebo] [ 35] {
[   0.538][d][vo/gpu-next/libplacebo] [ 36]     _22 = stage_input._22;
[   0.538][d][vo/gpu-next/libplacebo] [ 37]     frag_main();
[   0.538][d][vo/gpu-next/libplacebo] [ 38]     SPIRV_Cross_Output stage_output;
[   0.538][d][vo/gpu-next/libplacebo] [ 39]     stage_output._60 = _60;
[   0.538][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.538][d][vo/gpu-next/libplacebo] [ 41] }
[   0.540][d][vo/gpu-next] cache_save_obj: key(694a7b60d153b2ad), size(1765), save time(2.492 ms)
[   0.540][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.541][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.541][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.541][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.541][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.541][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.541][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   0.541][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _4;
[   0.541][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) vec2 _5;
[   0.541][d][vo/gpu-next/libplacebo] [  8]     layout(offset=16) int _7;
[   0.541][d][vo/gpu-next/libplacebo] [  9]     layout(offset=20) float _8;
[   0.541][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _9;
[   0.541][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) vec2 _a;
[   0.541][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=40) vec2 _b;
[   0.541][d][vo/gpu-next/libplacebo] [ 13] };
[   0.541][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _e;
[   0.541][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec2 _3;
[   0.541][d][vo/gpu-next/libplacebo] [ 16] layout(location=1) in vec2 _f;
[   0.541][d][vo/gpu-next/libplacebo] [ 17] void main() {
[   0.541][d][vo/gpu-next/libplacebo] [ 18] _3 = _e;
[   0.541][d][vo/gpu-next/libplacebo] [ 19] vec2 va_pos = _f; 
[   0.541][d][vo/gpu-next/libplacebo] [ 20] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.541][d][vo/gpu-next/libplacebo] [ 21] }
[   0.541][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.541][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.541][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.541][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.541][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.541][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   0.541][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _4;
[   0.541][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) vec2 _5;
[   0.541][d][vo/gpu-next/libplacebo] [  8]     layout(offset=16) int _7;
[   0.541][d][vo/gpu-next/libplacebo] [  9]     layout(offset=20) float _8;
[   0.541][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _9;
[   0.541][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) vec2 _a;
[   0.541][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=40) vec2 _b;
[   0.541][d][vo/gpu-next/libplacebo] [ 13] };
[   0.541][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _3;
[   0.541][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec4 out_color;
[   0.541][d][vo/gpu-next/libplacebo] [ 16] 
[   0.541][d][vo/gpu-next/libplacebo] [ 17] #define MAINPRESUB_raw _2 
[   0.541][d][vo/gpu-next/libplacebo] [ 18] #define MAINPRESUB_pos _3 
[   0.541][d][vo/gpu-next/libplacebo] [ 19] #define MAINPRESUB_map _3_map 
[   0.541][d][vo/gpu-next/libplacebo] [ 20] #define MAINPRESUB_size vec2(textureSize(_2, 0)) 
[   0.541][d][vo/gpu-next/libplacebo] [ 21] #define MAINPRESUB_pt _4 
[   0.541][d][vo/gpu-next/libplacebo] [ 22] #define MAINPRESUB_off _5 
[   0.541][d][vo/gpu-next/libplacebo] [ 23] const float _6 = float(1); 
[   0.541][d][vo/gpu-next/libplacebo] [ 24] #define MAINPRESUB_mul _6 
[   0.541][d][vo/gpu-next/libplacebo] [ 25] #define MAINPRESUB_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.541][d][vo/gpu-next/libplacebo] [ 26] #define MAINPRESUB_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.541][d][vo/gpu-next/libplacebo] [ 27] #define MAINPRESUB_texOff(off) (MAINPRESUB_tex(_3 + _4 * vec2(off))) 
[   0.541][d][vo/gpu-next/libplacebo] [ 28] #define MAINPRESUB_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.541][d][vo/gpu-next/libplacebo] [ 29] #define HOOKED_raw MAINPRESUB_raw 
[   0.541][d][vo/gpu-next/libplacebo] [ 30] #define HOOKED_pos MAINPRESUB_pos 
[   0.541][d][vo/gpu-next/libplacebo] [ 31] #define HOOKED_size MAINPRESUB_size 
[   0.541][d][vo/gpu-next/libplacebo] [ 32] #define HOOKED_rot MAINPRESUB_rot 
[   0.541][d][vo/gpu-next/libplacebo] [ 33] #define HOOKED_off MAINPRESUB_off 
[   0.541][d][vo/gpu-next/libplacebo] [ 34] #define HOOKED_pt MAINPRESUB_pt 
[   0.541][d][vo/gpu-next/libplacebo] [ 35] #define HOOKED_map MAINPRESUB_map 
[   0.541][d][vo/gpu-next/libplacebo] [ 36] #define HOOKED_mul MAINPRESUB_mul 
[   0.541][d][vo/gpu-next/libplacebo] [ 37] #define HOOKED_tex MAINPRESUB_tex 
[   0.541][d][vo/gpu-next/libplacebo] [ 38] #define HOOKED_texOff MAINPRESUB_texOff 
[   0.541][d][vo/gpu-next/libplacebo] [ 39] #define HOOKED_gather MAINPRESUB_gather 
[   0.541][d][vo/gpu-next/libplacebo] [ 40] #define MAIN_raw MAINPRESUB_raw 
[   0.541][d][vo/gpu-next/libplacebo] [ 41] #define MAIN_pos MAINPRESUB_pos 
[   0.541][d][vo/gpu-next/libplacebo] [ 42] #define MAIN_size MAINPRESUB_size 
[   0.541][d][vo/gpu-next/libplacebo] [ 43] #define MAIN_rot MAINPRESUB_rot 
[   0.541][d][vo/gpu-next/libplacebo] [ 44] #define MAIN_off MAINPRESUB_off 
[   0.541][d][vo/gpu-next/libplacebo] [ 45] #define MAIN_pt MAINPRESUB_pt 
[   0.541][d][vo/gpu-next/libplacebo] [ 46] #define MAIN_map MAINPRESUB_map 
[   0.541][d][vo/gpu-next/libplacebo] [ 47] #define MAIN_mul MAINPRESUB_mul 
[   0.541][d][vo/gpu-next/libplacebo] [ 48] #define MAIN_tex MAINPRESUB_tex 
[   0.541][d][vo/gpu-next/libplacebo] [ 49] #define MAIN_texOff MAINPRESUB_texOff 
[   0.541][d][vo/gpu-next/libplacebo] [ 50] #define MAIN_gather MAINPRESUB_gather 
[   0.541][d][vo/gpu-next/libplacebo] [ 51] #define frame _7 
[   0.541][d][vo/gpu-next/libplacebo] [ 52] #define random _8 
[   0.541][d][vo/gpu-next/libplacebo] [ 53] #define input_size _9 
[   0.541][d][vo/gpu-next/libplacebo] [ 54] #define target_size _a 
[   0.541][d][vo/gpu-next/libplacebo] [ 55] #define tex_offset _b 
[   0.541][d][vo/gpu-next/libplacebo] [ 56] const float _8002 = float(0.8703105449676514); 
[   0.541][d][vo/gpu-next/libplacebo] [ 57] const float _8003 = float(0.0595848374068737); 
[   0.541][d][vo/gpu-next/libplacebo] [ 58] vec4 _8001(vec4 color) {
[   0.541][d][vo/gpu-next/libplacebo] [ 59] // pl_shader_linearize           
[   0.541][d][vo/gpu-next/libplacebo] [ 60] color.rgb = max(color.rgb, 0.0); 
[   0.541][d][vo/gpu-next/libplacebo] [ 61] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.541][d][vo/gpu-next/libplacebo] [ 62] return color;
[   0.541][d][vo/gpu-next/libplacebo] [ 63] }
[   0.541][d][vo/gpu-next/libplacebo] [ 64] 
[   0.541][d][vo/gpu-next/libplacebo] [ 65] #define linearize _8001 
[   0.541][d][vo/gpu-next/libplacebo] [ 66] const float _4002 = float(1.149015188217163); 
[   0.541][d][vo/gpu-next/libplacebo] [ 67] const float _4003 = float(0.0595848374068737); 
[   0.541][d][vo/gpu-next/libplacebo] [ 68] vec4 _4001(vec4 color) {
[   0.541][d][vo/gpu-next/libplacebo] [ 69] // pl_shader_delinearize 
[   0.541][d][vo/gpu-next/libplacebo] [ 70] color.rgb = max(color.rgb, 0.0); 
[   0.541][d][vo/gpu-next/libplacebo] [ 71] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.541][d][vo/gpu-next/libplacebo] [ 72] return color;
[   0.541][d][vo/gpu-next/libplacebo] [ 73] }
[   0.541][d][vo/gpu-next/libplacebo] [ 74] 
[   0.541][d][vo/gpu-next/libplacebo] [ 75] #define delinearize _4001 
[   0.541][d][vo/gpu-next/libplacebo] [ 76] 
[   0.541][d][vo/gpu-next/libplacebo] [ 77] #define KERNELSIZE 5 //Kernel size, must be an positive odd integer.
[   0.541][d][vo/gpu-next/libplacebo] [ 78] #define KERNELHALFSIZE 2 //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).
[   0.541][d][vo/gpu-next/libplacebo] [ 79] 
[   0.541][d][vo/gpu-next/libplacebo] [ 80] float get_luma(vec4 rgba) {
[   0.541][d][vo/gpu-next/libplacebo] [ 81] 	return dot(vec4(0.299, 0.587, 0.114, 0.0), rgba);
[   0.541][d][vo/gpu-next/libplacebo] [ 82] }
[   0.541][d][vo/gpu-next/libplacebo] [ 83] 
[   0.541][d][vo/gpu-next/libplacebo] [ 84] vec4 hook() {
[   0.541][d][vo/gpu-next/libplacebo] [ 85] 
[   0.541][d][vo/gpu-next/libplacebo] [ 86] 	float gmax = 0.0;
[   0.541][d][vo/gpu-next/libplacebo] [ 87] 	
[   0.541][d][vo/gpu-next/libplacebo] [ 88] 	for (int i=0; i<KERNELSIZE; i++) {
[   0.541][d][vo/gpu-next/libplacebo] [ 89] 		float g = get_luma(MAIN_texOff(vec2(i - KERNELHALFSIZE, 0)));
[   0.541][d][vo/gpu-next/libplacebo] [ 90] 		
[   0.541][d][vo/gpu-next/libplacebo] [ 91] 		gmax = max(g, gmax);
[   0.541][d][vo/gpu-next/libplacebo] [ 92] 	}
[   0.541][d][vo/gpu-next/libplacebo] [ 93] 	
[   0.541][d][vo/gpu-next/libplacebo] [ 94] 	return vec4(gmax, 0.0, 0.0, 0.0);
[   0.541][d][vo/gpu-next/libplacebo] [ 95] }
[   0.541][d][vo/gpu-next/libplacebo] [ 96] 
[   0.541][d][vo/gpu-next/libplacebo] [ 97] vec4 _1() {
[   0.541][d][vo/gpu-next/libplacebo] [ 98] vec4 color = hook(); 
[   0.541][d][vo/gpu-next/libplacebo] [ 99] return color;
[   0.541][d][vo/gpu-next/libplacebo] [100] }
[   0.541][d][vo/gpu-next/libplacebo] [101] 
[   0.541][d][vo/gpu-next/libplacebo] [102] void main() {
[   0.541][d][vo/gpu-next/libplacebo] [103] out_color = _1();
[   0.541][d][vo/gpu-next/libplacebo] [104] }
[   0.542][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.542][d][vo/gpu-next/libplacebo] Spent 1.324 ms translating GLSL to SPIR-V
[   0.543][d][vo/gpu-next/libplacebo] Spent 0.118 ms translating SPIR-V to HLSL
[   0.544][d][vo/gpu-next/libplacebo] Spent 1.166 ms translating HLSL to DXBC
[   0.544][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.544][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.544][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.544][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.544][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   0.544][d][vo/gpu-next/libplacebo] [  5] 
[   0.544][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   0.544][d][vo/gpu-next/libplacebo] [  7] {
[   0.544][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   0.544][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   0.544][d][vo/gpu-next/libplacebo] [ 10] };
[   0.544][d][vo/gpu-next/libplacebo] [ 11] 
[   0.544][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   0.544][d][vo/gpu-next/libplacebo] [ 13] {
[   0.544][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   0.544][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   0.544][d][vo/gpu-next/libplacebo] [ 16] };
[   0.544][d][vo/gpu-next/libplacebo] [ 17] 
[   0.544][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   0.544][d][vo/gpu-next/libplacebo] [ 19] {
[   0.544][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   0.544][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   0.544][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   0.544][d][vo/gpu-next/libplacebo] [ 23] }
[   0.544][d][vo/gpu-next/libplacebo] [ 24] 
[   0.544][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.544][d][vo/gpu-next/libplacebo] [ 26] {
[   0.544][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   0.544][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   0.544][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   0.544][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   0.544][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   0.544][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   0.544][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   0.544][d][vo/gpu-next/libplacebo] [ 34] }
[   0.546][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.546][d][vo/gpu-next/libplacebo] Spent 2.187 ms translating GLSL to SPIR-V
[   0.546][d][vo/gpu-next/libplacebo] Spent 0.214 ms translating SPIR-V to HLSL
[   0.550][d][vo/gpu-next/libplacebo] Spent 3.728 ms translating HLSL to DXBC
[   0.550][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.550][d][vo/gpu-next/libplacebo] [  1] cbuffer _53_55 : register(b0)
[   0.550][d][vo/gpu-next/libplacebo] [  2] {
[   0.550][d][vo/gpu-next/libplacebo] [  3]     float2 _55_m0 : packoffset(c0);
[   0.550][d][vo/gpu-next/libplacebo] [  4]     float2 _55_m1 : packoffset(c0.z);
[   0.550][d][vo/gpu-next/libplacebo] [  5]     int _55_m2 : packoffset(c1);
[   0.550][d][vo/gpu-next/libplacebo] [  6]     float _55_m3 : packoffset(c1.y);
[   0.550][d][vo/gpu-next/libplacebo] [  7]     float2 _55_m4 : packoffset(c1.z);
[   0.550][d][vo/gpu-next/libplacebo] [  8]     float2 _55_m5 : packoffset(c2);
[   0.550][d][vo/gpu-next/libplacebo] [  9]     float2 _55_m6 : packoffset(c2.z);
[   0.550][d][vo/gpu-next/libplacebo] [ 10] };
[   0.550][d][vo/gpu-next/libplacebo] [ 11] 
[   0.550][d][vo/gpu-next/libplacebo] [ 12] Texture2D<float4> _47 : register(t0);
[   0.550][d][vo/gpu-next/libplacebo] [ 13] SamplerState __47_sampler : register(s0);
[   0.550][d][vo/gpu-next/libplacebo] [ 14] 
[   0.550][d][vo/gpu-next/libplacebo] [ 15] static float2 _51;
[   0.550][d][vo/gpu-next/libplacebo] [ 16] static float4 _86;
[   0.550][d][vo/gpu-next/libplacebo] [ 17] 
[   0.550][d][vo/gpu-next/libplacebo] [ 18] struct SPIRV_Cross_Input
[   0.550][d][vo/gpu-next/libplacebo] [ 19] {
[   0.550][d][vo/gpu-next/libplacebo] [ 20]     float2 _51 : TEXCOORD0;
[   0.550][d][vo/gpu-next/libplacebo] [ 21] };
[   0.550][d][vo/gpu-next/libplacebo] [ 22] 
[   0.550][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Output
[   0.550][d][vo/gpu-next/libplacebo] [ 24] {
[   0.550][d][vo/gpu-next/libplacebo] [ 25]     float4 _86 : SV_Target0;
[   0.550][d][vo/gpu-next/libplacebo] [ 26] };
[   0.550][d][vo/gpu-next/libplacebo] [ 27] 
[   0.550][d][vo/gpu-next/libplacebo] [ 28] void frag_main()
[   0.550][d][vo/gpu-next/libplacebo] [ 29] {
[   0.550][d][vo/gpu-next/libplacebo] [ 30]     float _134;
[   0.550][d][vo/gpu-next/libplacebo] [ 31]     _134 = 0.0f;
[   0.550][d][vo/gpu-next/libplacebo] [ 32]     for (int _133 = 0; _133 < 5; )
[   0.550][d][vo/gpu-next/libplacebo] [ 33]     {
[   0.550][d][vo/gpu-next/libplacebo] [ 34]         _134 = max(dot(float4(0.2989999949932098388671875f, 0.58700001239776611328125f, 0.114000000059604644775390625f, 0.0f), _47.SampleLevel(__47_sampler, _51 + (_55_m0 * float2(float(_133 - 2), 0.0f)), 0.0f) * 1.0f), _134);
[   0.550][d][vo/gpu-next/libplacebo] [ 35]         _133++;
[   0.550][d][vo/gpu-next/libplacebo] [ 36]         continue;
[   0.550][d][vo/gpu-next/libplacebo] [ 37]     }
[   0.550][d][vo/gpu-next/libplacebo] [ 38]     _86 = float4(_134, 0.0f, 0.0f, 0.0f);
[   0.550][d][vo/gpu-next/libplacebo] [ 39] }
[   0.550][d][vo/gpu-next/libplacebo] [ 40] 
[   0.550][d][vo/gpu-next/libplacebo] [ 41] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.550][d][vo/gpu-next/libplacebo] [ 42] {
[   0.550][d][vo/gpu-next/libplacebo] [ 43]     _51 = stage_input._51;
[   0.550][d][vo/gpu-next/libplacebo] [ 44]     frag_main();
[   0.550][d][vo/gpu-next/libplacebo] [ 45]     SPIRV_Cross_Output stage_output;
[   0.550][d][vo/gpu-next/libplacebo] [ 46]     stage_output._86 = _86;
[   0.550][d][vo/gpu-next/libplacebo] [ 47]     return stage_output;
[   0.550][d][vo/gpu-next/libplacebo] [ 48] }
[   0.553][d][vo/gpu-next] cache_save_obj: key(9754b6647df588ca), size(2265), save time(2.313 ms)
[   0.553][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.553][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.553][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.553][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.553][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.553][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.553][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.553][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.553][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.553][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.553][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.553][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.553][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.553][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.553][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.553][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.553][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.553][d][vo/gpu-next/libplacebo] [ 16] };
[   0.553][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.553][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.553][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.553][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.553][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.553][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.553][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.553][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.553][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.553][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.553][d][vo/gpu-next/libplacebo] [ 27] }
[   0.553][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.553][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.553][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.553][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.553][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.553][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.553][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.553][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.553][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.553][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.553][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.553][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.553][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.553][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.553][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.553][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.553][d][vo/gpu-next/libplacebo] [ 16] };
[   0.553][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.553][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.553][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.553][d][vo/gpu-next/libplacebo] [ 20] 
[   0.553][d][vo/gpu-next/libplacebo] [ 21] #define MAINPRESUB_raw _2 
[   0.553][d][vo/gpu-next/libplacebo] [ 22] #define MAINPRESUB_pos _3 
[   0.553][d][vo/gpu-next/libplacebo] [ 23] #define MAINPRESUB_map _3_map 
[   0.553][d][vo/gpu-next/libplacebo] [ 24] #define MAINPRESUB_size vec2(textureSize(_2, 0)) 
[   0.553][d][vo/gpu-next/libplacebo] [ 25] #define MAINPRESUB_pt _4 
[   0.553][d][vo/gpu-next/libplacebo] [ 26] #define MAINPRESUB_off _5 
[   0.553][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.553][d][vo/gpu-next/libplacebo] [ 28] #define MAINPRESUB_mul _6 
[   0.553][d][vo/gpu-next/libplacebo] [ 29] #define MAINPRESUB_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.553][d][vo/gpu-next/libplacebo] [ 30] #define MAINPRESUB_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.553][d][vo/gpu-next/libplacebo] [ 31] #define MAINPRESUB_texOff(off) (MAINPRESUB_tex(_3 + _4 * vec2(off))) 
[   0.553][d][vo/gpu-next/libplacebo] [ 32] #define MAINPRESUB_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.553][d][vo/gpu-next/libplacebo] [ 33] #define HOOKED_raw MAINPRESUB_raw 
[   0.553][d][vo/gpu-next/libplacebo] [ 34] #define HOOKED_pos MAINPRESUB_pos 
[   0.553][d][vo/gpu-next/libplacebo] [ 35] #define HOOKED_size MAINPRESUB_size 
[   0.553][d][vo/gpu-next/libplacebo] [ 36] #define HOOKED_rot MAINPRESUB_rot 
[   0.553][d][vo/gpu-next/libplacebo] [ 37] #define HOOKED_off MAINPRESUB_off 
[   0.553][d][vo/gpu-next/libplacebo] [ 38] #define HOOKED_pt MAINPRESUB_pt 
[   0.553][d][vo/gpu-next/libplacebo] [ 39] #define HOOKED_map MAINPRESUB_map 
[   0.553][d][vo/gpu-next/libplacebo] [ 40] #define HOOKED_mul MAINPRESUB_mul 
[   0.553][d][vo/gpu-next/libplacebo] [ 41] #define HOOKED_tex MAINPRESUB_tex 
[   0.553][d][vo/gpu-next/libplacebo] [ 42] #define HOOKED_texOff MAINPRESUB_texOff 
[   0.553][d][vo/gpu-next/libplacebo] [ 43] #define HOOKED_gather MAINPRESUB_gather 
[   0.553][d][vo/gpu-next/libplacebo] [ 44] #define MAIN_raw MAINPRESUB_raw 
[   0.553][d][vo/gpu-next/libplacebo] [ 45] #define MAIN_pos MAINPRESUB_pos 
[   0.553][d][vo/gpu-next/libplacebo] [ 46] #define MAIN_size MAINPRESUB_size 
[   0.553][d][vo/gpu-next/libplacebo] [ 47] #define MAIN_rot MAINPRESUB_rot 
[   0.553][d][vo/gpu-next/libplacebo] [ 48] #define MAIN_off MAINPRESUB_off 
[   0.553][d][vo/gpu-next/libplacebo] [ 49] #define MAIN_pt MAINPRESUB_pt 
[   0.553][d][vo/gpu-next/libplacebo] [ 50] #define MAIN_map MAINPRESUB_map 
[   0.553][d][vo/gpu-next/libplacebo] [ 51] #define MAIN_mul MAINPRESUB_mul 
[   0.553][d][vo/gpu-next/libplacebo] [ 52] #define MAIN_tex MAINPRESUB_tex 
[   0.553][d][vo/gpu-next/libplacebo] [ 53] #define MAIN_texOff MAINPRESUB_texOff 
[   0.553][d][vo/gpu-next/libplacebo] [ 54] #define MAIN_gather MAINPRESUB_gather 
[   0.553][d][vo/gpu-next/libplacebo] [ 55] #define STATSMAX_raw _7 
[   0.553][d][vo/gpu-next/libplacebo] [ 56] #define STATSMAX_pos _8 
[   0.553][d][vo/gpu-next/libplacebo] [ 57] #define STATSMAX_map _8_map 
[   0.553][d][vo/gpu-next/libplacebo] [ 58] #define STATSMAX_size vec2(textureSize(_7, 0)) 
[   0.553][d][vo/gpu-next/libplacebo] [ 59] #define STATSMAX_pt _9 
[   0.553][d][vo/gpu-next/libplacebo] [ 60] #define STATSMAX_off _a 
[   0.553][d][vo/gpu-next/libplacebo] [ 61] const float _b = float(1); 
[   0.553][d][vo/gpu-next/libplacebo] [ 62] #define STATSMAX_mul _b 
[   0.553][d][vo/gpu-next/libplacebo] [ 63] #define STATSMAX_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.553][d][vo/gpu-next/libplacebo] [ 64] #define STATSMAX_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.553][d][vo/gpu-next/libplacebo] [ 65] #define STATSMAX_texOff(off) (STATSMAX_tex(_8 + _9 * vec2(off))) 
[   0.553][d][vo/gpu-next/libplacebo] [ 66] #define STATSMAX_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.553][d][vo/gpu-next/libplacebo] [ 67] #define frame _c 
[   0.553][d][vo/gpu-next/libplacebo] [ 68] #define random _d 
[   0.553][d][vo/gpu-next/libplacebo] [ 69] #define input_size _e 
[   0.553][d][vo/gpu-next/libplacebo] [ 70] #define target_size _f 
[   0.553][d][vo/gpu-next/libplacebo] [ 71] #define tex_offset _10 
[   0.553][d][vo/gpu-next/libplacebo] [ 72] const float _8002 = float(0.8703105449676514); 
[   0.553][d][vo/gpu-next/libplacebo] [ 73] const float _8003 = float(0.0595848374068737); 
[   0.553][d][vo/gpu-next/libplacebo] [ 74] vec4 _8001(vec4 color) {
[   0.553][d][vo/gpu-next/libplacebo] [ 75] // pl_shader_linearize           
[   0.553][d][vo/gpu-next/libplacebo] [ 76] color.rgb = max(color.rgb, 0.0); 
[   0.553][d][vo/gpu-next/libplacebo] [ 77] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.553][d][vo/gpu-next/libplacebo] [ 78] return color;
[   0.553][d][vo/gpu-next/libplacebo] [ 79] }
[   0.553][d][vo/gpu-next/libplacebo] [ 80] 
[   0.553][d][vo/gpu-next/libplacebo] [ 81] #define linearize _8001 
[   0.553][d][vo/gpu-next/libplacebo] [ 82] const float _4002 = float(1.149015188217163); 
[   0.553][d][vo/gpu-next/libplacebo] [ 83] const float _4003 = float(0.0595848374068737); 
[   0.553][d][vo/gpu-next/libplacebo] [ 84] vec4 _4001(vec4 color) {
[   0.553][d][vo/gpu-next/libplacebo] [ 85] // pl_shader_delinearize 
[   0.553][d][vo/gpu-next/libplacebo] [ 86] color.rgb = max(color.rgb, 0.0); 
[   0.553][d][vo/gpu-next/libplacebo] [ 87] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.553][d][vo/gpu-next/libplacebo] [ 88] return color;
[   0.553][d][vo/gpu-next/libplacebo] [ 89] }
[   0.553][d][vo/gpu-next/libplacebo] [ 90] 
[   0.553][d][vo/gpu-next/libplacebo] [ 91] #define delinearize _4001 
[   0.554][d][vo/gpu-next/libplacebo] [ 92] 
[   0.554][d][vo/gpu-next/libplacebo] [ 93] #define KERNELSIZE 5 //Kernel size, must be an positive odd integer.
[   0.554][d][vo/gpu-next/libplacebo] [ 94] #define KERNELHALFSIZE 2 //Half of the kernel size without remainder. Must be equal to trunc(KERNELSIZE/2).
[   0.554][d][vo/gpu-next/libplacebo] [ 95] 
[   0.554][d][vo/gpu-next/libplacebo] [ 96] vec4 hook() {
[   0.554][d][vo/gpu-next/libplacebo] [ 97] 
[   0.554][d][vo/gpu-next/libplacebo] [ 98] 	float gmax = 0.0;
[   0.554][d][vo/gpu-next/libplacebo] [ 99] 	
[   0.554][d][vo/gpu-next/libplacebo] [100] 	for (int i=0; i<KERNELSIZE; i++) {
[   0.554][d][vo/gpu-next/libplacebo] [101] 		float g = STATSMAX_texOff(vec2(0, i - KERNELHALFSIZE)).x;
[   0.554][d][vo/gpu-next/libplacebo] [102] 		
[   0.554][d][vo/gpu-next/libplacebo] [103] 		gmax = max(g, gmax);
[   0.554][d][vo/gpu-next/libplacebo] [104] 	}
[   0.554][d][vo/gpu-next/libplacebo] [105] 	
[   0.554][d][vo/gpu-next/libplacebo] [106] 	return vec4(gmax, 0.0, 0.0, 0.0);
[   0.554][d][vo/gpu-next/libplacebo] [107] }
[   0.554][d][vo/gpu-next/libplacebo] [108] 
[   0.554][d][vo/gpu-next/libplacebo] [109] vec4 _1() {
[   0.554][d][vo/gpu-next/libplacebo] [110] vec4 color = hook(); 
[   0.554][d][vo/gpu-next/libplacebo] [111] return color;
[   0.554][d][vo/gpu-next/libplacebo] [112] }
[   0.554][d][vo/gpu-next/libplacebo] [113] 
[   0.554][d][vo/gpu-next/libplacebo] [114] void main() {
[   0.554][d][vo/gpu-next/libplacebo] [115] out_color = _1();
[   0.554][d][vo/gpu-next/libplacebo] [116] }
[   0.555][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.555][d][vo/gpu-next/libplacebo] Spent 1.358 ms translating GLSL to SPIR-V
[   0.555][d][vo/gpu-next/libplacebo] Spent 0.112 ms translating SPIR-V to HLSL
[   0.556][d][vo/gpu-next/libplacebo] Spent 1.229 ms translating HLSL to DXBC
[   0.556][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.556][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.556][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.556][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.556][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.556][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.556][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.556][d][vo/gpu-next/libplacebo] [  7] 
[   0.556][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.556][d][vo/gpu-next/libplacebo] [  9] {
[   0.556][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.556][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.556][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.556][d][vo/gpu-next/libplacebo] [ 13] };
[   0.556][d][vo/gpu-next/libplacebo] [ 14] 
[   0.556][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.556][d][vo/gpu-next/libplacebo] [ 16] {
[   0.556][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.556][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.556][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.556][d][vo/gpu-next/libplacebo] [ 20] };
[   0.556][d][vo/gpu-next/libplacebo] [ 21] 
[   0.556][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.556][d][vo/gpu-next/libplacebo] [ 23] {
[   0.556][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.556][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.556][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.556][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.556][d][vo/gpu-next/libplacebo] [ 28] }
[   0.556][d][vo/gpu-next/libplacebo] [ 29] 
[   0.556][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.556][d][vo/gpu-next/libplacebo] [ 31] {
[   0.556][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.556][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.556][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.556][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.556][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.556][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.556][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.556][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.556][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.556][d][vo/gpu-next/libplacebo] [ 41] }
[   0.558][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.558][d][vo/gpu-next/libplacebo] Spent 2.186 ms translating GLSL to SPIR-V
[   0.559][d][vo/gpu-next/libplacebo] Spent 0.166 ms translating SPIR-V to HLSL
[   0.561][d][vo/gpu-next/libplacebo] Spent 2.663 ms translating HLSL to DXBC
[   0.561][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.561][d][vo/gpu-next/libplacebo] [  1] cbuffer _40_42 : register(b0)
[   0.561][d][vo/gpu-next/libplacebo] [  2] {
[   0.561][d][vo/gpu-next/libplacebo] [  3]     float2 _42_m0 : packoffset(c0);
[   0.561][d][vo/gpu-next/libplacebo] [  4]     float2 _42_m1 : packoffset(c0.z);
[   0.561][d][vo/gpu-next/libplacebo] [  5]     float2 _42_m2 : packoffset(c1);
[   0.561][d][vo/gpu-next/libplacebo] [  6]     float2 _42_m3 : packoffset(c1.z);
[   0.561][d][vo/gpu-next/libplacebo] [  7]     int _42_m4 : packoffset(c2);
[   0.561][d][vo/gpu-next/libplacebo] [  8]     float _42_m5 : packoffset(c2.y);
[   0.561][d][vo/gpu-next/libplacebo] [  9]     float2 _42_m6 : packoffset(c2.z);
[   0.561][d][vo/gpu-next/libplacebo] [ 10]     float2 _42_m7 : packoffset(c3);
[   0.561][d][vo/gpu-next/libplacebo] [ 11]     float2 _42_m8 : packoffset(c3.z);
[   0.561][d][vo/gpu-next/libplacebo] [ 12] };
[   0.561][d][vo/gpu-next/libplacebo] [ 13] 
[   0.561][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _34 : register(t0);
[   0.561][d][vo/gpu-next/libplacebo] [ 15] SamplerState __34_sampler : register(s0);
[   0.561][d][vo/gpu-next/libplacebo] [ 16] 
[   0.561][d][vo/gpu-next/libplacebo] [ 17] static float2 _38;
[   0.561][d][vo/gpu-next/libplacebo] [ 18] static float4 _75;
[   0.561][d][vo/gpu-next/libplacebo] [ 19] 
[   0.561][d][vo/gpu-next/libplacebo] [ 20] struct SPIRV_Cross_Input
[   0.561][d][vo/gpu-next/libplacebo] [ 21] {
[   0.561][d][vo/gpu-next/libplacebo] [ 22]     float2 _38 : TEXCOORD1;
[   0.561][d][vo/gpu-next/libplacebo] [ 23] };
[   0.561][d][vo/gpu-next/libplacebo] [ 24] 
[   0.561][d][vo/gpu-next/libplacebo] [ 25] struct SPIRV_Cross_Output
[   0.561][d][vo/gpu-next/libplacebo] [ 26] {
[   0.561][d][vo/gpu-next/libplacebo] [ 27]     float4 _75 : SV_Target0;
[   0.561][d][vo/gpu-next/libplacebo] [ 28] };
[   0.561][d][vo/gpu-next/libplacebo] [ 29] 
[   0.561][d][vo/gpu-next/libplacebo] [ 30] void frag_main()
[   0.561][d][vo/gpu-next/libplacebo] [ 31] {
[   0.561][d][vo/gpu-next/libplacebo] [ 32]     float _120;
[   0.561][d][vo/gpu-next/libplacebo] [ 33]     _120 = 0.0f;
[   0.561][d][vo/gpu-next/libplacebo] [ 34]     for (int _119 = 0; _119 < 5; )
[   0.561][d][vo/gpu-next/libplacebo] [ 35]     {
[   0.561][d][vo/gpu-next/libplacebo] [ 36]         _120 = max((_34.SampleLevel(__34_sampler, _38 + (_42_m2 * float2(0.0f, float(_119 - 2))), 0.0f) * 1.0f).x, _120);
[   0.561][d][vo/gpu-next/libplacebo] [ 37]         _119++;
[   0.561][d][vo/gpu-next/libplacebo] [ 38]         continue;
[   0.561][d][vo/gpu-next/libplacebo] [ 39]     }
[   0.561][d][vo/gpu-next/libplacebo] [ 40]     _75 = float4(_120, 0.0f, 0.0f, 0.0f);
[   0.561][d][vo/gpu-next/libplacebo] [ 41] }
[   0.561][d][vo/gpu-next/libplacebo] [ 42] 
[   0.561][d][vo/gpu-next/libplacebo] [ 43] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.561][d][vo/gpu-next/libplacebo] [ 44] {
[   0.561][d][vo/gpu-next/libplacebo] [ 45]     _38 = stage_input._38;
[   0.561][d][vo/gpu-next/libplacebo] [ 46]     frag_main();
[   0.561][d][vo/gpu-next/libplacebo] [ 47]     SPIRV_Cross_Output stage_output;
[   0.561][d][vo/gpu-next/libplacebo] [ 48]     stage_output._75 = _75;
[   0.561][d][vo/gpu-next/libplacebo] [ 49]     return stage_output;
[   0.561][d][vo/gpu-next/libplacebo] [ 50] }
[   0.564][d][vo/gpu-next] cache_save_obj: key(80add6f2c5d44a2b), size(2389), save time(2.879 ms)
[   0.565][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.565][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.565][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.565][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.565][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.565][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.565][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   0.565][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _4;
[   0.565][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) vec2 _5;
[   0.565][d][vo/gpu-next/libplacebo] [  8]     layout(offset=16) int _7;
[   0.565][d][vo/gpu-next/libplacebo] [  9]     layout(offset=20) float _8;
[   0.565][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _9;
[   0.565][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) vec2 _a;
[   0.565][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=40) vec2 _b;
[   0.565][d][vo/gpu-next/libplacebo] [ 13] };
[   0.565][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _e;
[   0.565][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec2 _3;
[   0.565][d][vo/gpu-next/libplacebo] [ 16] layout(location=1) in vec2 _f;
[   0.565][d][vo/gpu-next/libplacebo] [ 17] void main() {
[   0.565][d][vo/gpu-next/libplacebo] [ 18] _3 = _e;
[   0.565][d][vo/gpu-next/libplacebo] [ 19] vec2 va_pos = _f; 
[   0.565][d][vo/gpu-next/libplacebo] [ 20] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.565][d][vo/gpu-next/libplacebo] [ 21] }
[   0.565][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.565][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.565][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.565][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.565][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.565][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   0.565][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _4;
[   0.565][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) vec2 _5;
[   0.565][d][vo/gpu-next/libplacebo] [  8]     layout(offset=16) int _7;
[   0.565][d][vo/gpu-next/libplacebo] [  9]     layout(offset=20) float _8;
[   0.565][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _9;
[   0.565][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) vec2 _a;
[   0.565][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=40) vec2 _b;
[   0.565][d][vo/gpu-next/libplacebo] [ 13] };
[   0.565][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _3;
[   0.565][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec4 out_color;
[   0.565][d][vo/gpu-next/libplacebo] [ 16] 
[   0.565][d][vo/gpu-next/libplacebo] [ 17] #define MAINPRESUB_raw _2 
[   0.565][d][vo/gpu-next/libplacebo] [ 18] #define MAINPRESUB_pos _3 
[   0.565][d][vo/gpu-next/libplacebo] [ 19] #define MAINPRESUB_map _3_map 
[   0.565][d][vo/gpu-next/libplacebo] [ 20] #define MAINPRESUB_size vec2(textureSize(_2, 0)) 
[   0.565][d][vo/gpu-next/libplacebo] [ 21] #define MAINPRESUB_pt _4 
[   0.565][d][vo/gpu-next/libplacebo] [ 22] #define MAINPRESUB_off _5 
[   0.565][d][vo/gpu-next/libplacebo] [ 23] const float _6 = float(1); 
[   0.565][d][vo/gpu-next/libplacebo] [ 24] #define MAINPRESUB_mul _6 
[   0.565][d][vo/gpu-next/libplacebo] [ 25] #define MAINPRESUB_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.565][d][vo/gpu-next/libplacebo] [ 26] #define MAINPRESUB_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.565][d][vo/gpu-next/libplacebo] [ 27] #define MAINPRESUB_texOff(off) (MAINPRESUB_tex(_3 + _4 * vec2(off))) 
[   0.565][d][vo/gpu-next/libplacebo] [ 28] #define MAINPRESUB_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.565][d][vo/gpu-next/libplacebo] [ 29] #define MAIN_raw MAINPRESUB_raw 
[   0.565][d][vo/gpu-next/libplacebo] [ 30] #define MAIN_pos MAINPRESUB_pos 
[   0.565][d][vo/gpu-next/libplacebo] [ 31] #define MAIN_size MAINPRESUB_size 
[   0.565][d][vo/gpu-next/libplacebo] [ 32] #define MAIN_rot MAINPRESUB_rot 
[   0.565][d][vo/gpu-next/libplacebo] [ 33] #define MAIN_off MAINPRESUB_off 
[   0.565][d][vo/gpu-next/libplacebo] [ 34] #define MAIN_pt MAINPRESUB_pt 
[   0.565][d][vo/gpu-next/libplacebo] [ 35] #define MAIN_map MAINPRESUB_map 
[   0.565][d][vo/gpu-next/libplacebo] [ 36] #define MAIN_mul MAINPRESUB_mul 
[   0.565][d][vo/gpu-next/libplacebo] [ 37] #define MAIN_tex MAINPRESUB_tex 
[   0.565][d][vo/gpu-next/libplacebo] [ 38] #define MAIN_texOff MAINPRESUB_texOff 
[   0.565][d][vo/gpu-next/libplacebo] [ 39] #define MAIN_gather MAINPRESUB_gather 
[   0.565][d][vo/gpu-next/libplacebo] [ 40] #define frame _7 
[   0.565][d][vo/gpu-next/libplacebo] [ 41] #define random _8 
[   0.565][d][vo/gpu-next/libplacebo] [ 42] #define input_size _9 
[   0.565][d][vo/gpu-next/libplacebo] [ 43] #define target_size _a 
[   0.565][d][vo/gpu-next/libplacebo] [ 44] #define tex_offset _b 
[   0.565][d][vo/gpu-next/libplacebo] [ 45] const float _8002 = float(0.8703105449676514); 
[   0.565][d][vo/gpu-next/libplacebo] [ 46] const float _8003 = float(0.0595848374068737); 
[   0.565][d][vo/gpu-next/libplacebo] [ 47] vec4 _8001(vec4 color) {
[   0.565][d][vo/gpu-next/libplacebo] [ 48] // pl_shader_linearize           
[   0.565][d][vo/gpu-next/libplacebo] [ 49] color.rgb = max(color.rgb, 0.0); 
[   0.565][d][vo/gpu-next/libplacebo] [ 50] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.565][d][vo/gpu-next/libplacebo] [ 51] return color;
[   0.565][d][vo/gpu-next/libplacebo] [ 52] }
[   0.565][d][vo/gpu-next/libplacebo] [ 53] 
[   0.565][d][vo/gpu-next/libplacebo] [ 54] #define linearize _8001 
[   0.565][d][vo/gpu-next/libplacebo] [ 55] const float _4002 = float(1.149015188217163); 
[   0.565][d][vo/gpu-next/libplacebo] [ 56] const float _4003 = float(0.0595848374068737); 
[   0.565][d][vo/gpu-next/libplacebo] [ 57] vec4 _4001(vec4 color) {
[   0.565][d][vo/gpu-next/libplacebo] [ 58] // pl_shader_delinearize 
[   0.565][d][vo/gpu-next/libplacebo] [ 59] color.rgb = max(color.rgb, 0.0); 
[   0.565][d][vo/gpu-next/libplacebo] [ 60] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.565][d][vo/gpu-next/libplacebo] [ 61] return color;
[   0.565][d][vo/gpu-next/libplacebo] [ 62] }
[   0.565][d][vo/gpu-next/libplacebo] [ 63] 
[   0.565][d][vo/gpu-next/libplacebo] [ 64] #define delinearize _4001 
[   0.565][d][vo/gpu-next/libplacebo] [ 65] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.565][d][vo/gpu-next/libplacebo] [ 66] vec4 hook() {
[   0.565][d][vo/gpu-next/libplacebo] [ 67]     vec4 result = mat4(0.1690102, -0.2560719, 0.39658326, -0.3679659, -0.27616683, -0.35619372, -0.3748396, 0.08430813, -0.29574734, -0.31511316, -0.09773105, 0.13616018, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 68]     result += mat4(-0.1326393, -0.259433, 0.025070239, 0.58914864, -0.036478516, 0.30723435, 0.007458902, 0.012962684, 0.2493056, 0.13007334, -0.08448256, -0.38414413, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 69]     result += mat4(-0.11539356, 0.35253766, 0.26143202, 0.2760807, -0.09371543, -0.028165473, -0.028452158, -0.27050856, 0.06718067, -0.0056619495, -0.17654495, 0.17288211, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 70]     result += mat4(-0.16145481, -0.3204927, -0.54317135, 0.11830119, 0.49315026, 0.12008072, 0.50857407, -0.30382085, 0.25807253, 0.020755528, 0.29388228, 0.106109895, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 71]     result += mat4(-0.22728722, 0.50484747, -0.07904469, 0.33114597, 0.50306976, -0.22760947, 0.14773269, 0.17628263, 0.14788547, -0.08223464, -0.10880935, -0.3151985, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 72]     result += mat4(0.3414351, 0.057279214, -0.14419858, 0.09761111, -0.11794496, 0.021717256, -0.22750235, 0.13986664, -0.38932344, 0.28996095, 0.3773904, 0.13175532, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 73]     result += mat4(0.1376552, -0.19587159, -0.35147396, -0.097646296, 0.1686707, -0.14385861, 0.031198, 0.12383533, -0.23089902, 0.08707301, 0.3362293, -0.100579016, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 74]     result += mat4(-0.056774966, 0.047585852, -0.36395878, -0.20211312, 0.4077735, 0.12631284, 0.39813092, -0.033365678, 0.2307249, -0.09131807, 0.20823865, 0.31084216, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 75]     result += mat4(-0.12456089, 0.09755632, 0.31490886, -0.06579996, -0.13386595, 0.07564795, -0.26605195, -0.075180635, -0.11182657, 0.06757017, -0.14351276, -0.16828312, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.565][d][vo/gpu-next/libplacebo] [ 76]     result += vec4(-0.046043985, 0.055581126, -0.08791638, -0.13022089);
[   0.565][d][vo/gpu-next/libplacebo] [ 77]     return result;
[   0.565][d][vo/gpu-next/libplacebo] [ 78] }
[   0.565][d][vo/gpu-next/libplacebo] [ 79] vec4 _1() {
[   0.565][d][vo/gpu-next/libplacebo] [ 80] vec4 color = hook(); 
[   0.565][d][vo/gpu-next/libplacebo] [ 81] return color;
[   0.565][d][vo/gpu-next/libplacebo] [ 82] }
[   0.565][d][vo/gpu-next/libplacebo] [ 83] 
[   0.565][d][vo/gpu-next/libplacebo] [ 84] void main() {
[   0.565][d][vo/gpu-next/libplacebo] [ 85] out_color = _1();
[   0.565][d][vo/gpu-next/libplacebo] [ 86] }
[   0.567][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.567][d][vo/gpu-next/libplacebo] Spent 1.485 ms translating GLSL to SPIR-V
[   0.567][d][vo/gpu-next/libplacebo] Spent 0.135 ms translating SPIR-V to HLSL
[   0.568][d][vo/gpu-next/libplacebo] Spent 1.345 ms translating HLSL to DXBC
[   0.568][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.568][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.568][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.568][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.568][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   0.568][d][vo/gpu-next/libplacebo] [  5] 
[   0.568][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   0.568][d][vo/gpu-next/libplacebo] [  7] {
[   0.568][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   0.568][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   0.568][d][vo/gpu-next/libplacebo] [ 10] };
[   0.568][d][vo/gpu-next/libplacebo] [ 11] 
[   0.568][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   0.568][d][vo/gpu-next/libplacebo] [ 13] {
[   0.568][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   0.568][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   0.568][d][vo/gpu-next/libplacebo] [ 16] };
[   0.568][d][vo/gpu-next/libplacebo] [ 17] 
[   0.568][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   0.568][d][vo/gpu-next/libplacebo] [ 19] {
[   0.568][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   0.568][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   0.568][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   0.568][d][vo/gpu-next/libplacebo] [ 23] }
[   0.568][d][vo/gpu-next/libplacebo] [ 24] 
[   0.568][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.568][d][vo/gpu-next/libplacebo] [ 26] {
[   0.568][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   0.568][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   0.568][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   0.568][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   0.568][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   0.568][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   0.568][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   0.568][d][vo/gpu-next/libplacebo] [ 34] }
[   0.572][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.572][d][vo/gpu-next/libplacebo] Spent 3.452 ms translating GLSL to SPIR-V
[   0.572][d][vo/gpu-next/libplacebo] Spent 0.360 ms translating SPIR-V to HLSL
[   0.580][d][vo/gpu-next/libplacebo] Spent 7.371 ms translating HLSL to DXBC
[   0.580][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.580][d][vo/gpu-next/libplacebo] [  1] cbuffer _45_47 : register(b0)
[   0.580][d][vo/gpu-next/libplacebo] [  2] {
[   0.580][d][vo/gpu-next/libplacebo] [  3]     float2 _47_m0 : packoffset(c0);
[   0.580][d][vo/gpu-next/libplacebo] [  4]     float2 _47_m1 : packoffset(c0.z);
[   0.580][d][vo/gpu-next/libplacebo] [  5]     int _47_m2 : packoffset(c1);
[   0.580][d][vo/gpu-next/libplacebo] [  6]     float _47_m3 : packoffset(c1.y);
[   0.580][d][vo/gpu-next/libplacebo] [  7]     float2 _47_m4 : packoffset(c1.z);
[   0.580][d][vo/gpu-next/libplacebo] [  8]     float2 _47_m5 : packoffset(c2);
[   0.580][d][vo/gpu-next/libplacebo] [  9]     float2 _47_m6 : packoffset(c2.z);
[   0.580][d][vo/gpu-next/libplacebo] [ 10] };
[   0.580][d][vo/gpu-next/libplacebo] [ 11] 
[   0.580][d][vo/gpu-next/libplacebo] [ 12] Texture2D<float4> _38 : register(t0);
[   0.580][d][vo/gpu-next/libplacebo] [ 13] SamplerState __38_sampler : register(s0);
[   0.580][d][vo/gpu-next/libplacebo] [ 14] 
[   0.580][d][vo/gpu-next/libplacebo] [ 15] static float2 _42;
[   0.580][d][vo/gpu-next/libplacebo] [ 16] static float4 _299;
[   0.580][d][vo/gpu-next/libplacebo] [ 17] 
[   0.580][d][vo/gpu-next/libplacebo] [ 18] struct SPIRV_Cross_Input
[   0.580][d][vo/gpu-next/libplacebo] [ 19] {
[   0.580][d][vo/gpu-next/libplacebo] [ 20]     float2 _42 : TEXCOORD0;
[   0.580][d][vo/gpu-next/libplacebo] [ 21] };
[   0.580][d][vo/gpu-next/libplacebo] [ 22] 
[   0.580][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Output
[   0.580][d][vo/gpu-next/libplacebo] [ 24] {
[   0.580][d][vo/gpu-next/libplacebo] [ 25]     float4 _299 : SV_Target0;
[   0.580][d][vo/gpu-next/libplacebo] [ 26] };
[   0.580][d][vo/gpu-next/libplacebo] [ 27] 
[   0.580][d][vo/gpu-next/libplacebo] [ 28] void frag_main()
[   0.580][d][vo/gpu-next/libplacebo] [ 29] {
[   0.580][d][vo/gpu-next/libplacebo] [ 30]     _299 = ((((((((mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * (-1.0f).xx), 0.0f) * 1.0f, float4x4(float4(0.16901020705699920654296875f, -0.2560718953609466552734375f, 0.396583259105682373046875f, -0.3679659068584442138671875f), float4(-0.2761668264865875244140625f, -0.356193721294403076171875f, -0.374839603900909423828125f, 0.08430813252925872802734375f), float4(-0.295747339725494384765625f, -0.3151131570339202880859375f, -0.097731046378612518310546875f, 0.13616017997264862060546875f), 0.0f.xxxx)) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(-1.0f, 0.0f)), 0.0f) * 1.0f, float4x4(float4(-0.13263930380344390869140625f, -0.2594330012798309326171875f, 0.0250702388584613800048828125f, 0.58914864063262939453125f), float4(-0.0364785157144069671630859375f, 0.307234346866607666015625f, 0.007458901964128017425537109375f, 0.01296268403530120849609375f), float4(0.24930560588836669921875f, 0.1300733387470245361328125f, -0.084482558071613311767578125f, -0.384144127368927001953125f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(-1.0f, 1.0f)), 0.0f) * 1.0f, float4x4(float4(-0.115393556654453277587890625f, 0.3525376617908477783203125f, 0.2614320218563079833984375f, 0.2760806977748870849609375f), float4(-0.0937154293060302734375f, -0.02816547267138957977294921875f, -0.0284521579742431640625f, -0.2705085575580596923828125f), float4(0.067180670797824859619140625f, -0.00566194951534271240234375f, -0.17654494941234588623046875f, 0.1728821098804473876953125f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(0.0f, -1.0f)), 0.0f) * 1.0f, float4x4(float4(-0.16145481169223785400390625f, -0.3204927146434783935546875f, -0.543171346187591552734375f, 0.118301190435886383056640625f), float4(0.4931502640247344970703125f, 0.120080716907978057861328125f, 0.508574068546295166015625f, -0.3038208484649658203125f), float4(0.2580725252628326416015625f, 0.02075552754104137420654296875f, 0.2938822805881500244140625f, 0.106109894812107086181640625f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42, 0.0f) * 1.0f, float4x4(float4(-0.22728721797466278076171875f, 0.504847466945648193359375f, -0.079044692218303680419921875f, 0.3311459720134735107421875f), float4(0.50306975841522216796875f, -0.22760947048664093017578125f, 0.14773268997669219970703125f, 0.17628262937068939208984375f), float4(0.1478854715824127197265625f, -0.082234643399715423583984375f, -0.10880935192108154296875f, -0.3151985108852386474609375f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(0.0f, 1.0f)), 0.0f) * 1.0f, float4x4(float4(0.3414351046085357666015625f, 0.05727921426296234130859375f, -0.14419858157634735107421875f, 0.097611106932163238525390625f), float4(-0.117944963276386260986328125f, 0.02171725593507289886474609375f, -0.227502346038818359375f, 0.13986663520336151123046875f), float4(-0.3893234431743621826171875f, 0.2899609506130218505859375f, 0.3773904144763946533203125f, 0.1317553222179412841796875f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(1.0f, -1.0f)), 0.0f) * 1.0f, float4x4(float4(0.137655198574066162109375f, -0.1958715915679931640625f, -0.3514739573001861572265625f, -0.097646296024322509765625f), float4(0.16867069900035858154296875f, -0.143858611583709716796875f, 0.03119800053536891937255859375f, 0.123835332691669464111328125f), float4(-0.23089902102947235107421875f, 0.08707301318645477294921875f, 0.3362292945384979248046875f, -0.100579015910625457763671875f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(1.0f, 0.0f)), 0.0f) * 1.0f, float4x4(float4(-0.056774966418743133544921875f, 0.047585852444171905517578125f, -0.363958775997161865234375f, -0.2021131217479705810546875f), float4(0.407773494720458984375f, 0.12631283700466156005859375f, 0.3981309235095977783203125f, -0.0333656780421733856201171875f), float4(0.2307249009609222412109375f, -0.091318070888519287109375f, 0.20823864638805389404296875f, 0.31084215641021728515625f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + _47_m0, 0.0f) * 1.0f, float4x4(float4(-0.124560892581939697265625f, 0.0975563228130340576171875f, 0.31490886211395263671875f, -0.065799959003925323486328125f), float4(-0.13386595249176025390625f, 0.07564795017242431640625f, -0.266051948070526123046875f, -0.07518063485622406005859375f), float4(-0.1118265688419342041015625f, 0.067570172250270843505859375f, -0.1435127556324005126953125f, -0.16828311979770660400390625f), 0.0f.xxxx))) + float4(-0.046043984591960906982421875f, 0.0555811263620853424072265625f, -0.087916381657123565673828125f, -0.130220890045166015625f);
[   0.580][d][vo/gpu-next/libplacebo] [ 31] }
[   0.580][d][vo/gpu-next/libplacebo] [ 32] 
[   0.580][d][vo/gpu-next/libplacebo] [ 33] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.580][d][vo/gpu-next/libplacebo] [ 34] {
[   0.580][d][vo/gpu-next/libplacebo] [ 35]     _42 = stage_input._42;
[   0.580][d][vo/gpu-next/libplacebo] [ 36]     frag_main();
[   0.580][d][vo/gpu-next/libplacebo] [ 37]     SPIRV_Cross_Output stage_output;
[   0.580][d][vo/gpu-next/libplacebo] [ 38]     stage_output._299 = _299;
[   0.580][d][vo/gpu-next/libplacebo] [ 39]     return stage_output;
[   0.580][d][vo/gpu-next/libplacebo] [ 40] }
[   0.583][d][vo/gpu-next] cache_save_obj: key(677d976711dec987), size(4225), save time(3.021 ms)
[   0.583][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.583][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.583][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.583][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.583][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.583][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.583][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   0.583][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _4;
[   0.583][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) vec2 _5;
[   0.583][d][vo/gpu-next/libplacebo] [  8]     layout(offset=16) int _7;
[   0.583][d][vo/gpu-next/libplacebo] [  9]     layout(offset=20) float _8;
[   0.583][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _9;
[   0.583][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) vec2 _a;
[   0.583][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=40) vec2 _b;
[   0.583][d][vo/gpu-next/libplacebo] [ 13] };
[   0.583][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _e;
[   0.583][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec2 _3;
[   0.583][d][vo/gpu-next/libplacebo] [ 16] layout(location=1) in vec2 _f;
[   0.583][d][vo/gpu-next/libplacebo] [ 17] void main() {
[   0.583][d][vo/gpu-next/libplacebo] [ 18] _3 = _e;
[   0.583][d][vo/gpu-next/libplacebo] [ 19] vec2 va_pos = _f; 
[   0.583][d][vo/gpu-next/libplacebo] [ 20] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.583][d][vo/gpu-next/libplacebo] [ 21] }
[   0.583][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.583][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.583][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.583][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.583][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.583][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   0.583][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) vec2 _4;
[   0.583][d][vo/gpu-next/libplacebo] [  7]     layout(offset=8) vec2 _5;
[   0.583][d][vo/gpu-next/libplacebo] [  8]     layout(offset=16) int _7;
[   0.583][d][vo/gpu-next/libplacebo] [  9]     layout(offset=20) float _8;
[   0.583][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _9;
[   0.583][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) vec2 _a;
[   0.583][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=40) vec2 _b;
[   0.583][d][vo/gpu-next/libplacebo] [ 13] };
[   0.583][d][vo/gpu-next/libplacebo] [ 14] layout(location=0) in vec2 _3;
[   0.583][d][vo/gpu-next/libplacebo] [ 15] layout(location=0) out vec4 out_color;
[   0.583][d][vo/gpu-next/libplacebo] [ 16] 
[   0.583][d][vo/gpu-next/libplacebo] [ 17] #define MAINPRESUB_raw _2 
[   0.583][d][vo/gpu-next/libplacebo] [ 18] #define MAINPRESUB_pos _3 
[   0.583][d][vo/gpu-next/libplacebo] [ 19] #define MAINPRESUB_map _3_map 
[   0.583][d][vo/gpu-next/libplacebo] [ 20] #define MAINPRESUB_size vec2(textureSize(_2, 0)) 
[   0.583][d][vo/gpu-next/libplacebo] [ 21] #define MAINPRESUB_pt _4 
[   0.583][d][vo/gpu-next/libplacebo] [ 22] #define MAINPRESUB_off _5 
[   0.583][d][vo/gpu-next/libplacebo] [ 23] const float _6 = float(1); 
[   0.583][d][vo/gpu-next/libplacebo] [ 24] #define MAINPRESUB_mul _6 
[   0.583][d][vo/gpu-next/libplacebo] [ 25] #define MAINPRESUB_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.583][d][vo/gpu-next/libplacebo] [ 26] #define MAINPRESUB_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.583][d][vo/gpu-next/libplacebo] [ 27] #define MAINPRESUB_texOff(off) (MAINPRESUB_tex(_3 + _4 * vec2(off))) 
[   0.583][d][vo/gpu-next/libplacebo] [ 28] #define MAINPRESUB_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.583][d][vo/gpu-next/libplacebo] [ 29] #define MAIN_raw MAINPRESUB_raw 
[   0.583][d][vo/gpu-next/libplacebo] [ 30] #define MAIN_pos MAINPRESUB_pos 
[   0.583][d][vo/gpu-next/libplacebo] [ 31] #define MAIN_size MAINPRESUB_size 
[   0.583][d][vo/gpu-next/libplacebo] [ 32] #define MAIN_rot MAINPRESUB_rot 
[   0.583][d][vo/gpu-next/libplacebo] [ 33] #define MAIN_off MAINPRESUB_off 
[   0.583][d][vo/gpu-next/libplacebo] [ 34] #define MAIN_pt MAINPRESUB_pt 
[   0.583][d][vo/gpu-next/libplacebo] [ 35] #define MAIN_map MAINPRESUB_map 
[   0.583][d][vo/gpu-next/libplacebo] [ 36] #define MAIN_mul MAINPRESUB_mul 
[   0.583][d][vo/gpu-next/libplacebo] [ 37] #define MAIN_tex MAINPRESUB_tex 
[   0.583][d][vo/gpu-next/libplacebo] [ 38] #define MAIN_texOff MAINPRESUB_texOff 
[   0.583][d][vo/gpu-next/libplacebo] [ 39] #define MAIN_gather MAINPRESUB_gather 
[   0.583][d][vo/gpu-next/libplacebo] [ 40] #define frame _7 
[   0.583][d][vo/gpu-next/libplacebo] [ 41] #define random _8 
[   0.583][d][vo/gpu-next/libplacebo] [ 42] #define input_size _9 
[   0.584][d][vo/gpu-next/libplacebo] [ 43] #define target_size _a 
[   0.584][d][vo/gpu-next/libplacebo] [ 44] #define tex_offset _b 
[   0.584][d][vo/gpu-next/libplacebo] [ 45] const float _8002 = float(0.8703105449676514); 
[   0.584][d][vo/gpu-next/libplacebo] [ 46] const float _8003 = float(0.0595848374068737); 
[   0.584][d][vo/gpu-next/libplacebo] [ 47] vec4 _8001(vec4 color) {
[   0.584][d][vo/gpu-next/libplacebo] [ 48] // pl_shader_linearize           
[   0.584][d][vo/gpu-next/libplacebo] [ 49] color.rgb = max(color.rgb, 0.0); 
[   0.584][d][vo/gpu-next/libplacebo] [ 50] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.584][d][vo/gpu-next/libplacebo] [ 51] return color;
[   0.584][d][vo/gpu-next/libplacebo] [ 52] }
[   0.584][d][vo/gpu-next/libplacebo] [ 53] 
[   0.584][d][vo/gpu-next/libplacebo] [ 54] #define linearize _8001 
[   0.584][d][vo/gpu-next/libplacebo] [ 55] const float _4002 = float(1.149015188217163); 
[   0.584][d][vo/gpu-next/libplacebo] [ 56] const float _4003 = float(0.0595848374068737); 
[   0.584][d][vo/gpu-next/libplacebo] [ 57] vec4 _4001(vec4 color) {
[   0.584][d][vo/gpu-next/libplacebo] [ 58] // pl_shader_delinearize 
[   0.584][d][vo/gpu-next/libplacebo] [ 59] color.rgb = max(color.rgb, 0.0); 
[   0.584][d][vo/gpu-next/libplacebo] [ 60] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.584][d][vo/gpu-next/libplacebo] [ 61] return color;
[   0.584][d][vo/gpu-next/libplacebo] [ 62] }
[   0.584][d][vo/gpu-next/libplacebo] [ 63] 
[   0.584][d][vo/gpu-next/libplacebo] [ 64] #define delinearize _4001 
[   0.584][d][vo/gpu-next/libplacebo] [ 65] #define go_0(x_off, y_off) (MAIN_texOff(vec2(x_off, y_off)))
[   0.584][d][vo/gpu-next/libplacebo] [ 66] vec4 hook() {
[   0.584][d][vo/gpu-next/libplacebo] [ 67]     vec4 result = mat4(-0.15485518, -0.29363206, -0.22610365, -0.14291525, -0.45240572, -0.18319772, -0.12209436, 0.15031648, 0.09878383, 0.06711082, 0.25763842, -0.084633484, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, -1.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 68]     result += mat4(-0.10204406, 0.16167697, 0.22371867, -0.37947702, -0.24476196, -0.038824454, 0.060157117, 0.15764871, -0.08072927, -0.2210841, -0.31835055, 0.009979876, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 0.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 69]     result += mat4(0.20506924, 0.21132155, -0.0922578, -0.07430473, 0.14529926, 0.20549752, 0.0077948375, 0.13246094, -0.32353187, 0.21074104, 0.092629515, 0.17590871, 0.0, 0.0, 0.0, 0.0) * go_0(-1.0, 1.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 70]     result += mat4(0.04125819, -0.44050243, 0.23729716, 0.3218237, 0.12943116, -0.011674174, 0.10390632, 0.027775545, -0.20308031, -0.16904089, -0.2121676, -0.022515794, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, -1.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 71]     result += mat4(0.09664124, 0.20127031, 0.60345304, 0.16697013, 0.23093723, -0.38116834, 0.109695725, 0.0007595324, 0.4092646, 0.009624758, 0.11229678, 0.25326383, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 0.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 72]     result += mat4(0.014879592, 0.19204311, 0.07102085, -0.7312604, 0.34860876, 0.3429918, -0.027331594, 0.27636307, 0.1342437, 0.107820466, -0.12645108, 0.21081445, 0.0, 0.0, 0.0, 0.0) * go_0(0.0, 1.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 73]     result += mat4(-0.12687613, -0.09247973, -0.25973785, 0.4350873, -0.18987224, 0.028678741, -0.0903819, -0.63974863, 0.205591, 0.11308998, 0.18458389, -0.4149041, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, -1.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 74]     result += mat4(0.34691808, -0.025498383, 0.3428986, 0.21663484, 0.23404741, -0.1725327, -0.0036315925, -0.13299675, -0.1873967, 0.031331502, -0.08785591, -0.0013278709, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 0.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 75]     result += mat4(-0.35846514, 0.048703704, -0.104165934, 0.16529736, -0.15378916, 0.26030356, -0.07134151, 0.03692383, -0.15807101, -0.18885155, 0.044707954, -0.11444462, 0.0, 0.0, 0.0, 0.0) * go_0(1.0, 1.0);
[   0.584][d][vo/gpu-next/libplacebo] [ 76]     result += vec4(-0.0022791293, -0.024132347, -0.57621074, 0.028573977);
[   0.584][d][vo/gpu-next/libplacebo] [ 77]     return result;
[   0.584][d][vo/gpu-next/libplacebo] [ 78] }
[   0.584][d][vo/gpu-next/libplacebo] [ 79] vec4 _1() {
[   0.584][d][vo/gpu-next/libplacebo] [ 80] vec4 color = hook(); 
[   0.584][d][vo/gpu-next/libplacebo] [ 81] return color;
[   0.584][d][vo/gpu-next/libplacebo] [ 82] }
[   0.584][d][vo/gpu-next/libplacebo] [ 83] 
[   0.584][d][vo/gpu-next/libplacebo] [ 84] void main() {
[   0.584][d][vo/gpu-next/libplacebo] [ 85] out_color = _1();
[   0.584][d][vo/gpu-next/libplacebo] [ 86] }
[   0.585][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.585][d][vo/gpu-next/libplacebo] Spent 1.405 ms translating GLSL to SPIR-V
[   0.585][d][vo/gpu-next/libplacebo] Spent 0.114 ms translating SPIR-V to HLSL
[   0.586][d][vo/gpu-next/libplacebo] Spent 1.455 ms translating HLSL to DXBC
[   0.586][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.586][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.586][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.586][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.586][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   0.586][d][vo/gpu-next/libplacebo] [  5] 
[   0.586][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   0.586][d][vo/gpu-next/libplacebo] [  7] {
[   0.586][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   0.586][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   0.587][d][vo/gpu-next/libplacebo] [ 10] };
[   0.587][d][vo/gpu-next/libplacebo] [ 11] 
[   0.587][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   0.587][d][vo/gpu-next/libplacebo] [ 13] {
[   0.587][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   0.587][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   0.587][d][vo/gpu-next/libplacebo] [ 16] };
[   0.587][d][vo/gpu-next/libplacebo] [ 17] 
[   0.587][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   0.587][d][vo/gpu-next/libplacebo] [ 19] {
[   0.587][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   0.587][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   0.587][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   0.587][d][vo/gpu-next/libplacebo] [ 23] }
[   0.587][d][vo/gpu-next/libplacebo] [ 24] 
[   0.587][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.587][d][vo/gpu-next/libplacebo] [ 26] {
[   0.587][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   0.587][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   0.587][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   0.587][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   0.587][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   0.587][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   0.587][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   0.587][d][vo/gpu-next/libplacebo] [ 34] }
[   0.591][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.591][d][vo/gpu-next/libplacebo] Spent 4.354 ms translating GLSL to SPIR-V
[   0.591][d][vo/gpu-next/libplacebo] Spent 0.531 ms translating SPIR-V to HLSL
[   0.601][d][vo/gpu-next/libplacebo] Spent 9.392 ms translating HLSL to DXBC
[   0.601][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.601][d][vo/gpu-next/libplacebo] [  1] cbuffer _45_47 : register(b0)
[   0.601][d][vo/gpu-next/libplacebo] [  2] {
[   0.601][d][vo/gpu-next/libplacebo] [  3]     float2 _47_m0 : packoffset(c0);
[   0.601][d][vo/gpu-next/libplacebo] [  4]     float2 _47_m1 : packoffset(c0.z);
[   0.601][d][vo/gpu-next/libplacebo] [  5]     int _47_m2 : packoffset(c1);
[   0.601][d][vo/gpu-next/libplacebo] [  6]     float _47_m3 : packoffset(c1.y);
[   0.601][d][vo/gpu-next/libplacebo] [  7]     float2 _47_m4 : packoffset(c1.z);
[   0.601][d][vo/gpu-next/libplacebo] [  8]     float2 _47_m5 : packoffset(c2);
[   0.601][d][vo/gpu-next/libplacebo] [  9]     float2 _47_m6 : packoffset(c2.z);
[   0.601][d][vo/gpu-next/libplacebo] [ 10] };
[   0.601][d][vo/gpu-next/libplacebo] [ 11] 
[   0.601][d][vo/gpu-next/libplacebo] [ 12] Texture2D<float4> _38 : register(t0);
[   0.601][d][vo/gpu-next/libplacebo] [ 13] SamplerState __38_sampler : register(s0);
[   0.601][d][vo/gpu-next/libplacebo] [ 14] 
[   0.601][d][vo/gpu-next/libplacebo] [ 15] static float2 _42;
[   0.601][d][vo/gpu-next/libplacebo] [ 16] static float4 _299;
[   0.601][d][vo/gpu-next/libplacebo] [ 17] 
[   0.601][d][vo/gpu-next/libplacebo] [ 18] struct SPIRV_Cross_Input
[   0.601][d][vo/gpu-next/libplacebo] [ 19] {
[   0.601][d][vo/gpu-next/libplacebo] [ 20]     float2 _42 : TEXCOORD0;
[   0.601][d][vo/gpu-next/libplacebo] [ 21] };
[   0.601][d][vo/gpu-next/libplacebo] [ 22] 
[   0.601][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Output
[   0.601][d][vo/gpu-next/libplacebo] [ 24] {
[   0.601][d][vo/gpu-next/libplacebo] [ 25]     float4 _299 : SV_Target0;
[   0.601][d][vo/gpu-next/libplacebo] [ 26] };
[   0.601][d][vo/gpu-next/libplacebo] [ 27] 
[   0.601][d][vo/gpu-next/libplacebo] [ 28] void frag_main()
[   0.601][d][vo/gpu-next/libplacebo] [ 29] {
[   0.601][d][vo/gpu-next/libplacebo] [ 30]     _299 = ((((((((mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * (-1.0f).xx), 0.0f) * 1.0f, float4x4(float4(-0.15485517680644989013671875f, -0.2936320602893829345703125f, -0.22610364854335784912109375f, -0.142915248870849609375f), float4(-0.4524057209491729736328125f, -0.18319772183895111083984375f, -0.1220943629741668701171875f, 0.1503164768218994140625f), float4(0.098783828318119049072265625f, 0.06711082160472869873046875f, 0.2576384246349334716796875f, -0.08463348448276519775390625f), 0.0f.xxxx)) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(-1.0f, 0.0f)), 0.0f) * 1.0f, float4x4(float4(-0.10204406082630157470703125f, 0.1616769731044769287109375f, 0.2237186729907989501953125f, -0.379477024078369140625f), float4(-0.24476195871829986572265625f, -0.03882445394992828369140625f, 0.0601571165025234222412109375f, 0.1576487123966217041015625f), float4(-0.080729268491268157958984375f, -0.22108410298824310302734375f, -0.3183505535125732421875f, 0.00997987575829029083251953125f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(-1.0f, 1.0f)), 0.0f) * 1.0f, float4x4(float4(0.205069243907928466796875f, 0.21132154762744903564453125f, -0.092257797718048095703125f, -0.0743047297000885009765625f), float4(0.145299255847930908203125f, 0.20549751818180084228515625f, 0.007794837467372417449951171875f, 0.13246093690395355224609375f), float4(-0.3235318660736083984375f, 0.2107410430908203125f, 0.092629514634609222412109375f, 0.1759087145328521728515625f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(0.0f, -1.0f)), 0.0f) * 1.0f, float4x4(float4(0.0412581898272037506103515625f, -0.4405024349689483642578125f, 0.23729716241359710693359375f, 0.3218236863613128662109375f), float4(0.1294311583042144775390625f, -0.011674174107611179351806640625f, 0.10390631854534149169921875f, 0.0277755446732044219970703125f), float4(-0.20308031141757965087890625f, -0.1690408885478973388671875f, -0.21216760575771331787109375f, -0.02251579426229000091552734375f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42, 0.0f) * 1.0f, float4x4(float4(0.096641242504119873046875f, 0.2012703120708465576171875f, 0.60345304012298583984375f, 0.16697013378143310546875f), float4(0.23093722760677337646484375f, -0.3811683356761932373046875f, 0.109695725142955780029296875f, 0.0007595323841087520122528076171875f), float4(0.4092645943164825439453125f, 0.009624757803976535797119140625f, 0.112296782433986663818359375f, 0.25326383113861083984375f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(0.0f, 1.0f)), 0.0f) * 1.0f, float4x4(float4(0.014879591763019561767578125f, 0.19204311072826385498046875f, 0.071020849049091339111328125f, -0.73126041889190673828125f), float4(0.3486087620258331298828125f, 0.3429917991161346435546875f, -0.0273315943777561187744140625f, 0.276363074779510498046875f), float4(0.1342436969280242919921875f, 0.10782046616077423095703125f, -0.126451075077056884765625f, 0.2108144462108612060546875f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(1.0f, -1.0f)), 0.0f) * 1.0f, float4x4(float4(-0.12687613070011138916015625f, -0.092479728162288665771484375f, -0.25973784923553466796875f, 0.4350872933864593505859375f), float4(-0.1898722350597381591796875f, 0.0286787413060665130615234375f, -0.090381897985935211181640625f, -0.639748632907867431640625f), float4(0.2055909931659698486328125f, 0.113089978694915771484375f, 0.18458388745784759521484375f, -0.4149040877819061279296875f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + (_47_m0 * float2(1.0f, 0.0f)), 0.0f) * 1.0f, float4x4(float4(0.3469180762767791748046875f, -0.025498382747173309326171875f, 0.3428986072540283203125f, 0.2166348397731781005859375f), float4(0.234047412872314453125f, -0.17253269255161285400390625f, -0.00363159249536693096160888671875f, -0.13299675285816192626953125f), float4(-0.187396705150604248046875f, 0.031331501901149749755859375f, -0.087855912744998931884765625f, -0.0013278708793222904205322265625f), 0.0f.xxxx))) + mul(_38.SampleLevel(__38_sampler, _42 + _47_m0, 0.0f) * 1.0f, float4x4(float4(-0.358465135097503662109375f, 0.0487037040293216705322265625f, -0.104165934026241302490234375f, 0.1652973592281341552734375f), float4(-0.15378916263580322265625f, 0.260303556919097900390625f, -0.071341507136821746826171875f, 0.0369238294661045074462890625f), float4(-0.1580710113048553466796875f, -0.18885155022144317626953125f, 0.044707953929901123046875f, -0.114444620907306671142578125f), 0.0f.xxxx))) + float4(-0.0022791293449699878692626953125f, -0.02413234673440456390380859375f, -0.5762107372283935546875f, 0.02857397682964801788330078125f);
[   0.601][d][vo/gpu-next/libplacebo] [ 31] }
[   0.601][d][vo/gpu-next/libplacebo] [ 32] 
[   0.601][d][vo/gpu-next/libplacebo] [ 33] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.601][d][vo/gpu-next/libplacebo] [ 34] {
[   0.601][d][vo/gpu-next/libplacebo] [ 35]     _42 = stage_input._42;
[   0.601][d][vo/gpu-next/libplacebo] [ 36]     frag_main();
[   0.601][d][vo/gpu-next/libplacebo] [ 37]     SPIRV_Cross_Output stage_output;
[   0.601][d][vo/gpu-next/libplacebo] [ 38]     stage_output._299 = _299;
[   0.601][d][vo/gpu-next/libplacebo] [ 39]     return stage_output;
[   0.601][d][vo/gpu-next/libplacebo] [ 40] }
[   0.604][d][vo/gpu-next] cache_save_obj: key(8be7c03d90fe317c), size(4225), save time(2.861 ms)
[   0.604][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.604][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.604][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.604][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.604][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.604][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.604][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.604][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.604][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.604][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.604][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.604][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.604][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.604][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.604][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.604][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.604][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.604][d][vo/gpu-next/libplacebo] [ 16] };
[   0.604][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.604][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.604][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.604][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.604][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.604][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.604][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.604][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.604][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.604][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.604][d][vo/gpu-next/libplacebo] [ 27] }
[   0.605][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.605][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.605][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.605][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.605][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.605][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.605][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.605][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.605][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.605][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.605][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.605][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.605][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.605][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.605][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.605][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.605][d][vo/gpu-next/libplacebo] [ 16] };
[   0.605][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.605][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.605][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.605][d][vo/gpu-next/libplacebo] [ 20] 
[   0.605][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_tf_raw _2 
[   0.605][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_tf_pos _3 
[   0.605][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_tf_map _3_map 
[   0.605][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_tf_size vec2(textureSize(_2, 0)) 
[   0.605][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_tf_pt _4 
[   0.605][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_tf_off _5 
[   0.605][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.605][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_tf_mul _6 
[   0.605][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.605][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.605][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_tf_texOff(off) (conv2d_tf_tex(_3 + _4 * vec2(off))) 
[   0.605][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.605][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_tf1_raw _7 
[   0.605][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_tf1_pos _8 
[   0.605][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_tf1_map _8_map 
[   0.605][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_tf1_size vec2(textureSize(_7, 0)) 
[   0.605][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_tf1_pt _9 
[   0.605][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_tf1_off _a 
[   0.605][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.605][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_tf1_mul _b 
[   0.605][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.605][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.605][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_tf1_texOff(off) (conv2d_tf1_tex(_8 + _9 * vec2(off))) 
[   0.605][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.605][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.605][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.605][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.605][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.605][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.605][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.605][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.605][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.605][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.605][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.605][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.605][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.605][d][vo/gpu-next/libplacebo] [ 57] }
[   0.605][d][vo/gpu-next/libplacebo] [ 58] 
[   0.605][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.605][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.605][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.605][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.605][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.605][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.605][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.605][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.605][d][vo/gpu-next/libplacebo] [ 67] }
[   0.605][d][vo/gpu-next/libplacebo] [ 68] 
[   0.605][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.605][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.605][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.605][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.605][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.605][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.605][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(0.010346764, 0.07230188, -0.24734616, -0.09937907, 0.02228549, -0.19550583, -0.019540425, -0.1037373, 0.033996485, -0.075554, -0.20228972, 0.07090153, -0.09194035, -0.058972966, 0.1768268, 0.27517542) * go_0(-1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(0.020078976, 0.12433655, -0.1620775, 0.036401592, 0.079748705, 0.11660013, 0.17917652, -0.017513236, -0.18936846, 0.24478136, -0.45726213, -0.045004416, -0.08295188, 0.067733586, -0.080548316, 0.2744211) * go_0(-1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.024916803, 0.27562472, 0.043771956, -0.012240604, 0.0786355, 0.042651594, 0.16049327, -0.14577515, -0.032735053, 0.17658092, 0.16382934, -0.02337374, 0.11551492, 0.056343183, -0.17930213, 0.14259394) * go_0(-1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.20010485, 0.06747722, -0.19026905, 0.11013709, 0.13062745, -0.044626113, -0.0062261797, 0.2189639, 0.1403497, -0.022713251, -0.19452858, -0.010305412, -0.06407589, 0.09836748, 0.025805516, 0.23430973) * go_0(0.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.14664203, 0.034910418, 0.024714258, -0.066872925, -0.15717538, -0.14179383, -0.14091893, 0.05859166, 0.18919097, -0.18544437, -0.09068573, -0.08615929, -0.051434122, 0.2170678, 0.18409058, -0.17461225) * go_0(0.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.11354446, 0.10745854, 0.2682663, 0.05949201, -0.10695986, 0.1407851, -0.03551388, 0.10691649, -0.17148238, -0.38287184, 0.2074456, 0.11828914, 0.048535194, 0.1464864, -0.18169662, -0.14074169) * go_0(0.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.22160622, -0.1513045, -0.053284165, 0.033202525, 0.15574448, -0.043640967, -0.0093824165, -0.0019965349, -0.097964935, -0.08289824, 0.08239996, 0.07868361, 0.05731752, -0.20441617, -0.013016076, -0.253108) * go_0(1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.031249097, -0.2272863, 0.23573665, 0.03357689, 0.011395065, -0.10885564, -0.06287508, -0.031719524, 0.10331069, 0.17560169, 0.18303394, 0.022961004, -0.17011635, -0.24371737, 0.10678694, -0.3222825) * go_0(1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.1275465, -0.08844758, 0.10994917, -0.00910273, 0.09393154, 0.03894992, 0.14367905, -0.11811715, -0.09077633, -0.015776094, 0.27427456, -0.13283503, 0.18724327, -0.08139094, 0.04933602, -0.051852766) * go_0(1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.06764611, -0.27426586, 0.12045272, 0.09410856, -0.14258035, 0.11802992, -0.09093882, 0.0022018093, 0.4590643, 0.046258576, -0.07827223, 0.448011, -0.103631735, -0.016930219, -0.15421398, 0.11045997) * go_1(-1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.17295076, 0.00151352, 0.14938255, 0.08336512, -0.07496541, -0.07561223, -0.0846474, 0.14979269, -0.09142163, 0.23925088, -0.015199518, -0.37749895, -0.20636298, -0.022585187, -0.20371509, 0.0745308) * go_1(-1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.06458832, -0.009722021, -0.123604394, 0.06548835, -0.3039139, -0.022024399, 0.05297587, -0.0626883, 0.23556642, 0.1516464, -0.07004877, -0.1845364, -0.05918428, 0.19158973, -0.14983447, 0.030489758) * go_1(-1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(0.36604697, 0.17516142, -0.10853731, -0.22694224, -0.107650936, 0.23013335, 0.094055794, -0.17047717, -0.3006048, -0.08621717, -0.18815655, -0.03570218, 0.09676118, -0.017718751, 0.059138596, 0.073388465) * go_1(0.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.12791575, 0.101956226, 0.13091874, -0.046373338, 0.04955811, -0.04030444, 0.13869923, -0.046699073, -0.42611042, -0.7173929, 0.052184317, 0.6178025, -0.02929954, -0.07638965, -0.15000828, 0.030710017) * go_1(0.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(0.057806686, 0.20842272, -0.20148766, 0.006666912, 0.13356528, -0.45265228, -0.07354092, 0.21447696, 0.019552143, -0.13645506, 0.14643854, -0.0071413796, -0.15487236, -0.002250615, 0.30622452, 0.0033902125) * go_1(0.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.06896002, 0.24397352, -0.06479052, 0.20676947, -0.24259068, 0.055320013, -0.09032122, -0.11222854, -0.08982342, -0.114818625, -0.06399291, -0.3024516, -0.06302166, -0.1925528, 0.03458982, 0.028828239) * go_1(1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.09764086, 0.09599894, -0.0073313303, 0.14418933, -0.045712367, 0.12657364, 0.04620374, -0.069778584, 0.30047333, -0.012418192, 0.15516461, -0.18087754, 0.08178273, 0.14262857, -0.01741533, -0.12509112) * go_1(1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.04697884, -0.1506804, 0.031823065, 0.13397239, -0.18396698, 0.10681781, -0.29586303, -0.0039136545, 0.17560847, -0.12486726, -0.018646788, -0.20688744, -0.030614454, -0.0527634, 0.23593572, -0.10542146) * go_1(1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.19182229, -0.32615846, 0.26283535, -0.1371942, -0.071202695, 0.12056063, -0.11450658, -0.27711076, -0.42096004, 0.0014352369, 0.1559669, -0.14464542, -0.17973948, 0.079166576, -0.12501791, -0.20623216) * go_2(-1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.12469872, 0.32190827, -0.059510354, 0.1393449, -0.12845798, -0.019571869, -0.22630808, -0.14031963, 0.36072046, 0.05858427, 0.19278921, 0.121090546, -0.067538865, -0.018770566, 0.14318037, -0.15561756) * go_2(-1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.024663208, 0.21110268, -0.016415706, 0.060093414, -0.03739678, -0.107412934, -0.077527136, 0.30331334, 0.17196326, -0.15512557, -0.09499732, -0.15748607, -0.16680105, -0.015185634, 0.16114107, -0.21288376) * go_2(-1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.17739037, -0.1190967, 0.13191372, -0.2527187, -0.14992718, -0.30511454, 0.19145966, 0.002194003, -0.12888977, 0.19152176, 0.27528167, 0.099714965, 0.12865707, -0.12051514, -0.055013947, 0.26231763) * go_2(0.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.46433613, -0.11708138, -0.20157282, 0.32022122, 0.079468675, 0.029407484, 0.2559102, -0.15651533, 0.08644574, -0.09747344, -0.07528584, 0.17354868, 0.19167562, -0.17698488, -0.09896657, 0.17093097) * go_2(0.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.20283653, -0.33680332, 0.2282385, 0.18832158, 0.20866042, 0.00076752366, 0.16471444, -0.21548858, 0.16193539, 0.17141372, 0.03140222, 0.03913644, -0.030161971, 0.00014570929, 0.08993654, -0.064823024) * go_2(0.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.3075755, 0.19942546, 0.015526995, -0.120868504, -0.254515, -0.07791228, 0.03271691, 0.11794217, 0.11258601, 0.045204375, -0.061196107, -0.115958795, 0.3861869, 0.048215542, 0.07016682, -0.009975758) * go_2(1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.07623697, 0.16094944, -0.02283455, 0.14112763, -0.051149167, 0.20429814, 0.011314802, 0.18914083, -0.24240434, -0.08784008, -0.16763984, -0.08492233, 0.31062725, -0.11925119, -0.33195966, 0.2060798) * go_2(1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.016709225, -0.14472668, -0.3677625, -0.09832719, 0.030297454, -0.05775362, -0.1401375, 0.08119674, -0.01795042, 0.05183797, -0.24320887, 0.066842034, -0.22245285, -0.02740993, 0.06316751, 0.053399116) * go_2(1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.039214406, -0.08876633, 0.045552462, 0.19226661, 0.1355001, -0.13942362, 0.17398876, 0.2914014, -0.191809, 0.037143208, 0.013333581, -0.16632195, 0.113767646, -0.106692605, 0.1589787, 0.030107044) * go_3(-1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.21997562, 0.13855208, -0.05783191, -0.033682413, -0.010961168, 0.10524961, 0.02177416, 0.18289444, 0.043692037, 0.07853899, -0.039936125, -0.1004449, 0.04494073, -0.020680292, 0.17578089, -0.106598996) * go_3(-1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.026852835, -0.16037546, 0.11278316, 0.12656097, -0.006857894, -0.03400118, -0.051564034, 0.00085412664, -0.37556714, -0.05279987, 0.029383834, -0.14246808, -0.056380164, -0.002399925, 0.16025752, 0.036324855) * go_3(-1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.022709966, 0.046350412, 0.03390721, 0.02810572, -0.14394265, 0.04215361, -0.3206118, 0.15034916, -0.0028448137, 0.1682989, -0.042686664, 0.020543462, -0.2786501, -0.007482015, -0.040313292, -0.20745736) * go_3(0.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.05417556, 0.18728684, -0.046121832, -0.27939513, 0.05907976, -0.09191223, -0.16625418, -0.26038164, 0.39956605, -0.052594025, -0.0596556, 0.29517552, -0.015181923, -0.0763375, 0.25131205, 0.13038464) * go_3(0.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.036903054, -0.0066989153, -0.062650286, 0.05614359, -0.0064960583, 0.028512698, -0.10906273, -0.010047654, 0.23030473, 0.049983572, 0.10439064, 0.26643834, 0.05041243, 0.09185424, -0.32352915, 0.11295159) * go_3(0.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.09724027, -0.34962535, 0.06586686, 0.016635379, 0.13831381, 0.01707076, -0.04690347, 0.022350075, 0.018352794, 0.022000022, 0.070613205, 0.117735535, -0.025971051, 0.18832101, -0.09643588, -0.08512127) * go_3(1.0, -1.0);
[   0.605][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.17324433, 0.06810613, -0.057295907, -0.05115964, -0.101570815, 0.12491774, 0.08762367, -0.005862404, -0.05342927, -0.031942457, -0.039624047, -0.04298937, -0.1303138, -0.11869282, -0.024832053, 0.070463404) * go_3(1.0, 0.0);
[   0.605][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.010514842, 0.1376259, -0.11750346, -0.03786737, 0.03459249, 0.015408171, -0.031430878, -0.060825355, -0.072958425, -0.0037895301, 0.041686177, -0.12352204, -0.06261361, 0.054514423, -0.34072715, 0.13860728) * go_3(1.0, 1.0);
[   0.605][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.018166734, -0.11002478, -0.05554318, -0.0988193);
[   0.605][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.605][d][vo/gpu-next/libplacebo] [113] }
[   0.605][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.605][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.605][d][vo/gpu-next/libplacebo] [116] return color;
[   0.605][d][vo/gpu-next/libplacebo] [117] }
[   0.605][d][vo/gpu-next/libplacebo] [118] 
[   0.605][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.605][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.605][d][vo/gpu-next/libplacebo] [121] }
[   0.606][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.606][d][vo/gpu-next/libplacebo] Spent 1.369 ms translating GLSL to SPIR-V
[   0.606][d][vo/gpu-next/libplacebo] Spent 0.110 ms translating SPIR-V to HLSL
[   0.607][d][vo/gpu-next/libplacebo] Spent 1.185 ms translating HLSL to DXBC
[   0.607][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.607][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.607][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.607][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.607][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.607][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.607][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.607][d][vo/gpu-next/libplacebo] [  7] 
[   0.607][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.607][d][vo/gpu-next/libplacebo] [  9] {
[   0.607][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.607][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.607][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.607][d][vo/gpu-next/libplacebo] [ 13] };
[   0.607][d][vo/gpu-next/libplacebo] [ 14] 
[   0.607][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.607][d][vo/gpu-next/libplacebo] [ 16] {
[   0.607][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.607][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.607][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.607][d][vo/gpu-next/libplacebo] [ 20] };
[   0.607][d][vo/gpu-next/libplacebo] [ 21] 
[   0.607][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.607][d][vo/gpu-next/libplacebo] [ 23] {
[   0.607][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.607][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.607][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.607][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.607][d][vo/gpu-next/libplacebo] [ 28] }
[   0.607][d][vo/gpu-next/libplacebo] [ 29] 
[   0.607][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.607][d][vo/gpu-next/libplacebo] [ 31] {
[   0.607][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.607][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.607][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.607][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.607][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.607][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.607][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.607][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.607][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.607][d][vo/gpu-next/libplacebo] [ 41] }
[   0.622][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.622][v][vo/gpu-next/libplacebo] Spent 14.671 ms translating GLSL to SPIR-V
[   0.624][d][vo/gpu-next/libplacebo] Spent 2.012 ms translating SPIR-V to HLSL
[   0.656][v][vo/gpu-next/libplacebo] Spent 31.876 ms translating HLSL to DXBC
[   0.656][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.656][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.656][d][vo/gpu-next/libplacebo] [  2] {
[   0.656][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.656][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.656][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.656][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.656][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.656][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.656][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.656][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.656][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.656][d][vo/gpu-next/libplacebo] [ 12] };
[   0.656][d][vo/gpu-next/libplacebo] [ 13] 
[   0.656][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.656][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.656][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.656][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.656][d][vo/gpu-next/libplacebo] [ 18] 
[   0.656][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.656][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.656][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.656][d][vo/gpu-next/libplacebo] [ 22] 
[   0.656][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.656][d][vo/gpu-next/libplacebo] [ 24] {
[   0.656][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.656][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.656][d][vo/gpu-next/libplacebo] [ 27] };
[   0.656][d][vo/gpu-next/libplacebo] [ 28] 
[   0.656][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.656][d][vo/gpu-next/libplacebo] [ 30] {
[   0.656][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.656][d][vo/gpu-next/libplacebo] [ 32] };
[   0.656][d][vo/gpu-next/libplacebo] [ 33] 
[   0.656][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.656][d][vo/gpu-next/libplacebo] [ 35] {
[   0.656][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.656][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.656][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.656][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.010346763767302036285400390625f, 0.07230187952518463134765625f, -0.2473461627960205078125f, -0.099379070103168487548828125f), float4(0.02228548936545848846435546875f, -0.1955058276653289794921875f, -0.0195404253900051116943359375f, -0.103737302124500274658203125f), float4(0.033996485173702239990234375f, -0.07555399835109710693359375f, -0.20228971540927886962890625f, 0.07090152800083160400390625f), float4(-0.091940350830554962158203125f, -0.0589729659259319305419921875f, 0.1768268048763275146484375f, 0.2751754224300384521484375f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0200789757072925567626953125f, 0.124336548149585723876953125f, -0.16207750141620635986328125f, 0.036401592195034027099609375f), float4(0.07974870502948760986328125f, 0.116600133478641510009765625f, 0.17917652428150177001953125f, -0.01751323603093624114990234375f), float4(-0.1893684566020965576171875f, 0.24478136003017425537109375f, -0.4572621285915374755859375f, -0.0450044162571430206298828125f), float4(-0.082951880991458892822265625f, 0.067733585834503173828125f, -0.0805483162403106689453125f, 0.27442109584808349609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02491680346429347991943359375f, 0.2756247222423553466796875f, 0.0437719561159610748291015625f, -0.01224060356616973876953125f), float4(0.07863549888134002685546875f, 0.042651593685150146484375f, 0.16049326956272125244140625f, -0.14577515423297882080078125f), float4(-0.0327350534498691558837890625f, 0.17658092081546783447265625f, 0.16382934153079986572265625f, -0.02337373979389667510986328125f), float4(0.11551491916179656982421875f, 0.05634318292140960693359375f, -0.1793021261692047119140625f, 0.14259393513202667236328125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.20010484755039215087890625f, 0.067477218806743621826171875f, -0.190269052982330322265625f, 0.11013709008693695068359375f), float4(0.130627453327178955078125f, -0.0446261130273342132568359375f, -0.0062261796556413173675537109375f, 0.21896390616893768310546875f), float4(0.14034970104694366455078125f, -0.022713251411914825439453125f, -0.1945285797119140625f, -0.010305412113666534423828125f), float4(-0.064075887203216552734375f, 0.0983674824237823486328125f, 0.02580551616847515106201171875f, 0.234309732913970947265625f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.146642029285430908203125f, 0.034910418093204498291015625f, 0.0247142575681209564208984375f, -0.0668729245662689208984375f), float4(-0.15717537701129913330078125f, -0.14179383218288421630859375f, -0.14091892540454864501953125f, 0.0585916601121425628662109375f), float4(0.18919096887111663818359375f, -0.18544436991214752197265625f, -0.090685732662677764892578125f, -0.086159288883209228515625f), float4(-0.051434122025966644287109375f, 0.21706779301166534423828125f, 0.1840905845165252685546875f, -0.1746122539043426513671875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.113544456660747528076171875f, 0.107458539307117462158203125f, 0.2682662904262542724609375f, 0.0594920106232166290283203125f), float4(-0.106959857046604156494140625f, 0.14078509807586669921875f, -0.0355138815939426422119140625f, 0.106916487216949462890625f), float4(-0.171482384204864501953125f, -0.3828718364238739013671875f, 0.20744560658931732177734375f, 0.1182891428470611572265625f), float4(0.0485351942479610443115234375f, 0.14648640155792236328125f, -0.1816966235637664794921875f, -0.14074169099330902099609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.2216062247753143310546875f, -0.15130449831485748291015625f, -0.0532841645181179046630859375f, 0.0332025252282619476318359375f), float4(0.15574447810649871826171875f, -0.0436409674584865570068359375f, -0.009382416494190692901611328125f, -0.001996534876525402069091796875f), float4(-0.097964935004711151123046875f, -0.082898236811161041259765625f, 0.082399956881999969482421875f, 0.078683607280254364013671875f), float4(0.0573175214231014251708984375f, -0.20441617071628570556640625f, -0.013016075827181339263916015625f, -0.2531079947948455810546875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.03124909661710262298583984375f, -0.22728629410266876220703125f, 0.23573665320873260498046875f, 0.03357689082622528076171875f), float4(0.01139506511390209197998046875f, -0.108855642378330230712890625f, -0.06287507712841033935546875f, -0.0317195244133472442626953125f), float4(0.10331068933010101318359375f, 0.1756016910076141357421875f, 0.18303394317626953125f, 0.02296100370585918426513671875f), float4(-0.17011635005474090576171875f, -0.243717372417449951171875f, 0.1067869365215301513671875f, -0.322282493114471435546875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.12754650413990020751953125f, -0.088447578251361846923828125f, 0.109949171543121337890625f, -0.00910273008048534393310546875f), float4(0.09393154084682464599609375f, 0.03894992172718048095703125f, 0.1436790525913238525390625f, -0.118117153644561767578125f), float4(-0.090776331722736358642578125f, -0.0157760940492153167724609375f, 0.2742745578289031982421875f, -0.13283503055572509765625f), float4(0.18724326789379119873046875f, -0.081390939652919769287109375f, 0.0493360199034214019775390625f, -0.0518527664244174957275390625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.067646108567714691162109375f, -0.2742658555507659912109375f, 0.12045271694660186767578125f, 0.094108559191226959228515625f), float4(-0.14258034527301788330078125f, 0.1180299222469329833984375f, -0.09093882143497467041015625f, 0.00220180931501090526580810546875f), float4(0.459064304828643798828125f, 0.046258576214313507080078125f, -0.078272230923175811767578125f, 0.4480110108852386474609375f), float4(-0.1036317348480224609375f, -0.0169302187860012054443359375f, -0.15421397984027862548828125f, 0.11045996844768524169921875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.17295075953006744384765625f, 0.00151352002285420894622802734375f, 0.14938254654407501220703125f, 0.083365119993686676025390625f), float4(-0.074965409934520721435546875f, -0.07561223208904266357421875f, -0.08464740216732025146484375f, 0.14979268610477447509765625f), float4(-0.091421626508235931396484375f, 0.23925088346004486083984375f, -0.01519951783120632171630859375f, -0.3774989545345306396484375f), float4(-0.20636297762393951416015625f, -0.0225851871073246002197265625f, -0.2037150859832763671875f, 0.074530802667140960693359375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.06458832323551177978515625f, -0.009722021408379077911376953125f, -0.123604394495487213134765625f, 0.06548835337162017822265625f), float4(-0.303913891315460205078125f, -0.02202439866960048675537109375f, 0.052975870668888092041015625f, -0.062688298523426055908203125f), float4(0.23556642234325408935546875f, 0.1516464054584503173828125f, -0.070048771798610687255859375f, -0.184536397457122802734375f), float4(-0.0591842792928218841552734375f, 0.19158972799777984619140625f, -0.14983446896076202392578125f, 0.03048975765705108642578125f)));
[   0.656][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.656][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.656][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.366046965122222900390625f, 0.175161421298980712890625f, -0.108537308871746063232421875f, -0.226942241191864013671875f), float4(-0.107650935649871826171875f, 0.230133354663848876953125f, 0.094055794179439544677734375f, -0.17047716677188873291015625f), float4(-0.3006047904491424560546875f, -0.086217172443866729736328125f, -0.188156545162200927734375f, -0.0357021801173686981201171875f), float4(0.09676118195056915283203125f, -0.0177187509834766387939453125f, 0.059138596057891845703125f, 0.073388464748859405517578125f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.12791575491428375244140625f, 0.101956225931644439697265625f, 0.1309187412261962890625f, -0.0463733375072479248046875f), float4(0.049558110535144805908203125f, -0.0403044410049915313720703125f, 0.138699233531951904296875f, -0.0466990731656551361083984375f), float4(-0.4261104166507720947265625f, -0.71739292144775390625f, 0.0521843172609806060791015625f, 0.61780250072479248046875f), float4(-0.02929954044520854949951171875f, -0.076389648020267486572265625f, -0.15000827610492706298828125f, 0.03071001730859279632568359375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.05780668556690216064453125f, 0.208422720432281494140625f, -0.20148766040802001953125f, 0.0066669122315943241119384765625f), float4(0.1335652768611907958984375f, -0.452652275562286376953125f, -0.073540918529033660888671875f, 0.21447695791721343994140625f), float4(0.01955214329063892364501953125f, -0.136455059051513671875f, 0.146438539028167724609375f, -0.00714137963950634002685546875f), float4(-0.154872357845306396484375f, -0.0022506150417029857635498046875f, 0.306224524974822998046875f, 0.003390212543308734893798828125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.068960018455982208251953125f, 0.2439735233783721923828125f, -0.0647905170917510986328125f, 0.206769466400146484375f), float4(-0.24259068071842193603515625f, 0.0553200133144855499267578125f, -0.090321220457553863525390625f, -0.1122285425662994384765625f), float4(-0.089823417365550994873046875f, -0.114818625152111053466796875f, -0.063992910087108612060546875f, -0.302451610565185546875f), float4(-0.06302165985107421875f, -0.1925528049468994140625f, 0.034589819610118865966796875f, 0.02882823906838893890380859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.09764085710048675537109375f, 0.095998942852020263671875f, -0.0073313303291797637939453125f, 0.1441893279552459716796875f), float4(-0.04571236670017242431640625f, 0.12657363712787628173828125f, 0.046203739941120147705078125f, -0.069778583943843841552734375f), float4(0.30047333240509033203125f, -0.0124181918799877166748046875f, 0.15516461431980133056640625f, -0.1808775365352630615234375f), float4(0.0817827284336090087890625f, 0.14262856543064117431640625f, -0.01741532981395721435546875f, -0.12509112060070037841796875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.046978838741779327392578125f, -0.1506803929805755615234375f, 0.0318230651319026947021484375f, 0.13397239148616790771484375f), float4(-0.18396697938442230224609375f, 0.1068178117275238037109375f, -0.29586303234100341796875f, -0.0039136544801294803619384765625f), float4(0.17560847103595733642578125f, -0.124867260456085205078125f, -0.0186467878520488739013671875f, -0.20688743889331817626953125f), float4(-0.0306144542992115020751953125f, -0.0527633987367153167724609375f, 0.2359357178211212158203125f, -0.105421461164951324462890625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1918222904205322265625f, -0.326158463954925537109375f, 0.2628353536128997802734375f, -0.13719420135021209716796875f), float4(-0.071202695369720458984375f, 0.12056063115596771240234375f, -0.114506579935550689697265625f, -0.277110755443572998046875f), float4(-0.4209600389003753662109375f, 0.001435236888937652111053466796875f, 0.15596689283847808837890625f, -0.1446454226970672607421875f), float4(-0.179739475250244140625f, 0.07916657626628875732421875f, -0.1250179111957550048828125f, -0.2062321603298187255859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.124698720872402191162109375f, 0.3219082653522491455078125f, -0.0595103539526462554931640625f, 0.1393449008464813232421875f), float4(-0.12845797836780548095703125f, -0.01957186870276927947998046875f, -0.2263080775737762451171875f, -0.14031963050365447998046875f), float4(0.360720455646514892578125f, 0.0585842691361904144287109375f, 0.19278921186923980712890625f, 0.12109054625034332275390625f), float4(-0.067538864910602569580078125f, -0.01877056621015071868896484375f, 0.143180370330810546875f, -0.1556175649166107177734375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.02466320805251598358154296875f, 0.21110267937183380126953125f, -0.01641570590436458587646484375f, 0.0600934140384197235107421875f), float4(-0.037396781146526336669921875f, -0.10741293430328369140625f, -0.0775271356105804443359375f, 0.3033133447170257568359375f), float4(0.17196325957775115966796875f, -0.15512557327747344970703125f, -0.0949973165988922119140625f, -0.15748606622219085693359375f), float4(-0.16680105030536651611328125f, -0.01518563367426395416259765625f, 0.1611410677433013916015625f, -0.21288375556468963623046875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1773903667926788330078125f, -0.119096696376800537109375f, 0.131913721561431884765625f, -0.2527186870574951171875f), float4(-0.14992718398571014404296875f, -0.3051145374774932861328125f, 0.19145965576171875f, 0.00219400296919047832489013671875f), float4(-0.1288897693157196044921875f, 0.19152176380157470703125f, 0.2752816677093505859375f, 0.0997149646282196044921875f), float4(0.1286570727825164794921875f, -0.1205151379108428955078125f, -0.055013947188854217529296875f, 0.2623176276683807373046875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.4643361270427703857421875f, -0.117081381380558013916015625f, -0.20157282054424285888671875f, 0.3202212154865264892578125f), float4(0.079468674957752227783203125f, 0.02940748445689678192138671875f, 0.2559101879596710205078125f, -0.1565153300762176513671875f), float4(0.086445741355419158935546875f, -0.097473442554473876953125f, -0.07528583705425262451171875f, 0.17354868352413177490234375f), float4(0.19167561829090118408203125f, -0.1769848763942718505859375f, -0.0989665687084197998046875f, 0.17093096673488616943359375f)));
[   0.656][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.20283652842044830322265625f, -0.33680331707000732421875f, 0.2282384932041168212890625f, 0.18832157552242279052734375f), float4(0.208660423755645751953125f, 0.00076752365566790103912353515625f, 0.16471444070339202880859375f, -0.2154885828495025634765625f), float4(0.161935389041900634765625f, 0.171413719654083251953125f, 0.0314022190868854522705078125f, 0.0391364395618438720703125f), float4(-0.03016197122633457183837890625f, 0.00014570928760804235935211181640625f, 0.08993653953075408935546875f, -0.064823023974895477294921875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.3075754940509796142578125f, 0.1994254589080810546875f, 0.01552699506282806396484375f, -0.120868504047393798828125f), float4(-0.254514992237091064453125f, -0.077912278473377227783203125f, 0.0327169112861156463623046875f, 0.11794216930866241455078125f), float4(0.11258600652217864990234375f, 0.0452043749392032623291015625f, -0.0611961074173450469970703125f, -0.11595879495143890380859375f), float4(0.386186897754669189453125f, 0.0482155419886112213134765625f, 0.070166818797588348388671875f, -0.009975758381187915802001953125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.076236970722675323486328125f, 0.1609494388103485107421875f, -0.0228345505893230438232421875f, 0.14112763106822967529296875f), float4(-0.051149167120456695556640625f, 0.20429813861846923828125f, 0.011314801871776580810546875f, 0.1891408264636993408203125f), float4(-0.24240434169769287109375f, -0.08784008026123046875f, -0.16763983666896820068359375f, -0.08492232859134674072265625f), float4(0.3106272518634796142578125f, -0.119251191616058349609375f, -0.331959664821624755859375f, 0.20607979595661163330078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01670922525227069854736328125f, -0.14472667872905731201171875f, -0.367762506008148193359375f, -0.0983271896839141845703125f), float4(0.0302974544465541839599609375f, -0.0577536188066005706787109375f, -0.140137493610382080078125f, 0.08119674026966094970703125f), float4(-0.0179504193365573883056640625f, 0.0518379695713520050048828125f, -0.24320887029170989990234375f, 0.06684203445911407470703125f), float4(-0.2224528491497039794921875f, -0.0274099297821521759033203125f, 0.063167512416839599609375f, 0.0533991158008575439453125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0392144061625003814697265625f, -0.088766328990459442138671875f, 0.0455524623394012451171875f, 0.1922666132450103759765625f), float4(0.1355001032352447509765625f, -0.13942362368106842041015625f, 0.173988759517669677734375f, 0.291401386260986328125f), float4(-0.191808998584747314453125f, 0.037143208086490631103515625f, 0.013333581387996673583984375f, -0.16632194817066192626953125f), float4(0.113767646253108978271484375f, -0.106692604720592498779296875f, 0.1589787006378173828125f, 0.030107043683528900146484375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.2199756205081939697265625f, 0.13855208456516265869140625f, -0.0578319095075130462646484375f, -0.033682413399219512939453125f), float4(-0.010961168445646762847900390625f, 0.1052496135234832763671875f, 0.02177415974438190460205078125f, 0.1828944385051727294921875f), float4(0.04369203746318817138671875f, 0.078538991510868072509765625f, -0.039936125278472900390625f, -0.10044489800930023193359375f), float4(0.0449407286942005157470703125f, -0.02068029157817363739013671875f, 0.17578089237213134765625f, -0.106598995625972747802734375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0268528349697589874267578125f, -0.16037546098232269287109375f, 0.112783156335353851318359375f, 0.12656097114086151123046875f), float4(-0.0068578938953578472137451171875f, -0.034001179039478302001953125f, -0.0515640340745449066162109375f, 0.0008541266433894634246826171875f), float4(-0.375567138195037841796875f, -0.0527998693287372589111328125f, 0.0293838344514369964599609375f, -0.14246807992458343505859375f), float4(-0.0563801638782024383544921875f, -0.00239992490969598293304443359375f, 0.160257518291473388671875f, 0.0363248549401760101318359375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.02270996570587158203125f, 0.046350412070751190185546875f, 0.0339072085916996002197265625f, 0.02810572087764739990234375f), float4(-0.143942654132843017578125f, 0.04215361177921295166015625f, -0.3206118047237396240234375f, 0.15034915506839752197265625f), float4(-0.0028448137454688549041748046875f, 0.168298900127410888671875f, -0.042686663568019866943359375f, 0.02054346166551113128662109375f), float4(-0.278650104999542236328125f, -0.0074820150621235370635986328125f, -0.0403132922947406768798828125f, -0.207457363605499267578125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0541755594313144683837890625f, 0.18728683888912200927734375f, -0.0461218319833278656005859375f, -0.2793951332569122314453125f), float4(0.059079758822917938232421875f, -0.091912232339382171630859375f, -0.16625417768955230712890625f, -0.260381639003753662109375f), float4(0.39956605434417724609375f, -0.0525940246880054473876953125f, -0.059655599296092987060546875f, 0.2951755225658416748046875f), float4(-0.01518192328512668609619140625f, -0.07633750140666961669921875f, 0.2513120472431182861328125f, 0.13038463890552520751953125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0369030535221099853515625f, -0.0066989152692258358001708984375f, -0.062650285661220550537109375f, 0.056143589317798614501953125f), float4(-0.0064960583113133907318115234375f, 0.0285126976668834686279296875f, -0.109062731266021728515625f, -0.01004765368998050689697265625f), float4(0.23030473291873931884765625f, 0.0499835722148418426513671875f, 0.104390643537044525146484375f, 0.2664383351802825927734375f), float4(0.05041243135929107666015625f, 0.091854237020015716552734375f, -0.3235291540622711181640625f, 0.11295159161090850830078125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.097240269184112548828125f, -0.3496253490447998046875f, 0.0658668577671051025390625f, 0.01663537882268428802490234375f), float4(0.13831381499767303466796875f, 0.0170707590878009796142578125f, -0.046903468668460845947265625f, 0.02235007472336292266845703125f), float4(0.01835279352962970733642578125f, 0.022000022232532501220703125f, 0.070613205432891845703125f, 0.1177355349063873291015625f), float4(-0.0259710513055324554443359375f, 0.18832100927829742431640625f, -0.096435882151126861572265625f, -0.085121266543865203857421875f)));
[   0.656][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1732443273067474365234375f, 0.06810612976551055908203125f, -0.0572959072887897491455078125f, -0.0511596389114856719970703125f), float4(-0.1015708148479461669921875f, 0.124917738139629364013671875f, 0.08762367069721221923828125f, -0.0058624041266739368438720703125f), float4(-0.053429268300533294677734375f, -0.0319424569606781005859375f, -0.0396240465342998504638671875f, -0.0429893694818019866943359375f), float4(-0.13031379878520965576171875f, -0.118692822754383087158203125f, -0.02483205311000347137451171875f, 0.07046340405941009521484375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01051484234631061553955078125f, 0.1376259028911590576171875f, -0.117503456771373748779296875f, -0.0378673709928989410400390625f), float4(0.0345924906432628631591796875f, 0.01540817134082317352294921875f, -0.031430877745151519775390625f, -0.060825355350971221923828125f), float4(-0.07295842468738555908203125f, -0.003789530135691165924072265625f, 0.04168617725372314453125f, -0.1235220432281494140625f), float4(-0.06261360645294189453125f, 0.05451442301273345947265625f, -0.340727150440216064453125f, 0.13860727846622467041015625f)))) + float4(0.01816673390567302703857421875f, -0.1100247800350189208984375f, -0.0555431805551052093505859375f, -0.09881930053234100341796875f);
[   0.656][d][vo/gpu-next/libplacebo] [ 56] }
[   0.656][d][vo/gpu-next/libplacebo] [ 57] 
[   0.656][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.656][d][vo/gpu-next/libplacebo] [ 59] {
[   0.656][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.656][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.656][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.656][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.656][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.656][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.656][d][vo/gpu-next/libplacebo] [ 66] }
[   0.659][d][vo/gpu-next] cache_save_obj: key(65c9427f9d14879d), size(11845), save time(2.638 ms)
[   0.659][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.660][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.660][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.660][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.660][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.660][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.660][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.660][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.660][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.660][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.660][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.660][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.660][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.660][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.660][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.660][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.660][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.660][d][vo/gpu-next/libplacebo] [ 16] };
[   0.660][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.660][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.660][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.660][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.660][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.660][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.660][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.660][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.660][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.660][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.660][d][vo/gpu-next/libplacebo] [ 27] }
[   0.660][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.660][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.660][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.660][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.660][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.660][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.660][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.660][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.660][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.660][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.660][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.660][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.660][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.660][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.660][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.660][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.660][d][vo/gpu-next/libplacebo] [ 16] };
[   0.660][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.660][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.660][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.660][d][vo/gpu-next/libplacebo] [ 20] 
[   0.660][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_tf_raw _2 
[   0.660][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_tf_pos _3 
[   0.660][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_tf_map _3_map 
[   0.660][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_tf_size vec2(textureSize(_2, 0)) 
[   0.660][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_tf_pt _4 
[   0.660][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_tf_off _5 
[   0.660][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.660][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_tf_mul _6 
[   0.660][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.660][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.660][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_tf_texOff(off) (conv2d_tf_tex(_3 + _4 * vec2(off))) 
[   0.660][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.660][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_tf1_raw _7 
[   0.660][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_tf1_pos _8 
[   0.660][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_tf1_map _8_map 
[   0.660][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_tf1_size vec2(textureSize(_7, 0)) 
[   0.660][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_tf1_pt _9 
[   0.660][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_tf1_off _a 
[   0.660][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.660][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_tf1_mul _b 
[   0.660][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.660][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.660][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_tf1_texOff(off) (conv2d_tf1_tex(_8 + _9 * vec2(off))) 
[   0.660][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.660][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.660][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.660][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.660][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.660][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.660][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.660][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.660][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.660][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.660][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.660][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.660][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.660][d][vo/gpu-next/libplacebo] [ 57] }
[   0.660][d][vo/gpu-next/libplacebo] [ 58] 
[   0.660][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.660][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.660][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.660][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.660][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.660][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.660][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.660][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.660][d][vo/gpu-next/libplacebo] [ 67] }
[   0.660][d][vo/gpu-next/libplacebo] [ 68] 
[   0.660][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.660][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.660][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.660][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.660][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.660][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.660][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.040142782, 0.0288423, 0.07569487, -0.01490842, 0.14402796, -0.13682005, 0.027765118, 0.03907358, 0.07117706, 0.058157545, -0.23862502, -0.057674367, -0.19220531, 0.0147159435, -0.18028538, 0.0963821) * go_0(-1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.1676744, -0.11937339, 0.12137117, 0.07119485, 0.14148116, -0.043578617, -0.029261118, -0.0016938087, -0.057269357, -0.080076694, 0.12193026, 0.07326153, -0.056278303, -0.01630716, -0.03792076, 0.1483611) * go_0(-1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(-0.3021578, 0.011601693, 0.11266048, 0.19086999, -0.0122412145, 0.08431291, 0.11615175, -0.008039614, -0.39987534, 0.07820729, 0.03509667, 0.1963505, -0.08839513, -0.21571854, 0.059425723, -0.06830175) * go_0(-1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.23135209, -0.12452708, 0.0943565, 0.0028859286, -0.09836373, 0.10681712, -0.3535964, 0.08457615, 0.045332734, 0.16579892, -0.03809797, -0.021596594, 0.2937497, -0.028294371, 0.046484597, -0.037604347) * go_0(0.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(0.072675414, -0.16431206, 0.28952035, 0.0076831076, -0.020242939, 0.029483542, -0.092415355, 0.08673106, 0.12109694, 0.14307201, 0.23134442, 0.11731775, 0.09981601, -0.16968462, 0.037470713, 0.14948717) * go_0(0.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.0029752052, 0.06526503, 0.1866458, 0.07451277, -0.31836876, 0.17115082, -0.13969697, 0.23844297, -0.03244903, -0.08832665, 0.023691226, -0.18230624, -0.074933805, -0.00044301842, 0.050572682, 0.081511915) * go_0(0.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.039502528, 0.051221415, -0.13968123, -0.091212444, -0.016925618, 0.15409444, -0.017455677, -0.11653652, 0.03539446, -0.00087720866, -0.12839639, 0.037198763, 0.03674469, -0.26444665, 0.019721227, -0.13013805) * go_0(1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.039229527, 0.25667152, 0.0032586441, -0.00718359, 0.1617932, 0.10409968, 0.07182867, -0.09810605, 0.07789241, -0.02014911, 0.025767172, -0.14604759, 0.07175764, 0.32513744, -0.20473222, -0.16266066) * go_0(1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.13418433, 0.061813723, -0.13927278, -0.2498272, 0.03468218, 0.29483125, 0.063289374, -0.04726235, 0.1898295, -0.33132064, 0.032045014, 0.02159535, -0.1148363, 0.31306976, 0.06456038, 0.048988886) * go_0(1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.07151646, 0.2799246, -0.107190795, -0.16431166, -0.28007045, 0.07206954, 0.06775463, 0.009758042, 0.07032184, -0.20843789, 0.087045245, 0.1360676, -0.25718534, 0.028249472, -0.12614648, 0.009949602) * go_1(-1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.020241471, -0.23390484, -0.0083223935, 0.08344701, 0.08222297, 0.12026539, -0.08652223, -0.08228822, -0.039576706, -0.24677879, -0.1157289, 0.2590508, -0.23809408, 0.19911982, -0.116798095, -0.035870325) * go_1(-1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.024991842, 0.050509237, -0.024134455, -0.12659028, 0.24089767, 0.122712664, -0.10482493, -0.19403952, -0.19177693, -0.06538376, -0.041478425, 0.32176673, -0.1534002, -0.18680622, 0.06763643, 0.020806564) * go_1(-1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(0.03437814, -0.28067374, 0.2830681, 0.038812317, -0.021698112, -0.120865285, 0.22695538, -0.045419116, -0.030475847, -0.01977341, -0.1265364, -0.3109814, 0.012255813, 0.053917278, -0.018620957, -0.14599285) * go_1(0.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.016204128, -0.04093018, 0.054571863, 0.02679643, 0.01756274, -0.057685968, 0.16148666, 0.17370272, -0.11065411, 0.06378157, -0.09331551, 0.22985275, 0.057905316, 0.12323568, 0.07748665, 0.09878629) * go_1(0.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.018112244, 0.063234635, -0.013184602, 0.16241394, 0.08877139, 0.02145378, -0.02490027, -0.038920373, 0.13127136, 0.14391647, 0.020553736, 0.14401346, 0.06685973, -0.25398204, 0.10369067, -0.055949755) * go_1(0.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.07710333, 0.047412727, 0.13813803, 0.18624061, 0.16907091, -0.039532468, 0.06234584, 0.06408178, -0.054543987, -0.045220226, -0.11093376, -0.37399602, 0.20372874, 0.004580967, -0.07742308, 0.017989937) * go_1(1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.003485311, -0.08897399, -0.013108594, -0.19473282, -0.27081844, -0.16812073, 0.0052992934, -0.055331517, 0.09446357, 0.019280333, 0.16560757, -0.3230032, 0.043096773, 0.059222896, -0.064184934, -0.059852477) * go_1(1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.06794279, -0.034135245, 0.083064295, 0.13506731, 0.13064219, -0.44978833, -0.03513717, 0.08999715, 0.1124541, 0.42208397, -0.0038724816, -0.014332087, -0.13751853, -0.04929869, 0.09134992, -0.17687531) * go_1(1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.100909084, -0.0131197255, 0.082274795, -0.2138443, -0.08515947, -0.021058358, 0.10951775, -0.06349191, -0.29129833, -0.029262653, 0.25235432, -0.11748315, 0.121980384, 0.062347785, 0.10916932, -0.15993518) * go_2(-1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.28893283, -0.05677308, -0.2641288, -0.058937225, -0.16187571, 0.006647366, -0.063294955, 0.04766719, 0.60601914, -0.07831864, -0.15710756, -0.011491797, 0.15587467, -0.08105375, 0.07847514, -0.2803333) * go_2(-1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(-0.077989794, -0.09871811, -0.3516344, 0.15292728, 0.010889273, 0.0011189661, -0.16118282, -0.018821161, -0.039708678, -0.00060983415, -0.06367813, 0.009148068, 0.03919827, 0.18782744, 0.028040757, -0.10230145) * go_2(-1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.4079609, 0.18640275, -0.12475227, 0.13891742, 0.25121725, 0.16942379, 0.14409852, 0.087600805, 0.045335658, -0.12683709, -0.0077387216, 0.06563413, -0.19857128, 0.106910795, -0.048285246, 0.10768945) * go_2(0.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.5989075, 0.20941062, -0.20086494, 0.13344856, 0.073034994, 0.22358665, 0.101664364, -0.13463663, 0.18816395, -0.061176624, -0.14712185, 0.027320342, -0.09529667, 0.031148786, -0.28744993, 0.18698911) * go_2(0.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.14799193, 0.39471942, -0.23340325, -0.4031061, 0.18926248, -0.11091216, 0.118981816, -0.09155061, 0.17049436, 0.19803695, -0.1513267, 0.023817873, 0.0090933135, -0.04134864, 0.060486555, 0.03536634) * go_2(0.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.39094314, 0.01779997, 0.12710269, 0.0067333193, -0.31255835, -0.08206612, -0.048528638, 0.369439, -0.19351655, -0.03420455, 0.15831526, -0.052294146, -0.08481741, 0.0787108, 0.1312136, -0.108919285) * go_2(1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.16068119, -0.42190582, 0.19383872, -0.018445708, 0.09803051, -0.020769652, -0.022599563, -0.052448895, -0.20645833, -0.031432863, 0.0025441595, 0.03410379, -0.20268854, 0.04481527, 0.05191063, 0.42317194) * go_2(1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.12786235, -0.23936178, 0.116561726, 0.30756372, -0.09420156, -0.044529166, -0.03585749, 0.1829332, -0.23939075, 0.24030831, 0.019878127, -0.015069802, 0.24300557, -0.22558568, -0.104956664, -0.09393648) * go_2(1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.04607054, 0.012677649, -0.027597688, 0.1618836, 0.29210827, 0.014221155, -0.13591036, -0.06895336, -0.09559534, 0.07956421, -0.11112994, -0.13325493, 0.24562472, 0.11046177, 0.057847694, 0.0016315983) * go_3(-1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.03365951, 0.027391057, 0.09653403, -0.14718771, -0.049631152, -0.06467214, -0.058545876, 0.1424002, -0.06320376, 0.181183, 0.10249362, -0.16052136, 0.3013475, -0.04156266, 0.08862033, 0.06888033) * go_3(-1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.10045977, -0.004198456, -0.025856055, 0.05739418, -0.1328637, -0.025975171, 0.06553717, 0.11301186, 0.0704087, -0.083569765, 0.16066101, -0.24453588, 0.25370175, 0.037184533, 0.062386766, -0.20025635) * go_3(-1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.017958941, 0.06417776, -0.1525265, 0.12451173, 0.14567685, -0.0049682115, -0.23973411, -0.0783304, -0.010629432, 0.08055161, 0.2028341, 0.17640644, -0.20445108, -0.055524793, -0.019326134, 0.081288636) * go_3(0.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.007882519, -0.03722546, 0.053249408, 0.00071846246, -0.07053029, -0.21583866, 0.1415364, -0.19486657, 0.20685542, 0.17660026, -0.32156837, 0.1746825, -0.14957622, -0.09224378, -0.098153435, -0.13054638) * go_3(0.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.10051427, -0.17398237, 0.09842799, -0.14187703, 0.116901085, -0.1229543, -0.0007776771, -0.20410055, -0.11373484, -0.111150615, -0.1974002, -0.11641459, 0.024105398, 0.24985977, 0.015871854, -0.10724633) * go_3(0.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.18081793, 0.1209351, -0.12867971, -0.019415248, 0.062617876, -0.037130393, -0.07803658, -0.22862352, 0.2586428, -0.030090366, -0.11894069, 0.18087515, -0.40921417, 0.070013195, 0.030540073, 0.035120826) * go_3(1.0, -1.0);
[   0.660][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.13185939, 0.12992652, 0.08125049, 0.075331174, 0.064219765, 0.056629725, -0.020012032, -0.0855444, -0.044063166, -0.05396545, -0.028002812, 0.21837157, -0.15206428, -0.12681007, 0.14895032, 0.12339962) * go_3(1.0, 0.0);
[   0.660][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.08066341, -0.14773634, -0.0212227, -0.014011867, -0.048505764, 0.075407125, -0.020620076, 0.0003291325, -0.21815202, -0.23136546, 0.10853532, -0.036058456, 0.10952532, -0.052677035, -0.13005799, 0.18398996) * go_3(1.0, 1.0);
[   0.660][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.022609137, -0.028548084, 0.024431901, 0.010504478);
[   0.660][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.660][d][vo/gpu-next/libplacebo] [113] }
[   0.660][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.660][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.660][d][vo/gpu-next/libplacebo] [116] return color;
[   0.660][d][vo/gpu-next/libplacebo] [117] }
[   0.660][d][vo/gpu-next/libplacebo] [118] 
[   0.660][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.660][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.660][d][vo/gpu-next/libplacebo] [121] }
[   0.661][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.661][d][vo/gpu-next/libplacebo] Spent 1.319 ms translating GLSL to SPIR-V
[   0.661][d][vo/gpu-next/libplacebo] Spent 0.108 ms translating SPIR-V to HLSL
[   0.662][d][vo/gpu-next/libplacebo] Spent 1.105 ms translating HLSL to DXBC
[   0.662][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.662][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.662][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.662][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.663][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.663][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.663][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.663][d][vo/gpu-next/libplacebo] [  7] 
[   0.663][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.663][d][vo/gpu-next/libplacebo] [  9] {
[   0.663][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.663][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.663][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.663][d][vo/gpu-next/libplacebo] [ 13] };
[   0.663][d][vo/gpu-next/libplacebo] [ 14] 
[   0.663][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.663][d][vo/gpu-next/libplacebo] [ 16] {
[   0.663][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.663][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.663][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.663][d][vo/gpu-next/libplacebo] [ 20] };
[   0.663][d][vo/gpu-next/libplacebo] [ 21] 
[   0.663][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.663][d][vo/gpu-next/libplacebo] [ 23] {
[   0.663][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.663][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.663][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.663][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.663][d][vo/gpu-next/libplacebo] [ 28] }
[   0.663][d][vo/gpu-next/libplacebo] [ 29] 
[   0.663][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.663][d][vo/gpu-next/libplacebo] [ 31] {
[   0.663][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.663][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.663][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.663][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.663][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.663][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.663][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.663][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.663][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.663][d][vo/gpu-next/libplacebo] [ 41] }
[   0.673][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.673][v][vo/gpu-next/libplacebo] Spent 10.546 ms translating GLSL to SPIR-V
[   0.675][d][vo/gpu-next/libplacebo] Spent 1.648 ms translating SPIR-V to HLSL
[   0.700][v][vo/gpu-next/libplacebo] Spent 25.168 ms translating HLSL to DXBC
[   0.700][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.700][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.700][d][vo/gpu-next/libplacebo] [  2] {
[   0.700][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.700][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.700][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.700][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.700][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.700][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.700][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.700][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.700][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.700][d][vo/gpu-next/libplacebo] [ 12] };
[   0.700][d][vo/gpu-next/libplacebo] [ 13] 
[   0.700][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.700][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.700][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.700][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.700][d][vo/gpu-next/libplacebo] [ 18] 
[   0.700][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.700][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.700][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.700][d][vo/gpu-next/libplacebo] [ 22] 
[   0.700][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.700][d][vo/gpu-next/libplacebo] [ 24] {
[   0.700][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.700][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.700][d][vo/gpu-next/libplacebo] [ 27] };
[   0.700][d][vo/gpu-next/libplacebo] [ 28] 
[   0.700][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.700][d][vo/gpu-next/libplacebo] [ 30] {
[   0.700][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.700][d][vo/gpu-next/libplacebo] [ 32] };
[   0.700][d][vo/gpu-next/libplacebo] [ 33] 
[   0.700][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.700][d][vo/gpu-next/libplacebo] [ 35] {
[   0.700][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.700][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.700][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.700][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.040142782032489776611328125f, 0.0288423001766204833984375f, 0.075694866478443145751953125f, -0.01490841992199420928955078125f), float4(0.14402796328067779541015625f, -0.1368200480937957763671875f, 0.027765117585659027099609375f, 0.039073579013347625732421875f), float4(0.071177057921886444091796875f, 0.0581575445830821990966796875f, -0.2386250197887420654296875f, -0.0576743669807910919189453125f), float4(-0.19220530986785888671875f, 0.0147159434854984283447265625f, -0.18028537929058074951171875f, 0.09638209640979766845703125f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.16767440736293792724609375f, -0.119373388588428497314453125f, 0.121371172368526458740234375f, 0.071194849908351898193359375f), float4(0.1414811611175537109375f, -0.043578617274761199951171875f, -0.02926111780107021331787109375f, -0.00169380870647728443145751953125f), float4(-0.057269357144832611083984375f, -0.080076694488525390625f, 0.12193025648593902587890625f, 0.0732615292072296142578125f), float4(-0.05627830326557159423828125f, -0.01630716025829315185546875f, -0.0379207618534564971923828125f, 0.14836110174655914306640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.3021577894687652587890625f, 0.011601692996919155120849609375f, 0.11266048252582550048828125f, 0.190869987010955810546875f), float4(-0.0122412145137786865234375f, 0.084312908351421356201171875f, 0.116151750087738037109375f, -0.00803961418569087982177734375f), float4(-0.399875342845916748046875f, 0.078207291662693023681640625f, 0.0350966714322566986083984375f, 0.19635049998760223388671875f), float4(-0.08839513361454010009765625f, -0.2157185375690460205078125f, 0.0594257228076457977294921875f, -0.06830175220966339111328125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.2313520908355712890625f, -0.12452708184719085693359375f, 0.094356499612331390380859375f, 0.00288592861033976078033447265625f), float4(-0.0983637273311614990234375f, 0.106817118823528289794921875f, -0.353596389293670654296875f, 0.084576152265071868896484375f), float4(0.0453327335417270660400390625f, 0.16579891741275787353515625f, -0.038097970187664031982421875f, -0.02159659378230571746826171875f), float4(0.29374969005584716796875f, -0.02829437144100666046142578125f, 0.046484597027301788330078125f, -0.03760434687137603759765625f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.072675414383411407470703125f, -0.164312064647674560546875f, 0.2895203530788421630859375f, 0.00768310762941837310791015625f), float4(-0.02024293877184391021728515625f, 0.02948354184627532958984375f, -0.092415355145931243896484375f, 0.08673106133937835693359375f), float4(0.1210969388484954833984375f, 0.14307200908660888671875f, 0.23134441673755645751953125f, 0.11731775104999542236328125f), float4(0.09981600940227508544921875f, -0.1696846187114715576171875f, 0.03747071325778961181640625f, 0.1494871675968170166015625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.00297520519234240055084228515625f, 0.0652650296688079833984375f, 0.186645805835723876953125f, 0.074512772262096405029296875f), float4(-0.3183687627315521240234375f, 0.17115081846714019775390625f, -0.13969697058200836181640625f, 0.23844297230243682861328125f), float4(-0.032449029386043548583984375f, -0.08832664787769317626953125f, 0.0236912257969379425048828125f, -0.18230624496936798095703125f), float4(-0.074933804571628570556640625f, -0.00044301841990090906620025634765625f, 0.0505726821720600128173828125f, 0.081511914730072021484375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0395025275647640228271484375f, 0.05122141540050506591796875f, -0.13968123495578765869140625f, -0.091212444007396697998046875f), float4(-0.01692561805248260498046875f, 0.15409444272518157958984375f, -0.01745567657053470611572265625f, -0.116536520421504974365234375f), float4(0.0353944599628448486328125f, -0.000877208658494055271148681640625f, -0.12839639186859130859375f, 0.0371987633407115936279296875f), float4(0.036744691431522369384765625f, -0.2644466459751129150390625f, 0.01972122676670551300048828125f, -0.13013805449008941650390625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.03922952711582183837890625f, 0.2566715180873870849609375f, 0.0032586441375315189361572265625f, -0.007183589972555637359619140625f), float4(0.1617932021617889404296875f, 0.104099683463573455810546875f, 0.071828670799732208251953125f, -0.098106049001216888427734375f), float4(0.07789240777492523193359375f, -0.02014910988509654998779296875f, 0.02576717175543308258056640625f, -0.1460475921630859375f), float4(0.071757636964321136474609375f, 0.325137436389923095703125f, -0.20473222434520721435546875f, -0.162660658359527587890625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1341843307018280029296875f, 0.0618137232959270477294921875f, -0.1392727792263031005859375f, -0.249827206134796142578125f), float4(0.0346821807324886322021484375f, 0.2948312461376190185546875f, 0.0632893741130828857421875f, -0.047262348234653472900390625f), float4(0.1898294985294342041015625f, -0.33132064342498779296875f, 0.032045014202594757080078125f, 0.02159534953534603118896484375f), float4(-0.114836297929286956787109375f, 0.313069760799407958984375f, 0.0645603835582733154296875f, 0.048988886177539825439453125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.071516461670398712158203125f, 0.2799246013164520263671875f, -0.107190795242786407470703125f, -0.16431166231632232666015625f), float4(-0.2800704538822174072265625f, 0.07206954061985015869140625f, 0.067754633724689483642578125f, 0.00975804217159748077392578125f), float4(0.07032184302806854248046875f, -0.2084378898143768310546875f, 0.087045244872570037841796875f, 0.1360675990581512451171875f), float4(-0.25718533992767333984375f, 0.0282494723796844482421875f, -0.12614648044109344482421875f, 0.009949602186679840087890625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02024147100746631622314453125f, -0.23390483856201171875f, -0.00832239352166652679443359375f, 0.0834470093250274658203125f), float4(0.0822229683399200439453125f, 0.120265386998653411865234375f, -0.086522229015827178955078125f, -0.08228822052478790283203125f), float4(-0.0395767055451869964599609375f, -0.246778786182403564453125f, -0.11572889983654022216796875f, 0.259050786495208740234375f), float4(-0.23809407651424407958984375f, 0.19911982119083404541015625f, -0.116798095405101776123046875f, -0.0358703248202800750732421875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02499184198677539825439453125f, 0.050509236752986907958984375f, -0.02413445524871349334716796875f, -0.1265902817249298095703125f), float4(0.24089767038822174072265625f, 0.122712664306163787841796875f, -0.1048249304294586181640625f, -0.194039523601531982421875f), float4(-0.191776931285858154296875f, -0.0653837621212005615234375f, -0.0414784252643585205078125f, 0.32176673412322998046875f), float4(-0.15340019762516021728515625f, -0.18680621683597564697265625f, 0.067636430263519287109375f, 0.02080656401813030242919921875f)));
[   0.700][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.700][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.700][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0343781411647796630859375f, -0.2806737422943115234375f, 0.2830680906772613525390625f, 0.038812316954135894775390625f), float4(-0.02169811166822910308837890625f, -0.120865285396575927734375f, 0.2269553840160369873046875f, -0.0454191155731678009033203125f), float4(-0.030475847423076629638671875f, -0.01977341063320636749267578125f, -0.1265363991260528564453125f, -0.31098139286041259765625f), float4(0.012255812995135784149169921875f, 0.0539172776043415069580078125f, -0.0186209566891193389892578125f, -0.1459928452968597412109375f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.01620412804186344146728515625f, -0.0409301817417144775390625f, 0.0545718632638454437255859375f, 0.0267964303493499755859375f), float4(0.017562739551067352294921875f, -0.0576859675347805023193359375f, 0.1614866554737091064453125f, 0.173702716827392578125f), float4(-0.110654108226299285888671875f, 0.063781566917896270751953125f, -0.0933155119419097900390625f, 0.22985275089740753173828125f), float4(0.05790531635284423828125f, 0.123235680162906646728515625f, 0.07748664915561676025390625f, 0.098786287009716033935546875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.01811224408447742462158203125f, 0.063234634697437286376953125f, -0.013184602372348308563232421875f, 0.16241393983364105224609375f), float4(0.08877138793468475341796875f, 0.0214537791907787322998046875f, -0.02490027062594890594482421875f, -0.0389203727245330810546875f), float4(0.1312713623046875f, 0.14391647279262542724609375f, 0.02055373601615428924560546875f, 0.144013464450836181640625f), float4(0.066859729588031768798828125f, -0.2539820373058319091796875f, 0.10369066894054412841796875f, -0.055949755012989044189453125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.07710333168506622314453125f, 0.0474127270281314849853515625f, 0.1381380259990692138671875f, 0.186240613460540771484375f), float4(0.16907091438770294189453125f, -0.03953246772289276123046875f, 0.062345840036869049072265625f, 0.064081780612468719482421875f), float4(-0.05454398691654205322265625f, -0.0452202260494232177734375f, -0.110933758318424224853515625f, -0.3739960193634033203125f), float4(0.203728735446929931640625f, 0.004580967128276824951171875f, -0.07742308080196380615234375f, 0.0179899372160434722900390625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.00348531105555593967437744140625f, -0.088973991572856903076171875f, -0.01310859434306621551513671875f, -0.1947328150272369384765625f), float4(-0.2708184421062469482421875f, -0.16812072694301605224609375f, 0.005299293436110019683837890625f, -0.0553315170109272003173828125f), float4(0.09446357190608978271484375f, 0.0192803330719470977783203125f, 0.16560757160186767578125f, -0.3230032026767730712890625f), float4(0.043096773326396942138671875f, 0.0592228956520557403564453125f, -0.0641849339008331298828125f, -0.0598524771630764007568359375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.067942790687084197998046875f, -0.034135244786739349365234375f, 0.083064295351505279541015625f, 0.1350673139095306396484375f), float4(0.13064219057559967041015625f, -0.4497883319854736328125f, -0.035137169063091278076171875f, 0.089997150003910064697265625f), float4(0.11245410144329071044921875f, 0.42208397388458251953125f, -0.0038724816404283046722412109375f, -0.014332086779177188873291015625f), float4(-0.13751852512359619140625f, -0.04929868876934051513671875f, 0.091349922120571136474609375f, -0.17687530815601348876953125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.1009090840816497802734375f, -0.01311972551047801971435546875f, 0.08227479457855224609375f, -0.21384429931640625f), float4(-0.085159473121166229248046875f, -0.021058358252048492431640625f, 0.109517753124237060546875f, -0.0634919106960296630859375f), float4(-0.291298329830169677734375f, -0.02926265262067317962646484375f, 0.252354323863983154296875f, -0.117483146488666534423828125f), float4(0.12198038399219512939453125f, 0.06234778463840484619140625f, 0.10916931927204132080078125f, -0.159935176372528076171875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.2889328300952911376953125f, -0.05677308142185211181640625f, -0.26412880420684814453125f, -0.0589372254908084869384765625f), float4(-0.16187570989131927490234375f, 0.006647366099059581756591796875f, -0.063294954597949981689453125f, 0.04766719043254852294921875f), float4(0.60601913928985595703125f, -0.07831864058971405029296875f, -0.1571075618267059326171875f, -0.011491796933114528656005859375f), float4(0.155874669551849365234375f, -0.08105374872684478759765625f, 0.078475140035152435302734375f, -0.2803333103656768798828125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.077989794313907623291015625f, -0.098718106746673583984375f, -0.3516344130039215087890625f, 0.15292727947235107421875f), float4(0.0108892731368541717529296875f, 0.00111896614544093608856201171875f, -0.161182820796966552734375f, -0.0188211612403392791748046875f), float4(-0.0397086776793003082275390625f, -0.0006098341546021401882171630859375f, -0.06367813050746917724609375f, 0.009148067794740200042724609375f), float4(0.0391982682049274444580078125f, 0.1878274381160736083984375f, 0.02804075740277767181396484375f, -0.1023014485836029052734375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.4079608917236328125f, 0.18640275299549102783203125f, -0.12475226819515228271484375f, 0.1389174163341522216796875f), float4(0.25121724605560302734375f, 0.1694237887859344482421875f, 0.1440985202789306640625f, 0.087600804865360260009765625f), float4(0.045335657894611358642578125f, -0.12683708965778350830078125f, -0.007738721556961536407470703125f, 0.06563413143157958984375f), float4(-0.19857127964496612548828125f, 0.1069107949733734130859375f, -0.0482852458953857421875f, 0.107689447700977325439453125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.598907470703125f, 0.20941062271595001220703125f, -0.2008649408817291259765625f, 0.13344855606555938720703125f), float4(0.073034994304180145263671875f, 0.2235866487026214599609375f, 0.101664364337921142578125f, -0.13463662564754486083984375f), float4(0.18816395103931427001953125f, -0.0611766241490840911865234375f, -0.147121846675872802734375f, 0.02732034213840961456298828125f), float4(-0.095296673476696014404296875f, 0.03114878572523593902587890625f, -0.2874499261379241943359375f, 0.18698911368846893310546875f)));
[   0.700][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.1479919254779815673828125f, 0.394719421863555908203125f, -0.23340325057506561279296875f, -0.40310609340667724609375f), float4(0.1892624795436859130859375f, -0.11091215908527374267578125f, 0.118981815874576568603515625f, -0.091550610959529876708984375f), float4(0.17049436271190643310546875f, 0.19803695380687713623046875f, -0.15132670104503631591796875f, 0.02381787262856960296630859375f), float4(0.009093313477933406829833984375f, -0.0413486398756504058837890625f, 0.0604865550994873046875f, 0.03536634147167205810546875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.3909431397914886474609375f, 0.0177999697625637054443359375f, 0.12710268795490264892578125f, 0.0067333192564547061920166015625f), float4(-0.312558352947235107421875f, -0.082066118717193603515625f, -0.0485286377370357513427734375f, 0.36943900585174560546875f), float4(-0.193516552448272705078125f, -0.034204550087451934814453125f, 0.15831525623798370361328125f, -0.0522941462695598602294921875f), float4(-0.084817409515380859375f, 0.078710801899433135986328125f, 0.131213605403900146484375f, -0.108919285237789154052734375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.160681188106536865234375f, -0.421905815601348876953125f, 0.19383871555328369140625f, -0.018445707857608795166015625f), float4(0.098030507564544677734375f, -0.0207696519792079925537109375f, -0.02259956300258636474609375f, -0.0524488948285579681396484375f), float4(-0.2064583301544189453125f, -0.0314328633248805999755859375f, 0.0025441595353186130523681640625f, 0.034103788435459136962890625f), float4(-0.2026885449886322021484375f, 0.0448152683675289154052734375f, 0.051910631358623504638671875f, 0.423171937465667724609375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.12786234915256500244140625f, -0.23936177790164947509765625f, 0.11656172573566436767578125f, 0.307563722133636474609375f), float4(-0.094201557338237762451171875f, -0.0445291660726070404052734375f, -0.035857491195201873779296875f, 0.18293319642543792724609375f), float4(-0.23939074575901031494140625f, 0.2403083145618438720703125f, 0.019878126680850982666015625f, -0.015069802291691303253173828125f), float4(0.243005573749542236328125f, -0.22558568418025970458984375f, -0.104956664144992828369140625f, -0.093936480581760406494140625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.046070538461208343505859375f, 0.01267764903604984283447265625f, -0.027597688138484954833984375f, 0.1618835926055908203125f), float4(0.2921082675457000732421875f, 0.014221155084669589996337890625f, -0.1359103620052337646484375f, -0.068953357636928558349609375f), float4(-0.095595337450504302978515625f, 0.079564206302165985107421875f, -0.111129939556121826171875f, -0.13325493037700653076171875f), float4(0.245624721050262451171875f, 0.110461771488189697265625f, 0.05784769356250762939453125f, 0.001631598337553441524505615234375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.033659510314464569091796875f, 0.0273910574615001678466796875f, 0.09653402864933013916015625f, -0.147187709808349609375f), float4(-0.0496311523020267486572265625f, -0.0646721422672271728515625f, -0.0585458762943744659423828125f, 0.142400205135345458984375f), float4(-0.063203759491443634033203125f, 0.18118299543857574462890625f, 0.102493621408939361572265625f, -0.1605213582515716552734375f), float4(0.3013474941253662109375f, -0.04156266152858734130859375f, 0.088620327413082122802734375f, 0.068880327045917510986328125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.10045976936817169189453125f, -0.00419845618307590484619140625f, -0.025856055319309234619140625f, 0.0573941804468631744384765625f), float4(-0.132863700389862060546875f, -0.0259751714766025543212890625f, 0.06553716957569122314453125f, 0.113011859357357025146484375f), float4(0.07040870189666748046875f, -0.0835697650909423828125f, 0.1606610119342803955078125f, -0.24453587830066680908203125f), float4(0.253701746463775634765625f, 0.0371845327317714691162109375f, 0.06238676607608795166015625f, -0.20025634765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01795894093811511993408203125f, 0.064177758991718292236328125f, -0.15252649784088134765625f, 0.12451173365116119384765625f), float4(0.1456768512725830078125f, -0.0049682115204632282257080078125f, -0.239734113216400146484375f, -0.07833039760589599609375f), float4(-0.01062943227589130401611328125f, 0.08055160939693450927734375f, 0.2028340995311737060546875f, 0.176406443119049072265625f), float4(-0.204451084136962890625f, -0.0555247925221920013427734375f, -0.01932613365352153778076171875f, 0.081288635730743408203125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.00788251869380474090576171875f, -0.0372254587709903717041015625f, 0.0532494075596332550048828125f, 0.0007184624555520713329315185546875f), float4(-0.070530287921428680419921875f, -0.21583865582942962646484375f, 0.14153639972209930419921875f, -0.1948665678501129150390625f), float4(0.20685541629791259765625f, 0.17660026252269744873046875f, -0.32156836986541748046875f, 0.17468249797821044921875f), float4(-0.1495762169361114501953125f, -0.092243783175945281982421875f, -0.098153434693813323974609375f, -0.13054637610912322998046875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.100514270365238189697265625f, -0.17398236691951751708984375f, 0.098427988588809967041015625f, -0.1418770253658294677734375f), float4(0.11690108478069305419921875f, -0.122954301536083221435546875f, -0.0007776771089993417263031005859375f, -0.204100549221038818359375f), float4(-0.11373484134674072265625f, -0.111150614917278289794921875f, -0.19740019738674163818359375f, -0.11641459167003631591796875f), float4(0.02410539798438549041748046875f, 0.24985976517200469970703125f, 0.01587185449898242950439453125f, -0.107246331870555877685546875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1808179318904876708984375f, 0.12093509733676910400390625f, -0.12867970764636993408203125f, -0.0194152481853961944580078125f), float4(0.062617875635623931884765625f, -0.037130393087863922119140625f, -0.0780365765094757080078125f, -0.22862352430820465087890625f), float4(0.25864279270172119140625f, -0.0300903655588626861572265625f, -0.118940688669681549072265625f, 0.1808751523494720458984375f), float4(-0.4092141687870025634765625f, 0.0700131952762603759765625f, 0.03054007329046726226806640625f, 0.0351208262145519256591796875f)));
[   0.700][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1318593919277191162109375f, 0.12992651760578155517578125f, 0.081250488758087158203125f, 0.075331173837184906005859375f), float4(0.064219765365123748779296875f, 0.056629724800586700439453125f, -0.0200120322406291961669921875f, -0.085544399917125701904296875f), float4(-0.04406316578388214111328125f, -0.05396544933319091796875f, -0.02800281159579753875732421875f, 0.218371570110321044921875f), float4(-0.15206427872180938720703125f, -0.1268100738525390625f, 0.14895032346248626708984375f, 0.123399622738361358642578125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0806634128093719482421875f, -0.1477363407611846923828125f, -0.0212226994335651397705078125f, -0.014011867344379425048828125f), float4(-0.0485057644546031951904296875f, 0.075407125055789947509765625f, -0.02062007598578929901123046875f, 0.00032913251197896897792816162109375f), float4(-0.2181520164012908935546875f, -0.23136545717716217041015625f, 0.1085353195667266845703125f, -0.0360584557056427001953125f), float4(0.10952532291412353515625f, -0.05267703533172607421875f, -0.130057990550994873046875f, 0.18398995697498321533203125f)))) + float4(0.022609136998653411865234375f, -0.028548084199428558349609375f, 0.02443190105259418487548828125f, 0.010504477657377719879150390625f);
[   0.700][d][vo/gpu-next/libplacebo] [ 56] }
[   0.700][d][vo/gpu-next/libplacebo] [ 57] 
[   0.700][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.700][d][vo/gpu-next/libplacebo] [ 59] {
[   0.700][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.700][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.700][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.700][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.700][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.700][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.700][d][vo/gpu-next/libplacebo] [ 66] }
[   0.703][d][vo/gpu-next] cache_save_obj: key(3d593b12550837b7), size(11845), save time(2.278 ms)
[   0.703][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.703][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.703][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.703][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.703][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.703][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.703][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.703][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.703][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.703][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.703][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.703][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.703][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.703][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.703][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.703][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.703][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.703][d][vo/gpu-next/libplacebo] [ 16] };
[   0.703][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.703][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.703][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.703][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.703][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.703][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.703][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.703][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.703][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.703][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.703][d][vo/gpu-next/libplacebo] [ 27] }
[   0.703][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.703][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.703][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.703][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.703][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.703][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.703][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.703][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.703][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.703][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.703][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.703][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.703][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.703][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.703][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.703][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.703][d][vo/gpu-next/libplacebo] [ 16] };
[   0.703][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.703][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.703][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.703][d][vo/gpu-next/libplacebo] [ 20] 
[   0.703][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_1_tf_raw _2 
[   0.703][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_1_tf_pos _3 
[   0.703][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_1_tf_map _3_map 
[   0.703][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_1_tf_size vec2(textureSize(_2, 0)) 
[   0.703][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_1_tf_pt _4 
[   0.703][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_1_tf_off _5 
[   0.703][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.703][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_1_tf_mul _6 
[   0.703][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_1_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.703][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_1_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.703][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_1_tf_texOff(off) (conv2d_1_tf_tex(_3 + _4 * vec2(off))) 
[   0.703][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_1_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.703][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_1_tf1_raw _7 
[   0.703][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_1_tf1_pos _8 
[   0.703][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_1_tf1_map _8_map 
[   0.703][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_1_tf1_size vec2(textureSize(_7, 0)) 
[   0.703][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_1_tf1_pt _9 
[   0.703][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_1_tf1_off _a 
[   0.703][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.704][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_1_tf1_mul _b 
[   0.704][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_1_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.704][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_1_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.704][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_1_tf1_texOff(off) (conv2d_1_tf1_tex(_8 + _9 * vec2(off))) 
[   0.704][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_1_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.704][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.704][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.704][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.704][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.704][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.704][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.704][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.704][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.704][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.704][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.704][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.704][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.704][d][vo/gpu-next/libplacebo] [ 57] }
[   0.704][d][vo/gpu-next/libplacebo] [ 58] 
[   0.704][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.704][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.704][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.704][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.704][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.704][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.704][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.704][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.704][d][vo/gpu-next/libplacebo] [ 67] }
[   0.704][d][vo/gpu-next/libplacebo] [ 68] 
[   0.704][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.704][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.704][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.704][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.704][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.704][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.704][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.069641694, 0.104958326, 0.14786446, 0.027633663, -0.004279524, -0.020451711, 0.0883571, -0.016224537, 0.13585235, 0.11078269, 0.20198658, -0.042161036, 0.020466218, 0.20994963, 0.20072585, -0.028024657) * go_0(-1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(0.050872434, 0.12874635, 0.1298729, 0.115810685, 0.07087254, 0.09885682, 0.23018982, 0.19187538, 0.10953604, 0.0033836907, -0.13325337, 0.09830315, -0.06528767, 0.05096927, -0.016355392, -0.039334368) * go_0(-1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.027010268, 0.018263958, 0.0360758, 0.016791478, 0.2815702, 0.15517488, 0.43415815, 0.044976447, -0.0070842914, -0.12546758, 0.16874593, 0.077622116, 0.02252915, 0.1769774, 0.07181055, -0.15128697) * go_0(-1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.057129618, 0.118046716, 0.07237424, -0.07842637, -0.044214778, -0.12886304, 0.08603301, -0.10416606, -0.15852053, 0.3788151, 0.26181692, -0.09092249, 0.31635332, 0.064212754, 0.21923725, 0.07500004) * go_0(0.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.16981383, 0.044409662, -0.3717617, -0.031610407, 0.03658662, -0.09459229, -0.09449437, -0.014000666, -0.19656453, 0.03934163, -0.16304104, -0.12761801, -0.06235523, 0.16438273, -0.036933117, -0.095564745) * go_0(0.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.09725091, 0.034022827, 0.17699842, 0.1079676, -0.13236652, 0.03718181, -0.06968635, -0.23288171, 0.10275666, 0.08464966, -0.37162134, -0.35782215, -0.11023659, 0.2519236, -0.035197742, -0.019324787) * go_0(0.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.09968464, 0.01102193, 0.0073735216, 0.011999313, -0.004998707, 0.09518938, 0.045727003, -0.21544908, 0.006879454, -0.06398254, -0.12584935, -0.06759933, -0.0820037, -0.07775104, 0.021957919, -0.122708224) * go_0(1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.08869767, 0.031296413, -0.0034280645, 0.13778855, 0.10073061, -0.08393937, -0.032959275, -0.0500518, 0.010908757, -0.09189417, -0.057760105, 0.17652664, -0.08729078, -0.09639096, -0.25654703, 0.055152636) * go_0(1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.0027847723, -0.12885433, 0.038065907, 0.17450769, 0.0864409, 0.04592345, -0.015443841, 0.077010944, 0.08967368, 0.06800111, -0.23636387, 0.35023567, 0.03165923, 0.03132063, 0.17964344, 0.035610788) * go_0(1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.032017227, -0.0022808525, -0.08470573, 0.05332408, -0.14674746, 0.025374275, -0.018281924, 0.041163016, 0.00096549373, 0.014724006, 0.004913065, 0.18494442, 0.034953076, -0.15731992, -0.13792977, 0.08041999) * go_1(-1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.08305006, 8.6318905e-05, -0.007895379, 0.02731387, -0.061324496, 0.050034665, 0.22662131, -0.013876427, -0.074468784, -0.008136604, -0.23337875, -0.1742574, 0.011753501, -0.11666686, -0.22541048, -0.14549944) * go_1(-1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.028333234, 0.121047184, 0.06720256, -0.058930036, 0.030258363, 0.07292774, 0.06455556, 0.0019076486, 0.0073987027, 0.17144889, 0.06084024, -0.08762086, -0.114422195, -0.16595861, -0.08706028, -0.10736261) * go_1(-1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.02519315, -0.14611271, 0.0388848, 0.19481422, -0.05970354, -0.08391417, 0.18982239, -0.10447052, 0.15587378, -0.023997072, 0.0781739, 0.2182389, -0.023886079, -0.1422596, -0.13352804, 0.005008043) * go_1(0.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(0.08842712, -0.100292705, 0.18925671, 0.12198875, 0.061771665, -0.04473232, 0.025053164, 0.039047796, -0.1672479, -0.08934517, 0.33099812, -0.20269585, -0.21640155, -0.22029749, 0.16539703, -0.2442679) * go_1(0.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.16332205, -0.101898365, 0.02919932, -0.11900455, 0.14442924, 0.0916815, 0.037550304, 0.024123482, 0.02042624, 0.033472955, -0.059437107, -0.18735693, -0.013749093, -0.06199881, -0.08685079, 0.04252364) * go_1(0.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.09047013, -0.055188328, -0.09106191, -0.048969727, 0.05114009, -0.12753403, 0.07116141, 0.060749624, -0.074034564, -0.21952136, -0.09479503, 0.2753584, -0.014141759, -0.14883812, -0.0673838, -0.012279045) * go_1(1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.013816464, -0.0747162, -0.19202435, -0.064403646, 0.34980014, 0.04375546, 0.20264609, 0.006684355, 0.11523799, 0.024674915, -0.08697566, -0.04662527, -0.12743855, -0.39463726, 0.0057380227, 0.01286557) * go_1(1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.08146522, 0.074080914, -0.16856177, -0.183158, 0.19228102, 0.12373886, 0.017574452, -0.01753772, 0.045071773, 0.07725093, 0.023422163, -0.011545186, 0.20751388, -0.10795588, 0.07606346, 0.10282933) * go_1(1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.12512013, -0.102208994, -0.09125398, 0.12043188, -0.066011876, 0.08831903, -0.017038671, -0.005541508, -0.049607087, 0.08654939, -0.02037085, 0.26887566, 0.005012545, 0.01869507, -0.013064982, -0.010649147) * go_2(-1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.006824864, -0.05071593, -0.20786697, -0.07327317, 0.011382597, 0.030494886, -0.04754353, -0.018284699, 0.01305972, -0.036589053, 0.26637617, 0.021887446, -0.026669119, -0.037982125, -0.063445956, -0.009104248) * go_2(-1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.032602567, 0.07094331, 0.052653246, 0.08342047, -0.085082285, -0.14674088, -0.23073354, -0.07915851, 0.0017120204, 0.032407638, -0.039819505, 0.16942178, 0.023192152, -0.0353237, 0.10930186, 0.22939779) * go_2(-1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.0010455973, -0.11821993, -0.12639599, 0.12250084, -0.12756817, 0.11478416, -0.1862587, 0.016819192, 0.02110181, -0.25492984, -0.1766048, 0.22188173, -0.21305011, 0.113442205, 0.04599144, -0.15840286) * go_2(0.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.15086032, -0.17428935, 0.39080557, 0.07576757, 0.121703945, 0.17944208, -0.003140103, -0.11231332, 0.12102969, 0.15310267, 0.17578171, 0.40631834, -0.21299168, 0.024928993, 0.030104794, 0.020753227) * go_2(0.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.098734386, -0.020072265, -0.14308836, -0.08490801, 0.017175158, 0.02250534, 0.04060829, 0.033022214, 0.0046218676, 0.17923212, 0.0112105915, 0.09574084, 0.14819936, -0.14692923, 0.12634254, 0.060762513) * go_2(0.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.030521613, -0.097913325, -0.016720278, 0.11273997, 0.013019863, -0.06557118, 0.0405774, 0.0915019, 0.022414956, -0.053254984, 0.18639986, 0.07820968, 0.06498986, 0.058922634, -0.02240318, -0.086019725) * go_2(1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.2058775, 0.01502064, 0.05847032, 0.007249146, 0.086483665, 0.19420148, 0.03892261, -0.013546935, -0.07980237, 0.04347281, -0.10376214, -0.1366535, 0.05285337, 0.07213318, 0.3642818, -0.11331124) * go_2(1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.025740806, 0.14551482, -0.037410017, -0.17477523, -0.11853099, -0.060820814, -0.102599286, -0.13267937, -0.103053465, -0.014044828, -0.01888072, -0.06499249, 0.22311528, -0.051850274, -0.034120858, 0.044562567) * go_2(1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.21360217, 0.10093803, -0.0016407765, -0.1473997, 0.26524043, 0.02112132, 0.23173104, -0.013157391, 0.05945182, 0.044635538, 0.06031638, -0.21435826, -0.10147484, 0.069090195, 0.09641844, -0.09581093) * go_3(-1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.08576515, -0.122861005, 0.049567085, -0.085854456, 0.23809357, -0.024966082, -0.10294079, 0.046241313, 0.008621132, -0.08323767, 0.20277941, 0.163423, -0.07386535, -0.088738985, 0.05274358, -0.025479877) * go_3(-1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.041135542, -0.008365642, 0.17088248, 0.04025207, 0.13809255, -0.056895368, -0.01582834, 0.07361908, -0.00068995473, -0.09300962, 0.19117641, 0.24832036, -0.06572358, -0.026025, -0.019093119, -0.049720034) * go_3(-1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.024900286, 0.11525501, 0.025882801, 0.037742402, 0.36976853, 0.052211333, -0.15143296, 0.1802276, -0.059080046, 0.017990451, 0.026395092, -0.12689115, -0.07705386, 0.1232379, 0.13273561, -0.12521964) * go_3(0.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.19788785, 0.044887315, 0.07663442, 0.16688696, -0.2842248, -0.15684547, 0.028387763, 0.0063470444, -0.012245601, -0.038382255, -0.8187406, -0.25245667, 0.23014604, 0.22746666, 0.1594356, 0.16469443) * go_3(0.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.12663333, 0.014730006, 0.03765697, 0.15704912, -0.106595434, -0.05317512, -0.081759915, -0.08797109, 0.064620756, -0.06341419, 0.16493447, 0.23102313, 0.068325415, -0.088058695, 0.16885915, 0.036382258) * go_3(0.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.035389822, -0.11811836, -0.035656307, -0.0680554, 0.1338908, 0.065852076, 0.023307983, 0.0675308, 0.09690683, 0.18170924, 0.09862692, -0.20964378, -0.08601271, -0.20016764, -0.01879598, -0.14629345) * go_3(1.0, -1.0);
[   0.704][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.27183273, 0.013525998, -0.14995874, -0.23938845, -0.26218823, -0.0009874097, -0.13385512, -0.10664239, -0.048931994, 0.039898522, 0.047444753, 0.10934722, 0.10969629, 0.123539805, 0.11692802, 0.14172275) * go_3(1.0, 0.0);
[   0.704][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.1656506, 0.019683002, 0.0221048, 0.12596753, 0.20420644, -0.07930122, 0.04653823, 0.11492255, -0.0050175437, -0.03271697, 0.013389486, 0.034583613, -0.2196601, -0.1615663, -0.013763388, -0.056037936) * go_3(1.0, 1.0);
[   0.704][d][vo/gpu-next/libplacebo] [111]     result += vec4(-0.022956269, 0.029688787, -0.070148066, -0.07163476);
[   0.704][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.704][d][vo/gpu-next/libplacebo] [113] }
[   0.704][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.704][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.704][d][vo/gpu-next/libplacebo] [116] return color;
[   0.704][d][vo/gpu-next/libplacebo] [117] }
[   0.704][d][vo/gpu-next/libplacebo] [118] 
[   0.704][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.704][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.704][d][vo/gpu-next/libplacebo] [121] }
[   0.705][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.705][d][vo/gpu-next/libplacebo] Spent 1.292 ms translating GLSL to SPIR-V
[   0.705][d][vo/gpu-next/libplacebo] Spent 0.106 ms translating SPIR-V to HLSL
[   0.706][d][vo/gpu-next/libplacebo] Spent 1.229 ms translating HLSL to DXBC
[   0.706][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.706][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.706][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.706][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.706][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.706][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.706][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.706][d][vo/gpu-next/libplacebo] [  7] 
[   0.706][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.706][d][vo/gpu-next/libplacebo] [  9] {
[   0.706][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.706][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.706][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.706][d][vo/gpu-next/libplacebo] [ 13] };
[   0.706][d][vo/gpu-next/libplacebo] [ 14] 
[   0.706][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.706][d][vo/gpu-next/libplacebo] [ 16] {
[   0.706][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.706][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.706][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.706][d][vo/gpu-next/libplacebo] [ 20] };
[   0.706][d][vo/gpu-next/libplacebo] [ 21] 
[   0.706][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.706][d][vo/gpu-next/libplacebo] [ 23] {
[   0.706][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.706][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.706][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.706][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.706][d][vo/gpu-next/libplacebo] [ 28] }
[   0.706][d][vo/gpu-next/libplacebo] [ 29] 
[   0.706][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.706][d][vo/gpu-next/libplacebo] [ 31] {
[   0.706][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.706][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.706][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.706][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.706][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.706][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.706][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.706][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.706][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.706][d][vo/gpu-next/libplacebo] [ 41] }
[   0.717][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.717][v][vo/gpu-next/libplacebo] Spent 10.289 ms translating GLSL to SPIR-V
[   0.718][d][vo/gpu-next/libplacebo] Spent 1.702 ms translating SPIR-V to HLSL
[   0.744][v][vo/gpu-next/libplacebo] Spent 26.105 ms translating HLSL to DXBC
[   0.744][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.744][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.744][d][vo/gpu-next/libplacebo] [  2] {
[   0.744][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.744][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.744][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.744][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.744][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.744][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.744][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.744][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.744][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.744][d][vo/gpu-next/libplacebo] [ 12] };
[   0.744][d][vo/gpu-next/libplacebo] [ 13] 
[   0.744][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.744][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.744][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.744][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.744][d][vo/gpu-next/libplacebo] [ 18] 
[   0.744][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.744][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.744][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.744][d][vo/gpu-next/libplacebo] [ 22] 
[   0.744][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.744][d][vo/gpu-next/libplacebo] [ 24] {
[   0.744][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.744][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.744][d][vo/gpu-next/libplacebo] [ 27] };
[   0.744][d][vo/gpu-next/libplacebo] [ 28] 
[   0.744][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.744][d][vo/gpu-next/libplacebo] [ 30] {
[   0.744][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.744][d][vo/gpu-next/libplacebo] [ 32] };
[   0.744][d][vo/gpu-next/libplacebo] [ 33] 
[   0.745][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.745][d][vo/gpu-next/libplacebo] [ 35] {
[   0.745][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.745][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.745][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.745][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.06964169442653656005859375f, 0.1049583256244659423828125f, 0.14786446094512939453125f, 0.0276336632668972015380859375f), float4(-0.0042795240879058837890625f, -0.02045171149075031280517578125f, 0.088357098400592803955078125f, -0.0162245370447635650634765625f), float4(0.13585235178470611572265625f, 0.110782690346240997314453125f, 0.2019865810871124267578125f, -0.0421610362827777862548828125f), float4(0.02046621777117252349853515625f, 0.20994962751865386962890625f, 0.200725853443145751953125f, -0.02802465669810771942138671875f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0508724339306354522705078125f, 0.12874634563922882080078125f, 0.12987290322780609130859375f, 0.115810684859752655029296875f), float4(0.070872537791728973388671875f, 0.09885682165622711181640625f, 0.23018981516361236572265625f, 0.19187538325786590576171875f), float4(0.10953603684902191162109375f, 0.00338369072414934635162353515625f, -0.1332533657550811767578125f, 0.098303146660327911376953125f), float4(-0.065287671983242034912109375f, 0.0509692691266536712646484375f, -0.0163553915917873382568359375f, -0.0393343679606914520263671875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02701026760041713714599609375f, 0.018263958394527435302734375f, 0.0360758006572723388671875f, 0.01679147779941558837890625f), float4(0.2815701961517333984375f, 0.1551748812198638916015625f, 0.434158146381378173828125f, 0.0449764467775821685791015625f), float4(-0.0070842914283275604248046875f, -0.12546758353710174560546875f, 0.168745934963226318359375f, 0.077622115612030029296875f), float4(0.02252914942800998687744140625f, 0.1769773960113525390625f, 0.071810550987720489501953125f, -0.15128697454929351806640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0571296177804470062255859375f, 0.11804671585559844970703125f, 0.07237423956394195556640625f, -0.078426368534564971923828125f), float4(-0.044214777648448944091796875f, -0.128863036632537841796875f, 0.086033008992671966552734375f, -0.1041660606861114501953125f), float4(-0.15852053463459014892578125f, 0.378815114498138427734375f, 0.261816918849945068359375f, -0.09092248976230621337890625f), float4(0.316353321075439453125f, 0.06421275436878204345703125f, 0.21923725306987762451171875f, 0.075000040233135223388671875f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.16981382668018341064453125f, 0.0444096624851226806640625f, -0.3717617094516754150390625f, -0.031610406935214996337890625f), float4(0.036586619913578033447265625f, -0.09459228813648223876953125f, -0.0944943726062774658203125f, -0.014000666327774524688720703125f), float4(-0.1965645253658294677734375f, 0.039341628551483154296875f, -0.16304104030132293701171875f, -0.127618014812469482421875f), float4(-0.0623552314937114715576171875f, 0.1643827259540557861328125f, -0.036933116614818572998046875f, -0.095564745366573333740234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0972509086132049560546875f, 0.0340228267014026641845703125f, 0.17699842154979705810546875f, 0.10796760022640228271484375f), float4(-0.13236652314662933349609375f, 0.03718180954456329345703125f, -0.069686353206634521484375f, -0.23288170993328094482421875f), float4(0.102756656706333160400390625f, 0.084649659693241119384765625f, -0.3716213405132293701171875f, -0.3578221499919891357421875f), float4(-0.110236592590808868408203125f, 0.2519235908985137939453125f, -0.035197742283344268798828125f, -0.019324786961078643798828125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.09968464076519012451171875f, 0.011021929793059825897216796875f, 0.0073735215701162815093994140625f, 0.0119993127882480621337890625f), float4(-0.004998707212507724761962890625f, 0.09518937766551971435546875f, 0.0457270033657550811767578125f, -0.21544907987117767333984375f), float4(0.0068794540129601955413818359375f, -0.063982538878917694091796875f, -0.12584935128688812255859375f, -0.0675993263721466064453125f), float4(-0.08200369775295257568359375f, -0.07775104045867919921875f, 0.02195791900157928466796875f, -0.122708223760128021240234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0886976718902587890625f, 0.0312964133918285369873046875f, -0.00342806451953947544097900390625f, 0.13778854906558990478515625f), float4(0.10073061287403106689453125f, -0.083939373493194580078125f, -0.032959274947643280029296875f, -0.050051800906658172607421875f), float4(0.010908757336437702178955078125f, -0.091894172132015228271484375f, -0.05776010453701019287109375f, 0.1765266358852386474609375f), float4(-0.08729077875614166259765625f, -0.0963909626007080078125f, -0.256547033786773681640625f, 0.0551526360213756561279296875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0027847723104059696197509765625f, -0.128854334354400634765625f, 0.0380659066140651702880859375f, 0.17450769245624542236328125f), float4(0.086440898478031158447265625f, 0.045923449099063873291015625f, -0.01544384099543094635009765625f, 0.07701094448566436767578125f), float4(0.08967368304729461669921875f, 0.06800110638141632080078125f, -0.23636387288570404052734375f, 0.3502356708049774169921875f), float4(0.03165923058986663818359375f, 0.031320631504058837890625f, 0.17964343726634979248046875f, 0.035610787570476531982421875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0320172272622585296630859375f, -0.00228085252456367015838623046875f, -0.084705732762813568115234375f, 0.053324081003665924072265625f), float4(-0.14674745500087738037109375f, 0.0253742747008800506591796875f, -0.01828192360699176788330078125f, 0.0411630161106586456298828125f), float4(0.000965493731200695037841796875f, 0.014724005945026874542236328125f, 0.0049130651168525218963623046875f, 0.1849444210529327392578125f), float4(0.0349530763924121856689453125f, -0.15731991827487945556640625f, -0.1379297673702239990234375f, 0.0804199874401092529296875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.08305005729198455810546875f, 8.631890523247420787811279296875e-05f, -0.007895379327237606048583984375f, 0.0273138694465160369873046875f), float4(-0.0613244958221912384033203125f, 0.050034664571285247802734375f, 0.22662131488323211669921875f, -0.0138764269649982452392578125f), float4(-0.074468784034252166748046875f, -0.0081366039812564849853515625f, -0.23337875306606292724609375f, -0.17425739765167236328125f), float4(0.01175350137054920196533203125f, -0.116666860878467559814453125f, -0.22541047632694244384765625f, -0.1454994380474090576171875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02833323366940021514892578125f, 0.12104718387126922607421875f, 0.067202560603618621826171875f, -0.0589300356805324554443359375f), float4(0.03025836311280727386474609375f, 0.0729277431964874267578125f, 0.064555563032627105712890625f, 0.001907648635096848011016845703125f), float4(0.0073987026698887348175048828125f, 0.171448886394500732421875f, 0.060840241611003875732421875f, -0.087620861828327178955078125f), float4(-0.114422194659709930419921875f, -0.1659586131572723388671875f, -0.087060280144214630126953125f, -0.10736261308193206787109375f)));
[   0.745][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.745][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.745][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02519314922392368316650390625f, -0.1461127102375030517578125f, 0.0388847999274730682373046875f, 0.19481422007083892822265625f), float4(-0.0597035400569438934326171875f, -0.083914168179035186767578125f, 0.18982239067554473876953125f, -0.1044705212116241455078125f), float4(0.155873775482177734375f, -0.0239970721304416656494140625f, 0.078173898160457611083984375f, 0.21823890507221221923828125f), float4(-0.02388607896864414215087890625f, -0.1422595977783203125f, -0.13352803885936737060546875f, 0.005008042789995670318603515625f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.088427118957042694091796875f, -0.100292704999446868896484375f, 0.18925671279430389404296875f, 0.121988750994205474853515625f), float4(0.0617716647684574127197265625f, -0.0447323210537433624267578125f, 0.02505316399037837982177734375f, 0.0390477962791919708251953125f), float4(-0.16724790632724761962890625f, -0.08934517204761505126953125f, 0.330998122692108154296875f, -0.2026958465576171875f), float4(-0.2164015471935272216796875f, -0.2202974855899810791015625f, 0.16539703309535980224609375f, -0.24426789581775665283203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.16332204639911651611328125f, -0.101898364722728729248046875f, 0.0291993208229541778564453125f, -0.119004547595977783203125f), float4(0.1444292366504669189453125f, 0.091681502759456634521484375f, 0.0375503040850162506103515625f, 0.024123482406139373779296875f), float4(0.0204262398183345794677734375f, 0.033472955226898193359375f, -0.0594371072947978973388671875f, -0.18735693395137786865234375f), float4(-0.0137490928173065185546875f, -0.0619988106191158294677734375f, -0.0868507921695709228515625f, 0.0425236411392688751220703125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.090470127761363983154296875f, -0.0551883280277252197265625f, -0.091061912477016448974609375f, -0.0489697270095348358154296875f), float4(0.0511400885879993438720703125f, -0.12753403186798095703125f, 0.071161411702632904052734375f, 0.0607496239244937896728515625f), float4(-0.074034564197063446044921875f, -0.21952135860919952392578125f, -0.09479503333568572998046875f, 0.2753584086894989013671875f), float4(-0.01414175890386104583740234375f, -0.14883811771869659423828125f, -0.067383803427219390869140625f, -0.0122790448367595672607421875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.013816463761031627655029296875f, -0.074716202914714813232421875f, -0.19202435016632080078125f, -0.064403645694255828857421875f), float4(0.3498001396656036376953125f, 0.0437554605305194854736328125f, 0.20264609158039093017578125f, 0.0066843549720942974090576171875f), float4(0.115237988531589508056640625f, 0.024674914777278900146484375f, -0.086975656449794769287109375f, -0.04662527143955230712890625f), float4(-0.12743854522705078125f, -0.3946372568607330322265625f, 0.005738022737205028533935546875f, 0.012865570373833179473876953125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.081465221941471099853515625f, 0.0740809142589569091796875f, -0.16856177151203155517578125f, -0.18315799534320831298828125f), float4(0.19228102266788482666015625f, 0.123738862574100494384765625f, 0.017574451863765716552734375f, -0.017537720501422882080078125f), float4(0.045071773231029510498046875f, 0.0772509276866912841796875f, 0.0234221629798412322998046875f, -0.011545185931026935577392578125f), float4(0.20751388370990753173828125f, -0.107955880463123321533203125f, 0.076063461601734161376953125f, 0.102829329669475555419921875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.1251201331615447998046875f, -0.102208994328975677490234375f, -0.09125398099422454833984375f, 0.120431877672672271728515625f), float4(-0.0660118758678436279296875f, 0.0883190333843231201171875f, -0.01703867129981517791748046875f, -0.005541508086025714874267578125f), float4(-0.0496070869266986846923828125f, 0.08654938638210296630859375f, -0.02037085033953189849853515625f, 0.268875658512115478515625f), float4(0.005012544803321361541748046875f, 0.01869506947696208953857421875f, -0.01306498236954212188720703125f, -0.010649147443473339080810546875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.00682486407458782196044921875f, -0.050715930759906768798828125f, -0.207866966724395751953125f, -0.07327316701412200927734375f), float4(0.01138259656727313995361328125f, 0.03049488551914691925048828125f, -0.0475435294210910797119140625f, -0.01828469894826412200927734375f), float4(0.01305972039699554443359375f, -0.0365890525281429290771484375f, 0.2663761675357818603515625f, 0.02188744582235813140869140625f), float4(-0.0266691185534000396728515625f, -0.0379821248352527618408203125f, -0.0634459555149078369140625f, -0.0091042481362819671630859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0326025672256946563720703125f, 0.07094331085681915283203125f, 0.052653245627880096435546875f, 0.08342047035694122314453125f), float4(-0.085082285106182098388671875f, -0.1467408835887908935546875f, -0.2307335436344146728515625f, -0.079158507287502288818359375f), float4(0.001712020370177924633026123046875f, 0.0324076376855373382568359375f, -0.0398195050656795501708984375f, 0.16942177712917327880859375f), float4(0.02319215238094329833984375f, -0.035323701798915863037109375f, 0.109301857650279998779296875f, 0.22939778864383697509765625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0010455972515046596527099609375f, -0.11821992695331573486328125f, -0.12639598548412322998046875f, 0.122500836849212646484375f), float4(-0.12756817042827606201171875f, 0.114784158766269683837890625f, -0.1862587034702301025390625f, 0.01681919209659099578857421875f), float4(0.021101810038089752197265625f, -0.254929840564727783203125f, -0.176604807376861572265625f, 0.22188173234462738037109375f), float4(-0.21305011212825775146484375f, 0.113442204892635345458984375f, 0.0459914393723011016845703125f, -0.158402860164642333984375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.15086032450199127197265625f, -0.17428934574127197265625f, 0.3908055722713470458984375f, 0.075767569243907928466796875f), float4(0.121703945100307464599609375f, 0.1794420778751373291015625f, -0.0031401030719280242919921875f, -0.112313322722911834716796875f), float4(0.12102968990802764892578125f, 0.1531026661396026611328125f, 0.17578171193599700927734375f, 0.4063183367252349853515625f), float4(-0.2129916846752166748046875f, 0.02492899261415004730224609375f, 0.030104793608188629150390625f, 0.020753227174282073974609375f)));
[   0.745][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.098734386265277862548828125f, -0.02007226459681987762451171875f, -0.14308835566043853759765625f, -0.084908008575439453125f), float4(0.01717515848577022552490234375f, 0.0225053392350673675537109375f, 0.0406082905828952789306640625f, 0.0330222137272357940673828125f), float4(0.0046218675561249256134033203125f, 0.179232120513916015625f, 0.011210591532289981842041015625f, 0.09574083983898162841796875f), float4(0.14819936454296112060546875f, -0.1469292342662811279296875f, 0.1263425350189208984375f, 0.0607625134289264678955078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0305216126143932342529296875f, -0.097913324832916259765625f, -0.01672027818858623504638671875f, 0.112739972770214080810546875f), float4(0.013019862584769725799560546875f, -0.065571181476116180419921875f, 0.0405774004757404327392578125f, 0.091501899063587188720703125f), float4(0.0224149562418460845947265625f, -0.053254984319210052490234375f, 0.18639986217021942138671875f, 0.07820968329906463623046875f), float4(0.064989857375621795654296875f, 0.05892263352870941162109375f, -0.022403180599212646484375f, -0.0860197246074676513671875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.20587749779224395751953125f, 0.015020639635622501373291015625f, 0.0584703199565410614013671875f, 0.007249145768582820892333984375f), float4(0.086483664810657501220703125f, 0.19420148432254791259765625f, 0.0389226116240024566650390625f, -0.013546935282647609710693359375f), float4(-0.079802371561527252197265625f, 0.04347281157970428466796875f, -0.103762142360210418701171875f, -0.13665349781513214111328125f), float4(0.052853368222713470458984375f, 0.07213318347930908203125f, 0.3642818033695220947265625f, -0.113311238586902618408203125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0257408060133457183837890625f, 0.1455148160457611083984375f, -0.0374100171029567718505859375f, -0.17477522790431976318359375f), float4(-0.1185309886932373046875f, -0.0608208142220973968505859375f, -0.102599285542964935302734375f, -0.1326793730258941650390625f), float4(-0.10305346548557281494140625f, -0.014044827781617641448974609375f, -0.01888071931898593902587890625f, -0.064992487430572509765625f), float4(0.22311528027057647705078125f, -0.05185027420520782470703125f, -0.034120857715606689453125f, 0.0445625670254230499267578125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.21360217034816741943359375f, 0.100938029587268829345703125f, -0.001640776521526277065277099609375f, -0.1473996937274932861328125f), float4(0.2652404308319091796875f, 0.0211213193833827972412109375f, 0.23173104226589202880859375f, -0.013157390989363193511962890625f), float4(0.0594518184661865234375f, 0.0446355380117893218994140625f, 0.0603163801133632659912109375f, -0.21435825526714324951171875f), float4(-0.10147483646869659423828125f, 0.069090195000171661376953125f, 0.096418440341949462890625f, -0.095810927450656890869140625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0857651531696319580078125f, -0.122861005365848541259765625f, 0.0495670847594738006591796875f, -0.08585445582866668701171875f), float4(0.23809356987476348876953125f, -0.02496608160436153411865234375f, -0.102940790355205535888671875f, 0.0462413132190704345703125f), float4(0.00862113200128078460693359375f, -0.083237670361995697021484375f, 0.20277941226959228515625f, 0.163423001766204833984375f), float4(-0.073865346610546112060546875f, -0.088738985359668731689453125f, 0.0527435801923274993896484375f, -0.02547987736761569976806640625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.041135542094707489013671875f, -0.0083656422793865203857421875f, 0.17088247835636138916015625f, 0.0402520708739757537841796875f), float4(0.1380925476551055908203125f, -0.056895367801189422607421875f, -0.01582833938300609588623046875f, 0.07361908257007598876953125f), float4(-0.00068995472975075244903564453125f, -0.0930096209049224853515625f, 0.19117641448974609375f, 0.24832035601139068603515625f), float4(-0.06572358310222625732421875f, -0.02602499909698963165283203125f, -0.019093118607997894287109375f, -0.04972003400325775146484375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.02490028552711009979248046875f, 0.11525501310825347900390625f, 0.02588280104100704193115234375f, 0.0377424024045467376708984375f), float4(0.3697685301303863525390625f, 0.0522113330662250518798828125f, -0.1514329612255096435546875f, 0.18022759258747100830078125f), float4(-0.0590800456702709197998046875f, 0.0179904513061046600341796875f, 0.02639509178698062896728515625f, -0.12689115107059478759765625f), float4(-0.07705385982990264892578125f, 0.123237900435924530029296875f, 0.13273561000823974609375f, -0.125219643115997314453125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.19788785278797149658203125f, 0.0448873154819011688232421875f, 0.07663442194461822509765625f, 0.1668869554996490478515625f), float4(-0.284224808216094970703125f, -0.15684546530246734619140625f, 0.028387762606143951416015625f, 0.006347044371068477630615234375f), float4(-0.01224560104310512542724609375f, -0.038382254540920257568359375f, -0.8187406063079833984375f, -0.2524566650390625f), float4(0.23014603555202484130859375f, 0.22746665775775909423828125f, 0.1594356000423431396484375f, 0.16469442844390869140625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.12663333117961883544921875f, 0.0147300064563751220703125f, 0.037656970322132110595703125f, 0.157049119472503662109375f), float4(-0.106595434248447418212890625f, -0.0531751215457916259765625f, -0.08175991475582122802734375f, -0.08797109127044677734375f), float4(0.064620755612850189208984375f, -0.063414193689823150634765625f, 0.16493447124958038330078125f, 0.231023132801055908203125f), float4(0.06832541525363922119140625f, -0.08805869519710540771484375f, 0.1688591539859771728515625f, 0.036382257938385009765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0353898219764232635498046875f, -0.11811836063861846923828125f, -0.0356563068926334381103515625f, -0.068055398762226104736328125f), float4(0.13389079272747039794921875f, 0.0658520758152008056640625f, 0.0233079828321933746337890625f, 0.067530803382396697998046875f), float4(0.096906833350658416748046875f, 0.18170924484729766845703125f, 0.098626919090747833251953125f, -0.209643781185150146484375f), float4(-0.086012713611125946044921875f, -0.20016764104366302490234375f, -0.01879598014056682586669921875f, -0.14629344642162322998046875f)));
[   0.745][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.2718327343463897705078125f, 0.01352599821984767913818359375f, -0.14995874464511871337890625f, -0.23938845098018646240234375f), float4(-0.2621882259845733642578125f, -0.000987409730441868305206298828125f, -0.13385511934757232666015625f, -0.106642387807369232177734375f), float4(-0.048931993544101715087890625f, 0.039898522198200225830078125f, 0.047444753348827362060546875f, 0.109347216784954071044921875f), float4(0.109696291387081146240234375f, 0.12353980541229248046875f, 0.116928018629550933837890625f, 0.14172275364398956298828125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1656506061553955078125f, 0.01968300156295299530029296875f, 0.022104799747467041015625f, 0.1259675323963165283203125f), float4(0.2042064368724822998046875f, -0.07930122315883636474609375f, 0.0465382300317287445068359375f, 0.1149225533008575439453125f), float4(-0.0050175436772406101226806640625f, -0.0327169708907604217529296875f, 0.013389485888183116912841796875f, 0.03458361327648162841796875f), float4(-0.219660103321075439453125f, -0.16156630218029022216796875f, -0.013763387687504291534423828125f, -0.0560379363596439361572265625f)))) + float4(-0.02295626886188983917236328125f, 0.0296887867152690887451171875f, -0.07014806568622589111328125f, -0.071634761989116668701171875f);
[   0.745][d][vo/gpu-next/libplacebo] [ 56] }
[   0.745][d][vo/gpu-next/libplacebo] [ 57] 
[   0.745][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.745][d][vo/gpu-next/libplacebo] [ 59] {
[   0.745][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.745][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.745][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.745][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.745][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.745][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.745][d][vo/gpu-next/libplacebo] [ 66] }
[   0.747][d][vo/gpu-next] cache_save_obj: key(90f5b7c78532006d), size(11845), save time(2.378 ms)
[   0.747][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.748][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.748][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.748][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.748][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.748][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.748][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.748][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.748][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.748][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.748][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.748][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.748][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.748][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.748][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.748][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.748][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.748][d][vo/gpu-next/libplacebo] [ 16] };
[   0.748][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.748][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.748][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.748][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.748][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.748][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.748][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.748][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.748][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.748][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.748][d][vo/gpu-next/libplacebo] [ 27] }
[   0.748][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.748][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.748][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.748][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.748][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.748][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.748][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.748][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.748][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.748][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.748][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.748][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.748][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.748][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.748][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.748][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.748][d][vo/gpu-next/libplacebo] [ 16] };
[   0.748][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.748][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.748][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.748][d][vo/gpu-next/libplacebo] [ 20] 
[   0.748][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_1_tf_raw _2 
[   0.748][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_1_tf_pos _3 
[   0.748][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_1_tf_map _3_map 
[   0.748][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_1_tf_size vec2(textureSize(_2, 0)) 
[   0.748][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_1_tf_pt _4 
[   0.748][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_1_tf_off _5 
[   0.748][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.748][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_1_tf_mul _6 
[   0.748][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_1_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.748][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_1_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.748][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_1_tf_texOff(off) (conv2d_1_tf_tex(_3 + _4 * vec2(off))) 
[   0.748][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_1_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.748][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_1_tf1_raw _7 
[   0.748][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_1_tf1_pos _8 
[   0.748][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_1_tf1_map _8_map 
[   0.748][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_1_tf1_size vec2(textureSize(_7, 0)) 
[   0.748][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_1_tf1_pt _9 
[   0.748][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_1_tf1_off _a 
[   0.748][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.748][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_1_tf1_mul _b 
[   0.748][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_1_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.748][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_1_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.748][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_1_tf1_texOff(off) (conv2d_1_tf1_tex(_8 + _9 * vec2(off))) 
[   0.748][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_1_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.748][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.748][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.748][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.748][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.748][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.748][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.748][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.748][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.748][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.748][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.748][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.748][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.748][d][vo/gpu-next/libplacebo] [ 57] }
[   0.748][d][vo/gpu-next/libplacebo] [ 58] 
[   0.748][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.748][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.748][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.748][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.748][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.748][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.748][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.748][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.748][d][vo/gpu-next/libplacebo] [ 67] }
[   0.748][d][vo/gpu-next/libplacebo] [ 68] 
[   0.748][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.748][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.748][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.748][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_1_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.748][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_1_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.748][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.748][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.15104648, 0.05522861, -0.0654341, -0.053517453, -0.08264124, -0.0062249107, -0.20364265, -0.05015117, -0.18837251, 0.030655831, 0.046844713, -0.20673253, -0.14042036, -0.05655449, 0.13994302, 0.011745607) * go_0(-1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.16517559, 0.1489214, -0.09149559, 0.025003506, -0.124926426, 0.16974348, -0.020857265, 0.08017403, 0.21836148, 0.0025619378, 0.2331612, 0.085599184, -0.030934382, -0.055194855, 0.09527726, -0.10081552) * go_0(-1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.041800212, 0.028859638, 0.09395546, 0.05211183, -0.038541477, 0.021495212, 0.04862346, -0.007864793, 0.038407274, -0.13841268, -0.14963801, 0.26470762, 0.16691841, -0.07262008, 0.034374326, -0.14709206) * go_0(-1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.00094978884, -0.028974704, -0.0900548, -0.08401967, -0.08935931, -0.043606587, -0.14497143, -0.05226239, -0.21516493, 0.19410603, -0.089924194, -0.04335071, -0.012618276, -0.2671613, 0.020422975, -0.037739716) * go_0(0.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.13403237, -0.02524383, -0.03474901, 0.054432765, 0.11946775, 0.107336655, -0.1431715, -0.13370377, 0.015087512, -0.1917613, 0.073493585, 0.2788855, -0.010510839, 0.06891479, -0.06741307, -0.05271205) * go_0(0.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.15432046, 0.04021662, -0.16979513, 0.13660534, -0.10518303, -0.10095502, -0.13092068, 0.022805348, -0.16676381, -0.4273298, 0.020867536, 0.3506733, -0.29459694, -0.055828743, -0.069241956, 0.04106382) * go_0(0.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.08890133, 0.07549666, -0.040735144, -0.1506932, -0.22227979, -0.0762723, -0.17766447, -0.05741318, -0.21885683, 0.2379157, -0.15525854, -0.07306285, 0.15580738, -0.04394069, -0.19175608, 0.018283797) * go_0(1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.08503275, -0.105500385, -0.114987396, -0.07166016, -0.2147138, 0.09378708, 0.24550334, -0.0834075, -0.033147786, -0.022304727, -0.31062204, 0.027651973, 0.109098755, 0.18889032, 0.1163026, 0.13863255) * go_0(1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.15266588, -0.14901319, 0.033916786, 0.09381096, -0.08196443, -0.16194504, 0.035789456, 0.21234898, -0.48724765, 0.2619442, -0.11215393, 0.25061038, 0.022344576, 0.0116525125, 0.111661114, -0.15242295) * go_0(1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.020475458, 0.0797404, -0.13576819, 0.009681671, 0.030504882, 0.049232908, 0.022025917, 0.16912088, -0.23914136, -0.084663324, 0.020925451, -0.1023938, 0.035916872, -0.07538111, -0.11470242, 0.15238516) * go_1(-1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.12941381, 0.08509899, -0.029489802, -0.09148447, -0.089406274, -0.116145454, -0.08979843, 0.11908148, 0.15473351, -0.21687616, 0.12607013, -0.08244334, -0.079580925, -0.16613089, -0.09287793, -0.03412643) * go_1(-1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.023578499, 0.07394217, -0.13069086, -0.1060499, -0.07559958, -0.21839201, 0.1090753, 0.0787872, 0.07677037, -0.25998843, 0.20039314, 0.046882212, 0.31871012, -0.3048051, 0.15118991, -0.00518087) * go_1(-1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.15338503, -0.11057532, 0.075839415, -0.18592294, -0.0155324, 0.038140323, -0.10498194, 0.09070477, 0.05108992, -0.047939524, -0.091004305, 0.09649005, -0.10967152, -0.051909525, -0.05314551, 0.09661584) * go_1(0.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.14458802, -0.053263694, -0.0010885567, 0.23342133, 0.01918937, 0.12026143, -0.15691495, 0.30480555, -0.08725869, 0.19082253, 0.3594973, 0.016653897, 0.045152336, -0.088590585, 0.0069655925, 0.1392425) * go_1(0.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(0.17944881, -0.17950764, 0.13282645, 0.030974053, 0.32233685, 0.18067117, -0.11472813, 0.097301506, -0.047649745, -0.1053861, -0.081039384, 0.035132434, 0.10204545, 0.085582554, -0.13153993, -0.021741152) * go_1(0.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.15573682, 0.16409989, -0.22574787, -0.03877603, -0.18285516, 0.11638645, 0.18321282, -0.017770218, 0.18230622, 0.16433364, -0.12795393, -0.03805153, 0.14386104, -0.0891527, -0.056928284, -0.10961495) * go_1(1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.257622, 0.052519716, -0.25421762, -0.1887382, -0.083568096, -0.0064690276, -0.029110614, 0.103327505, -0.17006217, 0.2254096, -0.29366904, 0.04302887, -0.10198446, -0.24423616, 0.16781262, -0.005019004) * go_1(1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.103393994, -0.059044626, -0.18192382, 0.0990813, -0.26143607, 0.11036474, 0.04788275, -0.096738026, 0.12825653, 0.13631694, -0.077904984, -0.020790676, -0.25118098, 0.122588515, -0.049440473, -0.10758222) * go_1(1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.06693113, -0.13647175, 0.131139, 0.13143918, 0.081720434, 0.117537096, 0.15387627, -0.008771362, 0.08513583, 0.023794742, -0.0661625, 0.115793936, 0.0023350024, 0.02215075, -0.0494433, -0.013404977) * go_2(-1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.041419264, -0.17622781, 0.028418267, 0.12114493, -0.23587078, 0.08457395, 0.014364018, -0.103271864, -0.051572207, -0.026424447, 0.16755055, -0.10763651, -0.033440586, 0.068594255, -0.050668504, 0.1941505) * go_2(-1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(-0.2780181, 0.037816502, -0.11516711, -0.09822884, 0.13762361, -0.14317706, 0.14350282, 0.000623895, -0.08601606, 0.08118504, 0.15497385, -0.04721711, -0.008936935, -0.014223618, -0.09641698, -0.013884213) * go_2(-1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.14349665, -0.03144472, -0.057813704, 0.0667044, 0.09026094, 0.051366236, 0.11139983, -0.015782114, -0.18314016, -0.18774192, 0.0014838242, 0.15759028, 0.062388215, 0.13626057, 0.02576217, -0.06317815) * go_2(0.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.07151769, 0.14508991, 0.1736844, -0.11487795, -0.07999805, -0.07797908, 0.037923355, -0.059138823, -0.23531209, -0.040207293, -0.068355694, -0.024296658, -0.114820175, 0.19726487, 0.21772414, 0.03659222) * go_2(0.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.16858695, -0.12135113, 0.009391182, -0.081519485, 0.13340487, 0.07007004, 0.094124354, 0.035519842, -0.3320139, -0.06624027, -0.14716229, -0.09205287, 0.12664132, -0.05655441, 0.0123263765, 0.04641279) * go_2(0.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.19018422, -0.15428329, -0.009354114, 0.04165953, 0.11024837, -0.107493006, -0.05807292, -0.048029456, 0.24319384, -0.10542357, -0.013699952, 0.06228662, -0.06808749, -0.023227982, 0.16528323, -0.05610251) * go_2(1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.008616222, 0.077674195, -0.08638503, 0.09293109, 0.072474636, 0.05004233, -0.20591061, -0.005301386, -0.15486047, 0.15038474, 0.1262478, 0.021724822, 0.02274613, -0.3088281, -0.08437887, -0.10684698) * go_2(1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.16960032, 0.09365251, -0.030414175, -0.010766254, 0.18181023, 0.12130318, 0.08913089, -0.06070321, 0.05200306, 0.092584535, 0.17694671, 0.033796314, -0.038107123, -0.04335955, -0.049443472, 0.30465958) * go_2(1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [102]     result += mat4(0.07661484, -0.009945252, 0.12866217, -0.07592757, -0.21030053, 0.014371748, -0.072458774, -0.04700072, 0.15534303, 0.2007125, -0.15699059, -0.032897495, 0.08110436, -0.11243608, 0.008632577, -0.10153441) * go_3(-1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.034697928, 0.06928288, -0.2796273, 0.14405379, 0.12248569, 0.036539096, 0.06607706, 0.077684596, -0.16473202, 0.1665916, -0.29977503, 0.21047153, 0.13114224, -0.091579035, -0.045458574, 0.03254245) * go_3(-1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.053284872, 0.053366095, -0.26152626, -0.03123967, -0.031794485, 0.17670582, -0.07450994, 0.017521491, -0.040290453, 0.38342363, -0.25021288, -0.014660264, 0.1621895, 0.25041878, -0.12124821, 0.068036206) * go_3(-1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.11366693, -0.030863572, -0.07411263, 0.12475283, -0.046070684, -0.09033321, 0.013222701, 0.06798592, -0.32814804, 0.057653826, -0.14082801, -0.00217398, -0.22856179, -0.19058353, -0.20992154, -0.03701372) * go_3(0.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.20345633, -0.1332355, 0.27152926, -0.13477845, -0.25242096, -0.28281286, 0.31289554, 0.14284514, 0.53362453, -0.46766588, 0.4518293, -0.39291728, -0.3573227, -0.014670052, 0.0051881406, 0.16552156) * go_3(0.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.15017267, -0.07792945, -0.204405, 0.13964304, -0.13642666, -0.10228306, 0.03238279, -0.08689329, -0.072262034, -0.0258388, 0.05689183, 0.055701543, -0.19800112, 0.012217054, -0.033292748, -0.047611095) * go_3(0.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.014704416, -0.12203891, 0.066083655, -0.1409769, 0.0041513643, -0.087383606, -0.17498164, 0.11327789, -0.25947225, -0.0016027623, 0.08202566, 0.042270098, 0.006429511, -0.26576808, -0.08461341, 0.049376782) * go_3(1.0, -1.0);
[   0.748][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.0695189, -0.14753938, 0.09578246, -0.16607563, -0.0105561055, 0.17166016, 0.027422488, -0.14175262, -0.009492696, -0.23449713, 0.018270867, 0.14635146, 0.33451268, 0.030959005, -0.46468422, 0.024256868) * go_3(1.0, 0.0);
[   0.748][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.16865666, -0.00015881563, -0.054488145, -0.06222717, -0.032101758, 0.06485387, -0.0028512608, 0.046645947, 0.017593225, -0.19447896, -0.024742266, 0.03970127, 0.29845607, -0.16168733, 0.035172883, 0.07924657) * go_3(1.0, 1.0);
[   0.748][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.103826486, 0.045373913, 0.11565896, -0.06568643);
[   0.748][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.748][d][vo/gpu-next/libplacebo] [113] }
[   0.748][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.748][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.748][d][vo/gpu-next/libplacebo] [116] return color;
[   0.748][d][vo/gpu-next/libplacebo] [117] }
[   0.748][d][vo/gpu-next/libplacebo] [118] 
[   0.748][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.748][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.748][d][vo/gpu-next/libplacebo] [121] }
[   0.750][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.750][d][vo/gpu-next/libplacebo] Spent 1.842 ms translating GLSL to SPIR-V
[   0.750][d][vo/gpu-next/libplacebo] Spent 0.125 ms translating SPIR-V to HLSL
[   0.751][d][vo/gpu-next/libplacebo] Spent 1.271 ms translating HLSL to DXBC
[   0.751][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.751][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.751][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.751][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.751][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.751][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.751][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.751][d][vo/gpu-next/libplacebo] [  7] 
[   0.751][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.751][d][vo/gpu-next/libplacebo] [  9] {
[   0.751][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.751][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.751][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.751][d][vo/gpu-next/libplacebo] [ 13] };
[   0.751][d][vo/gpu-next/libplacebo] [ 14] 
[   0.751][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.751][d][vo/gpu-next/libplacebo] [ 16] {
[   0.751][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.751][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.751][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.751][d][vo/gpu-next/libplacebo] [ 20] };
[   0.751][d][vo/gpu-next/libplacebo] [ 21] 
[   0.751][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.751][d][vo/gpu-next/libplacebo] [ 23] {
[   0.751][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.751][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.751][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.751][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.751][d][vo/gpu-next/libplacebo] [ 28] }
[   0.751][d][vo/gpu-next/libplacebo] [ 29] 
[   0.751][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.751][d][vo/gpu-next/libplacebo] [ 31] {
[   0.751][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.751][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.751][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.751][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.751][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.751][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.751][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.751][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.751][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.751][d][vo/gpu-next/libplacebo] [ 41] }
[   0.761][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.762][v][vo/gpu-next/libplacebo] Spent 10.096 ms translating GLSL to SPIR-V
[   0.763][d][vo/gpu-next/libplacebo] Spent 1.770 ms translating SPIR-V to HLSL
[   0.789][v][vo/gpu-next/libplacebo] Spent 25.265 ms translating HLSL to DXBC
[   0.789][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.789][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.789][d][vo/gpu-next/libplacebo] [  2] {
[   0.789][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.789][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.789][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.789][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.789][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.789][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.789][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.789][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.789][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.789][d][vo/gpu-next/libplacebo] [ 12] };
[   0.789][d][vo/gpu-next/libplacebo] [ 13] 
[   0.789][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.789][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.789][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.789][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.789][d][vo/gpu-next/libplacebo] [ 18] 
[   0.789][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.789][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.789][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.789][d][vo/gpu-next/libplacebo] [ 22] 
[   0.789][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.789][d][vo/gpu-next/libplacebo] [ 24] {
[   0.789][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.789][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.789][d][vo/gpu-next/libplacebo] [ 27] };
[   0.789][d][vo/gpu-next/libplacebo] [ 28] 
[   0.789][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.789][d][vo/gpu-next/libplacebo] [ 30] {
[   0.789][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.789][d][vo/gpu-next/libplacebo] [ 32] };
[   0.789][d][vo/gpu-next/libplacebo] [ 33] 
[   0.789][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.789][d][vo/gpu-next/libplacebo] [ 35] {
[   0.789][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.789][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.789][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.789][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1510464847087860107421875f, 0.0552286095917224884033203125f, -0.06543409824371337890625f, -0.053517453372478485107421875f), float4(-0.082641236484050750732421875f, -0.006224910728633403778076171875f, -0.20364265143871307373046875f, -0.050151169300079345703125f), float4(-0.18837250769138336181640625f, 0.0306558310985565185546875f, 0.046844713389873504638671875f, -0.20673252642154693603515625f), float4(-0.14042036235332489013671875f, -0.056554488837718963623046875f, 0.13994301855564117431640625f, 0.011745606549084186553955078125f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1651755869388580322265625f, 0.1489214003086090087890625f, -0.09149558842182159423828125f, 0.02500350587069988250732421875f), float4(-0.124926425516605377197265625f, 0.169743478298187255859375f, -0.02085726521909236907958984375f, 0.080174028873443603515625f), float4(0.21836148202419281005859375f, 0.00256193778477609157562255859375f, 0.23316119611263275146484375f, 0.0855991840362548828125f), float4(-0.0309343822300434112548828125f, -0.055194854736328125f, 0.095277257263660430908203125f, -0.10081551969051361083984375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0418002121150493621826171875f, 0.028859637677669525146484375f, 0.093955457210540771484375f, 0.0521118305623531341552734375f), float4(-0.0385414771735668182373046875f, 0.0214952118694782257080078125f, 0.0486234612762928009033203125f, -0.007864792831242084503173828125f), float4(0.038407273590564727783203125f, -0.1384126842021942138671875f, -0.14963801205158233642578125f, 0.264707624912261962890625f), float4(0.16691841185092926025390625f, -0.07262007892131805419921875f, 0.0343743264675140380859375f, -0.14709205925464630126953125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0009497888386249542236328125f, -0.028974704444408416748046875f, -0.090054802596569061279296875f, -0.084019668400287628173828125f), float4(-0.0893593132495880126953125f, -0.043606586754322052001953125f, -0.144971430301666259765625f, -0.052262388169765472412109375f), float4(-0.2151649296283721923828125f, 0.19410602748394012451171875f, -0.089924193918704986572265625f, -0.04335071146488189697265625f), float4(-0.012618276290595531463623046875f, -0.267161309719085693359375f, 0.02042297460138797760009765625f, -0.037739716470241546630859375f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.13403236865997314453125f, -0.0252438299357891082763671875f, -0.034749008715152740478515625f, 0.05443276464939117431640625f), float4(0.11946775019168853759765625f, 0.10733665525913238525390625f, -0.14317150413990020751953125f, -0.133703768253326416015625f), float4(0.015087512321770191192626953125f, -0.19176129996776580810546875f, 0.07349358499050140380859375f, 0.2788855135440826416015625f), float4(-0.010510838590562343597412109375f, 0.068914793431758880615234375f, -0.067413069307804107666015625f, -0.0527120493352413177490234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.15432046353816986083984375f, 0.0402166210114955902099609375f, -0.1697951257228851318359375f, 0.13660533726215362548828125f), float4(-0.105183027684688568115234375f, -0.100955016911029815673828125f, -0.1309206783771514892578125f, 0.02280534803867340087890625f), float4(-0.1667638123035430908203125f, -0.4273298084735870361328125f, 0.02086753584444522857666015625f, 0.3506732881069183349609375f), float4(-0.2945969402790069580078125f, -0.055828742682933807373046875f, -0.06924195587635040283203125f, 0.0410638190805912017822265625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.088901333510875701904296875f, 0.07549665868282318115234375f, -0.0407351441681385040283203125f, -0.15069319307804107666015625f), float4(-0.2222797870635986328125f, -0.076272301375865936279296875f, -0.17766447365283966064453125f, -0.0574131794273853302001953125f), float4(-0.21885682642459869384765625f, 0.237915694713592529296875f, -0.15525853633880615234375f, -0.07306285202503204345703125f), float4(0.15580737590789794921875f, -0.0439406894147396087646484375f, -0.19175608456134796142578125f, 0.01828379742801189422607421875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.085032753646373748779296875f, -0.10550038516521453857421875f, -0.114987395703792572021484375f, -0.07166016101837158203125f), float4(-0.21471379697322845458984375f, 0.093787081539630889892578125f, 0.2455033361911773681640625f, -0.083407498896121978759765625f), float4(-0.0331477858126163482666015625f, -0.02230472676455974578857421875f, -0.310622036457061767578125f, 0.027651973068714141845703125f), float4(0.109098754823207855224609375f, 0.18889032304286956787109375f, 0.116302601993083953857421875f, 0.13863255083560943603515625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1526658833026885986328125f, -0.1490131914615631103515625f, 0.03391678631305694580078125f, 0.09381096065044403076171875f), float4(-0.081964433193206787109375f, -0.161945044994354248046875f, 0.0357894562184810638427734375f, 0.21234898269176483154296875f), float4(-0.487247645854949951171875f, 0.2619442045688629150390625f, -0.11215393245220184326171875f, 0.2506103813648223876953125f), float4(0.02234457619488239288330078125f, 0.01165251247584819793701171875f, 0.111661113798618316650390625f, -0.15242294967174530029296875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0204754583537578582763671875f, 0.079740397632122039794921875f, -0.13576819002628326416015625f, 0.009681670926511287689208984375f), float4(0.030504882335662841796875f, 0.049232907593250274658203125f, 0.0220259167253971099853515625f, 0.1691208779811859130859375f), float4(-0.23914135992527008056640625f, -0.084663324058055877685546875f, 0.0209254510700702667236328125f, -0.102393798530101776123046875f), float4(0.035916872322559356689453125f, -0.075381107628345489501953125f, -0.11470241844654083251953125f, 0.15238516032695770263671875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1294138133525848388671875f, 0.085098989307880401611328125f, -0.02948980219662189483642578125f, -0.09148447215557098388671875f), float4(-0.089406274259090423583984375f, -0.116145454347133636474609375f, -0.089798428118228912353515625f, 0.11908148229122161865234375f), float4(0.1547335088253021240234375f, -0.21687616407871246337890625f, 0.12607012689113616943359375f, -0.08244334161281585693359375f), float4(-0.079580925405025482177734375f, -0.16613088548183441162109375f, -0.092877931892871856689453125f, -0.0341264307498931884765625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0235784985125064849853515625f, 0.07394216954708099365234375f, -0.13069085776805877685546875f, -0.106049902737140655517578125f), float4(-0.0755995810031890869140625f, -0.21839201450347900390625f, 0.109075300395488739013671875f, 0.078787200152873992919921875f), float4(0.076770372688770294189453125f, -0.25998842716217041015625f, 0.200393140316009521484375f, 0.046882212162017822265625f), float4(0.3187101185321807861328125f, -0.304805099964141845703125f, 0.15118990838527679443359375f, -0.005180870182812213897705078125f)));
[   0.789][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.789][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.789][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.15338502824306488037109375f, -0.11057531833648681640625f, 0.07583941519260406494140625f, -0.18592293560504913330078125f), float4(-0.0155324004590511322021484375f, 0.0381403230130672454833984375f, -0.104981936514377593994140625f, 0.0907047688961029052734375f), float4(0.051089920103549957275390625f, -0.04793952405452728271484375f, -0.091004304587841033935546875f, 0.096490047872066497802734375f), float4(-0.10967151820659637451171875f, -0.0519095249474048614501953125f, -0.0531455092132091522216796875f, 0.096615843474864959716796875f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1445880234241485595703125f, -0.0532636940479278564453125f, -0.001088556717149913311004638671875f, 0.23342132568359375f), float4(0.01918937079608440399169921875f, 0.1202614307403564453125f, -0.1569149494171142578125f, 0.3048055469989776611328125f), float4(-0.087258689105510711669921875f, 0.19082252681255340576171875f, 0.3594973087310791015625f, 0.01665389724075794219970703125f), float4(0.0451523363590240478515625f, -0.088590584695339202880859375f, 0.00696559250354766845703125f, 0.1392425000667572021484375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1794488131999969482421875f, -0.1795076429843902587890625f, 0.13282644748687744140625f, 0.030974052846431732177734375f), float4(0.322336852550506591796875f, 0.18067117035388946533203125f, -0.114728130400180816650390625f, 0.097301505506038665771484375f), float4(-0.0476497448980808258056640625f, -0.105386100709438323974609375f, -0.08103938400745391845703125f, 0.0351324342191219329833984375f), float4(0.1020454466342926025390625f, 0.085582554340362548828125f, -0.13153992593288421630859375f, -0.0217411518096923828125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.15573681890964508056640625f, 0.16409988701343536376953125f, -0.22574786841869354248046875f, -0.0387760289013385772705078125f), float4(-0.1828551590442657470703125f, 0.116386450827121734619140625f, 0.183212816715240478515625f, -0.01777021773159503936767578125f), float4(0.18230621516704559326171875f, 0.164333641529083251953125f, -0.12795393168926239013671875f, -0.03805153071880340576171875f), float4(0.14386104047298431396484375f, -0.089152701199054718017578125f, -0.056928284466266632080078125f, -0.10961495339870452880859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.2576220035552978515625f, 0.052519716322422027587890625f, -0.254217624664306640625f, -0.1887381970882415771484375f), float4(-0.083568096160888671875f, -0.0064690276049077510833740234375f, -0.0291106142103672027587890625f, 0.103327505290508270263671875f), float4(-0.17006216943264007568359375f, 0.2254095971584320068359375f, -0.293669044971466064453125f, 0.043028868734836578369140625f), float4(-0.101984463632106781005859375f, -0.24423615634441375732421875f, 0.1678126156330108642578125f, -0.0050190039910376071929931640625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.103393994271755218505859375f, -0.0590446256101131439208984375f, -0.18192382156848907470703125f, 0.099081300199031829833984375f), float4(-0.2614360749721527099609375f, 0.110364742577075958251953125f, 0.04788275063037872314453125f, -0.09673802554607391357421875f), float4(0.1282565295696258544921875f, 0.13631694018840789794921875f, -0.07790498435497283935546875f, -0.02079067565500736236572265625f), float4(-0.2511809766292572021484375f, 0.12258851528167724609375f, -0.0494404733180999755859375f, -0.107582218945026397705078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.06693112850189208984375f, -0.13647174835205078125f, 0.13113899528980255126953125f, 0.1314391791820526123046875f), float4(0.081720434129238128662109375f, 0.11753709614276885986328125f, 0.1538762748241424560546875f, -0.00877136178314685821533203125f), float4(0.08513583242893218994140625f, 0.02379474230110645294189453125f, -0.0661624968051910400390625f, 0.115793935954570770263671875f), float4(0.00233500241301953792572021484375f, 0.02215074934065341949462890625f, -0.0494433008134365081787109375f, -0.0134049765765666961669921875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0414192639291286468505859375f, -0.1762278079986572265625f, 0.02841826714575290679931640625f, 0.121144928038120269775390625f), float4(-0.235870778560638427734375f, 0.084573946893215179443359375f, 0.014364018104970455169677734375f, -0.103271864354610443115234375f), float4(-0.0515722073614597320556640625f, -0.02642444707453250885009765625f, 0.16755054891109466552734375f, -0.107636511325836181640625f), float4(-0.0334405861794948577880859375f, 0.068594254553318023681640625f, -0.0506685040891170501708984375f, 0.194150507450103759765625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.2780180871486663818359375f, 0.037816502153873443603515625f, -0.1151671111583709716796875f, -0.0982288420200347900390625f), float4(0.137623608112335205078125f, -0.1431770622730255126953125f, 0.14350281655788421630859375f, 0.000623894971795380115509033203125f), float4(-0.08601605892181396484375f, 0.081185042858123779296875f, 0.15497384965419769287109375f, -0.047217108309268951416015625f), float4(-0.008936935104429721832275390625f, -0.01422361843287944793701171875f, -0.0964169800281524658203125f, -0.0138842128217220306396484375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.14349664747714996337890625f, -0.031444720923900604248046875f, -0.057813704013824462890625f, 0.066704399883747100830078125f), float4(0.09026093780994415283203125f, 0.0513662360608577728271484375f, 0.111399829387664794921875f, -0.0157821141183376312255859375f), float4(-0.18314015865325927734375f, -0.18774192035198211669921875f, 0.001483824220485985279083251953125f, 0.15759028494358062744140625f), float4(0.0623882152140140533447265625f, 0.136260569095611572265625f, 0.0257621705532073974609375f, -0.0631781518459320068359375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.07151769101619720458984375f, 0.14508990943431854248046875f, 0.17368440330028533935546875f, -0.114877946674823760986328125f), float4(-0.079998053610324859619140625f, -0.077979080379009246826171875f, 0.0379233546555042266845703125f, -0.0591388233006000518798828125f), float4(-0.23531208932399749755859375f, -0.0402072928845882415771484375f, -0.06835569441318511962890625f, -0.02429665811359882354736328125f), float4(-0.114820174872875213623046875f, 0.19726486504077911376953125f, 0.217724144458770751953125f, 0.0365922190248966217041015625f)));
[   0.789][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.16858695447444915771484375f, -0.121351130306720733642578125f, 0.009391182102262973785400390625f, -0.08151948451995849609375f), float4(0.13340486586093902587890625f, 0.07007004320621490478515625f, 0.094124354422092437744140625f, 0.0355198420584201812744140625f), float4(-0.332013905048370361328125f, -0.066240273416042327880859375f, -0.1471622884273529052734375f, -0.092052869498729705810546875f), float4(0.12664131820201873779296875f, -0.0565544106066226959228515625f, 0.01232637651264667510986328125f, 0.046412788331508636474609375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.19018422067165374755859375f, -0.1542832851409912109375f, -0.009354113601148128509521484375f, 0.0416595302522182464599609375f), float4(0.11024837195873260498046875f, -0.107493005692958831787109375f, -0.0580729208886623382568359375f, -0.0480294562876224517822265625f), float4(0.2431938350200653076171875f, -0.10542356967926025390625f, -0.013699951581656932830810546875f, 0.0622866190969944000244140625f), float4(-0.0680874884128570556640625f, -0.023227982223033905029296875f, 0.1652832329273223876953125f, -0.0561025105416774749755859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.00861622206866741180419921875f, 0.07767419517040252685546875f, -0.08638502657413482666015625f, 0.092931091785430908203125f), float4(0.072474636137485504150390625f, 0.050042331218719482421875f, -0.20591060817241668701171875f, -0.0053013861179351806640625f), float4(-0.1548604667186737060546875f, 0.15038473904132843017578125f, 0.1262477934360504150390625f, 0.02172482199966907501220703125f), float4(0.02274613082408905029296875f, -0.3088280856609344482421875f, -0.0843788683414459228515625f, -0.106846980750560760498046875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.16960032284259796142578125f, 0.093652509152889251708984375f, -0.0304141752421855926513671875f, -0.010766253806650638580322265625f), float4(0.1818102300167083740234375f, 0.121303178369998931884765625f, 0.08913089334964752197265625f, -0.060703210532665252685546875f), float4(0.0520030595362186431884765625f, 0.09258453547954559326171875f, 0.17694671452045440673828125f, 0.0337963141500949859619140625f), float4(-0.0381071232259273529052734375f, -0.0433595515787601470947265625f, -0.0494434721767902374267578125f, 0.3046595752239227294921875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.07661484181880950927734375f, -0.009945251978933811187744140625f, 0.128662168979644775390625f, -0.07592757046222686767578125f), float4(-0.2103005349636077880859375f, 0.014371748082339763641357421875f, -0.0724587738513946533203125f, -0.04700072109699249267578125f), float4(0.1553430259227752685546875f, 0.200712502002716064453125f, -0.156990587711334228515625f, -0.032897494733333587646484375f), float4(0.081104360520839691162109375f, -0.112436078488826751708984375f, 0.008632577024400234222412109375f, -0.10153441131114959716796875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.034697927534580230712890625f, 0.069282881915569305419921875f, -0.2796272933483123779296875f, 0.1440537869930267333984375f), float4(0.122485689818859100341796875f, 0.0365390963852405548095703125f, 0.066077060997486114501953125f, 0.07768459618091583251953125f), float4(-0.16473202407360076904296875f, 0.16659159958362579345703125f, -0.2997750341892242431640625f, 0.21047152578830718994140625f), float4(0.13114224374294281005859375f, -0.09157903492450714111328125f, -0.0454585738480091094970703125f, 0.0325424484908580780029296875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0532848723232746124267578125f, 0.0533660948276519775390625f, -0.2615262567996978759765625f, -0.0312396697700023651123046875f), float4(-0.0317944847047328948974609375f, 0.17670582234859466552734375f, -0.074509941041469573974609375f, 0.01752149127423763275146484375f), float4(-0.040290452539920806884765625f, 0.383423626422882080078125f, -0.2502128779888153076171875f, -0.014660264365375041961669921875f), float4(0.16218949854373931884765625f, 0.25041878223419189453125f, -0.121248207986354827880859375f, 0.068036206066608428955078125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.113666929304599761962890625f, -0.0308635719120502471923828125f, -0.074112631380558013916015625f, 0.124752826988697052001953125f), float4(-0.0460706837475299835205078125f, -0.09033320844173431396484375f, 0.013222700916230678558349609375f, 0.0679859220981597900390625f), float4(-0.3281480371952056884765625f, 0.0576538257300853729248046875f, -0.14082801342010498046875f, -0.00217397999949753284454345703125f), float4(-0.2285617887973785400390625f, -0.190583527088165283203125f, -0.209921538829803466796875f, -0.0370137207210063934326171875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.20345632731914520263671875f, -0.13323549926280975341796875f, 0.271529257297515869140625f, -0.13477845489978790283203125f), float4(-0.252420961856842041015625f, -0.2828128635883331298828125f, 0.3128955364227294921875f, 0.14284513890743255615234375f), float4(0.53362452983856201171875f, -0.4676658809185028076171875f, 0.45182931423187255859375f, -0.39291727542877197265625f), float4(-0.35732269287109375f, -0.014670051634311676025390625f, 0.0051881405524909496307373046875f, 0.165521562099456787109375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.15017266571521759033203125f, -0.07792945206165313720703125f, -0.20440499484539031982421875f, 0.1396430432796478271484375f), float4(-0.1364266574382781982421875f, -0.102283060550689697265625f, 0.0323827899992465972900390625f, -0.0868932902812957763671875f), float4(-0.07226203382015228271484375f, -0.025838799774646759033203125f, 0.0568918287754058837890625f, 0.0557015426456928253173828125f), float4(-0.1980011165142059326171875f, 0.01221705414354801177978515625f, -0.033292748034000396728515625f, -0.047611095011234283447265625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01470441557466983795166015625f, -0.122038908302783966064453125f, 0.06608365476131439208984375f, -0.14097690582275390625f), float4(0.0041513643227517604827880859375f, -0.087383605539798736572265625f, -0.17498163878917694091796875f, 0.113277889788150787353515625f), float4(-0.25947225093841552734375f, -0.001602762262336909770965576171875f, 0.08202566206455230712890625f, 0.0422700978815555572509765625f), float4(0.006429511122405529022216796875f, -0.2657680809497833251953125f, -0.0846134126186370849609375f, 0.0493767820298671722412109375f)));
[   0.789][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.069518901407718658447265625f, -0.1475393772125244140625f, 0.095782458782196044921875f, -0.16607563197612762451171875f), float4(-0.0105561055243015289306640625f, 0.1716601550579071044921875f, 0.027422487735748291015625f, -0.14175261557102203369140625f), float4(-0.009492696262896060943603515625f, -0.234497129917144775390625f, 0.01827086694538593292236328125f, 0.14635145664215087890625f), float4(0.3345126807689666748046875f, 0.03095900453627109527587890625f, -0.4646842181682586669921875f, 0.02425686828792095184326171875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.16865666210651397705078125f, -0.00015881563012953847646713256835938f, -0.054488144814968109130859375f, -0.0622271709144115447998046875f), float4(-0.032101757824420928955078125f, 0.064853869378566741943359375f, -0.00285126082599163055419921875f, 0.046645946800708770751953125f), float4(0.01759322546422481536865234375f, -0.1944789588451385498046875f, -0.02474226616322994232177734375f, 0.0397012718021869659423828125f), float4(0.29845607280731201171875f, -0.16168732941150665283203125f, 0.0351728834211826324462890625f, 0.079246573150157928466796875f)))) + float4(0.103826485574245452880859375f, 0.0453739129006862640380859375f, 0.115658961236476898193359375f, -0.065686427056789398193359375f);
[   0.789][d][vo/gpu-next/libplacebo] [ 56] }
[   0.789][d][vo/gpu-next/libplacebo] [ 57] 
[   0.789][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.789][d][vo/gpu-next/libplacebo] [ 59] {
[   0.789][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.789][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.789][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.789][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.789][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.789][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.789][d][vo/gpu-next/libplacebo] [ 66] }
[   0.791][d][vo/gpu-next] cache_save_obj: key(421715bf792bd2b3), size(11845), save time(2.559 ms)
[   0.792][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.792][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.792][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.792][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.792][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.792][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.792][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.792][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.792][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.792][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.792][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.792][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.792][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.792][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.792][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.792][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.792][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.792][d][vo/gpu-next/libplacebo] [ 16] };
[   0.792][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.792][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.792][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.792][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.792][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.792][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.792][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.792][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.792][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.792][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.792][d][vo/gpu-next/libplacebo] [ 27] }
[   0.792][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.792][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.792][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.792][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.792][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.792][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.792][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.792][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.792][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.792][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.792][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.792][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.792][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.792][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.792][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.792][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.792][d][vo/gpu-next/libplacebo] [ 16] };
[   0.792][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.792][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.792][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.792][d][vo/gpu-next/libplacebo] [ 20] 
[   0.792][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_2_tf_raw _2 
[   0.792][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_2_tf_pos _3 
[   0.792][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_2_tf_map _3_map 
[   0.792][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_2_tf_size vec2(textureSize(_2, 0)) 
[   0.792][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_2_tf_pt _4 
[   0.792][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_2_tf_off _5 
[   0.792][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.792][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_2_tf_mul _6 
[   0.792][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_2_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.792][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_2_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.792][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_2_tf_texOff(off) (conv2d_2_tf_tex(_3 + _4 * vec2(off))) 
[   0.792][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_2_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.792][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_2_tf1_raw _7 
[   0.792][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_2_tf1_pos _8 
[   0.792][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_2_tf1_map _8_map 
[   0.792][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_2_tf1_size vec2(textureSize(_7, 0)) 
[   0.792][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_2_tf1_pt _9 
[   0.792][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_2_tf1_off _a 
[   0.792][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.792][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_2_tf1_mul _b 
[   0.792][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_2_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.792][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_2_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.792][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_2_tf1_texOff(off) (conv2d_2_tf1_tex(_8 + _9 * vec2(off))) 
[   0.792][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_2_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.792][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.792][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.792][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.792][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.792][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.792][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.792][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.792][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.792][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.792][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.792][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.792][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.792][d][vo/gpu-next/libplacebo] [ 57] }
[   0.792][d][vo/gpu-next/libplacebo] [ 58] 
[   0.792][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.792][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.792][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.792][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.792][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.792][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.792][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.792][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.792][d][vo/gpu-next/libplacebo] [ 67] }
[   0.792][d][vo/gpu-next/libplacebo] [ 68] 
[   0.792][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.792][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.792][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.792][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.792][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.792][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.792][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(0.1851775, 0.053705044, 0.033816848, -0.018555025, -0.21204336, -0.01706974, 0.088259794, -0.13126148, 0.10729598, -0.043457437, 0.08634712, 0.09220895, 0.062131613, -0.01995871, 0.05181067, 0.18520063) * go_0(-1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(0.1662002, -0.14197104, -0.052809287, 0.025287712, -0.08330898, -0.08998097, -0.15642618, -0.14941245, -0.03481203, 0.061857622, 0.26051775, -0.0005498248, 0.086427025, 0.024108192, -0.12418039, 0.022286376) * go_0(-1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.058200672, -0.3073398, 0.17150162, -0.13394679, -0.075118184, -0.14607768, -0.006172172, 0.007731589, -0.21818224, -0.06449433, -0.038958784, 0.037722416, 0.28699976, -0.027563032, 0.23295315, 0.028444216) * go_0(-1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.12871371, 0.0064904913, 0.14985761, -0.10923005, 0.17413563, 0.1599109, -0.08457703, 0.108153716, -0.08871187, -0.06661137, 0.2754416, -0.009667768, 0.39819396, 0.12392097, 0.14145902, 0.0019376524) * go_0(0.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(0.13893189, 0.12715353, 0.015191678, -0.21003054, -0.030412354, -0.01676613, -0.19799289, -0.006130075, 0.37676954, -0.14475077, -0.2065198, -0.30432892, -0.14944535, -0.09121536, -0.107600585, -0.24462196) * go_0(0.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.11653076, -0.0068671284, -0.02249137, -0.17877012, -0.15063138, -0.13514869, 0.107643366, -0.03196477, -0.086422764, 0.3079287, 0.17584166, -0.032449376, -0.06917114, -0.2682637, -0.18978168, -0.037039287) * go_0(0.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.12014731, -0.030360512, -0.12954475, -0.110275604, -0.077214256, 0.019689744, 0.22149551, -0.002266716, 0.09697784, -0.124532826, -0.16776511, -0.034212478, -0.36935154, 0.016926935, 0.1363609, 0.20415346) * go_0(1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.11199535, -0.001692563, -0.09058429, -0.08437503, 0.092625685, 0.06046257, 0.25509837, -0.011657033, -0.17949764, -0.10718947, -0.1180669, -0.24681842, -0.1747311, 0.0014518246, -0.042863015, 0.06103357) * go_0(1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.14979295, -0.037154514, 0.01957725, 0.012282435, 0.09168596, -0.05552286, 0.111671515, 0.0078630615, -0.10319766, -0.06416261, -0.23097566, -0.13931875, 0.2110811, 0.013095802, -0.2306504, -0.025639111) * go_0(1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.10091975, -0.10095426, -0.023449723, -0.022170888, 0.054953706, -0.13049407, 0.08289061, 0.023241632, 0.08735388, -0.0058387457, 0.17897247, 0.011434436, 0.008181139, -0.0034718404, -0.015372735, -0.07657766) * go_1(-1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.023442164, 0.07535702, 0.024391165, -0.050532013, 0.044168636, 0.0062343236, -0.019756999, -0.009695123, 0.10102337, 0.0052776975, -0.14944167, -0.060957722, 0.24367364, -0.08069369, 0.12170072, -0.047048368) * go_1(-1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.18376935, -0.08407229, -0.12943378, 0.0738419, -0.12404976, -0.13367929, 0.11265896, -0.021353, 0.003783386, 0.50088304, 0.14058582, 0.041053623, 0.038247623, -0.014179976, 0.007905778, -0.042492237) * go_1(-1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.046272535, 0.052449115, 0.17190954, -0.004745371, -0.045572635, -0.09292636, 0.36309823, 0.16673928, -0.099154025, -0.109614775, 0.17803112, 0.19907133, -0.14306267, 0.06898593, 0.11493454, 0.06795014) * go_1(0.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(0.26181114, -0.044014625, -0.21605036, -0.08646438, 0.21038742, -0.084986, 0.0504626, 0.17514943, -0.25218952, -0.18691514, 0.057650108, 0.08653614, -0.101205684, 0.03176334, 0.18569492, 0.17973189) * go_1(0.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.0339215, 0.20112811, -0.12986277, 0.028961731, -0.056813832, 0.04451147, -0.07827432, -0.0860976, 0.096853435, 0.3483546, -0.35758162, -0.11749375, -0.035918653, 0.06140711, -0.08520154, 0.02418808) * go_1(0.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.09643022, -0.10491069, 0.0068604187, 0.023679713, 0.096521445, -0.29323488, 0.33353668, 0.112864286, -0.1172182, -0.07233183, 0.06607239, 0.08589609, 0.055790007, 0.14396138, -0.14191268, 0.00034840964) * go_1(1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.15357164, -0.038462736, 0.08143956, 0.1744909, 0.40503287, -0.114508316, 0.003937322, 0.2536635, -0.042445306, -0.15622465, 0.09155284, 0.010992155, -0.20646071, 0.022801135, 0.08894491, 0.069300614) * go_1(1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.12663515, 0.023849454, -0.053604446, 0.12082873, -0.247968, -0.020969635, -0.03831894, -0.014617553, 0.22630337, 0.037801865, 0.052950703, 0.04285706, -0.14487264, 0.20786528, -0.08719664, 0.1752347) * go_1(1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.073527604, -0.050752833, 0.051830504, 0.32868716, 0.17474994, 0.016937364, -0.08792601, -0.024481766, -0.022229593, 0.030706186, 0.09213566, -0.076506205, 0.073404044, 0.10368055, -0.175889, -0.08453031) * go_2(-1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.06838216, 0.007698341, 0.063972116, -0.015604406, 0.16135305, 0.18044342, 0.024137018, -0.23326185, 0.13235588, -0.009096587, -0.058368143, -0.077040404, 0.0011419816, -0.09246194, 0.061036937, 0.049564146) * go_2(-1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.023225296, -0.00060856267, -0.07775185, 0.016958566, -0.2641349, -0.08263046, -0.15350416, -0.30203494, 0.113956556, -0.010813236, -0.017738314, -0.13689043, -0.10318342, 0.025793184, -0.010336172, 0.09733422) * go_2(-1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.04462596, 0.052866418, -0.34754288, 0.05540498, -0.24492586, -0.32016864, 0.18145293, 0.24873725, 0.32388234, -0.034801524, -0.1347588, -0.07565546, 0.015183539, 0.05059595, 0.08090056, 0.05930932) * go_2(0.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.045346696, -0.052527856, 0.052270077, 0.13417454, 0.05200045, 0.028119288, 0.005115497, 0.22952151, -0.2158375, 0.12241308, 0.3507457, 0.08616576, 0.07592416, 0.28470486, 0.3432788, 0.24857087) * go_2(0.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.21311626, 0.052607164, 0.1248861, 0.20193806, 0.045226507, 0.14512901, -0.15103437, -0.17926466, 0.11657411, -0.32711068, -0.16332194, -0.07793982, -0.21802668, 0.5183869, -0.13567342, 0.07823041) * go_2(0.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.00796368, 0.048073012, -0.14537893, -0.021708772, 0.036246423, 0.1062395, 0.12605369, 0.007073524, -0.1572743, 0.07439501, 0.089162275, -0.0039608316, 0.332032, -0.05461242, -0.17615359, -0.10240517) * go_2(1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.20636982, -0.0024615112, -0.10625786, 0.024270926, 0.061810836, -0.13585201, -0.16581286, 0.23549418, 0.01928842, 0.07404979, -0.054449487, 0.04096373, 0.046939734, 0.003980803, 0.02111498, 0.064925276) * go_2(1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.10485388, 0.06850885, -0.11292169, 0.16991565, -0.15282536, 0.124175504, -0.050431166, -0.06689582, -0.00059811946, 0.033696912, 0.11055047, 0.033060126, -0.17472714, 0.0048819613, -0.04478706, -0.1344572) * go_2(1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.20473132, 0.056477875, 0.059559986, 0.115130566, -0.058425788, -0.035971727, 0.08334707, -0.096510135, -0.23206294, 0.10635798, -0.21575621, -0.07063254, 0.03877511, -0.107549034, 0.22248401, 0.21702304) * go_3(-1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.02557767, 0.09886609, -0.100499466, 0.16687396, -0.084830604, 0.03150401, -0.049512494, 0.05595696, -0.13193256, -0.08585273, 0.14247662, 0.12290477, -0.07168309, 0.14531752, -0.048359327, 0.27716598) * go_3(-1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.13297586, 0.20674329, 0.14469388, 0.08981846, -0.004231366, -0.02819193, 0.15470329, 0.17299837, 0.113062344, -0.22716297, -0.21754944, -0.00083956274, -0.14160508, 0.1808253, 0.11268379, 0.27335623) * go_3(-1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.07497518, -0.06799594, -0.018158078, -0.00038999433, -0.15169668, -0.06928238, -0.33672288, -0.105485775, 0.33106267, 0.06698315, 0.019718744, -0.06810211, -0.35186404, -0.29145968, -0.056863394, 0.21498048) * go_3(0.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.013215512, -0.24763754, 0.20965266, 0.1068435, -0.13234195, 0.053566497, 0.05061848, -0.28645232, 0.15518288, 0.23247199, 0.017553907, -0.25181335, -0.048030723, -0.06663929, -0.111026704, -0.12663394) * go_3(0.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.010501938, -0.17995767, 0.06010859, 0.050185587, 0.108627126, -0.101203434, 0.07558728, 0.060466755, -0.106942676, -0.35854608, 0.16015992, 0.16823332, -0.06543775, -0.37310675, 0.014043972, -0.18328045) * go_3(0.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.09712849, 0.013983463, 0.07291423, 0.031715546, 0.030862397, 0.045510456, -0.22066842, 0.063464865, 0.11721659, -0.10596602, -0.20611264, 0.052158818, -0.3961766, -0.03781582, 0.17633812, 0.1316111) * go_3(1.0, -1.0);
[   0.792][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.25029674, 0.07153423, -0.35125682, -0.18255402, -0.19569087, 0.00432772, -0.0969035, -0.24648514, -0.0040922165, 0.037500706, -0.038137026, 0.056214277, -0.048258524, 0.03567822, -0.05033007, -0.24696785) * go_3(1.0, 0.0);
[   0.792][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.03465209, -0.012495964, 0.22782089, 0.012034795, 0.2916752, 0.08264436, 0.15387125, -0.1473455, -0.15614432, 0.05536727, -0.027079755, 0.010725311, -0.03325222, -0.089212805, -0.10559839, -0.19647683) * go_3(1.0, 1.0);
[   0.792][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.0001705175, -0.031081453, 0.010100773, -0.027214011);
[   0.792][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.792][d][vo/gpu-next/libplacebo] [113] }
[   0.792][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.792][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.792][d][vo/gpu-next/libplacebo] [116] return color;
[   0.792][d][vo/gpu-next/libplacebo] [117] }
[   0.792][d][vo/gpu-next/libplacebo] [118] 
[   0.792][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.792][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.792][d][vo/gpu-next/libplacebo] [121] }
[   0.794][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.794][d][vo/gpu-next/libplacebo] Spent 1.404 ms translating GLSL to SPIR-V
[   0.794][d][vo/gpu-next/libplacebo] Spent 0.113 ms translating SPIR-V to HLSL
[   0.795][d][vo/gpu-next/libplacebo] Spent 1.214 ms translating HLSL to DXBC
[   0.795][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.795][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.795][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.795][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.795][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.795][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.795][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.795][d][vo/gpu-next/libplacebo] [  7] 
[   0.795][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.795][d][vo/gpu-next/libplacebo] [  9] {
[   0.795][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.795][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.795][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.795][d][vo/gpu-next/libplacebo] [ 13] };
[   0.795][d][vo/gpu-next/libplacebo] [ 14] 
[   0.795][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.795][d][vo/gpu-next/libplacebo] [ 16] {
[   0.795][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.795][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.795][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.795][d][vo/gpu-next/libplacebo] [ 20] };
[   0.795][d][vo/gpu-next/libplacebo] [ 21] 
[   0.795][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.795][d][vo/gpu-next/libplacebo] [ 23] {
[   0.795][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.795][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.795][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.795][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.795][d][vo/gpu-next/libplacebo] [ 28] }
[   0.795][d][vo/gpu-next/libplacebo] [ 29] 
[   0.795][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.795][d][vo/gpu-next/libplacebo] [ 31] {
[   0.795][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.795][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.795][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.795][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.795][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.795][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.795][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.795][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.795][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.795][d][vo/gpu-next/libplacebo] [ 41] }
[   0.806][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.806][v][vo/gpu-next/libplacebo] Spent 10.569 ms translating GLSL to SPIR-V
[   0.807][d][vo/gpu-next/libplacebo] Spent 1.672 ms translating SPIR-V to HLSL
[   0.834][v][vo/gpu-next/libplacebo] Spent 27.190 ms translating HLSL to DXBC
[   0.834][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.834][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.834][d][vo/gpu-next/libplacebo] [  2] {
[   0.834][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.834][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.834][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.834][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.834][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.834][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.834][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.834][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.834][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.834][d][vo/gpu-next/libplacebo] [ 12] };
[   0.835][d][vo/gpu-next/libplacebo] [ 13] 
[   0.835][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.835][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.835][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.835][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.835][d][vo/gpu-next/libplacebo] [ 18] 
[   0.835][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.835][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.835][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.835][d][vo/gpu-next/libplacebo] [ 22] 
[   0.835][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.835][d][vo/gpu-next/libplacebo] [ 24] {
[   0.835][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.835][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.835][d][vo/gpu-next/libplacebo] [ 27] };
[   0.835][d][vo/gpu-next/libplacebo] [ 28] 
[   0.835][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.835][d][vo/gpu-next/libplacebo] [ 30] {
[   0.835][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.835][d][vo/gpu-next/libplacebo] [ 32] };
[   0.835][d][vo/gpu-next/libplacebo] [ 33] 
[   0.835][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.835][d][vo/gpu-next/libplacebo] [ 35] {
[   0.835][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.835][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.835][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.835][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.185177505016326904296875f, 0.053705044090747833251953125f, 0.0338168479502201080322265625f, -0.01855502463877201080322265625f), float4(-0.21204335987567901611328125f, -0.01706974022090435028076171875f, 0.088259793817996978759765625f, -0.13126148283481597900390625f), float4(0.107295982539653778076171875f, -0.0434574373066425323486328125f, 0.08634711802005767822265625f, 0.0922089517116546630859375f), float4(0.0621316134929656982421875f, -0.01995871029794216156005859375f, 0.0518106706440448760986328125f, 0.185200631618499755859375f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.16620020568370819091796875f, -0.14197103679180145263671875f, -0.0528092868626117706298828125f, 0.02528771199285984039306640625f), float4(-0.08330897986888885498046875f, -0.089980967342853546142578125f, -0.15642617642879486083984375f, -0.149412453174591064453125f), float4(-0.0348120294511318206787109375f, 0.0618576221168041229248046875f, 0.2605177462100982666015625f, -0.000549824791960418224334716796875f), float4(0.086427025496959686279296875f, 0.02410819195210933685302734375f, -0.12418039143085479736328125f, 0.02228637598454952239990234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.05820067226886749267578125f, -0.30733978748321533203125f, 0.17150162160396575927734375f, -0.13394679129123687744140625f), float4(-0.07511818408966064453125f, -0.14607767760753631591796875f, -0.006172171793878078460693359375f, 0.0077315890230238437652587890625f), float4(-0.2181822359561920166015625f, -0.06449432671070098876953125f, -0.0389587841928005218505859375f, 0.037722416222095489501953125f), float4(0.286999762058258056640625f, -0.0275630317628383636474609375f, 0.23295314610004425048828125f, 0.02844421565532684326171875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.12871371209621429443359375f, 0.006490491330623626708984375f, 0.1498576104640960693359375f, -0.109230048954486846923828125f), float4(0.174135625362396240234375f, 0.15991090238094329833984375f, -0.084577031433582305908203125f, 0.10815371572971343994140625f), float4(-0.08871187269687652587890625f, -0.066611371934413909912109375f, 0.275441586971282958984375f, -0.009667768143117427825927734375f), float4(0.39819395542144775390625f, 0.123920969665050506591796875f, 0.1414590179920196533203125f, 0.001937652355991303920745849609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.13893188536167144775390625f, 0.12715353071689605712890625f, 0.0151916779577732086181640625f, -0.21003054082393646240234375f), float4(-0.030412353575229644775390625f, -0.016766130924224853515625f, -0.1979928910732269287109375f, -0.00613007508218288421630859375f), float4(0.376769542694091796875f, -0.144750773906707763671875f, -0.20651979744434356689453125f, -0.30432891845703125f), float4(-0.149445354938507080078125f, -0.09121535718441009521484375f, -0.10760058462619781494140625f, -0.2446219623088836669921875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.11653076112270355224609375f, -0.006867128424346446990966796875f, -0.0224913693964481353759765625f, -0.178770124912261962890625f), float4(-0.15063138306140899658203125f, -0.13514868915081024169921875f, 0.1076433658599853515625f, -0.031964771449565887451171875f), float4(-0.086422763764858245849609375f, 0.3079287111759185791015625f, 0.1758416593074798583984375f, -0.0324493758380413055419921875f), float4(-0.069171138107776641845703125f, -0.26826369762420654296875f, -0.18978168070316314697265625f, -0.037039287388324737548828125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.120147310197353363037109375f, -0.030360512435436248779296875f, -0.12954474985599517822265625f, -0.110275603830814361572265625f), float4(-0.07721425592899322509765625f, 0.01968974433839321136474609375f, 0.22149550914764404296875f, -0.00226671597920358180999755859375f), float4(0.096977837383747100830078125f, -0.124532826244831085205078125f, -0.1677651107311248779296875f, -0.034212477505207061767578125f), float4(-0.3693515360355377197265625f, 0.01692693494260311126708984375f, 0.13636089861392974853515625f, 0.20415346324443817138671875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.111995346844196319580078125f, -0.001692562946118414402008056640625f, -0.09058429300785064697265625f, -0.084375031292438507080078125f), float4(0.092625685036182403564453125f, 0.060462571680545806884765625f, 0.2550983726978302001953125f, -0.0116570331156253814697265625f), float4(-0.17949764430522918701171875f, -0.107189469039440155029296875f, -0.118066899478435516357421875f, -0.24681842327117919921875f), float4(-0.1747311055660247802734375f, 0.00145182455889880657196044921875f, -0.0428630150854587554931640625f, 0.061033569276332855224609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.14979295432567596435546875f, -0.0371545143425464630126953125f, 0.01957724988460540771484375f, 0.0122824348509311676025390625f), float4(0.091685958206653594970703125f, -0.055522859096527099609375f, 0.111671514809131622314453125f, 0.00786306150257587432861328125f), float4(-0.103197656571865081787109375f, -0.06416261196136474609375f, -0.2309756577014923095703125f, -0.13931874930858612060546875f), float4(0.21108110249042510986328125f, 0.01309580169618129730224609375f, -0.2306503951549530029296875f, -0.02563911117613315582275390625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1009197533130645751953125f, -0.100954256951808929443359375f, -0.0234497226774692535400390625f, -0.02217088826000690460205078125f), float4(0.0549537055194377899169921875f, -0.13049407303333282470703125f, 0.082890607416629791259765625f, 0.023241631686687469482421875f), float4(0.087353877723217010498046875f, -0.0058387457393109798431396484375f, 0.17897246778011322021484375f, 0.01143443584442138671875f), float4(0.008181138895452022552490234375f, -0.00347184040583670139312744140625f, -0.015372735448181629180908203125f, -0.076577663421630859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02344216406345367431640625f, 0.075357019901275634765625f, 0.02439116500318050384521484375f, -0.0505320131778717041015625f), float4(0.04416863620281219482421875f, 0.00623432360589504241943359375f, -0.0197569988667964935302734375f, -0.009695122949779033660888671875f), float4(0.101023368537425994873046875f, 0.0052776974625885486602783203125f, -0.14944167435169219970703125f, -0.060957722365856170654296875f), float4(0.24367363750934600830078125f, -0.0806936919689178466796875f, 0.12170071899890899658203125f, -0.047048367559909820556640625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.18376934528350830078125f, -0.084072291851043701171875f, -0.1294337809085845947265625f, 0.0738418996334075927734375f), float4(-0.124049760401248931884765625f, -0.13367928564548492431640625f, 0.11265896260738372802734375f, -0.02135300077497959136962890625f), float4(0.00378338596783578395843505859375f, 0.500883042812347412109375f, 0.14058582484722137451171875f, 0.0410536229610443115234375f), float4(0.038247622549533843994140625f, -0.014179975725710391998291015625f, 0.0079057775437831878662109375f, -0.0424922369420528411865234375f)));
[   0.835][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.835][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.835][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0462725348770618438720703125f, 0.052449114620685577392578125f, 0.1719095408916473388671875f, -0.0047453711740672588348388671875f), float4(-0.0455726347863674163818359375f, -0.092926360666751861572265625f, 0.3630982339382171630859375f, 0.166739284992218017578125f), float4(-0.0991540253162384033203125f, -0.10961477458477020263671875f, 0.1780311167240142822265625f, 0.19907133281230926513671875f), float4(-0.14306266605854034423828125f, 0.068985931575298309326171875f, 0.114934541285037994384765625f, 0.067950136959552764892578125f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.26181113719940185546875f, -0.044014625251293182373046875f, -0.2160503566265106201171875f, -0.086464382708072662353515625f), float4(0.21038742363452911376953125f, -0.0849860012531280517578125f, 0.0504625998437404632568359375f, 0.17514942586421966552734375f), float4(-0.25218951702117919921875f, -0.18691514432430267333984375f, 0.0576501078903675079345703125f, 0.0865361392498016357421875f), float4(-0.101205684244632720947265625f, 0.0317633412778377532958984375f, 0.18569491803646087646484375f, 0.17973189055919647216796875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0339214988052845001220703125f, 0.20112811028957366943359375f, -0.12986277043819427490234375f, 0.02896173112094402313232421875f), float4(-0.0568138323724269866943359375f, 0.0445114709436893463134765625f, -0.078274317085742950439453125f, -0.08609759807586669921875f), float4(0.096853435039520263671875f, 0.3483546078205108642578125f, -0.357581615447998046875f, -0.11749374866485595703125f), float4(-0.035918653011322021484375f, 0.061407111585140228271484375f, -0.085201539099216461181640625f, 0.02418808080255985260009765625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.096430219709873199462890625f, -0.10491068661212921142578125f, 0.0068604187108576297760009765625f, 0.02367971278727054595947265625f), float4(0.096521444618701934814453125f, -0.293234884738922119140625f, 0.333536684513092041015625f, 0.1128642857074737548828125f), float4(-0.117218196392059326171875f, -0.07233183085918426513671875f, 0.06607238948345184326171875f, 0.08589608967304229736328125f), float4(0.055790007114410400390625f, 0.14396138489246368408203125f, -0.14191268384456634521484375f, 0.00034840963780879974365234375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1535716354846954345703125f, -0.038462735712528228759765625f, 0.081439562141895294189453125f, 0.1744908988475799560546875f), float4(0.4050328731536865234375f, -0.11450831592082977294921875f, 0.0039373221807181835174560546875f, 0.2536635100841522216796875f), float4(-0.0424453057348728179931640625f, -0.15622465312480926513671875f, 0.09155283868312835693359375f, 0.010992155410349369049072265625f), float4(-0.2064607143402099609375f, 0.0228011347353458404541015625f, 0.088944911956787109375f, 0.069300614297389984130859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.12663514912128448486328125f, 0.0238494537770748138427734375f, -0.053604446351528167724609375f, 0.12082873284816741943359375f), float4(-0.24796800315380096435546875f, -0.02096963487565517425537109375f, -0.038318939507007598876953125f, -0.01461755298078060150146484375f), float4(0.2263033688068389892578125f, 0.0378018654882907867431640625f, 0.052950702607631683349609375f, 0.042857058346271514892578125f), float4(-0.1448726356029510498046875f, 0.20786528289318084716796875f, -0.087196640670299530029296875f, 0.1752347052097320556640625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0735276043415069580078125f, -0.05075283348560333251953125f, 0.0518305040895938873291015625f, 0.3286871612071990966796875f), float4(0.1747499406337738037109375f, 0.0169373638927936553955078125f, -0.087926007807254791259765625f, -0.024481765925884246826171875f), float4(-0.0222295932471752166748046875f, 0.0307061858475208282470703125f, 0.092135660350322723388671875f, -0.076506204903125762939453125f), float4(0.0734040439128875732421875f, 0.103680551052093505859375f, -0.17588900029659271240234375f, -0.08453030884265899658203125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.06838215887546539306640625f, 0.0076983408071100711822509765625f, 0.06397211551666259765625f, -0.015604405663907527923583984375f), float4(0.161353051662445068359375f, 0.18044342100620269775390625f, 0.02413701824843883514404296875f, -0.2332618534564971923828125f), float4(0.13235588371753692626953125f, -0.00909658707678318023681640625f, -0.0583681426942348480224609375f, -0.0770404040813446044921875f), float4(0.001141981570981442928314208984375f, -0.09246194362640380859375f, 0.061036936938762664794921875f, 0.049564145505428314208984375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0232252962887287139892578125f, -0.0006085626664571464061737060546875f, -0.077751852571964263916015625f, 0.01695856638252735137939453125f), float4(-0.2641349136829376220703125f, -0.082630462944507598876953125f, -0.1535041630268096923828125f, -0.3020349442958831787109375f), float4(0.11395655572414398193359375f, -0.010813236236572265625f, -0.01773831434547901153564453125f, -0.13689042627811431884765625f), float4(-0.1031834185123443603515625f, 0.0257931835949420928955078125f, -0.0103361718356609344482421875f, 0.09733422100543975830078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.044625960290431976318359375f, 0.0528664179146289825439453125f, -0.34754288196563720703125f, 0.0554049797356128692626953125f), float4(-0.24492585659027099609375f, -0.3201686441898345947265625f, 0.181452929973602294921875f, 0.2487372457981109619140625f), float4(0.3238823413848876953125f, -0.0348015241324901580810546875f, -0.1347588002681732177734375f, -0.075655460357666015625f), float4(0.015183539129793643951416015625f, 0.0505959503352642059326171875f, 0.080900557339191436767578125f, 0.05930931866168975830078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0453466959297657012939453125f, -0.0525278560817241668701171875f, 0.052270077168941497802734375f, 0.13417454063892364501953125f), float4(0.0520004518330097198486328125f, 0.028119288384914398193359375f, 0.005115496926009654998779296875f, 0.2295215129852294921875f), float4(-0.21583749353885650634765625f, 0.122413076460361480712890625f, 0.3507457077503204345703125f, 0.086165763437747955322265625f), float4(0.0759241580963134765625f, 0.284704864025115966796875f, 0.3432787954807281494140625f, 0.24857087433338165283203125f)));
[   0.835][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.2131162583827972412109375f, 0.05260716378688812255859375f, 0.124886102974414825439453125f, 0.2019380629062652587890625f), float4(0.045226506888866424560546875f, 0.14512901008129119873046875f, -0.15103437006473541259765625f, -0.17926466464996337890625f), float4(0.116574108600616455078125f, -0.3271106779575347900390625f, -0.1633219420909881591796875f, -0.07793982326984405517578125f), float4(-0.21802668273448944091796875f, 0.518386900424957275390625f, -0.13567341864109039306640625f, 0.0782304108142852783203125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.007963679730892181396484375f, 0.0480730123817920684814453125f, -0.14537893235683441162109375f, -0.02170877158641815185546875f), float4(0.0362464226782321929931640625f, 0.106239497661590576171875f, 0.12605369091033935546875f, 0.0070735239423811435699462890625f), float4(-0.157274305820465087890625f, 0.074395008385181427001953125f, 0.08916227519512176513671875f, -0.0039608315564692020416259765625f), float4(0.3320319950580596923828125f, -0.054612420499324798583984375f, -0.17615358531475067138671875f, -0.102405168116092681884765625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.206369817256927490234375f, -0.0024615111760795116424560546875f, -0.106257863342761993408203125f, 0.0242709256708621978759765625f), float4(0.06181083619594573974609375f, -0.1358520090579986572265625f, -0.16581286489963531494140625f, 0.23549418151378631591796875f), float4(0.01928842067718505859375f, 0.074049793183803558349609375f, -0.0544494874775409698486328125f, 0.040963731706142425537109375f), float4(0.0469397343695163726806640625f, 0.0039808028377592563629150390625f, 0.02111498080193996429443359375f, 0.064925275743007659912109375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.10485388338565826416015625f, 0.06850884854793548583984375f, -0.112921692430973052978515625f, 0.1699156463146209716796875f), float4(-0.15282535552978515625f, 0.12417550384998321533203125f, -0.0504311658442020416259765625f, -0.066895820200443267822265625f), float4(-0.000598119455389678478240966796875f, 0.033696912229061126708984375f, 0.110550470650196075439453125f, 0.033060126006603240966796875f), float4(-0.174727141857147216796875f, 0.00488196127116680145263671875f, -0.0447870604693889617919921875f, -0.1344572007656097412109375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.2047313153743743896484375f, 0.0564778745174407958984375f, 0.05955998599529266357421875f, 0.115130566060543060302734375f), float4(-0.0584257878363132476806640625f, -0.0359717272222042083740234375f, 0.08334706723690032958984375f, -0.096510134637355804443359375f), float4(-0.23206293582916259765625f, 0.10635797679424285888671875f, -0.2157562077045440673828125f, -0.070632539689540863037109375f), float4(0.038775108754634857177734375f, -0.107549034059047698974609375f, 0.22248400747776031494140625f, 0.2170230448246002197265625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.02557766996324062347412109375f, 0.09886609017848968505859375f, -0.10049946606159210205078125f, 0.1668739616870880126953125f), float4(-0.084830604493618011474609375f, 0.0315040089190006256103515625f, -0.0495124943554401397705078125f, 0.05595695972442626953125f), float4(-0.131932556629180908203125f, -0.08585272729396820068359375f, 0.142476618289947509765625f, 0.122904770076274871826171875f), float4(-0.071683086454868316650390625f, 0.1453175246715545654296875f, -0.048359327018260955810546875f, 0.2771659791469573974609375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.13297586143016815185546875f, 0.20674328505992889404296875f, 0.1446938812732696533203125f, 0.08981846272945404052734375f), float4(-0.0042313658632338047027587890625f, -0.02819192968308925628662109375f, 0.1547032892704010009765625f, 0.172998368740081787109375f), float4(0.113062344491481781005859375f, -0.22716297209262847900390625f, -0.21754944324493408203125f, -0.000839562737382948398590087890625f), float4(-0.141605079174041748046875f, 0.180825293064117431640625f, 0.11268378794193267822265625f, 0.2733562290668487548828125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.07497517764568328857421875f, -0.067995943129062652587890625f, -0.01815807819366455078125f, -0.00038999432581476867198944091796875f), float4(-0.151696681976318359375f, -0.0692823827266693115234375f, -0.3367228806018829345703125f, -0.105485774576663970947265625f), float4(0.33106267452239990234375f, 0.06698314845561981201171875f, 0.019718743860721588134765625f, -0.06810210645198822021484375f), float4(-0.351864039897918701171875f, -0.29145967960357666015625f, -0.0568633936345577239990234375f, 0.21498048305511474609375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0132155120372772216796875f, -0.2476375401020050048828125f, 0.2096526622772216796875f, 0.1068435013294219970703125f), float4(-0.1323419511318206787109375f, 0.0535664968192577362060546875f, 0.0506184808909893035888671875f, -0.2864523231983184814453125f), float4(0.15518288314342498779296875f, 0.23247198760509490966796875f, 0.0175539068877696990966796875f, -0.251813352108001708984375f), float4(-0.0480307228863239288330078125f, -0.06663928925991058349609375f, -0.111026704311370849609375f, -0.126633942127227783203125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01050193794071674346923828125f, -0.17995767295360565185546875f, 0.0601085908710956573486328125f, 0.0501855872571468353271484375f), float4(0.10862712562084197998046875f, -0.101203434169292449951171875f, 0.075587280094623565673828125f, 0.0604667551815509796142578125f), float4(-0.106942676007747650146484375f, -0.358546078205108642578125f, 0.1601599156856536865234375f, 0.16823332011699676513671875f), float4(-0.06543774902820587158203125f, -0.3731067478656768798828125f, 0.01404397189617156982421875f, -0.18328045308589935302734375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.097128488123416900634765625f, 0.013983462937176227569580078125f, 0.07291422784328460693359375f, 0.0317155458033084869384765625f), float4(0.03086239658296108245849609375f, 0.04551045596599578857421875f, -0.22066842019557952880859375f, 0.06346486508846282958984375f), float4(0.117216587066650390625f, -0.10596601665019989013671875f, -0.20611263811588287353515625f, 0.05215881764888763427734375f), float4(-0.3961766064167022705078125f, -0.0378158204257488250732421875f, 0.17633812129497528076171875f, 0.13161109387874603271484375f)));
[   0.835][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.2502967417240142822265625f, 0.07153423130512237548828125f, -0.3512568175792694091796875f, -0.18255402147769927978515625f), float4(-0.1956908702850341796875f, 0.00432772003114223480224609375f, -0.096903502941131591796875f, -0.2464851438999176025390625f), float4(-0.00409221649169921875f, 0.0375007055699825286865234375f, -0.038137026131153106689453125f, 0.0562142767012119293212890625f), float4(-0.0482585243880748748779296875f, 0.0356782190501689910888671875f, -0.0503300689160823822021484375f, -0.246967852115631103515625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.034652091562747955322265625f, -0.012495963834226131439208984375f, 0.22782088816165924072265625f, 0.012034795247018337249755859375f), float4(0.29167520999908447265625f, 0.08264435827732086181640625f, 0.15387125313282012939453125f, -0.14734549820423126220703125f), float4(-0.156144320964813232421875f, 0.055367268621921539306640625f, -0.02707975544035434722900390625f, 0.010725311003625392913818359375f), float4(-0.0332522206008434295654296875f, -0.0892128050327301025390625f, -0.105598390102386474609375f, -0.19647683203220367431640625f)))) + float4(0.00017051749455276876688003540039062f, -0.03108145296573638916015625f, 0.01010077260434627532958984375f, -0.02721401117742061614990234375f);
[   0.835][d][vo/gpu-next/libplacebo] [ 56] }
[   0.835][d][vo/gpu-next/libplacebo] [ 57] 
[   0.835][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.835][d][vo/gpu-next/libplacebo] [ 59] {
[   0.835][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.835][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.835][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.835][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.835][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.835][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.835][d][vo/gpu-next/libplacebo] [ 66] }
[   0.837][d][vo/gpu-next] cache_save_obj: key(1b76cf43e6461f7d), size(11845), save time(2.223 ms)
[   0.837][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.838][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.838][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.838][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.838][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.838][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.838][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.838][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.838][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.838][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.838][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.838][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.838][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.838][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.838][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.838][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.838][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.838][d][vo/gpu-next/libplacebo] [ 16] };
[   0.838][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.838][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.838][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.838][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.838][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.838][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.838][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.838][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.838][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.838][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.838][d][vo/gpu-next/libplacebo] [ 27] }
[   0.838][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.838][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.838][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.838][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.838][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.838][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.838][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.838][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.838][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.838][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.838][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.838][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.838][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.838][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.838][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.838][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.838][d][vo/gpu-next/libplacebo] [ 16] };
[   0.838][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.838][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.838][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.838][d][vo/gpu-next/libplacebo] [ 20] 
[   0.838][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_2_tf_raw _2 
[   0.838][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_2_tf_pos _3 
[   0.838][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_2_tf_map _3_map 
[   0.838][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_2_tf_size vec2(textureSize(_2, 0)) 
[   0.838][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_2_tf_pt _4 
[   0.838][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_2_tf_off _5 
[   0.838][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.838][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_2_tf_mul _6 
[   0.838][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_2_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.838][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_2_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.838][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_2_tf_texOff(off) (conv2d_2_tf_tex(_3 + _4 * vec2(off))) 
[   0.838][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_2_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.838][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_2_tf1_raw _7 
[   0.838][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_2_tf1_pos _8 
[   0.838][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_2_tf1_map _8_map 
[   0.838][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_2_tf1_size vec2(textureSize(_7, 0)) 
[   0.838][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_2_tf1_pt _9 
[   0.838][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_2_tf1_off _a 
[   0.838][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.838][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_2_tf1_mul _b 
[   0.838][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_2_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.838][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_2_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.838][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_2_tf1_texOff(off) (conv2d_2_tf1_tex(_8 + _9 * vec2(off))) 
[   0.838][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_2_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.838][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.838][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.838][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.838][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.838][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.838][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.838][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.838][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.838][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.838][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.838][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.838][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.838][d][vo/gpu-next/libplacebo] [ 57] }
[   0.838][d][vo/gpu-next/libplacebo] [ 58] 
[   0.838][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.838][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.838][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.838][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.838][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.838][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.838][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.838][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.838][d][vo/gpu-next/libplacebo] [ 67] }
[   0.838][d][vo/gpu-next/libplacebo] [ 68] 
[   0.838][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.838][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.838][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.838][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_2_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.838][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_2_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.838][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.838][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.026301445, -0.021575214, 0.22165509, 0.059994068, 0.03341161, 0.1831188, 0.20342293, 0.110160105, 0.03908121, 0.020673111, 0.07239561, 0.038754333, 0.15266368, 0.16526422, 0.062376205, -0.09759537) * go_0(-1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(0.19817191, 0.10267733, 0.17744653, 0.23283184, 0.18810122, 0.2708428, -0.12651879, 0.020756349, 0.039632563, -0.22201295, 0.04873703, 0.09159713, 0.13838065, 0.21169297, 0.30816007, 0.044463675) * go_0(-1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(-0.27859214, 0.07277634, 0.0021458792, 0.0089682285, -0.069680706, 0.090415835, -0.057762265, 0.18703683, -0.03514389, -0.102816254, -0.036509827, 0.038066104, -0.0168311, 0.094478935, 0.04079697, -0.049064912) * go_0(-1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.20913245, -0.110538535, -0.08584027, -0.1222067, 0.05414807, -0.045247085, 0.07351766, -0.002078549, -0.1270987, -0.10164512, -0.1857815, 0.08845066, -0.03743333, -0.098948084, 0.21244387, 0.10441866) * go_0(0.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(0.015990427, 0.36396438, -0.24094687, 0.30236533, -0.13271736, 0.06057376, -0.19678196, -0.28577125, -0.25427434, -0.08400598, 0.07284403, -0.18552442, -0.16425897, 0.097259276, -0.32386774, -0.2190484) * go_0(0.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.004581924, -0.13954072, -0.122360416, 0.14132866, -0.08529257, -0.013296556, 0.0848472, 0.09336581, 0.10332182, -0.016313016, 0.07103558, 0.032564916, -0.13478759, -0.20207484, 0.12986964, 0.1219679) * go_0(0.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.09817874, -0.10573357, 0.100535244, 0.19608764, -0.13303067, 0.024192972, -0.030689823, 0.02574889, 0.051233094, 0.03489235, -0.18465245, -0.06943822, -0.031604882, 0.1519888, 0.09348508, 0.09187296) * go_0(1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.21365458, -0.23696984, 0.13097638, -0.09435498, 0.16467983, -0.066370346, 0.1269104, -0.095128186, 0.09954892, 0.12489504, -0.43418056, 0.106512725, -0.17860703, -0.07114084, -0.07630834, -0.26642478) * go_0(1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.009044342, 0.02711196, -0.14873673, 0.015405045, 0.0071443473, -0.025285944, 0.07409282, 0.06338527, 0.0149676185, 0.011741382, -0.2133069, -0.028912885, 0.19420496, 0.039629057, 0.057636812, 0.15214856) * go_0(1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.07629928, 0.25540486, -0.050925937, -0.18136702, 0.02261603, 0.22343902, 0.003270321, 0.10735731, -0.12541203, -0.10208828, 0.012832783, 0.2591262, 0.08122926, -0.009837677, 0.10308358, 0.19236866) * go_1(-1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.0896358, 0.27571487, 0.04406029, -0.047453407, -0.08587119, 0.16366854, 0.20622262, 0.08347545, -0.3501584, -0.28434548, -0.07592983, 0.09098784, 0.07605388, 0.09677056, 0.0015295541, 0.05102585) * go_1(-1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.18255898, 0.18618028, 0.0017002645, -0.013004655, -0.06436534, 0.13967068, 0.063077755, -0.10632303, -0.20803222, -0.028537111, -0.03144366, -0.08555215, 0.05154303, 0.02431626, 0.15246728, -0.013708507) * go_1(-1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.020998938, -0.05026291, 0.03700117, 0.00830308, -0.1949294, 0.0026698054, -0.034649856, 0.19784226, -0.083901435, -0.069783084, -0.1504053, 0.16595264, -0.07480141, 0.16067508, 0.06010996, -0.021359695) * go_1(0.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.040828142, -0.20158486, 0.034770954, -0.1894161, 0.11665004, 0.29729164, -0.10584386, 0.13165873, -0.18863006, -0.26719162, -0.047613148, -0.12728356, -0.2033613, 0.10550052, 0.20095508, -0.11275811) * go_1(0.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.0785033, -0.1896073, -0.051492307, -0.1694358, 0.1368308, 0.049355216, -0.05707422, 0.079159185, 0.024578957, -0.0923136, 0.089215435, 0.28670043, 0.027932687, 0.06510816, 0.10810999, 0.05990052) * go_1(0.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.08135192, 0.0001326522, -0.16098668, -0.18663193, -0.10280192, 0.078255914, 0.047648013, 0.08326376, 0.055962667, 0.06302574, -0.080121025, -0.031820554, -0.019117938, 0.12515336, 0.09794088, -0.03276838) * go_1(1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.280923, 0.24079335, 0.007883573, 0.06270414, 0.3055441, 0.19291803, -0.16041607, 0.14836526, 0.0013885222, 0.04538063, 0.10742898, -0.064491205, 0.048174977, 4.237692e-05, -0.15194727, 0.024381457) * go_1(1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.0009164131, -0.031949926, 0.0076425644, -0.036870714, -0.0031292974, 0.017726978, -0.20172147, -0.0770472, 0.26379177, 0.108997814, 0.08069395, 0.2126177, 0.012075376, -0.029457828, 0.062730506, -0.15754452) * go_1(1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.09167904, -0.2657421, -0.03443356, 0.03315832, -0.015365421, -0.1029612, -0.108251, 0.04261033, -0.097120754, -0.05616668, -0.09275983, 0.024902184, 0.050058514, -0.013761632, 0.07555132, -0.0046676896) * go_2(-1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.10743835, -0.0007361781, -0.042085417, -0.08237517, -0.10094376, -0.24007876, 0.13924706, -0.07526801, 0.01158322, 0.15491122, 0.0069442675, -0.004242352, 0.11429785, 0.02994726, -0.11829945, -0.04108612) * go_2(-1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.073622055, -0.064717196, -0.0025231615, 0.13256475, 0.20159899, 0.047977835, -0.10289233, -0.18419135, -0.00888952, 0.059428576, -0.053062655, -0.02730631, 0.14545685, -0.08686949, 0.17454128, 0.035443828) * go_2(-1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.010146019, 0.06712568, 0.12614638, 0.023590917, 0.025756737, 0.06603747, -0.17108095, -0.06179699, 0.027241204, -0.13196802, 0.043475866, -0.0397495, 0.05306092, 0.035672903, 0.047219284, -0.16680142) * go_2(0.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.079427816, -0.06716479, 0.19028603, -0.19694683, -0.061598092, -0.07471188, 0.21170339, 0.30140215, -0.0023369973, 0.04688297, -0.14154115, 0.19283508, 0.1339858, -0.09116279, 0.15305163, 0.029108394) * go_2(0.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.14902157, -0.03339153, -0.08532003, -0.10736339, 0.08702709, 0.07607574, -0.09955836, -0.016585784, -0.030078214, -0.060374748, -0.2854279, 0.02441719, 0.034877967, 0.2099041, 0.11125731, -0.059071556) * go_2(0.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.08436325, 0.06893047, -0.045362443, -0.02237741, -0.07583875, -0.034830183, -0.024008518, -0.2882329, -0.011109783, 0.101859994, 0.091137715, 0.0020565533, -0.044729806, -0.18168025, 0.069466636, 0.04994174) * go_2(1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.11915174, 0.089596465, -0.18965814, 0.015218237, 0.13500094, 0.19921367, -0.008298205, 0.29650384, -0.049439427, -0.27590424, 0.36169067, -0.030582754, 0.02151196, 0.019915426, 0.04543398, 0.16126189) * go_2(1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.1620274, -0.08264547, 0.082442135, -0.0034478644, 0.09888509, -0.0034957859, -0.107241705, -0.17729597, -0.05138647, 0.02052103, -0.019507123, 0.037574988, -0.1694345, 0.17871588, -0.22510391, 0.019049853) * go_2(1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.10962245, -0.1329873, -0.060855392, 0.025941676, -0.19536193, -0.120365486, -0.04313703, -0.052912965, 0.20854498, 0.08341353, 0.008687068, -0.20432276, 0.15677948, -0.19000018, 0.01821201, -0.041512605) * go_3(-1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.012287526, -0.14180368, -0.098788455, 0.025949089, 0.09442778, 0.2247651, -0.12453263, 0.10435483, 0.274603, 0.06133054, 0.10506106, 0.14727746, -0.048299775, -0.082819685, 0.07319359, -0.047460355) * go_3(-1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.070726536, -0.034744017, 0.07521428, 0.070649154, -0.05958955, -0.100232825, -0.010651838, 0.045392875, 0.2930271, -0.04952355, 0.3112155, 0.117203265, 0.025166962, 0.11176862, 0.06716659, 0.07175864) * go_3(-1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.011560962, -0.14032063, -0.17424704, 0.07652749, -0.04220116, 0.052874275, -0.00225693, -0.031843517, -0.07520102, -0.13775803, 0.2449317, 0.069658786, 0.052280303, -0.105218224, 0.03574522, -0.020500354) * go_3(0.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.08793712, 0.26712346, 0.08315631, 0.23813692, -0.04439029, 0.031587064, 0.09561177, -0.13380238, -0.24982157, 0.31701845, -0.3875432, 0.10487225, 0.09201869, -0.037252493, -0.006935219, -0.14650282) * go_3(0.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.077635325, 0.13732299, -0.071563005, 0.096517466, -0.15051986, -0.111744404, 0.03996857, -0.052670125, -0.1819665, 0.054554947, -0.13774712, -0.20061246, -0.0023742192, 0.15647805, -0.024121126, 0.075497724) * go_3(0.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.0073632775, -0.06535298, 0.039895996, 0.20666869, 0.13625242, 0.04823007, -0.07135618, 0.04787906, 0.01383074, 0.15382123, -0.15519714, 0.056721795, 0.061946746, -0.0586851, 0.028934354, -0.02264129) * go_3(1.0, -1.0);
[   0.838][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.19791882, -0.111910924, -0.010451344, -0.30566537, -0.1416239, -0.14523096, 0.116883226, -0.18241516, 0.2680614, -0.18487626, 0.17472346, 0.08346682, -0.14510359, -0.029229192, -0.005879142, 0.050247498) * go_3(1.0, 0.0);
[   0.838][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.030153519, -0.092469186, -0.022912916, 0.10200855, -0.04237032, -0.05917764, 0.10479645, -0.05619482, -0.18949397, -0.019547248, 0.013868889, -0.1524476, 0.14048979, -0.032521486, 0.1322921, 0.070972025) * go_3(1.0, 1.0);
[   0.838][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.012053958, -4.6962363e-05, 0.0020099226, -0.033494607);
[   0.838][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.838][d][vo/gpu-next/libplacebo] [113] }
[   0.838][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.838][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.838][d][vo/gpu-next/libplacebo] [116] return color;
[   0.838][d][vo/gpu-next/libplacebo] [117] }
[   0.838][d][vo/gpu-next/libplacebo] [118] 
[   0.838][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.838][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.838][d][vo/gpu-next/libplacebo] [121] }
[   0.839][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.839][d][vo/gpu-next/libplacebo] Spent 1.341 ms translating GLSL to SPIR-V
[   0.839][d][vo/gpu-next/libplacebo] Spent 0.114 ms translating SPIR-V to HLSL
[   0.840][d][vo/gpu-next/libplacebo] Spent 1.266 ms translating HLSL to DXBC
[   0.841][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.841][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.841][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.841][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.841][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.841][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.841][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.841][d][vo/gpu-next/libplacebo] [  7] 
[   0.841][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.841][d][vo/gpu-next/libplacebo] [  9] {
[   0.841][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.841][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.841][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.841][d][vo/gpu-next/libplacebo] [ 13] };
[   0.841][d][vo/gpu-next/libplacebo] [ 14] 
[   0.841][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.841][d][vo/gpu-next/libplacebo] [ 16] {
[   0.841][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.841][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.841][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.841][d][vo/gpu-next/libplacebo] [ 20] };
[   0.841][d][vo/gpu-next/libplacebo] [ 21] 
[   0.841][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.841][d][vo/gpu-next/libplacebo] [ 23] {
[   0.841][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.841][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.841][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.841][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.841][d][vo/gpu-next/libplacebo] [ 28] }
[   0.841][d][vo/gpu-next/libplacebo] [ 29] 
[   0.841][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.841][d][vo/gpu-next/libplacebo] [ 31] {
[   0.841][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.841][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.841][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.841][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.841][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.841][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.841][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.841][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.841][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.841][d][vo/gpu-next/libplacebo] [ 41] }
[   0.850][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.850][d][vo/gpu-next/libplacebo] Spent 9.677 ms translating GLSL to SPIR-V
[   0.852][d][vo/gpu-next/libplacebo] Spent 1.612 ms translating SPIR-V to HLSL
[   0.876][v][vo/gpu-next/libplacebo] Spent 24.401 ms translating HLSL to DXBC
[   0.876][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.876][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.876][d][vo/gpu-next/libplacebo] [  2] {
[   0.876][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.876][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.876][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.876][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.876][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.876][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.876][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.876][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.876][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.876][d][vo/gpu-next/libplacebo] [ 12] };
[   0.876][d][vo/gpu-next/libplacebo] [ 13] 
[   0.876][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.876][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.876][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.876][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.876][d][vo/gpu-next/libplacebo] [ 18] 
[   0.876][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.876][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.876][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.876][d][vo/gpu-next/libplacebo] [ 22] 
[   0.876][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.876][d][vo/gpu-next/libplacebo] [ 24] {
[   0.876][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.876][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.876][d][vo/gpu-next/libplacebo] [ 27] };
[   0.876][d][vo/gpu-next/libplacebo] [ 28] 
[   0.876][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.876][d][vo/gpu-next/libplacebo] [ 30] {
[   0.876][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.876][d][vo/gpu-next/libplacebo] [ 32] };
[   0.876][d][vo/gpu-next/libplacebo] [ 33] 
[   0.876][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.876][d][vo/gpu-next/libplacebo] [ 35] {
[   0.876][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.876][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.876][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.876][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02630144543945789337158203125f, -0.02157521434128284454345703125f, 0.22165508568286895751953125f, 0.0599940679967403411865234375f), float4(0.0334116108715534210205078125f, 0.18311880528926849365234375f, 0.2034229338169097900390625f, 0.110160104930400848388671875f), float4(0.039081208407878875732421875f, 0.02067311108112335205078125f, 0.07239560782909393310546875f, 0.0387543328106403350830078125f), float4(0.1526636779308319091796875f, 0.1652642190456390380859375f, 0.0623762048780918121337890625f, -0.097595371305942535400390625f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.198171913623809814453125f, 0.10267733037471771240234375f, 0.17744652926921844482421875f, 0.23283183574676513671875f), float4(0.18810121715068817138671875f, 0.2708427906036376953125f, -0.126518785953521728515625f, 0.02075634896755218505859375f), float4(0.0396325625479221343994140625f, -0.22201295197010040283203125f, 0.0487370304763317108154296875f, 0.091597132384777069091796875f), float4(0.13838064670562744140625f, 0.21169297397136688232421875f, 0.3081600666046142578125f, 0.0444636754691600799560546875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2785921394824981689453125f, 0.072776339948177337646484375f, 0.00214587920345366001129150390625f, 0.00896822847425937652587890625f), float4(-0.06968070566654205322265625f, 0.09041583538055419921875f, -0.05776226520538330078125f, 0.18703682720661163330078125f), float4(-0.035143889486789703369140625f, -0.1028162539005279541015625f, -0.03650982677936553955078125f, 0.03806610405445098876953125f), float4(-0.016831099987030029296875f, 0.0944789350032806396484375f, 0.0407969690859317779541015625f, -0.049064911901950836181640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.20913244783878326416015625f, -0.110538534820079803466796875f, -0.08584026992321014404296875f, -0.12220670282840728759765625f), float4(0.054148070514202117919921875f, -0.045247085392475128173828125f, 0.073517657816410064697265625f, -0.002078549005091190338134765625f), float4(-0.12709869444370269775390625f, -0.101645119488239288330078125f, -0.18578149378299713134765625f, 0.088450662791728973388671875f), float4(-0.0374333299696445465087890625f, -0.098948083817958831787109375f, 0.21244387328624725341796875f, 0.104418657720088958740234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.01599042676389217376708984375f, 0.363964378833770751953125f, -0.24094687402248382568359375f, 0.3023653328418731689453125f), float4(-0.13271735608577728271484375f, 0.0605737604200839996337890625f, -0.1967819631099700927734375f, -0.28577125072479248046875f), float4(-0.2542743384838104248046875f, -0.0840059816837310791015625f, 0.072844028472900390625f, -0.18552441895008087158203125f), float4(-0.16425897181034088134765625f, 0.097259275615215301513671875f, -0.323867738246917724609375f, -0.21904839575290679931640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0045819240622222423553466796875f, -0.13954071700572967529296875f, -0.122360415756702423095703125f, 0.1413286626338958740234375f), float4(-0.085292570292949676513671875f, -0.0132965557277202606201171875f, 0.08484719693660736083984375f, 0.093365810811519622802734375f), float4(0.1033218204975128173828125f, -0.016313016414642333984375f, 0.07103557884693145751953125f, 0.032564915716648101806640625f), float4(-0.1347875893115997314453125f, -0.20207484066486358642578125f, 0.129869639873504638671875f, 0.12196789681911468505859375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.098178736865520477294921875f, -0.105733573436737060546875f, 0.1005352437496185302734375f, 0.19608764350414276123046875f), float4(-0.13303066790103912353515625f, 0.02419297210872173309326171875f, -0.03068982250988483428955078125f, 0.0257488898932933807373046875f), float4(0.0512330941855907440185546875f, 0.0348923504352569580078125f, -0.18465244770050048828125f, -0.0694382190704345703125f), float4(-0.0316048823297023773193359375f, 0.151988804340362548828125f, 0.093485079705715179443359375f, 0.0918729603290557861328125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.213654577732086181640625f, -0.23696984350681304931640625f, 0.130976378917694091796875f, -0.094354979693889617919921875f), float4(0.164679825305938720703125f, -0.066370345652103424072265625f, 0.12691040337085723876953125f, -0.095128186047077178955078125f), float4(0.09954892098903656005859375f, 0.124895043671131134033203125f, -0.434180557727813720703125f, 0.106512725353240966796875f), float4(-0.17860703170299530029296875f, -0.07114084064960479736328125f, -0.0763083398342132568359375f, -0.26642477512359619140625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.009044341742992401123046875f, 0.02711196057498455047607421875f, -0.14873673021793365478515625f, 0.015405044890940189361572265625f), float4(0.0071443472988903522491455078125f, -0.02528594434261322021484375f, 0.07409282028675079345703125f, 0.063385270535945892333984375f), float4(0.01496761851012706756591796875f, 0.011741382069885730743408203125f, -0.213306903839111328125f, -0.02891288511455059051513671875f), float4(0.1942049562931060791015625f, 0.03962905704975128173828125f, 0.05763681232929229736328125f, 0.15214855968952178955078125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0762992799282073974609375f, 0.2554048597812652587890625f, -0.0509259365499019622802734375f, -0.18136702477931976318359375f), float4(0.02261603064835071563720703125f, 0.22343902289867401123046875f, 0.0032703210599720478057861328125f, 0.10735730826854705810546875f), float4(-0.12541203200817108154296875f, -0.102088280022144317626953125f, 0.012832783162593841552734375f, 0.259126186370849609375f), float4(0.081229262053966522216796875f, -0.009837676770985126495361328125f, 0.1030835807323455810546875f, 0.1923686563968658447265625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.089635796844959259033203125f, 0.275714874267578125f, 0.044060289859771728515625f, -0.0474534071981906890869140625f), float4(-0.0858711898326873779296875f, 0.1636685431003570556640625f, 0.2062226235866546630859375f, 0.083475448191165924072265625f), float4(-0.350158393383026123046875f, -0.2843454778194427490234375f, -0.075929827988147735595703125f, 0.090987838804721832275390625f), float4(0.076053880155086517333984375f, 0.096770562231540679931640625f, 0.00152955413796007633209228515625f, 0.0510258488357067108154296875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1825589835643768310546875f, 0.18618027865886688232421875f, 0.001700264518149197101593017578125f, -0.01300465501844882965087890625f), float4(-0.06436534225940704345703125f, 0.13967068493366241455078125f, 0.063077755272388458251953125f, -0.1063230335712432861328125f), float4(-0.2080322206020355224609375f, -0.02853711135685443878173828125f, -0.0314436592161655426025390625f, -0.085552148520946502685546875f), float4(0.0515430308878421783447265625f, 0.02431626059114933013916015625f, 0.1524672806262969970703125f, -0.013708506710827350616455078125f)));
[   0.876][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.876][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.876][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02099893800914287567138671875f, -0.0502629093825817108154296875f, 0.037001170217990875244140625f, 0.0083030797541141510009765625f), float4(-0.19492940604686737060546875f, 0.00266980542801320552825927734375f, -0.034649856388568878173828125f, 0.19784225523471832275390625f), float4(-0.0839014351367950439453125f, -0.069783084094524383544921875f, -0.15040530264377593994140625f, 0.16595263779163360595703125f), float4(-0.074801407754421234130859375f, 0.1606750786304473876953125f, 0.0601099617779254913330078125f, -0.02135969512164592742919921875f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0408281423151493072509765625f, -0.20158486068248748779296875f, 0.0347709544003009796142578125f, -0.18941609561443328857421875f), float4(0.116650037467479705810546875f, 0.29729163646697998046875f, -0.10584385693073272705078125f, 0.131658732891082763671875f), float4(-0.18863005936145782470703125f, -0.2671916186809539794921875f, -0.0476131476461887359619140625f, -0.12728355824947357177734375f), float4(-0.2033613026142120361328125f, 0.105500519275665283203125f, 0.20095507800579071044921875f, -0.112758107483386993408203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.078503303229808807373046875f, -0.18960730731487274169921875f, -0.0514923073351383209228515625f, -0.169435799121856689453125f), float4(0.136830806732177734375f, 0.049355216324329376220703125f, -0.0570742189884185791015625f, 0.07915918529033660888671875f), float4(0.02457895688712596893310546875f, -0.09231360256671905517578125f, 0.089215435087680816650390625f, 0.286700427532196044921875f), float4(0.02793268673121929168701171875f, 0.065108157694339752197265625f, 0.108109988272190093994140625f, 0.0599005185067653656005859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.08135192096233367919921875f, 0.00013265220331959426403045654296875f, -0.16098667681217193603515625f, -0.18663193285465240478515625f), float4(-0.10280191898345947265625f, 0.078255914151668548583984375f, 0.047648012638092041015625f, 0.083263762295246124267578125f), float4(0.05596266686916351318359375f, 0.0630257427692413330078125f, -0.08012102544307708740234375f, -0.0318205542862415313720703125f), float4(-0.01911793835461139678955078125f, 0.125153362751007080078125f, 0.09794087707996368408203125f, -0.0327683798968791961669921875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.28092300891876220703125f, 0.24079334735870361328125f, 0.00788357295095920562744140625f, 0.062704138457775115966796875f), float4(0.3055441081523895263671875f, 0.1929180324077606201171875f, -0.160416066646575927734375f, 0.1483652591705322265625f), float4(0.001388522214256227016448974609375f, 0.045380629599094390869140625f, 0.10742898285388946533203125f, -0.064491204917430877685546875f), float4(0.04817497730255126953125f, 4.2376919736852869391441345214844e-05f, -0.15194727480411529541015625f, 0.02438145689666271209716796875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0009164130897261202335357666015625f, -0.0319499261677265167236328125f, 0.007642564363777637481689453125f, -0.0368707142770290374755859375f), float4(-0.0031292974017560482025146484375f, 0.01772697828710079193115234375f, -0.20172147452831268310546875f, -0.0770471990108489990234375f), float4(0.2637917697429656982421875f, 0.108997814357280731201171875f, 0.080693952739238739013671875f, 0.212617695331573486328125f), float4(0.0120753757655620574951171875f, -0.02945782802999019622802734375f, 0.06273050606250762939453125f, -0.1575445234775543212890625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.091679036617279052734375f, -0.2657420933246612548828125f, -0.03443355858325958251953125f, 0.0331583209335803985595703125f), float4(-0.015365420840680599212646484375f, -0.10296119749546051025390625f, -0.108250997960567474365234375f, 0.0426103286445140838623046875f), float4(-0.097120754420757293701171875f, -0.0561666786670684814453125f, -0.09275983273983001708984375f, 0.0249021835625171661376953125f), float4(0.0500585138797760009765625f, -0.013761632144451141357421875f, 0.075551323592662811279296875f, -0.0046676895581185817718505859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.107438348233699798583984375f, -0.0007361780735664069652557373046875f, -0.042085416615009307861328125f, -0.08237516880035400390625f), float4(-0.10094375908374786376953125f, -0.24007876217365264892578125f, 0.13924705982208251953125f, -0.075268007814884185791015625f), float4(0.0115832202136516571044921875f, 0.154911220073699951171875f, 0.0069442675448954105377197265625f, -0.004242352209985256195068359375f), float4(0.11429785192012786865234375f, 0.02994726039469242095947265625f, -0.118299447000026702880859375f, -0.0410861186683177947998046875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.073622055351734161376953125f, -0.064717195928096771240234375f, -0.002523161470890045166015625f, 0.1325647532939910888671875f), float4(0.20159898698329925537109375f, 0.0479778349399566650390625f, -0.102892331779003143310546875f, -0.18419134616851806640625f), float4(-0.008889519609510898590087890625f, 0.0594285763800144195556640625f, -0.053062655031681060791015625f, -0.027306310832500457763671875f), float4(0.145456850528717041015625f, -0.08686949312686920166015625f, 0.17454127967357635498046875f, 0.03544382750988006591796875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.010146019048988819122314453125f, 0.06712567806243896484375f, 0.126146376132965087890625f, 0.02359091676771640777587890625f), float4(0.02575673721730709075927734375f, 0.066037468612194061279296875f, -0.17108094692230224609375f, -0.0617969892919063568115234375f), float4(0.0272412039339542388916015625f, -0.131968021392822265625f, 0.0434758663177490234375f, -0.0397494994103908538818359375f), float4(0.0530609190464019775390625f, 0.0356729030609130859375f, 0.047219283878803253173828125f, -0.1668014228343963623046875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.079427815973758697509765625f, -0.06716479361057281494140625f, 0.19028602540493011474609375f, -0.1969468295574188232421875f), float4(-0.0615980923175811767578125f, -0.074711881577968597412109375f, 0.2117033898830413818359375f, 0.301402151584625244140625f), float4(-0.00233699730597436428070068359375f, 0.0468829683959484100341796875f, -0.1415411531925201416015625f, 0.19283507764339447021484375f), float4(0.13398580253124237060546875f, -0.091162793338298797607421875f, 0.15305162966251373291015625f, 0.0291083939373493194580078125f)));
[   0.876][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.149021565914154052734375f, -0.0333915315568447113037109375f, -0.085320033133029937744140625f, -0.10736338794231414794921875f), float4(0.08702708780765533447265625f, 0.076075740158557891845703125f, -0.099558360874652862548828125f, -0.01658578403294086456298828125f), float4(-0.0300782136619091033935546875f, -0.0603747479617595672607421875f, -0.2854278981685638427734375f, 0.02441718988120555877685546875f), float4(0.0348779670894145965576171875f, 0.2099041044712066650390625f, 0.111257307231426239013671875f, -0.05907155573368072509765625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0843632519245147705078125f, 0.068930469453334808349609375f, -0.0453624427318572998046875f, -0.02237741090357303619384765625f), float4(-0.075838752090930938720703125f, -0.0348301827907562255859375f, -0.02400851808488368988037109375f, -0.2882328927516937255859375f), float4(-0.011109783314168453216552734375f, 0.101859994232654571533203125f, 0.091137714684009552001953125f, 0.00205655326135456562042236328125f), float4(-0.044729806482791900634765625f, -0.18168024718761444091796875f, 0.06946663558483123779296875f, 0.049941740930080413818359375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.1191517412662506103515625f, 0.08959646522998809814453125f, -0.1896581351757049560546875f, 0.01521823741495609283447265625f), float4(0.1350009441375732421875f, 0.19921366870403289794921875f, -0.00829820521175861358642578125f, 0.296503841876983642578125f), float4(-0.0494394265115261077880859375f, -0.275904238224029541015625f, 0.3616906702518463134765625f, -0.03058275394141674041748046875f), float4(0.0215119607746601104736328125f, 0.01991542614996433258056640625f, 0.0454339794814586639404296875f, 0.1612618863582611083984375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.16202740371227264404296875f, -0.082645468413829803466796875f, 0.0824421346187591552734375f, -0.00344786443747580051422119140625f), float4(0.0988850891590118408203125f, -0.0034957858733832836151123046875f, -0.10724170506000518798828125f, -0.17729596793651580810546875f), float4(-0.0513864718377590179443359375f, 0.02052102982997894287109375f, -0.01950712315738201141357421875f, 0.0375749878585338592529296875f), float4(-0.16943450272083282470703125f, 0.178715884685516357421875f, -0.225103914737701416015625f, 0.0190498530864715576171875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1096224486827850341796875f, -0.13298730552196502685546875f, -0.0608553923666477203369140625f, 0.02594167552888393402099609375f), float4(-0.19536192715167999267578125f, -0.12036548554897308349609375f, -0.04313702881336212158203125f, -0.05291296541690826416015625f), float4(0.20854498445987701416015625f, 0.08341352641582489013671875f, 0.0086870677769184112548828125f, -0.204322755336761474609375f), float4(0.15677948296070098876953125f, -0.19000017642974853515625f, 0.0182120092213153839111328125f, -0.0415126048028469085693359375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.012287526391446590423583984375f, -0.141803681850433349609375f, -0.09878845512866973876953125f, 0.02594908885657787322998046875f), float4(0.09442777931690216064453125f, 0.22476510703563690185546875f, -0.124532632529735565185546875f, 0.1043548285961151123046875f), float4(0.27460300922393798828125f, 0.0613305382430553436279296875f, 0.105061061680316925048828125f, 0.14727745950222015380859375f), float4(-0.04829977452754974365234375f, -0.08281968533992767333984375f, 0.073193587362766265869140625f, -0.047460354864597320556640625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.070726536214351654052734375f, -0.034744016826152801513671875f, 0.07521428167819976806640625f, 0.070649154484272003173828125f), float4(-0.05958954989910125732421875f, -0.10023282468318939208984375f, -0.0106518380343914031982421875f, 0.0453928746283054351806640625f), float4(0.293027102947235107421875f, -0.0495235510170459747314453125f, 0.3112154901027679443359375f, 0.1172032654285430908203125f), float4(0.0251669622957706451416015625f, 0.11176861822605133056640625f, 0.067166589200496673583984375f, 0.07175864279270172119140625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01156096160411834716796875f, -0.1403206288814544677734375f, -0.17424704134464263916015625f, 0.07652749121189117431640625f), float4(-0.04220116138458251953125f, 0.052874274551868438720703125f, -0.00225693010725080966949462890625f, -0.0318435169756412506103515625f), float4(-0.07520101964473724365234375f, -0.13775803148746490478515625f, 0.244931697845458984375f, 0.0696587860584259033203125f), float4(0.0522803030908107757568359375f, -0.105218224227428436279296875f, 0.03574521839618682861328125f, -0.020500354468822479248046875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0879371166229248046875f, 0.2671234607696533203125f, 0.083156310021877288818359375f, 0.2381369173526763916015625f), float4(-0.0443902909755706787109375f, 0.031587064266204833984375f, 0.095611773431301116943359375f, -0.1338023841381072998046875f), float4(-0.2498215734958648681640625f, 0.317018449306488037109375f, -0.387543201446533203125f, 0.104872249066829681396484375f), float4(0.0920186936855316162109375f, -0.037252493202686309814453125f, -0.0069352188147604465484619140625f, -0.1465028226375579833984375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.077635325491428375244140625f, 0.1373229920864105224609375f, -0.0715630054473876953125f, 0.096517466008663177490234375f), float4(-0.15051986277103424072265625f, -0.111744403839111328125f, 0.0399685688316822052001953125f, -0.0526701249182224273681640625f), float4(-0.18196649849414825439453125f, 0.054554946720600128173828125f, -0.13774712383747100830078125f, -0.2006124556064605712890625f), float4(-0.0023742192424833774566650390625f, 0.15647804737091064453125f, -0.02412112616002559661865234375f, 0.075497724115848541259765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.007363277487456798553466796875f, -0.065352976322174072265625f, 0.03989599645137786865234375f, 0.20666868984699249267578125f), float4(0.13625241816043853759765625f, 0.0482300706207752227783203125f, -0.07135617733001708984375f, 0.0478790588676929473876953125f), float4(0.0138307400047779083251953125f, 0.1538212299346923828125f, -0.1551971435546875f, 0.0567217953503131866455078125f), float4(0.0619467459619045257568359375f, -0.058685101568698883056640625f, 0.02893435396254062652587890625f, -0.0226412899792194366455078125f)));
[   0.877][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.19791881740093231201171875f, -0.11191092431545257568359375f, -0.010451343841850757598876953125f, -0.30566537380218505859375f), float4(-0.14162389934062957763671875f, -0.14523096382617950439453125f, 0.116883225739002227783203125f, -0.1824151575565338134765625f), float4(0.2680613994598388671875f, -0.184876263141632080078125f, 0.17472346127033233642578125f, 0.083466820418834686279296875f), float4(-0.14510358870029449462890625f, -0.02922919206321239471435546875f, -0.0058791418559849262237548828125f, 0.050247497856616973876953125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.03015351854264736175537109375f, -0.0924691855907440185546875f, -0.0229129157960414886474609375f, 0.1020085513591766357421875f), float4(-0.042370319366455078125f, -0.0591776408255100250244140625f, 0.104796446859836578369140625f, -0.056194819509983062744140625f), float4(-0.18949396908283233642578125f, -0.01954724825918674468994140625f, 0.01386888884007930755615234375f, -0.15244759619235992431640625f), float4(0.1404897868633270263671875f, -0.0325214862823486328125f, 0.13229210674762725830078125f, 0.070972025394439697265625f)))) + float4(0.012053958140313625335693359375f, -4.6962362830527126789093017578125e-05f, 0.00200992263853549957275390625f, -0.03349460661411285400390625f);
[   0.877][d][vo/gpu-next/libplacebo] [ 56] }
[   0.877][d][vo/gpu-next/libplacebo] [ 57] 
[   0.877][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.877][d][vo/gpu-next/libplacebo] [ 59] {
[   0.877][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.877][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.877][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.877][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.877][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.877][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.877][d][vo/gpu-next/libplacebo] [ 66] }
[   0.879][d][vo/gpu-next] cache_save_obj: key(ebebeee3e90f0e9d), size(11845), save time(2.259 ms)
[   0.879][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.880][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.880][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.880][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.880][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.880][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.880][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.880][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.880][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.880][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.880][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.880][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.880][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.880][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.880][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.880][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.880][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.880][d][vo/gpu-next/libplacebo] [ 16] };
[   0.880][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.880][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.880][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.880][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.880][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.880][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.880][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.880][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.880][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.880][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.880][d][vo/gpu-next/libplacebo] [ 27] }
[   0.880][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.880][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.880][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.880][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.880][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.880][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.880][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.880][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.880][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.880][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.880][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.880][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.880][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.880][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.880][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.880][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.880][d][vo/gpu-next/libplacebo] [ 16] };
[   0.880][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.880][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.880][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.880][d][vo/gpu-next/libplacebo] [ 20] 
[   0.880][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_3_tf_raw _2 
[   0.880][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_3_tf_pos _3 
[   0.880][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_3_tf_map _3_map 
[   0.880][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_3_tf_size vec2(textureSize(_2, 0)) 
[   0.880][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_3_tf_pt _4 
[   0.880][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_3_tf_off _5 
[   0.880][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.880][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_3_tf_mul _6 
[   0.880][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_3_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.880][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_3_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.880][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_3_tf_texOff(off) (conv2d_3_tf_tex(_3 + _4 * vec2(off))) 
[   0.880][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_3_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.880][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_3_tf1_raw _7 
[   0.880][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_3_tf1_pos _8 
[   0.880][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_3_tf1_map _8_map 
[   0.880][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_3_tf1_size vec2(textureSize(_7, 0)) 
[   0.880][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_3_tf1_pt _9 
[   0.880][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_3_tf1_off _a 
[   0.880][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.880][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_3_tf1_mul _b 
[   0.880][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_3_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.880][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_3_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.880][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_3_tf1_texOff(off) (conv2d_3_tf1_tex(_8 + _9 * vec2(off))) 
[   0.880][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_3_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.880][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.880][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.880][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.880][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.880][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.880][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.880][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.880][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.880][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.880][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.880][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.880][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.880][d][vo/gpu-next/libplacebo] [ 57] }
[   0.880][d][vo/gpu-next/libplacebo] [ 58] 
[   0.880][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.880][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.880][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.880][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.880][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.880][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.880][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.880][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.880][d][vo/gpu-next/libplacebo] [ 67] }
[   0.880][d][vo/gpu-next/libplacebo] [ 68] 
[   0.880][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.880][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.880][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.880][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.880][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.880][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.880][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.06738501, 0.034009207, -0.21538448, 0.14296548, 0.12896985, -0.23526315, -0.08848608, 0.019602662, 0.14937137, 0.11353096, 0.11884168, -0.016765572, 0.030985225, 0.046430565, 0.06614828, -0.19202724) * go_0(-1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.10326068, 0.11014975, 0.17069744, -0.21474148, 0.16761585, 0.13434832, -0.101021074, 0.006307025, 0.07478008, -0.1060066, 0.035315692, 0.033488914, -0.24906659, 0.06269967, 0.11120735, -0.040928528) * go_0(-1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.09334615, 0.057705753, 0.12213245, -0.06402275, 0.30694544, 0.034585163, 0.20345578, 0.07489286, 0.07483618, -0.14240396, 0.034846418, -0.03811241, 0.010882573, 0.13204294, 0.017563924, -0.047203008) * go_0(-1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.21673942, -0.024010994, -0.10238504, -0.041160326, 0.06838163, -0.20950818, 0.06526309, -0.079094924, 0.02208821, -0.28130978, 0.086275116, -0.089067616, 0.12133826, -0.062600106, -0.020521903, -0.07654401) * go_0(0.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.03055029, -0.15683146, -0.20331301, -0.06252028, 0.13350682, 0.20338707, 0.038425338, 0.1581342, -0.27322498, -0.14999662, -0.16681097, 0.0971585, -0.20014858, -0.081635274, -0.0781877, -0.20625232) * go_0(0.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.38375977, -0.019825654, 0.1886721, 0.22616312, 0.3402173, 0.1825304, -0.05531195, 0.30973226, -0.2676023, 0.14413352, 0.021706983, 0.01732799, 0.23466855, -0.13805965, 0.22570935, 0.018103868) * go_0(0.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.15169825, 0.0270689, -0.2503316, 0.17289825, -0.16437647, 0.039233048, -0.35572487, -0.048393793, 0.19270042, 0.24260359, 0.12041881, -0.0009793913, 0.11656858, 0.11007414, -0.0757491, 0.047933612) * go_0(1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.18657999, -0.11252566, -0.05237504, -0.07368097, 0.13882741, -0.13710637, -0.006996468, -0.062354874, 0.23452504, 0.15333645, -0.0022776406, -0.17910439, 0.03629509, -0.16264829, -0.010011833, -0.15313338) * go_0(1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.060544558, -0.04913478, -0.061717357, 0.02323648, 0.28739056, -0.07434013, 0.19110644, 0.100050166, 0.0073363045, 0.08185653, -0.024797903, -0.14424153, -0.20838726, 0.16154376, -0.048517212, -0.025453888) * go_0(1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.14975396, -0.13142908, 0.36210674, -0.054021083, -0.10632155, 0.045697935, -0.18946633, 0.02228141, -0.08919603, 0.09800842, -0.17634438, 0.09512711, -0.03425503, -0.12298555, -0.05354435, -0.17112055) * go_1(-1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.09958265, -0.057276618, -0.16262266, -0.06415915, 0.14579074, -0.36784375, 0.08034197, -0.04537706, 0.005460582, 0.22313322, 0.07382161, 0.014990379, 0.044636846, -0.2811128, -0.22621547, -0.06044004) * go_1(-1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.10569276, -0.03738662, 0.16100396, 0.058593616, -0.048862137, -0.08796426, 0.20101094, -0.11039573, 0.17196764, -0.04601554, 0.008571281, -0.073729075, 0.051433694, -0.051276565, 0.087334655, -0.0360379) * go_1(-1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(0.011119538, -0.28781965, 0.28637868, -0.1742508, -0.07121849, 0.10379717, 0.012615981, -0.029563965, -0.18678424, 0.05291095, 0.039143506, -0.028248642, -0.014103922, 0.029155696, 0.10433492, 0.16305852) * go_1(0.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.2231037, -0.13697462, -0.29124337, 0.08519773, 0.15893684, -0.17763218, 0.06950923, 0.34361118, -0.024844287, 0.044008408, -0.033844844, -0.086971916, -0.07884748, 0.2543499, 0.056884114, 0.10068364) * go_1(0.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.07710048, -0.23218372, 0.04346047, 0.21769643, 0.06473219, -0.18066105, -0.2511205, 0.15309611, 0.04535977, 0.16450433, 0.10846344, 0.0016952346, -0.010874939, 0.28966382, -0.121990964, 0.12956186) * go_1(0.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.007910202, 0.17766511, 0.14364475, 0.1016258, 0.0051045395, 0.18691733, 0.005813767, -0.0070582186, 0.019418601, -0.1604435, 0.016088275, -0.18265302, -0.15719391, -0.17369832, -0.036745597, -0.19647408) * go_1(1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.08938396, -0.0073808245, 0.11225727, -0.012303106, 0.096785046, 0.030483445, 0.027719889, -0.052584838, -0.14887555, -0.03422243, 0.12646855, -0.1722482, 0.010239037, 0.06406088, -0.20053658, 0.01964698) * go_1(1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.120734036, -0.12450362, -0.06582111, 0.1639675, -0.19787048, -0.08049789, -0.014257596, 0.058436662, -0.0009387449, -0.08698089, -0.017400503, 0.06295286, 0.09890349, -0.057190523, -0.103520766, -0.04207548) * go_1(1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.0118413875, -0.031288836, 0.09749554, -0.012266401, -0.07998591, 0.22615653, -0.06207416, 0.03257896, -0.076378696, -0.079426095, -0.13968349, -0.15423697, -0.1091681, -0.02893125, -0.032659534, -0.063735925) * go_2(-1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.119372696, 0.013176554, -0.029381052, 0.21919228, 0.045041792, 0.24844484, 0.26363325, 0.08480674, 0.087083444, 0.11984778, -0.088715754, 0.06421046, 0.05225977, -0.05140334, -0.055052705, -0.049854077) * go_2(-1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.0035781674, 0.0861361, -0.07675145, -0.056479637, 0.16973391, -0.12113791, 0.10729832, -0.03773517, 0.058618728, 0.12148276, 0.17260705, -0.06968724, 0.076358154, -0.15307103, 0.17700425, -0.13467014) * go_2(-1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.02752418, -0.06366472, -0.025610954, 0.0013539721, -0.06465272, 0.0806373, -0.07336035, 0.10114861, 0.0041146413, 0.15878421, -0.044668555, -0.12150811, -0.1071482, -0.05086587, 0.18589285, 0.05065092) * go_2(0.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.07200056, 0.021739854, 0.29476613, -0.08475931, 0.15018553, -0.07886365, 0.36336347, -0.020576432, 0.25866082, -0.059272554, 0.054249667, -0.17822553, 0.1755872, 0.3244387, -0.39173844, 0.33894604) * go_2(0.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.11570926, 0.1342677, -0.19511898, 0.0075454637, -0.01890476, -0.14239742, 0.18921931, 0.033990458, 0.31306365, -0.006998358, 0.029190077, -0.005679954, -0.15341778, 0.07766778, -0.25691047, -0.0964161) * go_2(0.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.019746238, 0.0021332854, -0.00879096, -0.1338671, -0.0001600663, -0.29465106, 0.0867611, -0.114963025, 0.07874301, -0.012734178, -0.11124061, -0.010926616, -0.04941506, -0.07516841, 0.116663, -0.29018974) * go_2(1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.01651721, 0.05955898, 0.023618208, 0.098695934, 0.018553663, -0.054378513, 0.1436929, 0.1693743, -0.27483663, 0.029127488, 0.09619316, -0.06109113, -0.08619361, 0.09315214, -0.02478657, 0.18544984) * go_2(1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.09570196, -0.016528936, -0.1559397, 0.14312246, 0.04029428, 0.08773151, -0.043646842, 0.17894371, -0.082413055, 0.0027082344, -0.100171275, 0.01547501, 0.18122818, -0.11933676, 0.26404107, -0.3169703) * go_2(1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.12073344, 0.08683522, -0.09249099, 0.058786053, -0.14480567, -0.121013954, 0.033335857, 0.009353379, -0.055087596, -0.13002734, 0.08890566, 0.05508963, -0.0075715426, -0.15936922, -0.03968994, -0.1690259) * go_3(-1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.2011206, 0.23898427, 0.23656492, 0.1287573, 0.14850396, 0.40532517, -0.107408255, 0.40119782, 0.099813245, -0.03830304, 0.101520434, -0.026478073, -0.048469637, 0.106440455, 0.056632314, -0.17825997) * go_3(-1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.076735444, 0.05965795, -0.0052469415, -0.21785147, 0.11887833, 0.067560315, 0.051149055, 0.23626682, -0.1297049, -0.035512198, 0.20352256, -0.025064934, 0.04958706, 0.0454198, 0.0113334535, 0.0417486) * go_3(-1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.09055751, 0.033915352, -0.21836667, 0.22006813, -0.099022895, 0.11720966, -0.15686816, -0.13586599, -0.094427735, -0.08831514, -0.06182928, 0.09213704, -0.03642064, 0.18129414, -0.012926811, 0.12179882) * go_3(0.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.19389409, 0.09512252, 0.14768016, -0.16623649, -0.031052284, -0.026814984, 0.106168024, -0.2026781, -0.04581419, -0.0016849053, -0.04101923, 0.038959503, -0.011938445, 0.20096186, -0.26666564, 0.4824324) * go_3(0.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.17727576, 0.07309147, 0.12131863, -0.163096, 0.17225246, 0.26256254, 0.27685758, 0.09094053, 0.029605515, -0.20217367, 0.047564875, 0.043115832, 0.15089568, -0.09670934, 0.24131384, 0.03337442) * go_3(0.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.34192136, 0.12063195, -0.31159517, 0.04170889, -0.30147067, -0.21330686, -0.1514457, -0.121126845, 0.04409098, 9.2206596e-05, 0.027680017, 0.03230512, -0.27993527, -0.093485355, 0.07568645, -0.23585452) * go_3(1.0, -1.0);
[   0.880][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.0537712, -0.20847629, 0.1740093, -0.013894753, -0.32719997, -0.059484575, -0.006098233, -0.10336451, -0.14706188, -0.07424865, -0.07045905, 0.17093194, -0.22147557, 0.09086218, -0.11033544, -0.05306482) * go_3(1.0, 0.0);
[   0.880][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.00489003, -0.11509064, -0.021005848, 0.16637677, -0.089347586, 0.17545725, -0.17313693, 0.13742085, -0.14577347, 0.07951095, -0.092139855, 0.017118992, -0.053472433, 0.079414465, 0.0330263, -0.11189824) * go_3(1.0, 1.0);
[   0.880][d][vo/gpu-next/libplacebo] [111]     result += vec4(-0.034743138, 0.012946433, -0.082333155, 0.07721756);
[   0.880][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.880][d][vo/gpu-next/libplacebo] [113] }
[   0.880][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.880][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.880][d][vo/gpu-next/libplacebo] [116] return color;
[   0.880][d][vo/gpu-next/libplacebo] [117] }
[   0.880][d][vo/gpu-next/libplacebo] [118] 
[   0.880][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.880][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.880][d][vo/gpu-next/libplacebo] [121] }
[   0.881][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.882][d][vo/gpu-next/libplacebo] Spent 1.486 ms translating GLSL to SPIR-V
[   0.882][d][vo/gpu-next/libplacebo] Spent 0.144 ms translating SPIR-V to HLSL
[   0.883][d][vo/gpu-next/libplacebo] Spent 1.215 ms translating HLSL to DXBC
[   0.883][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.883][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.883][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.883][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.883][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.883][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.883][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.883][d][vo/gpu-next/libplacebo] [  7] 
[   0.883][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.883][d][vo/gpu-next/libplacebo] [  9] {
[   0.883][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.883][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.883][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.883][d][vo/gpu-next/libplacebo] [ 13] };
[   0.883][d][vo/gpu-next/libplacebo] [ 14] 
[   0.883][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.883][d][vo/gpu-next/libplacebo] [ 16] {
[   0.883][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.883][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.883][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.883][d][vo/gpu-next/libplacebo] [ 20] };
[   0.883][d][vo/gpu-next/libplacebo] [ 21] 
[   0.883][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.883][d][vo/gpu-next/libplacebo] [ 23] {
[   0.883][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.883][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.883][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.883][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.883][d][vo/gpu-next/libplacebo] [ 28] }
[   0.883][d][vo/gpu-next/libplacebo] [ 29] 
[   0.883][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.883][d][vo/gpu-next/libplacebo] [ 31] {
[   0.883][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.883][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.883][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.883][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.883][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.883][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.883][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.883][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.883][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.883][d][vo/gpu-next/libplacebo] [ 41] }
[   0.893][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.893][d][vo/gpu-next/libplacebo] Spent 9.722 ms translating GLSL to SPIR-V
[   0.894][d][vo/gpu-next/libplacebo] Spent 1.612 ms translating SPIR-V to HLSL
[   0.919][v][vo/gpu-next/libplacebo] Spent 24.635 ms translating HLSL to DXBC
[   0.919][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.919][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.919][d][vo/gpu-next/libplacebo] [  2] {
[   0.919][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.919][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.919][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.919][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.919][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.919][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.919][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.919][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.919][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.919][d][vo/gpu-next/libplacebo] [ 12] };
[   0.919][d][vo/gpu-next/libplacebo] [ 13] 
[   0.919][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.919][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.919][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.919][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.919][d][vo/gpu-next/libplacebo] [ 18] 
[   0.919][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.919][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.919][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.919][d][vo/gpu-next/libplacebo] [ 22] 
[   0.919][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.919][d][vo/gpu-next/libplacebo] [ 24] {
[   0.919][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.919][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.919][d][vo/gpu-next/libplacebo] [ 27] };
[   0.919][d][vo/gpu-next/libplacebo] [ 28] 
[   0.919][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.919][d][vo/gpu-next/libplacebo] [ 30] {
[   0.919][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.919][d][vo/gpu-next/libplacebo] [ 32] };
[   0.919][d][vo/gpu-next/libplacebo] [ 33] 
[   0.919][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.919][d][vo/gpu-next/libplacebo] [ 35] {
[   0.919][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.919][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.919][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.919][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.067385010421276092529296875f, 0.0340092070400714874267578125f, -0.21538448333740234375f, 0.14296548068523406982421875f), float4(0.128969848155975341796875f, -0.23526315391063690185546875f, -0.088486082851886749267578125f, 0.01960266195237636566162109375f), float4(0.14937137067317962646484375f, 0.1135309636592864990234375f, 0.1188416779041290283203125f, -0.016765572130680084228515625f), float4(0.0309852249920368194580078125f, 0.046430565416812896728515625f, 0.066148281097412109375f, -0.1920272409915924072265625f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.10326068103313446044921875f, 0.110149748623371124267578125f, 0.17069743573665618896484375f, -0.21474148333072662353515625f), float4(0.16761584579944610595703125f, 0.13434831798076629638671875f, -0.101021073758602142333984375f, 0.0063070249743759632110595703125f), float4(0.0747800767421722412109375f, -0.106006599962711334228515625f, 0.035315692424774169921875f, 0.03348891437053680419921875f), float4(-0.2490665912628173828125f, 0.062699668109416961669921875f, 0.11120735108852386474609375f, -0.04092852771282196044921875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0933461487293243408203125f, 0.057705752551555633544921875f, 0.1221324503421783447265625f, -0.0640227496623992919921875f), float4(0.30694544315338134765625f, 0.03458516299724578857421875f, 0.2034557759761810302734375f, 0.07489286363124847412109375f), float4(0.07483617961406707763671875f, -0.14240396022796630859375f, 0.034846417605876922607421875f, -0.038112409412860870361328125f), float4(0.01088257320225238800048828125f, 0.132042944431304931640625f, 0.01756392419338226318359375f, -0.0472030080854892730712890625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2167394161224365234375f, -0.024010993540287017822265625f, -0.102385036647319793701171875f, -0.0411603264510631561279296875f), float4(0.068381629884243011474609375f, -0.2095081806182861328125f, 0.065263092517852783203125f, -0.079094924032688140869140625f), float4(0.02208820916712284088134765625f, -0.281309783458709716796875f, 0.08627511560916900634765625f, -0.089067615568637847900390625f), float4(0.12133826315402984619140625f, -0.0626001060009002685546875f, -0.02052190341055393218994140625f, -0.076544009149074554443359375f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0305502898991107940673828125f, -0.15683145821094512939453125f, -0.20331300795078277587890625f, -0.06252028048038482666015625f), float4(0.13350681960582733154296875f, 0.20338706672191619873046875f, 0.0384253375232219696044921875f, 0.15813420712947845458984375f), float4(-0.2732249796390533447265625f, -0.14999662339687347412109375f, -0.16681097447872161865234375f, 0.097158499062061309814453125f), float4(-0.20014858245849609375f, -0.081635273993015289306640625f, -0.078187696635723114013671875f, -0.20625232160091400146484375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.3837597668170928955078125f, -0.01982565410435199737548828125f, 0.1886720955371856689453125f, 0.2261631190776824951171875f), float4(0.340217292308807373046875f, 0.18253040313720703125f, -0.0553119517862796783447265625f, 0.309732258319854736328125f), float4(-0.2676022946834564208984375f, 0.14413352310657501220703125f, 0.02170698344707489013671875f, 0.0173279903829097747802734375f), float4(0.234668552875518798828125f, -0.1380596458911895751953125f, 0.2257093489170074462890625f, 0.0181038677692413330078125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.15169824659824371337890625f, 0.02706889994442462921142578125f, -0.2503316104412078857421875f, 0.17289824783802032470703125f), float4(-0.1643764674663543701171875f, 0.0392330475151538848876953125f, -0.355724871158599853515625f, -0.048393793404102325439453125f), float4(0.1927004158496856689453125f, 0.24260358512401580810546875f, 0.120418809354305267333984375f, -0.000979391275905072689056396484375f), float4(0.11656858026981353759765625f, 0.110074140131473541259765625f, -0.075749099254608154296875f, 0.0479336120188236236572265625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.18657998740673065185546875f, -0.11252565681934356689453125f, -0.052375040948390960693359375f, -0.0736809670925140380859375f), float4(0.1388274133205413818359375f, -0.13710637390613555908203125f, -0.0069964681752026081085205078125f, -0.0623548738658428192138671875f), float4(0.23452503979206085205078125f, 0.15333645045757293701171875f, -0.00227764062583446502685546875f, -0.179104387760162353515625f), float4(0.0362950898706912994384765625f, -0.1626482903957366943359375f, -0.0100118331611156463623046875f, -0.15313337743282318115234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.060544557869434356689453125f, -0.0491347797214984893798828125f, -0.0617173574864864349365234375f, 0.0232364796102046966552734375f), float4(0.2873905599117279052734375f, -0.074340127408504486083984375f, 0.19110643863677978515625f, 0.10005016624927520751953125f), float4(0.007336304523050785064697265625f, 0.081856526434421539306640625f, -0.02479790337383747100830078125f, -0.14424152672290802001953125f), float4(-0.20838725566864013671875f, 0.1615437567234039306640625f, -0.04851721227169036865234375f, -0.025453887879848480224609375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1497539579868316650390625f, -0.13142907619476318359375f, 0.362106740474700927734375f, -0.054021082818508148193359375f), float4(-0.106321550905704498291015625f, 0.045697934925556182861328125f, -0.1894663274288177490234375f, 0.02228141017258167266845703125f), float4(-0.089196026325225830078125f, 0.098008416593074798583984375f, -0.17634437978267669677734375f, 0.095127113163471221923828125f), float4(-0.0342550314962863922119140625f, -0.122985549271106719970703125f, -0.053544349968433380126953125f, -0.1711205542087554931640625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.099582649767398834228515625f, -0.0572766177356243133544921875f, -0.1626226603984832763671875f, -0.064159147441387176513671875f), float4(0.14579074084758758544921875f, -0.36784374713897705078125f, 0.080341972410678863525390625f, -0.04537706077098846435546875f), float4(0.0054605822078883647918701171875f, 0.22313322126865386962890625f, 0.073821611702442169189453125f, 0.014990379102528095245361328125f), float4(0.04463684558868408203125f, -0.28111279010772705078125f, -0.22621546685695648193359375f, -0.060440041124820709228515625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.10569275915622711181640625f, -0.037386618554592132568359375f, 0.16100396215915679931640625f, 0.05859361588954925537109375f), float4(-0.048862136900424957275390625f, -0.087964259088039398193359375f, 0.2010109424591064453125f, -0.110395729541778564453125f), float4(0.17196764051914215087890625f, -0.046015538275241851806640625f, 0.008571281097829341888427734375f, -0.073729075491428375244140625f), float4(0.0514336936175823211669921875f, -0.05127656459808349609375f, 0.087334655225276947021484375f, -0.036037899553775787353515625f)));
[   0.919][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.919][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.919][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.011119537986814975738525390625f, -0.2878196537494659423828125f, 0.286378681659698486328125f, -0.17425079643726348876953125f), float4(-0.0712184906005859375f, 0.1037971675395965576171875f, 0.01261598058044910430908203125f, -0.02956396527588367462158203125f), float4(-0.1867842376232147216796875f, 0.0529109500348567962646484375f, 0.0391435064375400543212890625f, -0.0282486416399478912353515625f), float4(-0.014103922061622142791748046875f, 0.02915569581091403961181640625f, 0.1043349206447601318359375f, 0.1630585193634033203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.223103702068328857421875f, -0.13697461783885955810546875f, -0.291243374347686767578125f, 0.08519773185253143310546875f), float4(0.15893684327602386474609375f, -0.1776321828365325927734375f, 0.069509230554103851318359375f, 0.343611180782318115234375f), float4(-0.02484428696334362030029296875f, 0.0440084077417850494384765625f, -0.03384484350681304931640625f, -0.086971916258335113525390625f), float4(-0.07884748280048370361328125f, 0.254349887371063232421875f, 0.0568841136991977691650390625f, 0.100683636963367462158203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.077100478112697601318359375f, -0.2321837246417999267578125f, 0.0434604696929454803466796875f, 0.2176964282989501953125f), float4(0.064732186496257781982421875f, -0.1806610524654388427734375f, -0.251120507717132568359375f, 0.1530961096286773681640625f), float4(0.0453597716987133026123046875f, 0.16450433433055877685546875f, 0.1084634363651275634765625f, 0.00169523456133902072906494140625f), float4(-0.010874939151108264923095703125f, 0.2896638214588165283203125f, -0.12199096381664276123046875f, 0.12956185638904571533203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.007910202257335186004638671875f, 0.17766511440277099609375f, 0.143644750118255615234375f, 0.10162580013275146484375f), float4(0.0051045394502580165863037109375f, 0.1869173347949981689453125f, 0.005813767202198505401611328125f, -0.0070582185871899127960205078125f), float4(0.0194186009466648101806640625f, -0.16044349968433380126953125f, 0.01608827523887157440185546875f, -0.18265302479267120361328125f), float4(-0.15719391405582427978515625f, -0.17369832098484039306640625f, -0.0367455966770648956298828125f, -0.1964740753173828125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.08938395977020263671875f, -0.0073808245360851287841796875f, 0.1122572720050811767578125f, -0.012303105555474758148193359375f), float4(0.096785046160221099853515625f, 0.03048344515264034271240234375f, 0.0277198888361454010009765625f, -0.0525848381221294403076171875f), float4(-0.14887554943561553955078125f, -0.034222431480884552001953125f, 0.12646855413913726806640625f, -0.17224819958209991455078125f), float4(0.01023903675377368927001953125f, 0.06406088173389434814453125f, -0.2005365788936614990234375f, 0.019646979868412017822265625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.120734035968780517578125f, -0.124503619968891143798828125f, -0.065821111202239990234375f, 0.16396750509738922119140625f), float4(-0.19787047803401947021484375f, -0.0804978907108306884765625f, -0.014257595874369144439697265625f, 0.0584366619586944580078125f), float4(-0.0009387449244968593120574951171875f, -0.086980886757373809814453125f, -0.0174005031585693359375f, 0.06295286118984222412109375f), float4(0.09890349209308624267578125f, -0.05719052255153656005859375f, -0.10352076590061187744140625f, -0.0420754812657833099365234375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.011841387487947940826416015625f, -0.0312888361513614654541015625f, 0.09749554097652435302734375f, -0.0122664012014865875244140625f), float4(-0.079985909163951873779296875f, 0.226156532764434814453125f, -0.0620741583406925201416015625f, 0.03257896006107330322265625f), float4(-0.076378695666790008544921875f, -0.07942609488964080810546875f, -0.1396834850311279296875f, -0.154236972332000732421875f), float4(-0.10916809737682342529296875f, -0.02893125079572200775146484375f, -0.0326595343649387359619140625f, -0.063735924661159515380859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.1193726956844329833984375f, 0.013176553882658481597900390625f, -0.02938105165958404541015625f, 0.21919228136539459228515625f), float4(0.045041792094707489013671875f, 0.24844484031200408935546875f, 0.263633251190185546875f, 0.084806740283966064453125f), float4(0.08708344399929046630859375f, 0.119847781956195831298828125f, -0.088715754449367523193359375f, 0.06421045958995819091796875f), float4(0.0522597692906856536865234375f, -0.0514033399522304534912109375f, -0.055052705109119415283203125f, -0.049854077398777008056640625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0035781674087047576904296875f, 0.0861361026763916015625f, -0.076751448214054107666015625f, -0.0564796365797519683837890625f), float4(0.1697339117527008056640625f, -0.121137909591197967529296875f, 0.107298322021961212158203125f, -0.037735171616077423095703125f), float4(0.0586187280714511871337890625f, 0.1214827597141265869140625f, 0.17260704934597015380859375f, -0.069687239825725555419921875f), float4(0.07635815441608428955078125f, -0.15307103097438812255859375f, 0.1770042479038238525390625f, -0.13467013835906982421875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.027524180710315704345703125f, -0.06366471946239471435546875f, -0.0256109535694122314453125f, 0.0013539721257984638214111328125f), float4(-0.064652718603610992431640625f, 0.080637298524379730224609375f, -0.0733603537082672119140625f, 0.101148612797260284423828125f), float4(0.0041146413423120975494384765625f, 0.158784210681915283203125f, -0.04466855525970458984375f, -0.12150810658931732177734375f), float4(-0.1071482002735137939453125f, -0.0508658699691295623779296875f, 0.1858928501605987548828125f, 0.0506509207189083099365234375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.072000563144683837890625f, 0.02173985354602336883544921875f, 0.294766128063201904296875f, -0.08475930988788604736328125f), float4(0.150185525417327880859375f, -0.0788636505603790283203125f, 0.3633634746074676513671875f, -0.02057643234729766845703125f), float4(0.2586608231067657470703125f, -0.0592725537717342376708984375f, 0.054249666631221771240234375f, -0.17822553217411041259765625f), float4(0.1755872070789337158203125f, 0.32443869113922119140625f, -0.3917384445667266845703125f, 0.338946044445037841796875f)));
[   0.919][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.11570926010608673095703125f, 0.13426770269870758056640625f, -0.19511897861957550048828125f, 0.007545463740825653076171875f), float4(-0.01890476047992706298828125f, -0.14239741861820220947265625f, 0.18921931087970733642578125f, 0.03399045765399932861328125f), float4(0.3130636513233184814453125f, -0.0069983578287065029144287109375f, 0.02919007651507854461669921875f, -0.0056799538433551788330078125f), float4(-0.15341778099536895751953125f, 0.077667780220508575439453125f, -0.2569104731082916259765625f, -0.09641610085964202880859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.01974623836576938629150390625f, 0.00213328539393842220306396484375f, -0.008790959604084491729736328125f, -0.13386709988117218017578125f), float4(-0.000160066294483840465545654296875f, -0.2946510612964630126953125f, 0.08676110208034515380859375f, -0.1149630248546600341796875f), float4(0.0787430107593536376953125f, -0.0127341784536838531494140625f, -0.11124061048030853271484375f, -0.010926616378128528594970703125f), float4(-0.049415059387683868408203125f, -0.075168408453464508056640625f, 0.116663001477718353271484375f, -0.2901897430419921875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0165172107517719268798828125f, 0.059558980166912078857421875f, 0.02361820824444293975830078125f, 0.098695933818817138671875f), float4(0.0185536630451679229736328125f, -0.0543785132467746734619140625f, 0.14369289577007293701171875f, 0.16937430202960968017578125f), float4(-0.2748366296291351318359375f, 0.02912748791277408599853515625f, 0.096193157136440277099609375f, -0.0610911287367343902587890625f), float4(-0.086193613708019256591796875f, 0.093152143061161041259765625f, -0.024786569178104400634765625f, 0.1854498386383056640625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0957019627094268798828125f, -0.01652893610298633575439453125f, -0.15593969821929931640625f, 0.1431224644184112548828125f), float4(0.0402942784130573272705078125f, 0.0877315104007720947265625f, -0.0436468422412872314453125f, 0.17894370853900909423828125f), float4(-0.082413055002689361572265625f, 0.0027082343585789203643798828125f, -0.100171275436878204345703125f, 0.015475009568035602569580078125f), float4(0.18122817575931549072265625f, -0.119336761534214019775390625f, 0.26404106616973876953125f, -0.316970288753509521484375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.120733439922332763671875f, 0.08683522045612335205078125f, -0.092490993440151214599609375f, 0.0587860532104969024658203125f), float4(-0.1448056697845458984375f, -0.12101395428180694580078125f, 0.033335857093334197998046875f, 0.00935337878763675689697265625f), float4(-0.0550875961780548095703125f, -0.13002733886241912841796875f, 0.0889056622982025146484375f, 0.055089630186557769775390625f), float4(-0.00757154263556003570556640625f, -0.15936921536922454833984375f, -0.0396899394690990447998046875f, -0.169025897979736328125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.20112060010433197021484375f, 0.23898427188396453857421875f, 0.23656491935253143310546875f, 0.128757297992706298828125f), float4(0.148503959178924560546875f, 0.4053251743316650390625f, -0.1074082553386688232421875f, 0.4011978209018707275390625f), float4(0.099813245236873626708984375f, -0.038303039968013763427734375f, 0.10152043402194976806640625f, -0.02647807262837886810302734375f), float4(-0.0484696365892887115478515625f, 0.1064404547214508056640625f, 0.0566323138773441314697265625f, -0.17825996875762939453125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.076735444366931915283203125f, 0.0596579499542713165283203125f, -0.0052469414658844470977783203125f, -0.21785147488117218017578125f), float4(0.118878327310085296630859375f, 0.06756031513214111328125f, 0.05114905536174774169921875f, 0.2362668216228485107421875f), float4(-0.129704892635345458984375f, -0.0355121977627277374267578125f, 0.20352256298065185546875f, -0.0250649340450763702392578125f), float4(0.0495870597660541534423828125f, 0.0454198010265827178955078125f, 0.011333453468978404998779296875f, 0.04174859821796417236328125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.090557508170604705810546875f, 0.0339153520762920379638671875f, -0.21836666762828826904296875f, 0.2200681269168853759765625f), float4(-0.0990228950977325439453125f, 0.11720965802669525146484375f, -0.156868159770965576171875f, -0.135865986347198486328125f), float4(-0.0944277346134185791015625f, -0.088315136730670928955078125f, -0.0618292801082134246826171875f, 0.092137038707733154296875f), float4(-0.0364206396043300628662109375f, 0.181294143199920654296875f, -0.01292681135237216949462890625f, 0.121798820793628692626953125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.193894088268280029296875f, 0.095122523605823516845703125f, 0.14768016338348388671875f, -0.1662364900112152099609375f), float4(-0.031052283942699432373046875f, -0.02681498415768146514892578125f, 0.106168024241924285888671875f, -0.20267809927463531494140625f), float4(-0.0458141900599002838134765625f, -0.00168490526266396045684814453125f, -0.0410192310810089111328125f, 0.038959503173828125f), float4(-0.011938445270061492919921875f, 0.2009618580341339111328125f, -0.266665637493133544921875f, 0.4824323952198028564453125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.17727576196193695068359375f, 0.073091469705104827880859375f, 0.121318630874156951904296875f, -0.16309599578380584716796875f), float4(0.17225246131420135498046875f, 0.2625625431537628173828125f, 0.2768575847148895263671875f, 0.090940527617931365966796875f), float4(0.029605515301227569580078125f, -0.20217366516590118408203125f, 0.0475648753345012664794921875f, 0.043115831911563873291015625f), float4(0.1508956849575042724609375f, -0.0967093408107757568359375f, 0.2413138449192047119140625f, 0.033374421298503875732421875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.3419213593006134033203125f, 0.12063194811344146728515625f, -0.3115951716899871826171875f, 0.0417088903486728668212890625f), float4(-0.3014706671237945556640625f, -0.21330685913562774658203125f, -0.15144570171833038330078125f, -0.12112684547901153564453125f), float4(0.044090978801250457763671875f, 9.2206595581956207752227783203125e-05f, 0.027680017054080963134765625f, 0.03230512142181396484375f), float4(-0.2799352705478668212890625f, -0.093485355377197265625f, 0.075686447322368621826171875f, -0.23585452139377593994140625f)));
[   0.919][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0537712015211582183837890625f, -0.20847629010677337646484375f, 0.1740092933177947998046875f, -0.013894752599298954010009765625f), float4(-0.3271999657154083251953125f, -0.0594845749437808990478515625f, -0.006098233163356781005859375f, -0.10336451232433319091796875f), float4(-0.147061884403228759765625f, -0.074248649179935455322265625f, -0.07045905292034149169921875f, 0.17093193531036376953125f), float4(-0.2214755713939666748046875f, 0.090862177312374114990234375f, -0.1103354394435882568359375f, -0.0530648194253444671630859375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0048900297842919826507568359375f, -0.1150906383991241455078125f, -0.02100584842264652252197265625f, 0.166376769542694091796875f), float4(-0.08934758603572845458984375f, 0.17545725405216217041015625f, -0.17313693463802337646484375f, 0.13742084801197052001953125f), float4(-0.145773470401763916015625f, 0.079510949552059173583984375f, -0.09213985502719879150390625f, 0.01711899228394031524658203125f), float4(-0.0534724332392215728759765625f, 0.079414464533329010009765625f, 0.033026300370693206787109375f, -0.111898243427276611328125f)))) + float4(-0.034743137657642364501953125f, 0.012946433387696743011474609375f, -0.082333154976367950439453125f, 0.077217556536197662353515625f);
[   0.919][d][vo/gpu-next/libplacebo] [ 56] }
[   0.919][d][vo/gpu-next/libplacebo] [ 57] 
[   0.919][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.919][d][vo/gpu-next/libplacebo] [ 59] {
[   0.919][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.919][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.919][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.919][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.919][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.919][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.919][d][vo/gpu-next/libplacebo] [ 66] }
[   0.922][d][vo/gpu-next] cache_save_obj: key(58fa4b1bec3b5704), size(11845), save time(2.704 ms)
[   0.922][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.922][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.922][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.923][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.923][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.923][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.923][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.923][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.923][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.923][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.923][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.923][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.923][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.923][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.923][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.923][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.923][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.923][d][vo/gpu-next/libplacebo] [ 16] };
[   0.923][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.923][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.923][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.923][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.923][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.923][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.923][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.923][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.923][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.923][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.923][d][vo/gpu-next/libplacebo] [ 27] }
[   0.923][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.923][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.923][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.923][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.923][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.923][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.923][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.923][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.923][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.923][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.923][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.923][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.923][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.923][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.923][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.923][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.923][d][vo/gpu-next/libplacebo] [ 16] };
[   0.923][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.923][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.923][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.923][d][vo/gpu-next/libplacebo] [ 20] 
[   0.923][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_3_tf_raw _2 
[   0.923][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_3_tf_pos _3 
[   0.923][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_3_tf_map _3_map 
[   0.923][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_3_tf_size vec2(textureSize(_2, 0)) 
[   0.923][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_3_tf_pt _4 
[   0.923][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_3_tf_off _5 
[   0.923][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.923][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_3_tf_mul _6 
[   0.923][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_3_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.923][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_3_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.923][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_3_tf_texOff(off) (conv2d_3_tf_tex(_3 + _4 * vec2(off))) 
[   0.923][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_3_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.923][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_3_tf1_raw _7 
[   0.923][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_3_tf1_pos _8 
[   0.923][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_3_tf1_map _8_map 
[   0.923][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_3_tf1_size vec2(textureSize(_7, 0)) 
[   0.923][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_3_tf1_pt _9 
[   0.923][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_3_tf1_off _a 
[   0.923][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.923][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_3_tf1_mul _b 
[   0.923][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_3_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.923][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_3_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.923][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_3_tf1_texOff(off) (conv2d_3_tf1_tex(_8 + _9 * vec2(off))) 
[   0.923][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_3_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.923][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.923][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.923][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.923][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.923][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.923][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.923][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.923][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.923][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.923][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.923][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.923][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.923][d][vo/gpu-next/libplacebo] [ 57] }
[   0.923][d][vo/gpu-next/libplacebo] [ 58] 
[   0.923][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.923][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.923][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.923][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.923][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.923][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.923][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.923][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.923][d][vo/gpu-next/libplacebo] [ 67] }
[   0.923][d][vo/gpu-next/libplacebo] [ 68] 
[   0.923][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.923][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.923][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.923][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_3_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.923][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_3_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.923][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.923][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.25835788, 0.050451655, -0.1845038, -0.07232528, 0.1323318, 0.26276684, 0.10842882, -0.083056524, 0.17426784, -0.3594826, 0.2728965, 0.08388844, -0.004007842, 0.020535901, -0.051425606, 0.07750436) * go_0(-1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.11410436, 0.014572361, -0.27057216, -0.023974562, 0.05234827, 0.15328228, -0.17502303, -0.3199359, 0.12188045, -0.095813684, 0.024145132, 0.0856916, -0.027453909, -0.043129764, 0.16971985, 0.021623038) * go_0(-1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.06611095, 0.038625732, -0.13717118, -0.04497733, 0.15213469, 0.04770935, 0.0729271, -0.062052976, 0.004571303, 0.035141192, -0.059409596, 0.044652313, 0.17520894, 0.09665589, -0.1479193, 0.06528058) * go_0(-1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.1845968, 0.091479465, -0.09394898, -0.13545018, -0.029501775, -0.21426639, 0.09255898, 0.1257644, 0.20256902, 0.06267267, 0.10378081, 0.13494423, 0.058310498, 0.03642236, -0.16268995, -0.048100803) * go_0(0.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(0.2155119, -0.3683131, 0.049449228, -0.20559964, -0.11761922, -0.2518804, -0.020712897, 0.12895772, -0.07543782, 0.5805017, -0.11301444, -0.038493153, -0.06710986, -0.09321189, 0.108671665, -0.03259695) * go_0(0.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.035307787, 0.108389005, -0.27493554, 0.27029404, 0.25523573, -0.28636125, -0.20766719, -0.008661457, -0.004480811, -0.046390545, -0.16221444, 0.008979624, -0.061375532, 0.035076566, -0.018924266, 0.01380219) * go_0(0.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.051922515, -0.12463486, -0.10383422, 0.02220095, -0.1573033, 0.13980615, 0.13248625, -0.16803266, -0.0692132, -0.21552645, 0.13744529, 0.23034313, 0.0052666534, 0.028977966, 0.07720251, -0.06477756) * go_0(1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.14097473, 0.2770271, -0.172289, -0.03000696, -0.028684044, 0.040578447, -0.2290285, 0.082329154, -0.042402364, -0.20926563, 0.08233207, 0.11862443, -0.07038536, -0.02273004, 0.091550544, -0.065856494) * go_0(1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.14879914, -0.023923844, -0.23569296, 0.20306346, 0.17502785, 0.28776234, -0.2788995, 0.10012439, -0.05635638, -0.025840463, 0.09222198, 0.118032, 0.08057015, 0.1286071, 0.060189806, -0.052669708) * go_0(1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.07076086, -0.15111323, -0.07427972, 0.008372168, -0.17791592, -0.16254742, 0.013961132, -0.0944912, -0.23380096, 0.17377278, -0.09683394, 0.019931393, -0.12042098, 0.0016406325, 0.09393333, -0.06882231) * go_1(-1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.21465093, 0.04142968, 0.06840044, -0.37831602, -0.05549571, 0.044905066, -0.07873589, -0.026804, -0.34764197, 0.022487951, -0.077293746, 0.089457795, -0.110094436, 0.24233972, 0.06285107, -0.10851744) * go_1(-1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.093270175, 0.084138945, 0.03938272, 0.063565865, -0.010733802, 0.13554469, -0.06650261, 0.033002816, 0.011187271, -0.12821455, 0.20785914, -0.030438649, -0.124710515, -0.022294303, 0.09732408, 0.057609864) * go_1(-1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.12833868, 0.021577539, -0.02700365, 0.11799592, -0.03655647, -0.04225167, 0.11049353, -0.16036157, 0.049277548, -0.033842396, 0.10020137, 0.095509745, 0.08060231, -0.09237418, -0.035598125, -0.035926737) * go_1(0.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.32829186, 0.3492363, 0.030671779, -0.12606762, 0.010437313, 0.2757115, -0.21517593, -0.15800527, -0.12592544, -0.20578934, 0.10444053, 0.12993255, -0.046079267, 0.03834173, -0.19277227, -0.22124454) * go_1(0.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.052546192, 0.026082167, 0.13831234, 0.10982424, 0.012946818, -0.12439852, 0.10134106, -0.10050398, -0.04472338, -0.14325236, -0.20579574, 0.0044005127, 0.22013672, -0.32955512, 0.12404084, -0.008160738) * go_1(0.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.10774314, -0.31650826, -0.06601711, 0.19635755, -0.12622592, -0.06396423, 0.13856032, 0.16540553, 0.021387719, 0.23377723, -0.053738154, -0.1000186, -0.08338395, -0.052813534, 0.008122962, 0.13732094) * go_1(1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.18270823, 0.06966014, -0.17788303, -0.27303055, -0.077971615, 0.013978423, -0.02039098, 0.12715338, -0.11924171, 0.18900296, -0.085199654, 0.215198, 0.18587974, -0.009749325, 0.0173584, -0.12018259) * go_1(1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.052129295, -0.107416354, 0.12711766, 0.03708665, -0.14369462, -0.055359814, -0.16639823, -0.045143317, -0.06925672, -0.040696755, 0.01999809, -0.016040625, -0.02484878, 0.07417094, 0.050875198, 0.2145528) * go_1(1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.055696912, -0.16680926, -0.021987487, 0.024941636, -0.0927883, 0.022136632, 0.033782948, -0.10646058, -0.14944647, 0.25457275, 0.046682496, -0.022462368, -0.07886781, 0.08165927, 0.06848105, 0.0063734027) * go_2(-1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.037053242, 0.033215813, 0.18291366, 0.12340375, 0.08491059, -0.28442004, -0.0127422465, -0.039834313, -0.23321372, 0.26676926, -0.05636355, -0.15672484, -0.12891728, -0.15486577, -0.032004442, -0.092745155) * go_2(-1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.015779478, -0.18457565, 0.24996394, 0.036197674, 0.15694007, 0.15863103, -0.07332398, 0.0016235278, -0.15536517, -0.056062788, 0.14102836, 0.16915025, -0.08001087, 0.07073164, 0.13796777, 0.123867124) * go_2(-1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.045792986, -0.15135059, -0.1354885, -0.043678258, -0.35655212, 0.51232076, -0.12816145, -0.046569496, -0.014127674, -0.06282611, -0.098873, -0.06359104, -0.0919222, 0.11822437, 0.079254694, 0.00579688) * go_2(0.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.15683417, 0.61610246, -0.3024612, 0.12917964, -0.09303367, 0.23612969, -0.40842506, -0.12374661, -0.07572449, -0.2613284, -0.09970177, -0.015227848, 0.106239066, -0.21411185, 0.051998455, -0.1364518) * go_2(0.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.23850034, -0.14394449, -0.0031468747, -0.2380617, -0.027200876, -0.041352056, -0.01864445, 0.033848196, -0.12064239, -0.110480845, 0.08450956, -0.22328654, 0.17664163, 0.22268307, 0.050886698, -0.17475672) * go_2(0.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.17808256, 0.010803805, 0.03315186, 0.033143792, -0.14205995, 0.25039625, -0.08784382, -0.13454252, 0.19576813, 0.10755282, 0.22821628, 0.019456752, -0.0422955, -0.016182603, -0.12066697, 0.0548465) * go_2(1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.11563777, -0.257929, 0.0010403778, 0.080267854, -0.0025255163, 0.2855168, -0.060352214, -0.07816255, -0.00090574916, 0.049510725, 0.03720483, 0.059250016, -0.08674136, 0.20522198, -0.28694284, 0.1299507) * go_2(1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.14638457, 0.04063328, 0.03139636, -0.007934521, 0.07689684, -0.09467145, 0.10607347, 0.054510128, 0.003306194, 0.05347124, 0.062762424, -0.041480847, -0.07677865, -0.139573, 0.010972524, 0.21957156) * go_2(1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.026845628, -0.043439507, 0.034738723, 0.07281683, 0.14474197, 0.031586993, -0.22767854, -0.0707655, 0.105201736, -0.28805482, 0.008668302, -0.16329518, 0.06157049, 0.3803886, 0.26345953, -0.011096537) * go_3(-1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.23328833, 0.085731484, -0.07755016, 0.33559516, 0.07704345, 0.115106605, -0.24114038, -0.44630137, 0.2726737, -0.32170138, -0.009236524, -0.11666051, 0.0457048, 0.07876708, 0.13134004, -0.035318643) * go_3(-1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.05140272, 0.011605703, 0.13899171, -0.05071015, 0.18413687, -0.31413674, -0.13043414, -0.15118152, -0.15326938, -0.10720126, -0.23738635, 0.13481396, 0.25115076, -0.009316611, -0.2584441, -0.14389823) * go_3(-1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.039723795, -0.14869407, -0.1692942, 0.026501274, -0.10685166, -0.121267825, -0.08584318, -0.09580693, -0.10626739, -0.068417974, 0.11321909, -0.13664317, 0.061380867, -0.2587898, 0.14850819, 0.008178645) * go_3(0.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.06912782, 0.24230564, -0.048150286, 0.2203717, -0.17417085, 0.105546735, -0.16648416, -0.0045053074, 0.09764028, 0.37122592, -0.1939995, -0.27899942, -0.088152565, -0.53869057, 0.21676709, -0.08056594) * go_3(0.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.07651754, 0.03704878, -0.0197015, 0.1660726, 0.07002748, -0.11820414, -0.23360898, 0.1481592, 0.029847002, 0.054057185, 0.013176299, 0.06552942, -0.13865773, -0.20105527, -0.37550658, 0.005769631) * go_3(0.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.22697811, -0.17426412, 0.10148018, 0.008134666, 0.10771455, 0.16943407, -0.016319012, -0.40176705, -0.06854668, -0.049045276, 0.20919096, 0.13240765, -0.050125647, 0.14902508, 0.052697595, -0.13817468) * go_3(1.0, -1.0);
[   0.923][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.04301619, 0.23184754, -0.023551717, 0.3768405, 0.028999053, 0.06709736, -0.05993663, -0.059861984, 0.15499207, -0.22217415, 0.111131504, -0.09082529, -0.19389243, 0.024621522, -0.15305442, 0.010799284) * go_3(1.0, 0.0);
[   0.923][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.035496738, 0.010802548, -0.028718363, 0.19263634, 0.16900502, -0.16661702, -0.027631328, 0.18309957, -0.015860107, -0.03309961, -0.091390446, 0.14000848, -0.0036591904, 0.47659522, -0.09373507, -0.29020965) * go_3(1.0, 1.0);
[   0.923][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.08895955, -0.027667087, 0.20500831, 0.00037762933);
[   0.923][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.923][d][vo/gpu-next/libplacebo] [113] }
[   0.923][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.923][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.923][d][vo/gpu-next/libplacebo] [116] return color;
[   0.923][d][vo/gpu-next/libplacebo] [117] }
[   0.923][d][vo/gpu-next/libplacebo] [118] 
[   0.923][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.923][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.923][d][vo/gpu-next/libplacebo] [121] }
[   0.924][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.924][d][vo/gpu-next/libplacebo] Spent 1.316 ms translating GLSL to SPIR-V
[   0.924][d][vo/gpu-next/libplacebo] Spent 0.117 ms translating SPIR-V to HLSL
[   0.925][d][vo/gpu-next/libplacebo] Spent 1.157 ms translating HLSL to DXBC
[   0.925][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.925][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.925][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.925][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.925][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.925][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.925][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.925][d][vo/gpu-next/libplacebo] [  7] 
[   0.925][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.925][d][vo/gpu-next/libplacebo] [  9] {
[   0.925][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.925][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.925][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.925][d][vo/gpu-next/libplacebo] [ 13] };
[   0.925][d][vo/gpu-next/libplacebo] [ 14] 
[   0.925][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.925][d][vo/gpu-next/libplacebo] [ 16] {
[   0.925][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.925][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.925][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.925][d][vo/gpu-next/libplacebo] [ 20] };
[   0.925][d][vo/gpu-next/libplacebo] [ 21] 
[   0.925][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.925][d][vo/gpu-next/libplacebo] [ 23] {
[   0.925][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.925][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.925][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.925][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.925][d][vo/gpu-next/libplacebo] [ 28] }
[   0.925][d][vo/gpu-next/libplacebo] [ 29] 
[   0.925][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.925][d][vo/gpu-next/libplacebo] [ 31] {
[   0.925][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.925][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.925][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.925][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.925][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.925][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.925][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.925][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.925][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.925][d][vo/gpu-next/libplacebo] [ 41] }
[   0.935][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.935][d][vo/gpu-next/libplacebo] Spent 9.506 ms translating GLSL to SPIR-V
[   0.937][d][vo/gpu-next/libplacebo] Spent 1.746 ms translating SPIR-V to HLSL
[   0.961][v][vo/gpu-next/libplacebo] Spent 24.789 ms translating HLSL to DXBC
[   0.961][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   0.961][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   0.961][d][vo/gpu-next/libplacebo] [  2] {
[   0.961][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   0.961][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   0.961][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   0.961][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   0.961][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   0.961][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   0.961][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   0.961][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   0.961][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   0.962][d][vo/gpu-next/libplacebo] [ 12] };
[   0.962][d][vo/gpu-next/libplacebo] [ 13] 
[   0.962][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   0.962][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   0.962][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   0.962][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   0.962][d][vo/gpu-next/libplacebo] [ 18] 
[   0.962][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   0.962][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   0.962][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   0.962][d][vo/gpu-next/libplacebo] [ 22] 
[   0.962][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   0.962][d][vo/gpu-next/libplacebo] [ 24] {
[   0.962][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   0.962][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   0.962][d][vo/gpu-next/libplacebo] [ 27] };
[   0.962][d][vo/gpu-next/libplacebo] [ 28] 
[   0.962][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   0.962][d][vo/gpu-next/libplacebo] [ 30] {
[   0.962][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   0.962][d][vo/gpu-next/libplacebo] [ 32] };
[   0.962][d][vo/gpu-next/libplacebo] [ 33] 
[   0.962][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   0.962][d][vo/gpu-next/libplacebo] [ 35] {
[   0.962][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   0.962][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   0.962][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   0.962][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.25835788249969482421875f, 0.0504516549408435821533203125f, -0.1845037937164306640625f, -0.072325281798839569091796875f), float4(0.13233180344104766845703125f, 0.26276683807373046875f, 0.10842882096767425537109375f, -0.08305652439594268798828125f), float4(0.17426784336566925048828125f, -0.359482586383819580078125f, 0.2728964984416961669921875f, 0.0838884413242340087890625f), float4(-0.0040078419260680675506591796875f, 0.02053590118885040283203125f, -0.0514256060123443603515625f, 0.077504359185695648193359375f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1141043603420257568359375f, 0.014572360552847385406494140625f, -0.2705721557140350341796875f, -0.02397456206381320953369140625f), float4(0.05234827101230621337890625f, 0.15328228473663330078125f, -0.17502303421497344970703125f, -0.3199358880519866943359375f), float4(0.121880449354648590087890625f, -0.095813684165477752685546875f, 0.02414513193070888519287109375f, 0.0856916010379791259765625f), float4(-0.02745390869677066802978515625f, -0.043129764497280120849609375f, 0.1697198450565338134765625f, 0.021623037755489349365234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.06611095368862152099609375f, 0.03862573206424713134765625f, -0.1371711790561676025390625f, -0.044977329671382904052734375f), float4(0.1521346867084503173828125f, 0.0477093495428562164306640625f, 0.07292710244655609130859375f, -0.0620529763400554656982421875f), float4(0.004571302793920040130615234375f, 0.035141192376613616943359375f, -0.059409596025943756103515625f, 0.0446523129940032958984375f), float4(0.17520894110202789306640625f, 0.09665589034557342529296875f, -0.14791929721832275390625f, 0.065280579030513763427734375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1845968067646026611328125f, 0.09147946536540985107421875f, -0.093948982656002044677734375f, -0.135450184345245361328125f), float4(-0.02950177527964115142822265625f, -0.2142663896083831787109375f, 0.09255897998809814453125f, 0.1257643997669219970703125f), float4(0.20256902277469635009765625f, 0.062672667205333709716796875f, 0.103780813515186309814453125f, 0.1349442303180694580078125f), float4(0.0583104975521564483642578125f, 0.0364223606884479522705078125f, -0.1626899540424346923828125f, -0.0481008030474185943603515625f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.21551190316677093505859375f, -0.3683131039142608642578125f, 0.049449227750301361083984375f, -0.2055996358394622802734375f), float4(-0.117619216442108154296875f, -0.2518804073333740234375f, -0.02071289718151092529296875f, 0.1289577186107635498046875f), float4(-0.075437821447849273681640625f, 0.58050167560577392578125f, -0.113014437258243560791015625f, -0.0384931527078151702880859375f), float4(-0.067109860479831695556640625f, -0.0932118892669677734375f, 0.108671665191650390625f, -0.0325969494879245758056640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.035307787358760833740234375f, 0.10838900506496429443359375f, -0.274935543537139892578125f, 0.2702940404415130615234375f), float4(0.255235731601715087890625f, -0.2863612473011016845703125f, -0.20766718685626983642578125f, -0.008661457337439060211181640625f), float4(-0.00448081083595752716064453125f, -0.0463905446231365203857421875f, -0.16221444308757781982421875f, 0.00897962413728237152099609375f), float4(-0.0613755322992801666259765625f, 0.035076566040515899658203125f, -0.0189242660999298095703125f, 0.013802190311253070831298828125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.05192251503467559814453125f, -0.12463486194610595703125f, -0.103834219276905059814453125f, 0.022200949490070343017578125f), float4(-0.1573033034801483154296875f, 0.13980615139007568359375f, 0.1324862539768218994140625f, -0.16803266108036041259765625f), float4(-0.06921319663524627685546875f, -0.21552644670009613037109375f, 0.13744528591632843017578125f, 0.2303431332111358642578125f), float4(0.00526665337383747100830078125f, 0.02897796593606472015380859375f, 0.077202506363391876220703125f, -0.064777560532093048095703125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1409747302532196044921875f, 0.2770271003246307373046875f, -0.17228899896144866943359375f, -0.03000696003437042236328125f), float4(-0.02868404425680637359619140625f, 0.040578447282314300537109375f, -0.2290284931659698486328125f, 0.08232915401458740234375f), float4(-0.042402364313602447509765625f, -0.20926563441753387451171875f, 0.082332067191600799560546875f, 0.118624426424503326416015625f), float4(-0.070385359227657318115234375f, -0.02273003943264484405517578125f, 0.09155054390430450439453125f, -0.065856494009494781494140625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.14879913628101348876953125f, -0.0239238440990447998046875f, -0.23569296300411224365234375f, 0.2030634582042694091796875f), float4(0.1750278472900390625f, 0.287762343883514404296875f, -0.278899490833282470703125f, 0.1001243889331817626953125f), float4(-0.0563563816249370574951171875f, -0.02584046311676502227783203125f, 0.092221982777118682861328125f, 0.118032000958919525146484375f), float4(0.08057014644145965576171875f, 0.128607094287872314453125f, 0.060189805924892425537109375f, -0.0526697076857089996337890625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.07076086103916168212890625f, -0.15111322700977325439453125f, -0.074279718101024627685546875f, 0.008372168056666851043701171875f), float4(-0.17791591584682464599609375f, -0.16254742443561553955078125f, 0.013961131684482097625732421875f, -0.09449119865894317626953125f), float4(-0.23380096256732940673828125f, 0.1737727820873260498046875f, -0.096833936870098114013671875f, 0.01993139274418354034423828125f), float4(-0.12042097747325897216796875f, 0.00164063251577317714691162109375f, 0.09393332898616790771484375f, -0.06882230937480926513671875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.214650928974151611328125f, 0.0414296798408031463623046875f, 0.068400442600250244140625f, -0.3783160150051116943359375f), float4(-0.0554957091808319091796875f, 0.04490506649017333984375f, -0.078735888004302978515625f, -0.0268040001392364501953125f), float4(-0.3476419746875762939453125f, 0.02248795144259929656982421875f, -0.077293746173381805419921875f, 0.08945779502391815185546875f), float4(-0.110094435513019561767578125f, 0.24233971536159515380859375f, 0.06285107135772705078125f, -0.1085174381732940673828125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.093270175158977508544921875f, 0.08413894474506378173828125f, 0.039382718503475189208984375f, 0.06356586515903472900390625f), float4(-0.0107338018715381622314453125f, 0.1355446875095367431640625f, -0.066502608358860015869140625f, 0.033002816140651702880859375f), float4(0.011187271215021610260009765625f, -0.12821455299854278564453125f, 0.20785914361476898193359375f, -0.03043864853680133819580078125f), float4(-0.12471051514148712158203125f, -0.02229430340230464935302734375f, 0.097324080765247344970703125f, 0.057609863579273223876953125f)));
[   0.962][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   0.962][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   0.962][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.12833867967128753662109375f, 0.02157753892242908477783203125f, -0.0270036496222019195556640625f, 0.117995917797088623046875f), float4(-0.0365564711391925811767578125f, -0.042251668870449066162109375f, 0.110493533313274383544921875f, -0.16036157310009002685546875f), float4(0.0492775477468967437744140625f, -0.0338423959910869598388671875f, 0.1002013683319091796875f, 0.095509745180606842041015625f), float4(0.080602310597896575927734375f, -0.092374183237552642822265625f, -0.0355981253087520599365234375f, -0.035926736891269683837890625f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.3282918632030487060546875f, 0.349236309528350830078125f, 0.0306717790663242340087890625f, -0.12606762349605560302734375f), float4(0.010437312535941600799560546875f, 0.2757115066051483154296875f, -0.215175926685333251953125f, -0.1580052673816680908203125f), float4(-0.12592543661594390869140625f, -0.20578934252262115478515625f, 0.104440532624721527099609375f, 0.1299325525760650634765625f), float4(-0.0460792668163776397705078125f, 0.0383417308330535888671875f, -0.19277226924896240234375f, -0.2212445437908172607421875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0525461919605731964111328125f, 0.02608216740190982818603515625f, 0.13831233978271484375f, 0.109824240207672119140625f), float4(0.0129468180239200592041015625f, -0.124398522078990936279296875f, 0.101341061294078826904296875f, -0.100503981113433837890625f), float4(-0.0447233803570270538330078125f, -0.14325235784053802490234375f, -0.2057957351207733154296875f, 0.0044005126692354679107666015625f), float4(0.22013671696186065673828125f, -0.3295551240444183349609375f, 0.1240408420562744140625f, -0.00816073827445507049560546875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.107743136584758758544921875f, -0.3165082633495330810546875f, -0.066017113626003265380859375f, 0.196357548236846923828125f), float4(-0.1262259185314178466796875f, -0.06396423280239105224609375f, 0.1385603249073028564453125f, 0.16540552675724029541015625f), float4(0.021387718617916107177734375f, 0.233777225017547607421875f, -0.053738154470920562744140625f, -0.100018598139286041259765625f), float4(-0.0833839476108551025390625f, -0.0528135336935520172119140625f, 0.0081229619681835174560546875f, 0.137320935726165771484375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1827082335948944091796875f, 0.06966014206409454345703125f, -0.17788302898406982421875f, -0.2730305492877960205078125f), float4(-0.077971614897251129150390625f, 0.013978422619402408599853515625f, -0.020390979945659637451171875f, 0.12715338170528411865234375f), float4(-0.119241707026958465576171875f, 0.1890029609203338623046875f, -0.085199654102325439453125f, 0.21519799530506134033203125f), float4(0.1858797371387481689453125f, -0.00974932499229907989501953125f, 0.017358399927616119384765625f, -0.12018258869647979736328125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0521292947232723236083984375f, -0.107416354119777679443359375f, 0.1271176636219024658203125f, 0.03708665072917938232421875f), float4(-0.14369462430477142333984375f, -0.0553598143160343170166015625f, -0.166398227214813232421875f, -0.0451433174312114715576171875f), float4(-0.069256722927093505859375f, -0.04069675505161285400390625f, 0.01999809034168720245361328125f, -0.01604062505066394805908203125f), float4(-0.02484877966344356536865234375f, 0.074170939624309539794921875f, 0.0508751980960369110107421875f, 0.21455280482769012451171875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.055696912109851837158203125f, -0.166809260845184326171875f, -0.0219874866306781768798828125f, 0.02494163624942302703857421875f), float4(-0.092788301408290863037109375f, 0.0221366323530673980712890625f, 0.0337829478085041046142578125f, -0.106460578739643096923828125f), float4(-0.14944647252559661865234375f, 0.25457274913787841796875f, 0.0466824956238269805908203125f, -0.022462368011474609375f), float4(-0.07886780798435211181640625f, 0.08165927231311798095703125f, 0.068481050431728363037109375f, 0.006373402662575244903564453125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.03705324232578277587890625f, 0.033215813338756561279296875f, 0.18291366100311279296875f, 0.123403750360012054443359375f), float4(0.08491058647632598876953125f, -0.2844200432300567626953125f, -0.012742246501147747039794921875f, -0.039834313094615936279296875f), float4(-0.233213722705841064453125f, 0.2667692601680755615234375f, -0.0563635490834712982177734375f, -0.1567248404026031494140625f), float4(-0.128917276859283447265625f, -0.1548657715320587158203125f, -0.0320044420659542083740234375f, -0.0927451550960540771484375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.01577947847545146942138671875f, -0.1845756471157073974609375f, 0.249963939189910888671875f, 0.0361976735293865203857421875f), float4(0.1569400727748870849609375f, 0.158631026744842529296875f, -0.07332397997379302978515625f, 0.00162352784536778926849365234375f), float4(-0.155365169048309326171875f, -0.0560627877712249755859375f, 0.14102835953235626220703125f, 0.16915024816989898681640625f), float4(-0.080010868608951568603515625f, 0.070731639862060546875f, 0.137967765331268310546875f, 0.1238671243190765380859375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0457929857075214385986328125f, -0.1513505876064300537109375f, -0.13548849523067474365234375f, -0.0436782576143741607666015625f), float4(-0.3565521240234375f, 0.5123207569122314453125f, -0.12816144526004791259765625f, -0.0465694963932037353515625f), float4(-0.01412767358124256134033203125f, -0.06282611191272735595703125f, -0.098872996866703033447265625f, -0.063591040670871734619140625f), float4(-0.091922201216220855712890625f, 0.11822436749935150146484375f, 0.079254694283008575439453125f, 0.0057968799956142902374267578125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.15683417022228240966796875f, 0.6161024570465087890625f, -0.302461206912994384765625f, 0.12917964160442352294921875f), float4(-0.09303367137908935546875f, 0.23612968623638153076171875f, -0.4084250628948211669921875f, -0.123746611177921295166015625f), float4(-0.075724489986896514892578125f, -0.261328399181365966796875f, -0.099701769649982452392578125f, -0.015227847732603549957275390625f), float4(0.10623906552791595458984375f, -0.21411184966564178466796875f, 0.0519984550774097442626953125f, -0.13645179569721221923828125f)));
[   0.962][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.23850034177303314208984375f, -0.14394448697566986083984375f, -0.003146874718368053436279296875f, -0.2380616962909698486328125f), float4(-0.02720087580382823944091796875f, -0.041352055966854095458984375f, -0.01864445023238658905029296875f, 0.0338481962680816650390625f), float4(-0.120642386376857757568359375f, -0.110480844974517822265625f, 0.084509558975696563720703125f, -0.2232865393161773681640625f), float4(0.17664162814617156982421875f, 0.22268307209014892578125f, 0.050886698067188262939453125f, -0.17475672066211700439453125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1780825555324554443359375f, 0.010803804732859134674072265625f, 0.0331518612802028656005859375f, 0.0331437923014163970947265625f), float4(-0.1420599520206451416015625f, 0.250396251678466796875f, -0.08784382045269012451171875f, -0.134542524814605712890625f), float4(0.19576813280582427978515625f, 0.107552818953990936279296875f, 0.22821627557277679443359375f, 0.019456751644611358642578125f), float4(-0.04229550063610076904296875f, -0.01618260331451892852783203125f, -0.120666973292827606201171875f, 0.0548464991152286529541015625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.115637771785259246826171875f, -0.2579289972782135009765625f, 0.001040377770550549030303955078125f, 0.080267854034900665283203125f), float4(-0.0025255163200199604034423828125f, 0.285516798496246337890625f, -0.060352213680744171142578125f, -0.07816255092620849609375f), float4(-0.00090574915520846843719482421875f, 0.049510724842548370361328125f, 0.0372048318386077880859375f, 0.0592500157654285430908203125f), float4(-0.0867413580417633056640625f, 0.2052219808101654052734375f, -0.28694283962249755859375f, 0.129950702190399169921875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1463845670223236083984375f, 0.0406332798302173614501953125f, 0.0313963592052459716796875f, -0.007934520952403545379638671875f), float4(0.076896838843822479248046875f, -0.094671450555324554443359375f, 0.1060734689235687255859375f, 0.0545101277530193328857421875f), float4(0.00330619397573173046112060546875f, 0.0534712411463260650634765625f, 0.06276242434978485107421875f, -0.041480846703052520751953125f), float4(-0.0767786502838134765625f, -0.13957299292087554931640625f, 0.01097252406179904937744140625f, 0.2195715606212615966796875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.02684562839567661285400390625f, -0.04343950748443603515625f, 0.0347387231886386871337890625f, 0.072816826403141021728515625f), float4(0.14474196732044219970703125f, 0.0315869934856891632080078125f, -0.2276785373687744140625f, -0.070765502750873565673828125f), float4(0.10520173609256744384765625f, -0.28805482387542724609375f, 0.00866830162703990936279296875f, -0.1632951796054840087890625f), float4(0.0615704916417598724365234375f, 0.3803885877132415771484375f, 0.2634595334529876708984375f, -0.011096537113189697265625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.23328833281993865966796875f, 0.085731483995914459228515625f, -0.07755015790462493896484375f, 0.3355951607227325439453125f), float4(0.077043451368808746337890625f, 0.115106604993343353271484375f, -0.24114038050174713134765625f, -0.4463013708591461181640625f), float4(0.2726736962795257568359375f, -0.3217013776302337646484375f, -0.00923652388155460357666015625f, -0.116660512983798980712890625f), float4(0.0457048006355762481689453125f, 0.078767083585262298583984375f, 0.13134004175662994384765625f, -0.0353186428546905517578125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0514027215540409088134765625f, 0.011605703271925449371337890625f, 0.13899171352386474609375f, -0.050710149109363555908203125f), float4(0.184136867523193359375f, -0.3141367435455322265625f, -0.13043414056301116943359375f, -0.151181519031524658203125f), float4(-0.1532693803310394287109375f, -0.10720126330852508544921875f, -0.23738634586334228515625f, 0.134813964366912841796875f), float4(0.2511507570743560791015625f, -0.009316611103713512420654296875f, -0.2584441006183624267578125f, -0.14389823377132415771484375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0397237949073314666748046875f, -0.1486940681934356689453125f, -0.16929419338703155517578125f, 0.02650127373635768890380859375f), float4(-0.106851659715175628662109375f, -0.1212678253650665283203125f, -0.085843183100223541259765625f, -0.0958069264888763427734375f), float4(-0.106267392635345458984375f, -0.068417973816394805908203125f, 0.113219089806079864501953125f, -0.1366431713104248046875f), float4(0.0613808669149875640869140625f, -0.2587898075580596923828125f, 0.14850819110870361328125f, 0.008178644813597202301025390625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.069127820432186126708984375f, 0.24230563640594482421875f, -0.04815028607845306396484375f, 0.2203716933727264404296875f), float4(-0.17417085170745849609375f, 0.105546735227108001708984375f, -0.16648416221141815185546875f, -0.004505307413637638092041015625f), float4(0.097640283405780792236328125f, 0.3712259232997894287109375f, -0.1939994990825653076171875f, -0.2789994180202484130859375f), float4(-0.088152565062046051025390625f, -0.5386905670166015625f, 0.21676708757877349853515625f, -0.080565936863422393798828125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.07651753723621368408203125f, 0.037048779428005218505859375f, -0.0197014994919300079345703125f, 0.1660726070404052734375f), float4(0.070027478039264678955078125f, -0.118204139173030853271484375f, -0.23360897600650787353515625f, 0.148159205913543701171875f), float4(0.02984700165688991546630859375f, 0.0540571846067905426025390625f, 0.013176298700273036956787109375f, 0.06552942097187042236328125f), float4(-0.13865773379802703857421875f, -0.20105527341365814208984375f, -0.375506579875946044921875f, 0.00576963089406490325927734375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.22697810828685760498046875f, -0.17426411807537078857421875f, 0.101480178534984588623046875f, 0.008134665898978710174560546875f), float4(0.10771454870700836181640625f, 0.169434070587158203125f, -0.01631901226937770843505859375f, -0.4017670452594757080078125f), float4(-0.0685466825962066650390625f, -0.0490452758967876434326171875f, 0.20919096469879150390625f, 0.13240765035152435302734375f), float4(-0.0501256473362445831298828125f, 0.14902508258819580078125f, 0.0526975952088832855224609375f, -0.1381746828556060791015625f)));
[   0.962][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0430161915719509124755859375f, 0.23184753954410552978515625f, -0.02355171740055084228515625f, 0.3768405020236968994140625f), float4(0.028999052941799163818359375f, 0.067097358405590057373046875f, -0.0599366314709186553955078125f, -0.0598619841039180755615234375f), float4(0.1549920737743377685546875f, -0.22217415273189544677734375f, 0.11113150417804718017578125f, -0.0908252894878387451171875f), float4(-0.19389243423938751220703125f, 0.02462152205407619476318359375f, -0.153054416179656982421875f, 0.010799284093081951141357421875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0354967378079891204833984375f, 0.0108025483787059783935546875f, -0.0287183634936809539794921875f, 0.1926363408565521240234375f), float4(0.16900502145290374755859375f, -0.16661702096462249755859375f, -0.02763132750988006591796875f, 0.183099567890167236328125f), float4(-0.0158601067960262298583984375f, -0.0330996103584766387939453125f, -0.09139044582843780517578125f, 0.1400084793567657470703125f), float4(-0.00365919037722051143646240234375f, 0.476595222949981689453125f, -0.0937350690364837646484375f, -0.29020965099334716796875f)))) + float4(0.088959552347660064697265625f, -0.0276670865714550018310546875f, 0.20500831305980682373046875f, 0.00037762933061458170413970947265625f);
[   0.962][d][vo/gpu-next/libplacebo] [ 56] }
[   0.962][d][vo/gpu-next/libplacebo] [ 57] 
[   0.962][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.962][d][vo/gpu-next/libplacebo] [ 59] {
[   0.962][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   0.962][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   0.962][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   0.962][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   0.962][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   0.962][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   0.962][d][vo/gpu-next/libplacebo] [ 66] }
[   0.967][d][vo/gpu-next] cache_save_obj: key(b5632240479d4f7e), size(11845), save time(5.132 ms)
[   0.967][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   0.967][d][vo/gpu-next/libplacebo] vertex shader source:
[   0.967][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.967][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.967][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.967][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.967][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.967][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.967][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.967][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.967][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.967][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.967][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.967][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.967][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.967][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.967][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.967][d][vo/gpu-next/libplacebo] [ 16] };
[   0.967][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   0.967][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   0.967][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   0.967][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   0.967][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   0.967][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   0.967][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   0.968][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   0.968][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   0.968][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   0.968][d][vo/gpu-next/libplacebo] [ 27] }
[   0.968][d][vo/gpu-next/libplacebo] fragment shader source:
[   0.968][d][vo/gpu-next/libplacebo] [  1] #version 450
[   0.968][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   0.968][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   0.968][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   0.968][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   0.968][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   0.968][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   0.968][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   0.968][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   0.968][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   0.968][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   0.968][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   0.968][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   0.968][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   0.968][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   0.968][d][vo/gpu-next/libplacebo] [ 16] };
[   0.968][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   0.968][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   0.968][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   0.968][d][vo/gpu-next/libplacebo] [ 20] 
[   0.968][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_4_tf_raw _2 
[   0.968][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_4_tf_pos _3 
[   0.968][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_4_tf_map _3_map 
[   0.968][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_4_tf_size vec2(textureSize(_2, 0)) 
[   0.968][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_4_tf_pt _4 
[   0.968][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_4_tf_off _5 
[   0.968][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   0.968][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_4_tf_mul _6 
[   0.968][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_4_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.968][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_4_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   0.968][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_4_tf_texOff(off) (conv2d_4_tf_tex(_3 + _4 * vec2(off))) 
[   0.968][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_4_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   0.968][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_4_tf1_raw _7 
[   0.968][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_4_tf1_pos _8 
[   0.968][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_4_tf1_map _8_map 
[   0.968][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_4_tf1_size vec2(textureSize(_7, 0)) 
[   0.968][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_4_tf1_pt _9 
[   0.968][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_4_tf1_off _a 
[   0.968][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   0.968][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_4_tf1_mul _b 
[   0.968][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_4_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   0.968][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_4_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   0.968][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_4_tf1_texOff(off) (conv2d_4_tf1_tex(_8 + _9 * vec2(off))) 
[   0.968][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_4_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   0.968][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   0.968][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   0.968][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   0.968][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   0.968][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   0.968][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   0.968][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   0.968][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   0.968][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   0.968][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   0.968][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   0.968][d][vo/gpu-next/libplacebo] [ 56] return color;
[   0.968][d][vo/gpu-next/libplacebo] [ 57] }
[   0.968][d][vo/gpu-next/libplacebo] [ 58] 
[   0.968][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   0.968][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   0.968][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   0.968][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   0.968][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   0.968][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   0.968][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   0.968][d][vo/gpu-next/libplacebo] [ 66] return color;
[   0.968][d][vo/gpu-next/libplacebo] [ 67] }
[   0.968][d][vo/gpu-next/libplacebo] [ 68] 
[   0.968][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   0.968][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.968][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.968][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   0.968][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   0.968][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   0.968][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(0.018134737, -0.2296755, -0.07276725, -0.029795367, 0.05382051, 0.092847414, -0.024469728, -0.1674685, 0.0017946451, 0.30074653, 0.0034195695, -0.04892261, 0.18229689, -0.20116119, -0.12702174, -0.08259108) * go_0(-1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.1357695, -0.08149211, 0.09314453, -0.21966846, 0.34740716, 0.043606415, 0.04225903, 0.034449834, 0.17248215, 0.39148283, -0.13868807, -0.010550686, 0.044238456, -0.09693464, -0.005044985, 0.24383289) * go_0(-1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.19959371, 0.098685324, 0.058746945, 0.010580748, 0.08051514, 0.031898864, 0.017556064, 0.13004355, -0.01727653, 0.11044019, 0.040673427, -0.20064595, -0.23321067, 0.06398686, -0.19126236, -0.2430858) * go_0(-1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.12870286, -0.113455534, 0.23722827, 0.070718594, 0.19049989, -0.1927299, -0.06343845, 0.113127775, 0.082530305, -0.10972526, -0.090779535, 0.05731582, 0.11018802, -0.18049154, 0.09269507, -0.10304576) * go_0(0.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(0.15513484, 0.06659583, 0.08125296, -0.012350324, -0.09492788, 0.5048303, 0.13206847, 0.39554298, 0.28953737, -0.20913891, -0.26781562, -0.17539899, 0.023778774, 0.29716817, 0.15768486, 0.37702608) * go_0(0.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.0724462, 0.015571356, -0.032217246, 0.0050658924, -0.22708446, 0.03968809, 0.016753826, 0.0025668752, -0.055932112, 0.113931604, 0.19766758, -0.030027265, -0.17384295, 0.15013468, -0.0070017707, -0.09469028) * go_0(0.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.078361556, -0.0954201, -0.006358101, 0.040500037, 0.4190454, -0.17622913, -0.07234791, 0.05462559, 0.18641087, 0.058313597, -0.0180785, 0.13818781, -0.14640772, 0.0699486, 0.0073663946, -0.076789856) * go_0(1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(-0.21421191, 0.08736062, 0.09041226, 0.03608585, 0.02769972, 0.09641289, 0.11824623, 0.05653645, 0.16464607, 0.19839554, -0.13379547, 0.054417104, 0.067530684, 0.18971571, 0.13785432, -0.097639814) * go_0(1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.32658005, -0.14606023, -0.069448665, 0.032998275, -0.28331423, 0.0011900732, -0.020304207, -0.13535896, 0.08298347, 0.045509677, -0.030503955, -0.037504148, 0.049955815, 0.0925771, 0.00058534974, -0.12398032) * go_0(1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.2955836, 0.29059318, -0.018196672, -0.35866606, -0.01309431, 0.03540315, 0.010609202, 0.11956812, 0.10296229, 0.22536302, 0.015201129, -0.23797737, -0.16960852, -0.11414787, -0.034440614, 0.112644605) * go_1(-1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.14952518, 0.07024436, -0.083184876, -0.0814617, -0.13303639, 0.016159372, -0.13521518, 0.2221334, -0.056617837, 0.12958299, 0.064461656, -0.20146395, -0.16023181, 0.2640758, 0.27528805, -0.1426518) * go_1(-1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.04382363, 0.09856003, -0.08561442, -0.15699928, -0.121069774, 0.04685383, -0.009170197, -0.031489655, 0.18730178, 0.238442, 0.22497098, 0.032015145, -0.03709115, 0.1535079, 0.21674158, 0.10678019) * go_1(-1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.12200952, 0.24224263, 0.034097504, -0.028179523, -0.011962496, -0.04489487, -0.05198827, 0.22194928, -0.045400873, -0.049828544, 0.111477956, -0.098361604, 0.12788995, -0.016093334, -0.19886433, -0.011161484) * go_1(0.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(0.30563712, 0.013071727, -0.004799883, 0.12888052, -0.259498, -0.041566677, 0.07311124, 0.162324, 0.28371668, -0.004693743, -0.0019395344, 0.029358242, 0.08730285, 0.12184509, 0.05508437, 0.048439097) * go_1(0.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(0.12760857, 0.115813166, -0.217695, -0.10629871, -0.227366, 0.09030426, -0.15313712, 0.020528946, -0.20743734, 0.088583544, 0.04594053, -0.22891994, 0.18949282, -0.042186577, -0.17330512, -0.010711361) * go_1(0.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.029503195, 0.0063797613, -0.17004286, -0.096844055, 0.010218098, 0.04247233, 0.02362808, 0.14700809, -0.08082364, 0.11159672, -0.018505255, -0.15228583, 0.15693732, -0.025359154, 0.024829186, 0.1943192) * go_1(1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.03912932, -0.21989027, 0.12203028, 0.18702275, -0.118537985, 0.21039696, 0.09102061, 0.012288879, 0.031666897, 0.1318455, -0.04901404, -0.07516063, -0.44782668, 0.04884501, 0.047070876, 0.008728358) * go_1(1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.08669101, 0.3053463, -0.08963947, 0.0034188698, -0.070004664, 0.064788476, 0.093737036, 0.070050925, 0.12728429, -0.13179256, -0.014913502, 0.09308136, -0.027638942, 0.008638711, 0.08794172, -0.05531093) * go_1(1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(0.0728421, 0.07872358, 0.11454748, 0.08497922, 0.071820416, -0.11789207, -0.08184197, 0.1359588, -0.2143346, -0.05876081, 0.023172129, -0.08430511, -0.19276723, 0.14283359, 0.15604696, -0.055187486) * go_2(-1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.068641685, 0.2732106, -0.2809107, 0.12736696, -0.08642367, 0.023898933, -0.17859498, -0.18299665, -0.06684587, -0.12204666, 0.45898953, -0.24240111, 0.25182098, -0.04395751, 0.10637211, -0.22135144) * go_2(-1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.0852072, 0.051133018, 0.03333165, -0.0008938216, 0.10251267, 0.0550774, 0.041769378, -0.21259712, 0.286912, 0.123342015, 0.282759, -0.0730124, 0.14275575, -0.15580742, -0.15224406, 0.045376908) * go_2(-1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.03328225, 0.11563978, -0.07451964, 0.030546209, -0.04698351, -0.18544962, 0.037350416, 0.13969816, 0.0556746, -0.06359919, 0.06478219, -0.031694926, 0.13396506, 0.09443612, -0.01922686, -0.06290365) * go_2(0.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.07495407, 0.063429266, -0.106221214, -0.085107304, 0.2497817, -0.46598253, -0.18833177, -0.2731128, -0.13024822, 0.56053543, 0.055704467, -0.12331414, -0.031199086, 0.05061188, 0.22097112, -0.6611177) * go_2(0.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.08276988, -0.044184342, -0.03562185, -0.06159881, 0.27694225, -0.07192965, -0.08663714, 0.020221777, 0.14095962, -0.06229397, 0.051374253, -0.038158998, 0.10664802, -0.041305423, 0.051260717, -0.054698635) * go_2(0.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.12800686, 0.03485072, 0.039914366, 0.034041498, -0.08305794, -0.046292894, 0.22765331, 0.10904922, 0.0013937047, -0.08750301, 0.009126207, -0.065589435, 0.2837707, 0.08884436, -0.07234862, -0.093502745) * go_2(1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.113439895, 0.06081726, 0.1122302, -0.022936966, 0.10329637, -0.31816107, -0.051597945, 0.23846027, -0.083913095, -0.29872265, -0.040147282, -0.08981918, -0.04329814, -0.12339693, -0.034489952, 0.013393211) * go_2(1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.33091688, 0.1726297, 0.034332044, -0.091396205, 0.15434311, -0.0022870845, -0.15506189, 0.08710491, -0.16063525, 0.042252056, 0.017086457, 0.08134797, 0.08631321, 0.037843138, 0.088296555, 0.0064518084) * go_2(1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [102]     result += mat4(0.09161051, 0.114355795, -0.15304486, -0.030537153, 0.1835368, -0.3287635, 0.031197926, 0.09717476, 0.04276852, 0.113250345, 0.05949038, -0.10599563, 0.43574792, -0.060788117, 0.18409383, 0.12678055) * go_3(-1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.018356865, -0.0072578182, 0.12020777, -0.013127592, 0.20136636, -0.22984362, 0.06896224, 0.00044982752, 0.008428429, -0.123316936, -0.09989286, 0.078248784, -0.16313677, -0.003020313, -0.46285018, -0.08967125) * go_3(-1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.03451497, -0.10864502, 0.13207638, 0.17194521, 0.0037514758, -0.20222199, -0.12535086, 0.001511977, 0.056294486, -0.2112898, 0.078261316, 0.10118746, -0.044742294, 0.21793383, -0.19927903, -0.21338293) * go_3(-1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.034903776, -0.10167085, 0.031066334, 0.0379958, 0.20532596, -0.17457838, 0.16556816, -0.0021619152, 0.02682665, 0.03396325, -0.059273884, 0.1922813, -0.072151475, -0.010240544, 0.2302027, 0.12385962) * go_3(0.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.20170145, -0.08203941, -0.028107846, -0.18003726, 0.44744352, -0.13190243, 0.13233365, 0.03626546, 0.085763134, -0.25613126, -0.11213388, 0.15529087, -0.271649, 0.050587676, -0.062583975, 0.057289865) * go_3(0.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.040649455, -0.17949733, 0.35847965, -0.040587306, 0.24314344, -0.23811667, 0.13958354, 0.04961874, 0.09858903, -0.04202913, -0.21850993, 0.0700419, -0.09130745, -0.096835814, 0.0022782686, -0.25416258) * go_3(0.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.08215545, -0.019647893, 0.055263475, 0.053733055, 0.098485716, -0.1041945, -0.06541415, -0.08868577, -0.07262986, 0.03513784, -0.110529095, -0.03369232, 0.056786604, 0.2569229, -0.05931065, -0.22081214) * go_3(1.0, -1.0);
[   0.968][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.066926084, 0.029664058, -0.10779271, 0.11026963, 0.23927264, -0.16914488, 0.022947345, 0.12303853, -0.07066212, -0.013205378, 0.15348643, 0.035568032, 0.20966691, 0.010149819, -0.08814468, -0.064854674) * go_3(1.0, 0.0);
[   0.968][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.11493852, -0.074924305, -0.14840698, -0.16956823, 0.056806292, -0.06387947, -0.06880271, -0.04637334, -0.1929893, 0.18226422, 0.064644486, -0.1594863, 0.027403917, 0.13951495, -0.06569123, -0.07700207) * go_3(1.0, 1.0);
[   0.968][d][vo/gpu-next/libplacebo] [111]     result += vec4(-0.043347504, -0.20504741, -0.037821215, -0.014486937);
[   0.968][d][vo/gpu-next/libplacebo] [112]     return result;
[   0.968][d][vo/gpu-next/libplacebo] [113] }
[   0.968][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   0.968][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   0.968][d][vo/gpu-next/libplacebo] [116] return color;
[   0.968][d][vo/gpu-next/libplacebo] [117] }
[   0.968][d][vo/gpu-next/libplacebo] [118] 
[   0.968][d][vo/gpu-next/libplacebo] [119] void main() {
[   0.968][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   0.968][d][vo/gpu-next/libplacebo] [121] }
[   0.969][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.969][d][vo/gpu-next/libplacebo] Spent 1.277 ms translating GLSL to SPIR-V
[   0.969][d][vo/gpu-next/libplacebo] Spent 0.103 ms translating SPIR-V to HLSL
[   0.970][d][vo/gpu-next/libplacebo] Spent 1.148 ms translating HLSL to DXBC
[   0.970][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   0.970][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   0.970][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   0.970][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   0.970][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   0.970][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   0.970][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   0.970][d][vo/gpu-next/libplacebo] [  7] 
[   0.970][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   0.970][d][vo/gpu-next/libplacebo] [  9] {
[   0.970][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   0.970][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   0.970][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   0.970][d][vo/gpu-next/libplacebo] [ 13] };
[   0.970][d][vo/gpu-next/libplacebo] [ 14] 
[   0.970][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   0.970][d][vo/gpu-next/libplacebo] [ 16] {
[   0.970][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   0.970][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   0.970][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   0.970][d][vo/gpu-next/libplacebo] [ 20] };
[   0.970][d][vo/gpu-next/libplacebo] [ 21] 
[   0.970][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   0.970][d][vo/gpu-next/libplacebo] [ 23] {
[   0.970][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   0.970][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   0.970][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   0.970][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   0.970][d][vo/gpu-next/libplacebo] [ 28] }
[   0.970][d][vo/gpu-next/libplacebo] [ 29] 
[   0.970][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   0.970][d][vo/gpu-next/libplacebo] [ 31] {
[   0.970][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   0.970][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   0.970][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   0.970][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   0.970][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   0.970][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   0.970][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   0.970][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   0.970][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   0.970][d][vo/gpu-next/libplacebo] [ 41] }
[   0.980][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   0.980][d][vo/gpu-next/libplacebo] Spent 9.286 ms translating GLSL to SPIR-V
[   0.981][d][vo/gpu-next/libplacebo] Spent 1.631 ms translating SPIR-V to HLSL
[   1.007][v][vo/gpu-next/libplacebo] Spent 25.712 ms translating HLSL to DXBC
[   1.007][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.007][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   1.007][d][vo/gpu-next/libplacebo] [  2] {
[   1.007][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   1.007][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   1.007][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   1.007][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   1.007][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   1.007][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   1.007][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   1.007][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   1.007][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   1.007][d][vo/gpu-next/libplacebo] [ 12] };
[   1.007][d][vo/gpu-next/libplacebo] [ 13] 
[   1.007][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   1.007][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   1.007][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   1.007][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   1.007][d][vo/gpu-next/libplacebo] [ 18] 
[   1.007][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   1.007][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   1.007][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   1.007][d][vo/gpu-next/libplacebo] [ 22] 
[   1.007][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   1.007][d][vo/gpu-next/libplacebo] [ 24] {
[   1.007][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   1.007][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   1.007][d][vo/gpu-next/libplacebo] [ 27] };
[   1.007][d][vo/gpu-next/libplacebo] [ 28] 
[   1.007][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   1.007][d][vo/gpu-next/libplacebo] [ 30] {
[   1.007][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   1.007][d][vo/gpu-next/libplacebo] [ 32] };
[   1.007][d][vo/gpu-next/libplacebo] [ 33] 
[   1.007][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   1.007][d][vo/gpu-next/libplacebo] [ 35] {
[   1.007][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   1.007][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   1.007][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   1.007][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.01813473738729953765869140625f, -0.2296755015850067138671875f, -0.072767250239849090576171875f, -0.0297953672707080841064453125f), float4(0.0538205094635486602783203125f, 0.092847414314746856689453125f, -0.02446972765028476715087890625f, -0.16746850311756134033203125f), float4(0.0017946450971066951751708984375f, 0.3007465302944183349609375f, 0.00341956946067512035369873046875f, -0.0489226095378398895263671875f), float4(0.18229688704013824462890625f, -0.20116119086742401123046875f, -0.12702174484729766845703125f, -0.082591079175472259521484375f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.13576950132846832275390625f, -0.08149211108684539794921875f, 0.093144528567790985107421875f, -0.21966846287250518798828125f), float4(0.347407162189483642578125f, 0.04360641539096832275390625f, 0.042259030044078826904296875f, 0.0344498343765735626220703125f), float4(0.17248214781284332275390625f, 0.391482830047607421875f, -0.13868807256221771240234375f, -0.010550686158239841461181640625f), float4(0.044238455593585968017578125f, -0.096934638917446136474609375f, -0.0050449850969016551971435546875f, 0.243832886219024658203125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.19959370791912078857421875f, 0.098685324192047119140625f, 0.0587469451129436492919921875f, 0.0105807483196258544921875f), float4(0.080515138804912567138671875f, 0.031898863613605499267578125f, 0.017556063830852508544921875f, 0.13004355132579803466796875f), float4(-0.0172765292227268218994140625f, 0.110440187156200408935546875f, 0.040673427283763885498046875f, -0.2006459534168243408203125f), float4(-0.23321066796779632568359375f, 0.063986860215663909912109375f, -0.19126236438751220703125f, -0.243085801601409912109375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.12870286405086517333984375f, -0.1134555339813232421875f, 0.23722827434539794921875f, 0.070718593895435333251953125f), float4(0.19049988687038421630859375f, -0.19272990524768829345703125f, -0.063438452780246734619140625f, 0.113127775490283966064453125f), float4(0.08253030478954315185546875f, -0.109725259244441986083984375f, -0.090779535472393035888671875f, 0.057315818965435028076171875f), float4(0.11018802225589752197265625f, -0.1804915368556976318359375f, 0.09269507229328155517578125f, -0.103045761585235595703125f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.15513484179973602294921875f, 0.066595830023288726806640625f, 0.0812529623508453369140625f, -0.012350323610007762908935546875f), float4(-0.0949278771877288818359375f, 0.504830300807952880859375f, 0.13206847012042999267578125f, 0.39554297924041748046875f), float4(0.289537370204925537109375f, -0.20913891494274139404296875f, -0.2678156197071075439453125f, -0.17539899051189422607421875f), float4(0.023778773844242095947265625f, 0.2971681654453277587890625f, 0.157684862613677978515625f, 0.377026081085205078125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0724461972713470458984375f, 0.0155713558197021484375f, -0.0322172455489635467529296875f, 0.0050658923573791980743408203125f), float4(-0.227084457874298095703125f, 0.0396880917251110076904296875f, 0.0167538262903690338134765625f, 0.00256687519140541553497314453125f), float4(-0.055932112038135528564453125f, 0.113931603729724884033203125f, 0.19766758382320404052734375f, -0.03002726472914218902587890625f), float4(-0.17384295165538787841796875f, 0.15013468265533447265625f, -0.00700177066028118133544921875f, -0.09469027817249298095703125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.07836155593395233154296875f, -0.095420099794864654541015625f, -0.006358101032674312591552734375f, 0.040500037372112274169921875f), float4(0.419045388698577880859375f, -0.17622913420200347900390625f, -0.0723479092121124267578125f, 0.0546255894005298614501953125f), float4(0.1864108741283416748046875f, 0.0583135969936847686767578125f, -0.01807850040495395660400390625f, 0.13818781077861785888671875f), float4(-0.14640772342681884765625f, 0.06994859874248504638671875f, 0.00736639462411403656005859375f, -0.07678985595703125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2142119109630584716796875f, 0.0873606204986572265625f, 0.09041225910186767578125f, 0.036085851490497589111328125f), float4(0.0276997201144695281982421875f, 0.096412889659404754638671875f, 0.1182462275028228759765625f, 0.05653645098209381103515625f), float4(0.16464607417583465576171875f, 0.19839553534984588623046875f, -0.1337954699993133544921875f, 0.0544171035289764404296875f), float4(0.067530684173107147216796875f, 0.1897157132625579833984375f, 0.13785432279109954833984375f, -0.09763981401920318603515625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.326580047607421875f, -0.1460602283477783203125f, -0.06944866478443145751953125f, 0.0329982750117778778076171875f), float4(-0.283314228057861328125f, 0.001190073206089437007904052734375f, -0.0203042067587375640869140625f, -0.1353589594364166259765625f), float4(0.082983471453189849853515625f, 0.0455096773803234100341796875f, -0.0305039547383785247802734375f, -0.0375041477382183074951171875f), float4(0.0499558150768280029296875f, 0.09257709980010986328125f, 0.0005853497423231601715087890625f, -0.123980320990085601806640625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.29558360576629638671875f, 0.2905931770801544189453125f, -0.0181966722011566162109375f, -0.35866606235504150390625f), float4(-0.0130943097174167633056640625f, 0.0354031510651111602783203125f, 0.010609202086925506591796875f, 0.119568116962909698486328125f), float4(0.102962292730808258056640625f, 0.2253630161285400390625f, 0.015201129019260406494140625f, -0.23797737061977386474609375f), float4(-0.16960851848125457763671875f, -0.1141478717327117919921875f, -0.034440614283084869384765625f, 0.112644605338573455810546875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.14952518045902252197265625f, 0.07024435698986053466796875f, -0.083184875547885894775390625f, -0.0814616978168487548828125f), float4(-0.13303638994693756103515625f, 0.01615937240421772003173828125f, -0.13521517813205718994140625f, 0.2221333980560302734375f), float4(-0.0566178373992443084716796875f, 0.12958298623561859130859375f, 0.064461655914783477783203125f, -0.20146395266056060791015625f), float4(-0.16023181378841400146484375f, 0.2640757858753204345703125f, 0.275288045406341552734375f, -0.1426517963409423828125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0438236296176910400390625f, 0.098560027778148651123046875f, -0.085614420473575592041015625f, -0.15699927508831024169921875f), float4(-0.12106977403163909912109375f, 0.0468538291752338409423828125f, -0.009170196950435638427734375f, -0.03148965537548065185546875f), float4(0.1873017847537994384765625f, 0.238442003726959228515625f, 0.22497098147869110107421875f, 0.032015144824981689453125f), float4(-0.03709115087985992431640625f, 0.15350790321826934814453125f, 0.21674157679080963134765625f, 0.10678018629550933837890625f)));
[   1.007][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   1.007][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   1.007][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.122009523212909698486328125f, 0.242242634296417236328125f, 0.0340975038707256317138671875f, -0.0281795226037502288818359375f), float4(-0.011962495744228363037109375f, -0.0448948703706264495849609375f, -0.0519882701337337493896484375f, 0.221949279308319091796875f), float4(-0.04540087282657623291015625f, -0.04982854425907135009765625f, 0.11147795617580413818359375f, -0.098361603915691375732421875f), float4(0.12788994610309600830078125f, -0.01609333418309688568115234375f, -0.19886432588100433349609375f, -0.011161483824253082275390625f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.3056371212005615234375f, 0.0130717270076274871826171875f, -0.004799882881343364715576171875f, 0.12888051569461822509765625f), float4(-0.25949800014495849609375f, -0.041566677391529083251953125f, 0.073111243546009063720703125f, 0.16232399642467498779296875f), float4(0.283716678619384765625f, -0.0046937428414821624755859375f, -0.00193953444249927997589111328125f, 0.0293582417070865631103515625f), float4(0.08730284869670867919921875f, 0.121845088899135589599609375f, 0.055084370076656341552734375f, 0.0484390966594219207763671875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1276085674762725830078125f, 0.1158131659030914306640625f, -0.2176949977874755859375f, -0.106298707425594329833984375f), float4(-0.2273660004138946533203125f, 0.090304262936115264892578125f, -0.1531371176242828369140625f, 0.0205289460718631744384765625f), float4(-0.207437336444854736328125f, 0.08858354389667510986328125f, 0.0459405295550823211669921875f, -0.22891993820667266845703125f), float4(0.18949282169342041015625f, -0.0421865768730640411376953125f, -0.1733051240444183349609375f, -0.0107113607227802276611328125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02950319461524486541748046875f, 0.0063797612674534320831298828125f, -0.17004285752773284912109375f, -0.096844054758548736572265625f), float4(0.010218097828328609466552734375f, 0.0424723289906978607177734375f, 0.02362808026373386383056640625f, 0.1470080912113189697265625f), float4(-0.080823637545108795166015625f, 0.11159671843051910400390625f, -0.01850525476038455963134765625f, -0.15228582918643951416015625f), float4(0.15693731606006622314453125f, -0.02535915374755859375f, 0.024829186499118804931640625f, 0.19431920349597930908203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0391293205320835113525390625f, -0.2198902666568756103515625f, 0.122030280530452728271484375f, 0.187022745609283447265625f), float4(-0.118537984788417816162109375f, 0.21039696037769317626953125f, 0.091020606458187103271484375f, 0.012288878671824932098388671875f), float4(0.031666897237300872802734375f, 0.1318455040454864501953125f, -0.049014039337635040283203125f, -0.075160630047321319580078125f), float4(-0.447826683521270751953125f, 0.0488450117409229278564453125f, 0.04707087576389312744140625f, 0.008728357963263988494873046875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.08669100701808929443359375f, 0.305346310138702392578125f, -0.08963946998119354248046875f, 0.0034188698045909404754638671875f), float4(-0.070004664361476898193359375f, 0.06478847563266754150390625f, 0.0937370359897613525390625f, 0.0700509250164031982421875f), float4(0.1272842884063720703125f, -0.13179256021976470947265625f, -0.014913502149283885955810546875f, 0.093081362545490264892578125f), float4(-0.0276389420032501220703125f, 0.008638710714876651763916015625f, 0.08794172108173370361328125f, -0.0553109310567378997802734375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.072842098772525787353515625f, 0.0787235796451568603515625f, 0.114547483623027801513671875f, 0.08497922122478485107421875f), float4(0.071820415556430816650390625f, -0.11789207160472869873046875f, -0.081841967999935150146484375f, 0.13595880568027496337890625f), float4(-0.21433460712432861328125f, -0.0587608106434345245361328125f, 0.0231721289455890655517578125f, -0.084305107593536376953125f), float4(-0.1927672326564788818359375f, 0.14283359050750732421875f, 0.1560469567775726318359375f, -0.055187486112117767333984375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.068641684949398040771484375f, 0.273210585117340087890625f, -0.2809107005596160888671875f, 0.127366960048675537109375f), float4(-0.086423672735691070556640625f, 0.0238989330828189849853515625f, -0.1785949766635894775390625f, -0.18299664556980133056640625f), float4(-0.066845871508121490478515625f, -0.122046656906604766845703125f, 0.4589895308017730712890625f, -0.24240110814571380615234375f), float4(0.251820981502532958984375f, -0.043957509100437164306640625f, 0.106372110545635223388671875f, -0.221351444721221923828125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.085207201540470123291015625f, 0.0511330179870128631591796875f, 0.0333316512405872344970703125f, -0.000893821590580046176910400390625f), float4(0.10251267254352569580078125f, 0.0550774000585079193115234375f, 0.041769377887248992919921875f, -0.21259711682796478271484375f), float4(0.2869119942188262939453125f, 0.123342014849185943603515625f, 0.282759010791778564453125f, -0.07301239669322967529296875f), float4(0.1427557468414306640625f, -0.15580742061138153076171875f, -0.1522440612316131591796875f, 0.0453769080340862274169921875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0332822501659393310546875f, 0.115639783442020416259765625f, -0.074519641697406768798828125f, 0.03054620884358882904052734375f), float4(-0.0469835102558135986328125f, -0.18544961512088775634765625f, 0.0373504161834716796875f, 0.13969816267490386962890625f), float4(0.0556746013462543487548828125f, -0.063599191606044769287109375f, 0.06478218734264373779296875f, -0.031694926321506500244140625f), float4(0.13396506011486053466796875f, 0.094436116516590118408203125f, -0.0192268602550029754638671875f, -0.062903650104999542236328125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.074954070150852203369140625f, 0.0634292662143707275390625f, -0.10622121393680572509765625f, -0.085107304155826568603515625f), float4(0.2497816979885101318359375f, -0.4659825265407562255859375f, -0.18833176791667938232421875f, -0.2731128036975860595703125f), float4(-0.1302482187747955322265625f, 0.560535430908203125f, 0.055704466998577117919921875f, -0.1233141422271728515625f), float4(-0.0311990864574909210205078125f, 0.0506118796765804290771484375f, 0.22097112238407135009765625f, -0.66111767292022705078125f)));
[   1.007][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.082769878208637237548828125f, -0.04418434202671051025390625f, -0.0356218516826629638671875f, -0.0615988112986087799072265625f), float4(0.27694225311279296875f, -0.07192964851856231689453125f, -0.08663713932037353515625f, 0.020221777260303497314453125f), float4(0.14095962047576904296875f, -0.062293969094753265380859375f, 0.0513742528855800628662109375f, -0.03815899789333343505859375f), float4(0.106648020446300506591796875f, -0.04130542278289794921875f, 0.051260717213153839111328125f, -0.0546986348927021026611328125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.12800686061382293701171875f, 0.0348507203161716461181640625f, 0.0399143658578395843505859375f, 0.0340414978563785552978515625f), float4(-0.083057940006256103515625f, -0.046292893588542938232421875f, 0.22765330970287322998046875f, 0.109049223363399505615234375f), float4(0.001393704675137996673583984375f, -0.087503008544445037841796875f, 0.00912620685994625091552734375f, -0.065589435398578643798828125f), float4(0.2837707102298736572265625f, 0.088844358921051025390625f, -0.072348617017269134521484375f, -0.09350274503231048583984375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.113439895212650299072265625f, 0.0608172602951526641845703125f, 0.11223019659519195556640625f, -0.0229369662702083587646484375f), float4(0.1032963693141937255859375f, -0.318161070346832275390625f, -0.051597945392131805419921875f, 0.2384602725505828857421875f), float4(-0.083913095295429229736328125f, -0.2987226545810699462890625f, -0.040147282183170318603515625f, -0.08981917798519134521484375f), float4(-0.04329814016819000244140625f, -0.123396933078765869140625f, -0.034489952027797698974609375f, 0.013393211178481578826904296875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.330916881561279296875f, 0.17262969911098480224609375f, 0.034332044422626495361328125f, -0.091396205127239227294921875f), float4(0.15434311330318450927734375f, -0.00228708446957170963287353515625f, -0.15506188571453094482421875f, 0.087104909121990203857421875f), float4(-0.16063524782657623291015625f, 0.042252056300640106201171875f, 0.0170864574611186981201171875f, 0.0813479721546173095703125f), float4(0.086313210427761077880859375f, 0.0378431379795074462890625f, 0.088296554982662200927734375f, 0.0064518083818256855010986328125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.091610513627529144287109375f, 0.114355795085430145263671875f, -0.15304486453533172607421875f, -0.03053715266287326812744140625f), float4(0.1835367977619171142578125f, -0.3287635147571563720703125f, 0.03119792602956295013427734375f, 0.09717476367950439453125f), float4(0.0427685193717479705810546875f, 0.1132503449916839599609375f, 0.0594903789460659027099609375f, -0.105995632708072662353515625f), float4(0.435747921466827392578125f, -0.060788117349147796630859375f, 0.18409383296966552734375f, 0.12678055465221405029296875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01835686527192592620849609375f, -0.007257818244397640228271484375f, 0.12020777165889739990234375f, -0.013127592392265796661376953125f), float4(0.201366364955902099609375f, -0.229843616485595703125f, 0.068962238729000091552734375f, 0.000449827522970736026763916015625f), float4(0.008428429253399372100830078125f, -0.123316936194896697998046875f, -0.099892862141132354736328125f, 0.07824878394603729248046875f), float4(-0.16313676536083221435546875f, -0.0030203131027519702911376953125f, -0.4628501832485198974609375f, -0.089671246707439422607421875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.034514971077442169189453125f, -0.108645021915435791015625f, 0.13207638263702392578125f, 0.17194521427154541015625f), float4(0.0037514758296310901641845703125f, -0.20222198963165283203125f, -0.1253508627414703369140625f, 0.001511977054178714752197265625f), float4(0.05629448592662811279296875f, -0.2112897932529449462890625f, 0.078261315822601318359375f, 0.101187460124492645263671875f), float4(-0.044742293655872344970703125f, 0.217933833599090576171875f, -0.19927902519702911376953125f, -0.2133829295635223388671875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0349037759006023406982421875f, -0.10167084634304046630859375f, 0.03106633387506008148193359375f, 0.03799580037593841552734375f), float4(0.20532596111297607421875f, -0.17457838356494903564453125f, 0.16556815803050994873046875f, -0.00216191518120467662811279296875f), float4(0.0268266499042510986328125f, 0.0339632518589496612548828125f, -0.05927388370037078857421875f, 0.192281305789947509765625f), float4(-0.072151474654674530029296875f, -0.0102405436336994171142578125f, 0.2302027046680450439453125f, 0.123859621584415435791015625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.20170144736766815185546875f, -0.082039408385753631591796875f, -0.02810784615576267242431640625f, -0.1800372600555419921875f), float4(0.4474435150623321533203125f, -0.1319024264812469482421875f, 0.13233365118503570556640625f, 0.0362654589116573333740234375f), float4(0.085763134062290191650390625f, -0.2561312615871429443359375f, -0.112133882939815521240234375f, 0.1552908718585968017578125f), float4(-0.27164900302886962890625f, 0.050587676465511322021484375f, -0.062583975493907928466796875f, 0.0572898648679256439208984375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0406494550406932830810546875f, -0.1794973313808441162109375f, 0.3584796488285064697265625f, -0.04058730602264404296875f), float4(0.24314343929290771484375f, -0.23811666667461395263671875f, 0.13958354294300079345703125f, 0.0496187396347522735595703125f), float4(0.0985890328884124755859375f, -0.0420291312038898468017578125f, -0.21850992739200592041015625f, 0.070041902363300323486328125f), float4(-0.09130744636058807373046875f, -0.096835814416408538818359375f, 0.00227826857008039951324462890625f, -0.2541625797748565673828125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.08215545117855072021484375f, -0.0196478925645351409912109375f, 0.05526347458362579345703125f, 0.0537330545485019683837890625f), float4(0.098485715687274932861328125f, -0.104194499552249908447265625f, -0.065414153039455413818359375f, -0.088685773313045501708984375f), float4(-0.072629861533641815185546875f, 0.035137839615345001220703125f, -0.1105290949344635009765625f, -0.0336923189461231231689453125f), float4(0.056786604225635528564453125f, 0.256922900676727294921875f, -0.0593106485903263092041015625f, -0.220812141895294189453125f)));
[   1.007][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.066926084458827972412109375f, 0.0296640582382678985595703125f, -0.107792712748050689697265625f, 0.110269628465175628662109375f), float4(0.23927263915538787841796875f, -0.16914488375186920166015625f, 0.0229473449289798736572265625f, 0.1230385303497314453125f), float4(-0.070662118494510650634765625f, -0.013205378316342830657958984375f, 0.153486430644989013671875f, 0.0355680324137210845947265625f), float4(0.209666907787322998046875f, 0.010149818845093250274658203125f, -0.088144682347774505615234375f, -0.064854674041271209716796875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.114938519895076751708984375f, -0.07492430508136749267578125f, -0.148406982421875f, -0.16956822574138641357421875f), float4(0.0568062923848628997802734375f, -0.063879467546939849853515625f, -0.068802706897258758544921875f, -0.0463733412325382232666015625f), float4(-0.19298930466175079345703125f, 0.18226422369480133056640625f, 0.0646444857120513916015625f, -0.159486293792724609375f), float4(0.0274039171636104583740234375f, 0.1395149528980255126953125f, -0.0656912326812744140625f, -0.077002070844173431396484375f)))) + float4(-0.0433475039899349212646484375f, -0.20504741370677947998046875f, -0.0378212146461009979248046875f, -0.01448693685233592987060546875f);
[   1.007][d][vo/gpu-next/libplacebo] [ 56] }
[   1.007][d][vo/gpu-next/libplacebo] [ 57] 
[   1.007][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.007][d][vo/gpu-next/libplacebo] [ 59] {
[   1.007][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   1.007][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   1.007][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   1.007][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   1.007][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   1.007][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   1.007][d][vo/gpu-next/libplacebo] [ 66] }
[   1.013][d][vo/gpu-next] cache_save_obj: key(93612e7ead2414ea), size(11845), save time(5.263 ms)
[   1.013][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.013][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.013][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.013][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.013][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.013][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.013][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.013][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.013][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.013][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.013][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.013][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.013][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.013][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.013][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.013][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.013][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.013][d][vo/gpu-next/libplacebo] [ 16] };
[   1.013][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   1.013][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   1.013][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   1.013][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   1.013][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   1.013][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   1.013][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   1.013][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   1.013][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   1.013][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.013][d][vo/gpu-next/libplacebo] [ 27] }
[   1.013][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.013][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.013][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.013][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.013][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.013][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.013][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.013][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.013][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.013][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.013][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.013][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.013][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.013][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.013][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.013][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.013][d][vo/gpu-next/libplacebo] [ 16] };
[   1.013][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   1.013][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   1.013][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   1.013][d][vo/gpu-next/libplacebo] [ 20] 
[   1.013][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_4_tf_raw _2 
[   1.013][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_4_tf_pos _3 
[   1.013][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_4_tf_map _3_map 
[   1.013][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_4_tf_size vec2(textureSize(_2, 0)) 
[   1.013][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_4_tf_pt _4 
[   1.013][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_4_tf_off _5 
[   1.013][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   1.013][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_4_tf_mul _6 
[   1.013][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_4_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.013][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_4_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.013][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_4_tf_texOff(off) (conv2d_4_tf_tex(_3 + _4 * vec2(off))) 
[   1.013][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_4_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.013][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_4_tf1_raw _7 
[   1.013][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_4_tf1_pos _8 
[   1.013][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_4_tf1_map _8_map 
[   1.013][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_4_tf1_size vec2(textureSize(_7, 0)) 
[   1.013][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_4_tf1_pt _9 
[   1.013][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_4_tf1_off _a 
[   1.013][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   1.013][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_4_tf1_mul _b 
[   1.013][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_4_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.013][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_4_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.013][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_4_tf1_texOff(off) (conv2d_4_tf1_tex(_8 + _9 * vec2(off))) 
[   1.013][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_4_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.013][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   1.013][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   1.013][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   1.013][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   1.013][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   1.013][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   1.013][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   1.013][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   1.013][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   1.013][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   1.013][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.013][d][vo/gpu-next/libplacebo] [ 56] return color;
[   1.013][d][vo/gpu-next/libplacebo] [ 57] }
[   1.013][d][vo/gpu-next/libplacebo] [ 58] 
[   1.013][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   1.013][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   1.013][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   1.013][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   1.013][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   1.013][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   1.013][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.013][d][vo/gpu-next/libplacebo] [ 66] return color;
[   1.013][d][vo/gpu-next/libplacebo] [ 67] }
[   1.013][d][vo/gpu-next/libplacebo] [ 68] 
[   1.013][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   1.013][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.013][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.013][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_4_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.013][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_4_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.013][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   1.013][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(0.047881734, -0.09396414, -0.2839081, 0.3140853, 0.052613556, 0.09940423, 0.23960467, -0.022228222, -0.12065009, 0.07898222, 0.08657881, 0.010852739, -0.050450284, 0.01683982, 0.031813968, 0.053060856) * go_0(-1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.10252411, -0.03116448, -0.30114275, -0.0316799, -0.017501019, -0.03006003, -0.2095696, 0.10134927, -0.3901916, -0.15335023, -0.11955071, 0.1337449, 0.101239376, -0.25044814, 0.2128469, 0.018979514) * go_0(-1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(-0.13392173, 0.052036732, 0.1682114, -0.026263753, 0.027221246, -0.15121374, 0.13723798, 0.08950682, -0.1182108, -0.07294226, 0.023392374, 0.052329235, -0.05632852, -0.07036173, 0.06872573, 0.05238042) * go_0(-1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.18112028, 0.18242362, -0.06812871, 0.032463413, 0.124638766, -0.26765212, -0.07678663, 0.33806562, 0.09674393, 0.15574542, 0.23634006, -0.02873782, -0.1626769, -0.14760062, -0.007274849, 0.09866139) * go_0(0.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.10726673, -0.10925056, 0.19967109, -0.19936769, 0.15942842, -0.14870064, 0.15493345, -0.08489036, -0.49053356, -0.17321263, 0.28426084, 0.18721215, -0.09898434, -0.2751838, -0.11833524, 0.028445128) * go_0(0.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.11788817, -0.23724948, -0.046072144, 0.035621114, 0.04527003, -0.0073492974, 0.11097195, 0.06806836, 0.04814677, -0.1408476, -0.1325629, 0.00929532, -0.16699041, -0.03034791, 0.08320368, -0.15429299) * go_0(0.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.2729515, 0.008244692, -0.17441982, -0.39026466, 0.17381759, 0.31194404, 0.055934936, 0.20744409, 0.20119062, 0.0734271, 0.0796807, 0.0031037466, -0.0016392237, 0.033733975, 0.07149338, 0.042083208) * go_0(1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.07985744, 0.10945015, 0.018472541, 0.1397503, 0.2005682, 0.42641, 0.23022486, -0.2916921, 0.028285174, -0.31885162, -0.27070364, -0.10390779, 0.0751492, 0.12752363, -0.2279459, 0.08998453) * go_0(1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.18450491, -0.140783, -0.008006845, 0.09029298, 0.12536179, 0.26949662, 0.09491545, 0.063907005, 0.11212244, 0.09778506, -0.1835966, -0.053119674, 0.0072294096, 0.25018227, 0.010868525, -0.22721334) * go_0(1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.028011927, -0.20073172, 0.5976166, -0.19494139, 0.17958745, -0.03838646, 0.058325976, -0.29409218, -0.12793432, 0.03245129, 0.35662368, -0.05048354, -0.13368197, -0.06151968, -0.012714591, -0.1763054) * go_1(-1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.18468465, 0.31682113, 0.12818255, -0.117110476, 0.13709468, -0.10034022, -0.07994527, -0.1259309, 0.04067299, -0.1147398, 0.28361055, 0.27916273, 0.03696692, 0.16829546, 0.27819383, 0.08305029) * go_1(-1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.28920117, -0.033877946, 0.01586206, 0.04681198, 0.024248574, -0.045777842, -0.03342128, 0.07525412, -0.063377544, -0.016737273, 0.11235511, -0.04325238, -0.24170023, -0.09993599, -0.03205371, 0.14339828) * go_1(-1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.008357902, -0.11038377, 0.03709221, 0.26775306, 0.07963845, -0.25377446, -0.17630441, -0.10966474, 0.057311732, -0.083327, 0.044497233, 0.06903858, -0.26531395, -0.103399664, -0.14806591, 0.269314) * go_1(0.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(0.05450808, -0.041993964, -0.07217651, 0.034468375, 0.2117634, 0.0075620585, 0.05825411, -0.2252478, -0.0527787, 0.049732126, -0.032040413, -0.09361454, 0.29585132, 0.018413153, 0.18384546, -0.024226356) * go_1(0.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.031109914, 0.19351351, 0.07405522, -0.06313074, -0.09983541, -0.011495182, 0.11749038, -0.16775608, 0.2790974, -0.09338754, 0.07913264, 0.103792936, -0.18679164, -0.15639925, 0.112943865, 0.07930375) * go_1(0.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.004106195, -0.036833283, 0.12908752, 0.12869535, -0.02472107, 0.17561707, -0.025890926, -0.18789047, 0.096218705, -0.16306408, -0.02198454, -0.010134957, -0.09710009, 0.002062143, -0.046785697, 0.0029441968) * go_1(1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.19648251, -0.015663045, -0.0730215, 0.028611008, 0.13529862, -0.015256192, -0.04119306, -0.24628192, 0.02601027, -0.21184283, -0.1962902, 0.09109358, -0.06792383, 0.092336476, 0.12215351, -0.08596062) * go_1(1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.17530201, -0.0351919, -0.31872514, -0.13933206, -0.07000922, -0.049807087, 0.0010997375, -0.033573963, 0.07442056, -0.33290103, -0.40381998, 0.09435, -0.3280128, -0.09953127, -0.11283648, 0.20685865) * go_1(1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.052573867, -0.035328753, -0.11132943, -0.17515652, 0.05021051, 0.058642425, -0.046640664, 0.0799107, -0.027398815, -0.33619994, -0.22135767, 0.07894002, -0.14941697, -0.0940996, -0.11655085, 0.049795926) * go_2(-1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.039301276, 0.041062318, 0.20312686, -0.009338705, 0.013706282, -0.0245852, 0.03458311, 0.09601228, -0.18203016, -0.012260314, 0.17984508, -0.056576703, -0.102844186, 0.24047872, 0.05307189, 0.16066082) * go_2(-1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.1478775, 0.0046362123, 0.05459521, 0.07162838, -0.01896149, 0.23700175, -0.14174299, 0.06988599, -0.32545477, -0.08065096, -0.061227743, -0.0010796773, 0.094327345, -0.20760082, -0.19523263, 0.19859222) * go_2(-1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.049676366, -0.10381536, 0.02546116, -0.13127093, 0.10954914, 0.0048147943, 0.06962328, -0.30456528, -0.11956627, 0.0150488885, -0.10711722, 0.1684613, -0.1939089, -0.10577047, -0.11980919, -0.036988296) * go_2(0.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.054795764, 0.09491116, -0.08494948, 0.059765853, 0.0131597435, 0.20786162, 0.11999637, 0.024381055, 0.22830428, 0.027053319, -0.011646274, -0.12145409, -0.07899559, -0.012688263, 0.10684157, 0.3824219) * go_2(0.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.23994572, -0.0031532666, -0.0050638164, 0.14236279, 0.05690383, -0.06259682, 0.052624144, 0.20461404, -0.19230312, -0.11072268, 0.013023965, 0.08931543, -0.21997221, 0.11760443, -0.40943825, 0.28656834) * go_2(0.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.06606179, 0.26007771, 0.033754125, 0.119690455, 0.024669139, -0.06752839, 0.12688096, -0.0063201943, -0.17123021, 0.07548857, -0.14213699, 0.034093797, -0.15632647, -0.123243414, -0.42634043, 0.1715022) * go_2(1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.046503466, 0.13876389, 0.17973013, -0.25938338, -0.18824704, -0.11876702, 0.31065792, -0.041042212, -0.061369427, 0.2057992, 0.17295738, 0.3836555, -0.21109799, -0.10167118, 0.16577047, 0.113483034) * go_2(1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.24534856, -0.014482421, 0.22515748, -0.12773542, 0.12794174, -0.02528619, 0.41710484, 0.09154934, -0.17805946, -0.25428918, 0.07294183, 0.047079418, -0.30949152, -0.08919157, 0.17888431, 0.17706038) * go_2(1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.1741826, 0.046225294, -0.10761791, 0.2619953, 0.007373745, 0.05104337, -0.22309966, 0.34529984, -0.034363825, -0.022187237, -0.08609555, 0.16842419, 0.28136057, 0.17843607, -0.11307746, -0.05668021) * go_3(-1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.12310616, -0.29661375, -0.10581025, -0.049584012, 0.19651765, 0.08436489, -0.14533581, -0.029874112, -0.15422897, -0.062741704, -0.22694711, -0.15547274, -0.15181333, 0.0286061, 0.022438493, -0.062447168) * go_3(-1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.3497046, -0.09455009, 0.060618952, -0.2134236, 0.054515295, 0.07451165, -0.09267233, -0.010513333, 0.13842636, 0.11563433, -0.054750167, 0.050432, 0.1514256, 0.04284002, -0.2095581, 0.07907657) * go_3(-1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.11745651, -0.04717057, 0.085377194, -0.065956995, 0.07280491, 0.2730059, 0.11088276, 0.2437957, 0.14018989, 0.1164107, -0.09516929, 0.0022427947, 0.111544006, -0.0680495, 0.09324579, -0.12482022) * go_3(0.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.07995795, -0.03387884, 0.019846136, 0.10231208, -0.07017192, 0.18659039, 0.035161644, 0.101182766, -0.14901665, 0.21307294, 0.063894205, -0.27546507, -0.24792959, -0.067731075, 0.13146006, -0.19333683) * go_3(0.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.034206454, 0.1472648, -0.07406727, 0.014654025, 0.18703444, 0.1319857, -0.10610886, 0.08427947, -0.017536618, -0.06487879, -0.12095286, -0.050414838, 0.03260879, 0.1558894, -0.031887084, 0.11840288) * go_3(0.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.114811294, -0.14574333, -0.09392587, 0.042283528, 0.08919092, 0.18259068, 0.0980717, 0.21024778, -0.1280008, -0.027260462, -0.1129027, 0.18722472, 0.13733985, 0.047153983, 0.030871978, 0.1998385) * go_3(1.0, -1.0);
[   1.013][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.06783575, 0.004612595, 0.1153467, -0.11531557, -0.048889533, 0.07673577, -0.02041786, 0.22744459, -0.13092506, 0.13484807, 0.40003043, -0.053706612, -0.16985156, -0.04791236, -0.052443005, -0.08363625) * go_3(1.0, 0.0);
[   1.013][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.18187882, 0.017893985, 0.17856054, 0.005413129, 0.014147176, 0.15102178, 0.12436294, -0.02176765, -0.16727823, -0.0364111, 0.17074408, 0.12899421, 0.31984514, -0.0072070034, 0.031895883, -0.1991405) * go_3(1.0, 1.0);
[   1.013][d][vo/gpu-next/libplacebo] [111]     result += vec4(-0.011865144, 0.11717201, -0.13823777, -0.059450272);
[   1.013][d][vo/gpu-next/libplacebo] [112]     return result;
[   1.013][d][vo/gpu-next/libplacebo] [113] }
[   1.013][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   1.013][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   1.013][d][vo/gpu-next/libplacebo] [116] return color;
[   1.013][d][vo/gpu-next/libplacebo] [117] }
[   1.013][d][vo/gpu-next/libplacebo] [118] 
[   1.013][d][vo/gpu-next/libplacebo] [119] void main() {
[   1.013][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   1.013][d][vo/gpu-next/libplacebo] [121] }
[   1.015][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.015][d][vo/gpu-next/libplacebo] Spent 1.402 ms translating GLSL to SPIR-V
[   1.015][d][vo/gpu-next/libplacebo] Spent 0.147 ms translating SPIR-V to HLSL
[   1.016][d][vo/gpu-next/libplacebo] Spent 1.161 ms translating HLSL to DXBC
[   1.016][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.016][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.016][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.016][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.016][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.016][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.016][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   1.016][d][vo/gpu-next/libplacebo] [  7] 
[   1.016][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   1.016][d][vo/gpu-next/libplacebo] [  9] {
[   1.016][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   1.016][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   1.016][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   1.016][d][vo/gpu-next/libplacebo] [ 13] };
[   1.016][d][vo/gpu-next/libplacebo] [ 14] 
[   1.016][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   1.016][d][vo/gpu-next/libplacebo] [ 16] {
[   1.016][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   1.016][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   1.016][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   1.016][d][vo/gpu-next/libplacebo] [ 20] };
[   1.016][d][vo/gpu-next/libplacebo] [ 21] 
[   1.016][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   1.016][d][vo/gpu-next/libplacebo] [ 23] {
[   1.016][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   1.016][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   1.016][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   1.016][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   1.016][d][vo/gpu-next/libplacebo] [ 28] }
[   1.016][d][vo/gpu-next/libplacebo] [ 29] 
[   1.016][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.016][d][vo/gpu-next/libplacebo] [ 31] {
[   1.016][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   1.016][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   1.016][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   1.016][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   1.016][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   1.016][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   1.016][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   1.016][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   1.016][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.016][d][vo/gpu-next/libplacebo] [ 41] }
[   1.026][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.026][d][vo/gpu-next/libplacebo] Spent 9.997 ms translating GLSL to SPIR-V
[   1.028][d][vo/gpu-next/libplacebo] Spent 1.814 ms translating SPIR-V to HLSL
[   1.052][v][vo/gpu-next/libplacebo] Spent 24.020 ms translating HLSL to DXBC
[   1.052][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.052][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   1.052][d][vo/gpu-next/libplacebo] [  2] {
[   1.052][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   1.052][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   1.052][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   1.052][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   1.052][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   1.052][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   1.052][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   1.052][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   1.052][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   1.052][d][vo/gpu-next/libplacebo] [ 12] };
[   1.052][d][vo/gpu-next/libplacebo] [ 13] 
[   1.052][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   1.052][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   1.052][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   1.052][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   1.052][d][vo/gpu-next/libplacebo] [ 18] 
[   1.052][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   1.052][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   1.052][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   1.052][d][vo/gpu-next/libplacebo] [ 22] 
[   1.052][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   1.052][d][vo/gpu-next/libplacebo] [ 24] {
[   1.052][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   1.052][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   1.052][d][vo/gpu-next/libplacebo] [ 27] };
[   1.052][d][vo/gpu-next/libplacebo] [ 28] 
[   1.052][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   1.052][d][vo/gpu-next/libplacebo] [ 30] {
[   1.052][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   1.052][d][vo/gpu-next/libplacebo] [ 32] };
[   1.052][d][vo/gpu-next/libplacebo] [ 33] 
[   1.052][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   1.052][d][vo/gpu-next/libplacebo] [ 35] {
[   1.052][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   1.052][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   1.052][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   1.052][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0478817336261272430419921875f, -0.093964137136936187744140625f, -0.2839080989360809326171875f, 0.314085304737091064453125f), float4(0.052613556385040283203125f, 0.09940423071384429931640625f, 0.23960466682910919189453125f, -0.0222282223403453826904296875f), float4(-0.120650090277194976806640625f, 0.07898221909999847412109375f, 0.086578808724880218505859375f, 0.01085273921489715576171875f), float4(-0.0504502840340137481689453125f, 0.0168398208916187286376953125f, 0.0318139679729938507080078125f, 0.0530608557164669036865234375f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.102524109184741973876953125f, -0.03116448037326335906982421875f, -0.301142752170562744140625f, -0.0316798985004425048828125f), float4(-0.017501018941402435302734375f, -0.030060030519962310791015625f, -0.2095696032047271728515625f, 0.101349271833896636962890625f), float4(-0.390191614627838134765625f, -0.15335023403167724609375f, -0.119550712406635284423828125f, 0.133744895458221435546875f), float4(0.101239375770092010498046875f, -0.2504481375217437744140625f, 0.2128469049930572509765625f, 0.01897951401770114898681640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.13392172753810882568359375f, 0.0520367324352264404296875f, 0.168211400508880615234375f, -0.02626375295221805572509765625f), float4(0.02722124569118022918701171875f, -0.1512137353420257568359375f, 0.13723798096179962158203125f, 0.08950681984424591064453125f), float4(-0.118210799992084503173828125f, -0.072942256927490234375f, 0.02339237369596958160400390625f, 0.052329234778881072998046875f), float4(-0.05632852017879486083984375f, -0.07036173343658447265625f, 0.068725727498531341552734375f, 0.052380420267581939697265625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.18112027645111083984375f, 0.1824236214160919189453125f, -0.068128712475299835205078125f, 0.0324634127318859100341796875f), float4(0.1246387660503387451171875f, -0.2676521241664886474609375f, -0.076786629855632781982421875f, 0.338065624237060546875f), float4(0.09674392640590667724609375f, 0.1557454168796539306640625f, 0.23634006083011627197265625f, -0.028737820684909820556640625f), float4(-0.1626769006252288818359375f, -0.1476006209850311279296875f, -0.0072748488746583461761474609375f, 0.0986613929271697998046875f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.107266731560230255126953125f, -0.10925056040287017822265625f, 0.199671089649200439453125f, -0.19936768710613250732421875f), float4(0.159428417682647705078125f, -0.14870063960552215576171875f, 0.154933452606201171875f, -0.084890358150005340576171875f), float4(-0.4905335605144500732421875f, -0.17321263253688812255859375f, 0.2842608392238616943359375f, 0.18721215426921844482421875f), float4(-0.098984338343143463134765625f, -0.27518379688262939453125f, -0.118335239589214324951171875f, 0.0284451283514499664306640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.11788816750049591064453125f, -0.23724947869777679443359375f, -0.0460721440613269805908203125f, 0.035621114075183868408203125f), float4(0.0452700294554233551025390625f, -0.00734929740428924560546875f, 0.110971949994564056396484375f, 0.068068362772464752197265625f), float4(0.04814676940441131591796875f, -0.1408475935459136962890625f, -0.1325629055500030517578125f, 0.00929532013833522796630859375f), float4(-0.16699041426181793212890625f, -0.0303479097783565521240234375f, 0.083203680813312530517578125f, -0.15429298579692840576171875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.2729515135288238525390625f, 0.008244692347943782806396484375f, -0.174419820308685302734375f, -0.3902646601200103759765625f), float4(0.17381758987903594970703125f, 0.3119440376758575439453125f, 0.0559349358081817626953125f, 0.20744408667087554931640625f), float4(0.2011906206607818603515625f, 0.073427103459835052490234375f, 0.079680703580379486083984375f, 0.0031037465669214725494384765625f), float4(-0.001639223657548427581787109375f, 0.0337339751422405242919921875f, 0.071493379771709442138671875f, 0.0420832075178623199462890625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0798574388027191162109375f, 0.10945014655590057373046875f, 0.0184725411236286163330078125f, 0.139750301837921142578125f), float4(0.20056819915771484375f, 0.4264099895954132080078125f, 0.23022486269474029541015625f, -0.2916921079158782958984375f), float4(0.02828517369925975799560546875f, -0.3188516199588775634765625f, -0.2707036435604095458984375f, -0.103907786309719085693359375f), float4(0.075149200856685638427734375f, 0.1275236308574676513671875f, -0.2279458940029144287109375f, 0.089984528720378875732421875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.18450491130352020263671875f, -0.14078299701213836669921875f, -0.0080068446695804595947265625f, 0.090292982757091522216796875f), float4(0.12536178529262542724609375f, 0.269496619701385498046875f, 0.094915449619293212890625f, 0.063907004892826080322265625f), float4(0.112122438848018646240234375f, 0.097785063087940216064453125f, -0.18359659612178802490234375f, -0.05311967432498931884765625f), float4(0.0072294096462428569793701171875f, 0.25018227100372314453125f, 0.01086852513253688812255859375f, -0.22721333801746368408203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02801192738115787506103515625f, -0.2007317245006561279296875f, 0.597616612911224365234375f, -0.19494138658046722412109375f), float4(0.1795874536037445068359375f, -0.0383864603936672210693359375f, 0.0583259761333465576171875f, -0.2940921783447265625f), float4(-0.12793432176113128662109375f, 0.0324512906372547149658203125f, 0.3566236793994903564453125f, -0.05048353970050811767578125f), float4(-0.13368196785449981689453125f, -0.0615196786820888519287109375f, -0.0127145908772945404052734375f, -0.17630539834499359130859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.18468464910984039306640625f, 0.3168211281299591064453125f, 0.12818254530429840087890625f, -0.11711047589778900146484375f), float4(0.137094676494598388671875f, -0.1003402173519134521484375f, -0.079945273697376251220703125f, -0.12593090534210205078125f), float4(0.0406729914247989654541015625f, -0.114739798009395599365234375f, 0.2836105525493621826171875f, 0.2791627347469329833984375f), float4(0.03696691989898681640625f, 0.16829545795917510986328125f, 0.27819383144378662109375f, 0.083050288259983062744140625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2892011702060699462890625f, -0.033877946436405181884765625f, 0.01586206071078777313232421875f, 0.0468119792640209197998046875f), float4(0.0242485739290714263916015625f, -0.04577784240245819091796875f, -0.0334212817251682281494140625f, 0.075254119932651519775390625f), float4(-0.06337754428386688232421875f, -0.01673727296292781829833984375f, 0.11235511302947998046875f, -0.0432523787021636962890625f), float4(-0.241700232028961181640625f, -0.09993599355220794677734375f, -0.0320537090301513671875f, 0.143398284912109375f)));
[   1.052][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   1.052][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   1.052][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.008357902057468891143798828125f, -0.110383771359920501708984375f, 0.0370922088623046875f, 0.267753064632415771484375f), float4(0.0796384513378143310546875f, -0.253774464130401611328125f, -0.17630441486835479736328125f, -0.109664738178253173828125f), float4(0.0573117323219776153564453125f, -0.083327002823352813720703125f, 0.0444972328841686248779296875f, 0.069038577377796173095703125f), float4(-0.2653139531612396240234375f, -0.1033996641635894775390625f, -0.14806590974330902099609375f, 0.269313991069793701171875f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0545080788433551788330078125f, -0.0419939644634723663330078125f, -0.072176508605480194091796875f, 0.034468375146389007568359375f), float4(0.21176339685916900634765625f, 0.0075620585121214389801025390625f, 0.0582541115581989288330078125f, -0.225247800350189208984375f), float4(-0.052778698503971099853515625f, 0.049732126295566558837890625f, -0.0320404134690761566162109375f, -0.093614540994167327880859375f), float4(0.2958513200283050537109375f, 0.0184131525456905364990234375f, 0.183845460414886474609375f, -0.0242263562977313995361328125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.03110991418361663818359375f, 0.19351351261138916015625f, 0.074055217206478118896484375f, -0.06313073635101318359375f), float4(-0.09983541071414947509765625f, -0.01149518229067325592041015625f, 0.1174903810024261474609375f, -0.16775608062744140625f), float4(0.2790974080562591552734375f, -0.093387536704540252685546875f, 0.079132638871669769287109375f, 0.1037929356098175048828125f), float4(-0.18679164350032806396484375f, -0.156399250030517578125f, 0.112943865358829498291015625f, 0.079303748905658721923828125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0041061951778829097747802734375f, -0.0368332825601100921630859375f, 0.12908752262592315673828125f, 0.12869535386562347412109375f), float4(-0.02472106926143169403076171875f, 0.1756170690059661865234375f, -0.02589092589914798736572265625f, -0.187890470027923583984375f), float4(0.09621870517730712890625f, -0.16306407749652862548828125f, -0.021984539926052093505859375f, -0.010134956799447536468505859375f), float4(-0.097100086510181427001953125f, 0.00206214305944740772247314453125f, -0.04678569734096527099609375f, 0.00294419680722057819366455078125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1964825093746185302734375f, -0.01566304452717304229736328125f, -0.0730215013027191162109375f, 0.0286110080778598785400390625f), float4(0.13529862463474273681640625f, -0.015256191603839397430419921875f, -0.041193060576915740966796875f, -0.246281921863555908203125f), float4(0.02601026929914951324462890625f, -0.211842834949493408203125f, -0.196290194988250732421875f, 0.091093577444553375244140625f), float4(-0.06792382895946502685546875f, 0.092336475849151611328125f, 0.122153513133525848388671875f, -0.085960619151592254638671875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.17530201375484466552734375f, -0.035191901028156280517578125f, -0.3187251389026641845703125f, -0.1393320560455322265625f), float4(-0.07000921666622161865234375f, -0.04980708658695220947265625f, 0.001099737477488815784454345703125f, -0.033573962748050689697265625f), float4(0.07442055642604827880859375f, -0.3329010307788848876953125f, -0.403819978237152099609375f, 0.094350002706050872802734375f), float4(-0.3280127942562103271484375f, -0.099531270563602447509765625f, -0.11283648014068603515625f, 0.20685864984989166259765625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.052573867142200469970703125f, -0.035328753292560577392578125f, -0.111329428851604461669921875f, -0.17515651881694793701171875f), float4(0.0502105094492435455322265625f, 0.058642424643039703369140625f, -0.0466406643390655517578125f, 0.079910703003406524658203125f), float4(-0.02739881537854671478271484375f, -0.336199939250946044921875f, -0.2213576734066009521484375f, 0.07894001901149749755859375f), float4(-0.14941696822643280029296875f, -0.094099603593349456787109375f, -0.11655084788799285888671875f, 0.049795925617218017578125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.03930127620697021484375f, 0.041062317788600921630859375f, 0.20312686264514923095703125f, -0.00933870486915111541748046875f), float4(0.01370628178119659423828125f, -0.02458520047366619110107421875f, 0.0345831103622913360595703125f, 0.09601227939128875732421875f), float4(-0.18203015625476837158203125f, -0.0122603140771389007568359375f, 0.17984507977962493896484375f, -0.0565767027437686920166015625f), float4(-0.102844186127185821533203125f, 0.2404787242412567138671875f, 0.0530718900263309478759765625f, 0.16066081821918487548828125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.14787749946117401123046875f, 0.004636212252080440521240234375f, 0.054595209658145904541015625f, 0.07162837684154510498046875f), float4(-0.018961489200592041015625f, 0.2370017468929290771484375f, -0.14174298942089080810546875f, 0.069885991513729095458984375f), float4(-0.325454771518707275390625f, -0.080650962889194488525390625f, -0.0612277425825595855712890625f, -0.001079677254892885684967041015625f), float4(0.09432734549045562744140625f, -0.20760081708431243896484375f, -0.1952326297760009765625f, 0.1985922157764434814453125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.049676366150379180908203125f, -0.10381536185741424560546875f, 0.025461159646511077880859375f, -0.13127093017101287841796875f), float4(0.109549142420291900634765625f, 0.00481479428708553314208984375f, 0.06962327659130096435546875f, -0.3045652806758880615234375f), float4(-0.119566269218921661376953125f, 0.015048888511955738067626953125f, -0.10711722075939178466796875f, 0.1684612929821014404296875f), float4(-0.1939089000225067138671875f, -0.10577046871185302734375f, -0.119809187948703765869140625f, -0.036988295614719390869140625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.054795764386653900146484375f, 0.094911158084869384765625f, -0.08494947850704193115234375f, 0.059765852987766265869140625f), float4(0.013159743510186672210693359375f, 0.20786161720752716064453125f, 0.119996368885040283203125f, 0.02438105456531047821044921875f), float4(0.22830428183078765869140625f, 0.027053318917751312255859375f, -0.011646273545920848846435546875f, -0.1214540898799896240234375f), float4(-0.078995592892169952392578125f, -0.012688263319432735443115234375f, 0.106841571629047393798828125f, 0.382421910762786865234375f)));
[   1.052][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.23994572460651397705078125f, -0.00315326661802828311920166015625f, -0.0050638164393603801727294921875f, 0.14236278831958770751953125f), float4(0.056903831660747528076171875f, -0.062596820294857025146484375f, 0.052624143660068511962890625f, 0.20461404323577880859375f), float4(-0.192303121089935302734375f, -0.110722683370113372802734375f, 0.013023965060710906982421875f, 0.08931542932987213134765625f), float4(-0.21997220814228057861328125f, 0.117604427039623260498046875f, -0.40943825244903564453125f, 0.286568343639373779296875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.066061787307262420654296875f, 0.2600777149200439453125f, 0.03375412523746490478515625f, 0.119690455496311187744140625f), float4(0.02466913871467113494873046875f, -0.067528389394283294677734375f, 0.12688095867633819580078125f, -0.006320194341242313385009765625f), float4(-0.17123021185398101806640625f, 0.075488567352294921875f, -0.142136991024017333984375f, 0.034093797206878662109375f), float4(-0.156326472759246826171875f, -0.123243413865566253662109375f, -0.4263404309749603271484375f, 0.1715022027492523193359375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0465034656226634979248046875f, 0.13876388967037200927734375f, 0.17973013222217559814453125f, -0.259383380413055419921875f), float4(-0.18824703991413116455078125f, -0.1187670230865478515625f, 0.310657918453216552734375f, -0.0410422123968601226806640625f), float4(-0.061369426548480987548828125f, 0.20579920709133148193359375f, 0.17295737564563751220703125f, 0.383655488491058349609375f), float4(-0.2110979855060577392578125f, -0.101671181619167327880859375f, 0.165770471096038818359375f, 0.113483034074306488037109375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.24534855782985687255859375f, -0.014482420869171619415283203125f, 0.22515748441219329833984375f, -0.12773542106151580810546875f), float4(0.12794174253940582275390625f, -0.025286190211772918701171875f, 0.41710484027862548828125f, 0.091549336910247802734375f), float4(-0.17805945873260498046875f, -0.2542891800403594970703125f, 0.072941832244396209716796875f, 0.0470794178545475006103515625f), float4(-0.30949151515960693359375f, -0.08919157087802886962890625f, 0.17888431251049041748046875f, 0.17706038057804107666015625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.174182593822479248046875f, 0.04622529447078704833984375f, -0.107617907226085662841796875f, 0.2619952857494354248046875f), float4(0.0073737450875341892242431640625f, 0.051043368875980377197265625f, -0.22309966385364532470703125f, 0.34529983997344970703125f), float4(-0.0343638248741626739501953125f, -0.0221872366964817047119140625f, -0.086095549166202545166015625f, 0.168424189090728759765625f), float4(0.281360566616058349609375f, 0.1784360706806182861328125f, -0.113077461719512939453125f, -0.056680209934711456298828125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.123106159269809722900390625f, -0.296613752841949462890625f, -0.105810247361660003662109375f, -0.0495840124785900115966796875f), float4(0.196517646312713623046875f, 0.08436489105224609375f, -0.14533580839633941650390625f, -0.0298741124570369720458984375f), float4(-0.15422897040843963623046875f, -0.062741704285144805908203125f, -0.22694711387157440185546875f, -0.15547274053096771240234375f), float4(-0.151813328266143798828125f, 0.02860610000789165496826171875f, 0.0224384926259517669677734375f, -0.062447167932987213134765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.3497045934200286865234375f, -0.09455008804798126220703125f, 0.06061895191669464111328125f, -0.21342359483242034912109375f), float4(0.054515294730663299560546875f, 0.07451164722442626953125f, -0.09267233312129974365234375f, -0.010513332672417163848876953125f), float4(0.138426363468170166015625f, 0.115634329617023468017578125f, -0.054750166833400726318359375f, 0.0504320003092288970947265625f), float4(0.1514256000518798828125f, 0.04284001886844635009765625f, -0.2095580995082855224609375f, 0.07907657325267791748046875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.11745651066303253173828125f, -0.0471705682575702667236328125f, 0.085377193987369537353515625f, -0.06595699489116668701171875f), float4(0.07280491292476654052734375f, 0.273005902767181396484375f, 0.11088275909423828125f, 0.243795692920684814453125f), float4(0.1401898860931396484375f, 0.1164107024669647216796875f, -0.09516929090023040771484375f, 0.0022427947260439395904541015625f), float4(0.111544005572795867919921875f, -0.068049497902393341064453125f, 0.09324578940868377685546875f, -0.12482021749019622802734375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.07995794713497161865234375f, -0.033878840506076812744140625f, 0.01984613575041294097900390625f, 0.102312080562114715576171875f), float4(-0.0701719224452972412109375f, 0.18659038841724395751953125f, 0.0351616442203521728515625f, 0.101182766258716583251953125f), float4(-0.1490166485309600830078125f, 0.21307294070720672607421875f, 0.063894204795360565185546875f, -0.275465071201324462890625f), float4(-0.24792958796024322509765625f, -0.067731074988842010498046875f, 0.13146005570888519287109375f, -0.19333682954311370849609375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0342064537107944488525390625f, 0.14726479351520538330078125f, -0.074067272245883941650390625f, 0.01465402543544769287109375f), float4(0.18703444302082061767578125f, 0.1319856941699981689453125f, -0.10610885918140411376953125f, 0.084279470145702362060546875f), float4(-0.017536617815494537353515625f, -0.0648787915706634521484375f, -0.12095285952091217041015625f, -0.050414837896823883056640625f), float4(0.0326087884604930877685546875f, 0.15588940680027008056640625f, -0.0318870842456817626953125f, 0.11840288341045379638671875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.114811293780803680419921875f, -0.14574332535266876220703125f, -0.093925870954990386962890625f, 0.042283527553081512451171875f), float4(0.089190922677516937255859375f, 0.18259067833423614501953125f, 0.098071701824665069580078125f, 0.2102477848529815673828125f), float4(-0.128000795841217041015625f, -0.02726046182215213775634765625f, -0.112902700901031494140625f, 0.1872247159481048583984375f), float4(0.13733984529972076416015625f, 0.0471539832651615142822265625f, 0.03087197802960872650146484375f, 0.19983850419521331787109375f)));
[   1.052][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.067835748195648193359375f, 0.0046125948429107666015625f, 0.1153466999530792236328125f, -0.11531557142734527587890625f), float4(-0.04888953268527984619140625f, 0.076735772192478179931640625f, -0.02041785977780818939208984375f, 0.227444589138031005859375f), float4(-0.13092505931854248046875f, 0.13484807312488555908203125f, 0.400030434131622314453125f, -0.0537066124379634857177734375f), float4(-0.16985155642032623291015625f, -0.0479123592376708984375f, -0.052443005144596099853515625f, -0.083636246621608734130859375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.18187882006168365478515625f, 0.01789398491382598876953125f, 0.17856054008007049560546875f, 0.005413128994405269622802734375f), float4(0.014147176407277584075927734375f, 0.151021778583526611328125f, 0.124362938106060028076171875f, -0.0217676497995853424072265625f), float4(-0.167278230190277099609375f, -0.036411099135875701904296875f, 0.17074407637119293212890625f, 0.12899421155452728271484375f), float4(0.319845139980316162109375f, -0.007207003422081470489501953125f, 0.031895883381366729736328125f, -0.19914050400257110595703125f)))) + float4(-0.011865143664181232452392578125f, 0.117172010242938995361328125f, -0.138237774372100830078125f, -0.0594502724707126617431640625f);
[   1.052][d][vo/gpu-next/libplacebo] [ 56] }
[   1.052][d][vo/gpu-next/libplacebo] [ 57] 
[   1.052][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.052][d][vo/gpu-next/libplacebo] [ 59] {
[   1.052][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   1.052][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   1.052][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   1.052][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   1.052][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   1.052][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   1.052][d][vo/gpu-next/libplacebo] [ 66] }
[   1.058][d][vo/gpu-next] cache_save_obj: key(5efcdd4c3d09d6d5), size(11845), save time(5.244 ms)
[   1.058][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.058][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.058][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.058][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.058][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.058][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.058][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.058][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.058][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.058][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.058][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.058][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.058][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.058][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.058][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.058][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.058][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.058][d][vo/gpu-next/libplacebo] [ 16] };
[   1.058][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   1.058][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   1.058][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   1.058][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   1.058][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   1.058][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   1.058][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   1.058][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   1.058][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   1.058][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.058][d][vo/gpu-next/libplacebo] [ 27] }
[   1.058][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.058][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.058][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.058][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.058][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.058][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.058][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.058][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.058][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.058][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.058][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.058][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.058][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.058][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.058][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.058][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.058][d][vo/gpu-next/libplacebo] [ 16] };
[   1.058][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   1.058][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   1.058][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   1.058][d][vo/gpu-next/libplacebo] [ 20] 
[   1.058][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_5_tf_raw _2 
[   1.058][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_5_tf_pos _3 
[   1.058][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_5_tf_map _3_map 
[   1.058][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_5_tf_size vec2(textureSize(_2, 0)) 
[   1.058][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_5_tf_pt _4 
[   1.058][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_5_tf_off _5 
[   1.058][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   1.058][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_5_tf_mul _6 
[   1.058][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_5_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.058][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_5_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.059][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_5_tf_texOff(off) (conv2d_5_tf_tex(_3 + _4 * vec2(off))) 
[   1.059][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_5_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.059][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_5_tf1_raw _7 
[   1.059][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_5_tf1_pos _8 
[   1.059][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_5_tf1_map _8_map 
[   1.059][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_5_tf1_size vec2(textureSize(_7, 0)) 
[   1.059][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_5_tf1_pt _9 
[   1.059][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_5_tf1_off _a 
[   1.059][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   1.059][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_5_tf1_mul _b 
[   1.059][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_5_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.059][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_5_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.059][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_5_tf1_texOff(off) (conv2d_5_tf1_tex(_8 + _9 * vec2(off))) 
[   1.059][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_5_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.059][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   1.059][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   1.059][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   1.059][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   1.059][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   1.059][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   1.059][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   1.059][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   1.059][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   1.059][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   1.059][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.059][d][vo/gpu-next/libplacebo] [ 56] return color;
[   1.059][d][vo/gpu-next/libplacebo] [ 57] }
[   1.059][d][vo/gpu-next/libplacebo] [ 58] 
[   1.059][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   1.059][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   1.059][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   1.059][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   1.059][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   1.059][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   1.059][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.059][d][vo/gpu-next/libplacebo] [ 66] return color;
[   1.059][d][vo/gpu-next/libplacebo] [ 67] }
[   1.059][d][vo/gpu-next/libplacebo] [ 68] 
[   1.059][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   1.059][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.059][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.059][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.059][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.059][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   1.059][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.082203194, 0.021720003, 0.03725474, -0.08048348, 0.2063248, -0.033020593, -0.17585336, 0.06476272, 0.012244563, 0.026554609, 0.014708393, 0.26606125, 0.14248778, 0.12817341, -0.039826933, -0.12751861) * go_0(-1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(0.24573852, 0.19695967, -0.06257417, -0.04782871, 0.3511875, -0.018083302, -0.077342674, 0.15247667, 0.20321761, -0.07479984, -0.09548503, 0.08109568, -0.23808748, 0.07246303, -0.004242619, 0.16162953) * go_0(-1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.13296306, 0.19495387, 0.009222276, 0.033592198, 0.20443891, 0.16063854, -0.2581601, -0.016132578, -0.2296461, -0.23647323, -0.15407176, -0.18265317, 0.2343241, -0.049697313, -0.09398783, 0.41931856) * go_0(-1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.10866088, -0.40605694, -0.0042648134, 0.07943803, 0.26914695, 0.14816476, 0.037706107, -0.123223364, -0.19962949, -0.053534556, -0.08397409, -0.04244924, -0.075791344, 0.29629225, 0.2311928, 0.099177904) * go_0(0.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.1748319, -0.2003186, -0.32659066, -0.21007413, 0.20122464, 0.032196607, -0.026299698, 0.33395135, 0.11411664, 0.05971959, 0.09001304, -0.15936212, 0.012322024, 0.19936106, -0.411186, -0.08319479) * go_0(0.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.07349218, 0.006184436, 0.096199185, -0.050186496, 0.064047046, -0.03813128, -0.057007037, -0.025550695, -0.2863145, -0.008512981, -0.20615962, 0.18009211, 0.008298396, 0.22452813, 0.010843521, 0.20169461) * go_0(0.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.2691149, 0.059546687, 0.08922005, 0.2252196, 0.30341956, -0.024489028, 0.087045394, -0.03856442, -0.14083561, -0.17683443, 0.14137806, 0.15520614, 0.2073925, -0.19525874, 0.23661858, 0.3098405) * go_0(1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.006530723, 0.04180736, -0.04762067, -0.064395495, 0.02396811, -0.13332283, 0.0037775645, 0.026309434, 0.0033065109, -0.08315753, 0.02917419, 0.12330464, 0.22819455, -0.07489677, 0.12829056, -0.097994626) * go_0(1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.09983759, 0.032783493, 0.11085758, 0.08993078, -0.057110567, -0.018973934, -0.14946178, -0.03921629, 0.039757587, 0.015860094, 0.04989561, -0.19634786, 0.04351146, 0.019315343, 0.25972188, 0.17989321) * go_0(1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.04111906, -0.165601, 0.0003682197, -0.056232415, -0.32716644, -0.24015541, -0.057547837, 0.05966729, 0.06854747, 0.03599213, -0.18798864, 0.1183447, 0.014268468, -0.1310834, 0.06415977, -0.19414157) * go_1(-1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.00070661673, 0.17671427, 0.10584568, -0.060910843, -0.104282066, -0.22676118, -0.01907062, 0.24882245, -0.043454725, 0.07691623, -0.48371696, 0.013537671, -0.025488405, 0.061228953, 0.18548754, 0.028671112) * go_1(-1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.0121596735, 0.09595702, -0.08244918, -0.1176173, 0.26773354, -0.021729136, 0.075465776, -0.0928876, 0.12461298, 0.16830076, -0.15302569, 0.113850676, 0.09811088, 0.13006307, 0.24999009, 0.10261325) * go_1(-1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.032246377, 0.038265374, -0.26476422, -0.1442876, -0.19866082, 0.08649541, 0.041478764, 0.11155026, 0.21576422, -0.09572912, -0.11174068, -0.19722937, -0.15801935, 0.29604745, -0.08606268, -0.15532136) * go_1(0.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.06315591, 0.16151646, -0.009230362, -0.04341246, 0.09085519, 0.21924476, 0.38044852, 0.193819, 0.16622902, 0.0025134624, -0.22688466, -0.025276015, 0.07714917, 0.16302192, -0.11767101, -0.11086476) * go_1(0.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.04170153, 0.001859292, -0.26352355, 0.10982333, -0.031867817, 0.15773517, -0.060263418, 0.11117763, -0.017359972, 0.0127261225, 0.0782802, -0.16908924, 0.080516845, -0.05691526, -0.07530135, -0.14553802) * go_1(0.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.06112685, -0.032287434, 0.17445667, -0.044935808, -0.11449107, -0.051394563, -0.029589338, -0.14555557, 0.03440661, 0.11035615, -0.17175, -0.14851089, 0.037362, -0.18740481, 0.17278154, 0.18073405) * go_1(1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.27670652, 0.19484822, 0.2609349, 0.1455016, 0.04438468, 0.1449185, 0.11185832, -0.18598269, -0.019846648, 0.11886126, -0.098498635, 0.15737785, 0.011406795, -0.18860829, -0.13705735, 0.17535745) * go_1(1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.30244905, -0.28695273, 0.1146976, 0.21144345, -0.037980128, -0.027679864, -0.13992494, -0.04884521, -0.032023884, -0.07921183, -0.16042095, -0.06935386, -0.06570237, -0.1107404, -0.018163798, 0.22625941) * go_1(1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.07292955, -0.07321777, -0.045146503, -0.33291966, -0.096732594, -0.07203495, 0.33692798, 0.2870733, 0.122160144, -0.076574564, 0.042844944, 0.26448342, 0.07672146, -0.028775277, -0.12088313, 0.15583947) * go_2(-1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.21589327, 0.05258274, 0.09705794, -0.024653846, -0.039402515, 0.28485695, 0.14711736, -0.10556087, -0.15140481, 0.09039498, 0.017308712, 0.11862922, 0.08230978, 0.21678248, -0.043815188, -0.226433) * go_2(-1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(-0.029258793, 0.26618922, 0.02564014, -0.23189862, -0.24074338, -0.18556763, 0.25973624, 0.04746873, 0.0137007125, -0.22239363, -0.12414957, 0.048228756, -0.22406264, 0.282667, -0.021001073, -0.17465611) * go_2(-1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.32401654, -0.1495363, -0.20869227, 0.04271639, -0.0087802755, 0.031325378, 0.23834595, 0.039336167, 0.17265107, 0.20947595, 0.28737286, 0.0028783784, -0.057340365, -0.050347418, -0.11915604, -0.1831807) * go_2(0.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.1811338, 0.07732653, 0.20975596, -0.47129005, 0.07121942, 0.08410583, 0.44170937, -0.19524159, -0.17807977, 0.12837476, 0.20816846, -0.1741958, -0.04411918, 0.06024972, 0.18159702, -0.052485272) * go_2(0.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.15229738, 0.27513, 0.28150418, -0.19543962, -0.02045864, -0.07207227, 0.09589587, 0.09110817, 0.061413247, 0.0046052113, 0.11619411, -0.2988938, 0.065739445, 0.10205611, 0.12847126, -0.028355654) * go_2(0.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.0657154, -0.047568597, -0.16148911, 0.16392621, -0.25281775, -0.061153214, 0.017480455, -0.026288848, 0.20319715, 0.04763355, 0.010444491, -0.26671803, -0.25821987, 0.32863674, -0.30734694, -0.18190521) * go_2(1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.042703815, 0.06633036, -0.048434302, -0.17176376, -0.12699759, -0.1124558, 0.083266065, 0.03354623, -0.13468939, 0.12706263, 0.053659134, -0.06930602, 0.008196115, 0.2034998, -0.06351442, -0.039730288) * go_2(1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.09614661, 0.22500272, 0.088511504, -0.16960482, 0.15364788, -0.18854137, -0.13163191, -0.07503735, -0.23177068, -0.0053305267, -0.041978605, 0.0971947, -0.049034655, 0.04486706, 0.09076307, -0.02310868) * go_2(1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.1304683, 0.17743458, -0.09817326, -0.0646786, 0.07886976, 0.20109388, -0.034114968, -0.2029261, -0.03348398, 0.029337432, -0.07302782, -0.02240758, 0.030242773, -0.30032325, 0.02085572, -0.027314361) * go_3(-1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.037377544, 0.026350772, -0.07430488, -0.114671774, -0.126935, -0.046512567, -0.033628833, -0.19018382, -0.041053895, -0.031206857, 0.08562848, -0.01875709, 0.21099389, -0.092511, 0.0073047103, -0.009811013) * go_3(-1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [104]     result += mat4(0.11358029, 0.17468451, -0.12739041, -0.14332245, -0.22230148, 0.16862972, -0.04462456, 0.2469604, -0.008622369, 0.0081848325, -0.17032363, -0.16024362, 0.21178265, 0.037127133, 0.08559072, 0.11584694) * go_3(-1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.008993893, -0.08037705, 0.4426555, 0.15593371, 0.15273719, -0.03249998, 0.055109, -0.1512612, -0.037183985, 0.20825677, -0.08516227, -0.06664223, -0.10011001, -0.3505215, -0.17941694, 0.052089088) * go_3(0.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.109703645, -0.13505603, 0.1336451, 0.13118869, 0.010915504, 0.12748592, 0.21201555, -0.40841985, -0.11059143, 0.033772044, -0.039282143, 0.03095394, 0.10394723, -0.21343367, -0.10699851, -0.028351074) * go_3(0.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.019704714, 0.06243651, 0.09896519, -0.17492259, 0.012675787, -0.004239029, 0.21319824, 0.069183126, -0.0071114586, 0.123431124, -0.24479835, 0.00723795, -0.045293927, 0.014101029, 0.15746681, 0.042405806) * go_3(0.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [108]     result += mat4(0.023828225, -0.0015190929, 0.1194638, 0.082163885, 0.10532113, 0.042044062, 0.02528007, 0.015175004, 0.026613194, 0.33525538, -0.1627064, -0.29887968, -0.197707, 0.038967777, -0.15811683, -0.106895216) * go_3(1.0, -1.0);
[   1.059][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.044362027, -0.04946742, -0.14815849, -0.17660522, -0.034201477, -0.012243106, -0.050183997, 0.06407372, 0.039822515, 0.15880872, -0.0672721, -0.4081093, 0.019489579, -0.060278706, -0.015096743, -0.07799167) * go_3(1.0, 0.0);
[   1.059][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.11861756, 0.27113584, -0.14107186, -0.10246008, -0.124051, -0.1627854, 0.10698585, 0.2846401, -0.061731786, 0.1724438, -0.12428688, -0.09986041, -0.034171514, -0.07100923, 0.041739646, -0.11308375) * go_3(1.0, 1.0);
[   1.059][d][vo/gpu-next/libplacebo] [111]     result += vec4(-0.02981662, -0.26338395, -0.011632586, 0.15063232);
[   1.059][d][vo/gpu-next/libplacebo] [112]     return result;
[   1.059][d][vo/gpu-next/libplacebo] [113] }
[   1.059][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   1.059][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   1.059][d][vo/gpu-next/libplacebo] [116] return color;
[   1.059][d][vo/gpu-next/libplacebo] [117] }
[   1.059][d][vo/gpu-next/libplacebo] [118] 
[   1.059][d][vo/gpu-next/libplacebo] [119] void main() {
[   1.059][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   1.059][d][vo/gpu-next/libplacebo] [121] }
[   1.060][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.060][d][vo/gpu-next/libplacebo] Spent 1.415 ms translating GLSL to SPIR-V
[   1.060][d][vo/gpu-next/libplacebo] Spent 0.126 ms translating SPIR-V to HLSL
[   1.061][d][vo/gpu-next/libplacebo] Spent 1.186 ms translating HLSL to DXBC
[   1.061][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.061][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.061][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.061][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.061][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.061][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.061][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   1.061][d][vo/gpu-next/libplacebo] [  7] 
[   1.061][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   1.061][d][vo/gpu-next/libplacebo] [  9] {
[   1.061][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   1.061][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   1.061][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   1.061][d][vo/gpu-next/libplacebo] [ 13] };
[   1.061][d][vo/gpu-next/libplacebo] [ 14] 
[   1.061][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   1.061][d][vo/gpu-next/libplacebo] [ 16] {
[   1.061][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   1.061][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   1.061][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   1.061][d][vo/gpu-next/libplacebo] [ 20] };
[   1.061][d][vo/gpu-next/libplacebo] [ 21] 
[   1.061][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   1.061][d][vo/gpu-next/libplacebo] [ 23] {
[   1.061][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   1.061][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   1.061][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   1.061][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   1.061][d][vo/gpu-next/libplacebo] [ 28] }
[   1.061][d][vo/gpu-next/libplacebo] [ 29] 
[   1.061][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.061][d][vo/gpu-next/libplacebo] [ 31] {
[   1.061][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   1.061][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   1.061][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   1.061][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   1.061][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   1.061][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   1.061][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   1.061][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   1.061][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.061][d][vo/gpu-next/libplacebo] [ 41] }
[   1.071][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.071][d][vo/gpu-next/libplacebo] Spent 9.309 ms translating GLSL to SPIR-V
[   1.072][d][vo/gpu-next/libplacebo] Spent 1.592 ms translating SPIR-V to HLSL
[   1.096][v][vo/gpu-next/libplacebo] Spent 23.631 ms translating HLSL to DXBC
[   1.096][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.096][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   1.096][d][vo/gpu-next/libplacebo] [  2] {
[   1.096][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   1.096][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   1.096][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   1.096][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   1.096][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   1.096][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   1.096][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   1.096][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   1.096][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   1.096][d][vo/gpu-next/libplacebo] [ 12] };
[   1.096][d][vo/gpu-next/libplacebo] [ 13] 
[   1.096][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   1.096][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   1.096][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   1.096][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   1.096][d][vo/gpu-next/libplacebo] [ 18] 
[   1.096][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   1.096][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   1.096][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   1.096][d][vo/gpu-next/libplacebo] [ 22] 
[   1.096][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   1.096][d][vo/gpu-next/libplacebo] [ 24] {
[   1.096][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   1.096][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   1.096][d][vo/gpu-next/libplacebo] [ 27] };
[   1.096][d][vo/gpu-next/libplacebo] [ 28] 
[   1.096][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   1.096][d][vo/gpu-next/libplacebo] [ 30] {
[   1.096][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   1.096][d][vo/gpu-next/libplacebo] [ 32] };
[   1.096][d][vo/gpu-next/libplacebo] [ 33] 
[   1.096][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   1.096][d][vo/gpu-next/libplacebo] [ 35] {
[   1.096][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   1.096][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   1.096][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   1.096][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.08220319449901580810546875f, 0.0217200033366680145263671875f, 0.0372547395527362823486328125f, -0.08048348128795623779296875f), float4(0.20632480084896087646484375f, -0.033020593225955963134765625f, -0.17585335671901702880859375f, 0.064762718975543975830078125f), float4(0.012244562618434429168701171875f, 0.02655460871756076812744140625f, 0.014708393253386020660400390625f, 0.266061246395111083984375f), float4(0.14248777925968170166015625f, 0.128173410892486572265625f, -0.0398269332945346832275390625f, -0.12751860916614532470703125f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.24573852121829986572265625f, 0.196959674358367919921875f, -0.062574170529842376708984375f, -0.047828711569309234619140625f), float4(0.3511874973773956298828125f, -0.01808330230414867401123046875f, -0.07734267413616180419921875f, 0.15247666835784912109375f), float4(0.20321761071681976318359375f, -0.074799843132495880126953125f, -0.095485031604766845703125f, 0.08109568059444427490234375f), float4(-0.238087475299835205078125f, 0.072463028132915496826171875f, -0.0042426190339028835296630859375f, 0.1616295278072357177734375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.13296306133270263671875f, 0.19495387375354766845703125f, 0.009222275577485561370849609375f, 0.0335921980440616607666015625f), float4(0.20443890988826751708984375f, 0.1606385409832000732421875f, -0.258160114288330078125f, -0.01613257825374603271484375f), float4(-0.22964610159397125244140625f, -0.2364732325077056884765625f, -0.15407176315784454345703125f, -0.18265317380428314208984375f), float4(0.23432409763336181640625f, -0.0496973134577274322509765625f, -0.093987829983234405517578125f, 0.41931855678558349609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.108660876750946044921875f, -0.406056940555572509765625f, -0.0042648133821785449981689453125f, 0.079438030719757080078125f), float4(0.2691469490528106689453125f, 0.14816476404666900634765625f, 0.0377061069011688232421875f, -0.123223364353179931640625f), float4(-0.199629485607147216796875f, -0.0535345561802387237548828125f, -0.0839740931987762451171875f, -0.0424492396414279937744140625f), float4(-0.07579134404659271240234375f, 0.296292245388031005859375f, 0.2311927974224090576171875f, 0.099177904427051544189453125f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1748318970203399658203125f, -0.2003186047077178955078125f, -0.32659065723419189453125f, -0.210074126720428466796875f), float4(0.20122464001178741455078125f, 0.0321966074407100677490234375f, -0.02629969827830791473388671875f, 0.33395135402679443359375f), float4(0.1141166388988494873046875f, 0.0597195886075496673583984375f, 0.09001304209232330322265625f, -0.15936212241649627685546875f), float4(0.012322024442255496978759765625f, 0.1993610560894012451171875f, -0.4111860096454620361328125f, -0.083194792270660400390625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.073492176830768585205078125f, 0.0061844359152019023895263671875f, 0.0961991846561431884765625f, -0.0501864962279796600341796875f), float4(0.064047046005725860595703125f, -0.03813128173351287841796875f, -0.057007037103176116943359375f, -0.02555069513618946075439453125f), float4(-0.286314487457275390625f, -0.008512981235980987548828125f, -0.2061596214771270751953125f, 0.18009211122989654541015625f), float4(0.008298396132886409759521484375f, 0.224528133869171142578125f, 0.01084352098405361175537109375f, 0.20169460773468017578125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.269114911556243896484375f, 0.059546686708927154541015625f, 0.0892200469970703125f, 0.22521960735321044921875f), float4(0.3034195601940155029296875f, -0.02448902837932109832763671875f, 0.087045393884181976318359375f, -0.038564421236515045166015625f), float4(-0.1408356130123138427734375f, -0.1768344342708587646484375f, 0.14137805998325347900390625f, 0.155206143856048583984375f), float4(0.20739249885082244873046875f, -0.19525873661041259765625f, 0.236618578433990478515625f, 0.309840500354766845703125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0065307230688631534576416015625f, 0.041807360947132110595703125f, -0.04762066900730133056640625f, -0.064395494759082794189453125f), float4(0.02396810986101627349853515625f, -0.13332283496856689453125f, 0.003777564503252506256103515625f, 0.0263094343245029449462890625f), float4(0.003306510858237743377685546875f, -0.083157531917095184326171875f, 0.0291741900146007537841796875f, 0.123304642736911773681640625f), float4(0.22819454967975616455078125f, -0.07489676773548126220703125f, 0.1282905638217926025390625f, -0.097994625568389892578125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.09983758628368377685546875f, 0.03278349339962005615234375f, 0.110857583582401275634765625f, 0.089930780231952667236328125f), float4(-0.0571105666458606719970703125f, -0.01897393353283405303955078125f, -0.1494617760181427001953125f, -0.0392162911593914031982421875f), float4(0.039757587015628814697265625f, 0.01586009375751018524169921875f, 0.0498956106603145599365234375f, -0.1963478624820709228515625f), float4(0.0435114614665508270263671875f, 0.0193153433501720428466796875f, 0.25972187519073486328125f, 0.17989321053028106689453125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.041119061410427093505859375f, -0.16560100018978118896484375f, 0.00036821971298195421695709228515625f, -0.056232415139675140380859375f), float4(-0.32716643810272216796875f, -0.24015541374683380126953125f, -0.0575478374958038330078125f, 0.059667289257049560546875f), float4(0.06854747235774993896484375f, 0.03599213063716888427734375f, -0.18798863887786865234375f, 0.118344701826572418212890625f), float4(0.014268468134105205535888671875f, -0.1310833990573883056640625f, 0.064159773290157318115234375f, -0.194141566753387451171875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0007066167308948934078216552734375f, 0.1767142713069915771484375f, 0.105845682322978973388671875f, -0.060910843312740325927734375f), float4(-0.10428206622600555419921875f, -0.22676117718219757080078125f, -0.01907061971724033355712890625f, 0.2488224506378173828125f), float4(-0.0434547252953052520751953125f, 0.07691623270511627197265625f, -0.4837169647216796875f, 0.0135376714169979095458984375f), float4(-0.02548840455710887908935546875f, 0.061228953301906585693359375f, 0.1854875385761260986328125f, 0.0286711119115352630615234375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.01215967349708080291748046875f, 0.095957018435001373291015625f, -0.08244918286800384521484375f, -0.117617301642894744873046875f), float4(0.2677335441112518310546875f, -0.02172913588583469390869140625f, 0.075465776026248931884765625f, -0.092887602746486663818359375f), float4(0.124612979590892791748046875f, 0.16830076277256011962890625f, -0.153025686740875244140625f, 0.113850675523281097412109375f), float4(0.098110876977443695068359375f, 0.13006307184696197509765625f, 0.24999009072780609130859375f, 0.102613247931003570556640625f)));
[   1.096][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   1.096][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   1.096][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0322463773190975189208984375f, 0.0382653735578060150146484375f, -0.2647642195224761962890625f, -0.14428760111331939697265625f), float4(-0.1986608207225799560546875f, 0.086495406925678253173828125f, 0.0414787642657756805419921875f, 0.11155025660991668701171875f), float4(0.215764224529266357421875f, -0.095729120075702667236328125f, -0.1117406785488128662109375f, -0.19722937047481536865234375f), float4(-0.15801934897899627685546875f, 0.2960474491119384765625f, -0.086062677204608917236328125f, -0.1553213596343994140625f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.063155911862850189208984375f, 0.1615164577960968017578125f, -0.00923036225140094757080078125f, -0.0434124581515789031982421875f), float4(0.090855188667774200439453125f, 0.21924476325511932373046875f, 0.380448520183563232421875f, 0.19381900131702423095703125f), float4(0.16622902452945709228515625f, 0.00251346244476735591888427734375f, -0.226884663105010986328125f, -0.02527601458132266998291015625f), float4(0.07714916765689849853515625f, 0.16302192211151123046875f, -0.11767101287841796875f, -0.11086475849151611328125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0417015291750431060791015625f, 0.001859292038716375827789306640625f, -0.2635235488414764404296875f, 0.10982333123683929443359375f), float4(-0.03186781704425811767578125f, 0.157735168933868408203125f, -0.060263417661190032958984375f, 0.111177630722522735595703125f), float4(-0.0173599720001220703125f, 0.01272612251341342926025390625f, 0.078280203044414520263671875f, -0.16908924281597137451171875f), float4(0.0805168449878692626953125f, -0.056915260851383209228515625f, -0.075301349163055419921875f, -0.14553801715373992919921875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.061126850545406341552734375f, -0.03228743374347686767578125f, 0.17445667088031768798828125f, -0.04493580758571624755859375f), float4(-0.114491067826747894287109375f, -0.0513945631682872772216796875f, -0.02958933822810649871826171875f, -0.14555557072162628173828125f), float4(0.034406609833240509033203125f, 0.110356152057647705078125f, -0.17174999415874481201171875f, -0.14851088821887969970703125f), float4(0.037362001836299896240234375f, -0.187404811382293701171875f, 0.17278154194355010986328125f, 0.18073405325412750244140625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.276706516742706298828125f, 0.19484822452068328857421875f, 0.260934889316558837890625f, 0.14550159871578216552734375f), float4(0.044384680688381195068359375f, 0.144918501377105712890625f, 0.11185832321643829345703125f, -0.18598268926143646240234375f), float4(-0.0198466479778289794921875f, 0.118861258029937744140625f, -0.098498634994029998779296875f, 0.15737785398960113525390625f), float4(0.011406795121729373931884765625f, -0.18860828876495361328125f, -0.13705734908580780029296875f, 0.17535744607448577880859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.302449047565460205078125f, -0.2869527339935302734375f, 0.114697597920894622802734375f, 0.2114434540271759033203125f), float4(-0.0379801280796527862548828125f, -0.0276798643171787261962890625f, -0.139924943447113037109375f, -0.048845209181308746337890625f), float4(-0.032023884356021881103515625f, -0.07921183109283447265625f, -0.160420954227447509765625f, -0.06935386359691619873046875f), float4(-0.065702371299266815185546875f, -0.110740400850772857666015625f, -0.01816379837691783905029296875f, 0.226259410381317138671875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.072929553687572479248046875f, -0.073217771947383880615234375f, -0.045146502554416656494140625f, -0.332919657230377197265625f), float4(-0.096732594072818756103515625f, -0.072034947574138641357421875f, 0.3369279801845550537109375f, 0.287073314189910888671875f), float4(0.122160144150257110595703125f, -0.0765745639801025390625f, 0.042844943702220916748046875f, 0.2644834220409393310546875f), float4(0.0767214596271514892578125f, -0.02877527661621570587158203125f, -0.120883129537105560302734375f, 0.1558394730091094970703125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.215893268585205078125f, 0.05258274078369140625f, 0.09705793857574462890625f, -0.02465384639799594879150390625f), float4(-0.0394025146961212158203125f, 0.2848569452762603759765625f, 0.14711736142635345458984375f, -0.1055608689785003662109375f), float4(-0.15140481293201446533203125f, 0.090394981205463409423828125f, 0.017308712005615234375f, 0.1186292171478271484375f), float4(0.082309782505035400390625f, 0.2167824804782867431640625f, -0.043815188109874725341796875f, -0.22643299400806427001953125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.02925879321992397308349609375f, 0.26618921756744384765625f, 0.02564013935625553131103515625f, -0.23189862072467803955078125f), float4(-0.24074338376522064208984375f, -0.18556763231754302978515625f, 0.259736239910125732421875f, 0.047468729317188262939453125f), float4(0.0137007124722003936767578125f, -0.22239363193511962890625f, -0.124149568378925323486328125f, 0.04822875559329986572265625f), float4(-0.22406263649463653564453125f, 0.2826670110225677490234375f, -0.02100107260048389434814453125f, -0.17465610802173614501953125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.3240165412425994873046875f, -0.14953629672527313232421875f, -0.20869226753711700439453125f, 0.042716391384601593017578125f), float4(-0.008780275471508502960205078125f, 0.031325377523899078369140625f, 0.2383459508419036865234375f, 0.039336167275905609130859375f), float4(0.17265106737613677978515625f, 0.20947594940662384033203125f, 0.2873728573322296142578125f, 0.00287837837822735309600830078125f), float4(-0.0573403649032115936279296875f, -0.0503474175930023193359375f, -0.119156040251255035400390625f, -0.18318070471286773681640625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.181133806705474853515625f, 0.077326528728008270263671875f, 0.209755957126617431640625f, -0.471290051937103271484375f), float4(0.071219421923160552978515625f, 0.084105826914310455322265625f, 0.4417093694210052490234375f, -0.19524158537387847900390625f), float4(-0.17807976901531219482421875f, 0.128374755382537841796875f, 0.20816846191883087158203125f, -0.1741957962512969970703125f), float4(-0.044119179248809814453125f, 0.0602497197687625885009765625f, 0.1815970242023468017578125f, -0.05248527228832244873046875f)));
[   1.096][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.15229737758636474609375f, 0.2751300036907196044921875f, 0.2815041840076446533203125f, -0.19543962180614471435546875f), float4(-0.02045864053070545196533203125f, -0.0720722675323486328125f, 0.09589587152004241943359375f, 0.0911081731319427490234375f), float4(0.0614132471382617950439453125f, 0.004605211317539215087890625f, 0.116194106638431549072265625f, -0.29889380931854248046875f), float4(0.065739445388317108154296875f, 0.102056108415126800537109375f, 0.12847125530242919921875f, -0.0283556543290615081787109375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0657154023647308349609375f, -0.047568596899509429931640625f, -0.16148911416530609130859375f, 0.1639262139797210693359375f), float4(-0.25281774997711181640625f, -0.0611532144248485565185546875f, 0.017480455338954925537109375f, -0.0262888483703136444091796875f), float4(0.2031971514225006103515625f, 0.047633551061153411865234375f, 0.010444491170346736907958984375f, -0.26671802997589111328125f), float4(-0.2582198679447174072265625f, 0.3286367356777191162109375f, -0.30734694004058837890625f, -0.181905210018157958984375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.042703814804553985595703125f, 0.06633035838603973388671875f, -0.04843430221080780029296875f, -0.17176376283168792724609375f), float4(-0.12699759006500244140625f, -0.11245580017566680908203125f, 0.08326606452465057373046875f, 0.033546231687068939208984375f), float4(-0.134689390659332275390625f, 0.12706263363361358642578125f, 0.053659133613109588623046875f, -0.069306023418903350830078125f), float4(0.008196114562451839447021484375f, 0.20349979400634765625f, -0.063514418900012969970703125f, -0.039730288088321685791015625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0961466133594512939453125f, 0.22500272095203399658203125f, 0.088511504232883453369140625f, -0.16960482299327850341796875f), float4(0.15364788472652435302734375f, -0.18854136765003204345703125f, -0.131631910800933837890625f, -0.075037352740764617919921875f), float4(-0.23177067935466766357421875f, -0.0053305267356336116790771484375f, -0.041978605091571807861328125f, 0.0971947014331817626953125f), float4(-0.049034655094146728515625f, 0.044867061078548431396484375f, 0.090763069689273834228515625f, -0.0231086798012256622314453125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.13046829402446746826171875f, 0.17743457853794097900390625f, -0.09817326068878173828125f, -0.064678601920604705810546875f), float4(0.078869760036468505859375f, 0.2010938823223114013671875f, -0.0341149680316448211669921875f, -0.202926099300384521484375f), float4(-0.0334839783608913421630859375f, 0.0293374322354793548583984375f, -0.0730278193950653076171875f, -0.0224075801670551300048828125f), float4(0.03024277277290821075439453125f, -0.3003232479095458984375f, 0.02085571922361850738525390625f, -0.0273143611848354339599609375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.037377543747425079345703125f, 0.02635077200829982757568359375f, -0.074304878711700439453125f, -0.114671774208545684814453125f), float4(-0.12693500518798828125f, -0.046512566506862640380859375f, -0.0336288325488567352294921875f, -0.190183818340301513671875f), float4(-0.0410538949072360992431640625f, -0.0312068574130535125732421875f, 0.0856284797191619873046875f, -0.01875708997249603271484375f), float4(0.21099388599395751953125f, -0.092510998249053955078125f, 0.007304710336029529571533203125f, -0.009811013005673885345458984375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.113580286502838134765625f, 0.17468450963497161865234375f, -0.1273904144763946533203125f, -0.14332245290279388427734375f), float4(-0.222301483154296875f, 0.16862972080707550048828125f, -0.044624559581279754638671875f, 0.2469604015350341796875f), float4(-0.00862236879765987396240234375f, 0.008184832520782947540283203125f, -0.17032362520694732666015625f, -0.16024361550807952880859375f), float4(0.21178264915943145751953125f, 0.0371271334588527679443359375f, 0.08559072017669677734375f, 0.115846939384937286376953125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.008993892930448055267333984375f, -0.080377049744129180908203125f, 0.442655503749847412109375f, 0.1559337079524993896484375f), float4(0.15273718535900115966796875f, -0.0324999801814556121826171875f, 0.055109001696109771728515625f, -0.15126119554042816162109375f), float4(-0.03718398511409759521484375f, 0.20825676620006561279296875f, -0.08516226708889007568359375f, -0.066642232239246368408203125f), float4(-0.10011000931262969970703125f, -0.350521504878997802734375f, -0.17941693961620330810546875f, 0.052089087665081024169921875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.10970364511013031005859375f, -0.13505603373050689697265625f, 0.13364510238170623779296875f, 0.131188690662384033203125f), float4(0.010915503837168216705322265625f, 0.12748591601848602294921875f, 0.21201555430889129638671875f, -0.4084198474884033203125f), float4(-0.11059142649173736572265625f, 0.033772043883800506591796875f, -0.039282143115997314453125f, 0.0309539400041103363037109375f), float4(0.103947229683399200439453125f, -0.21343366801738739013671875f, -0.106998510658740997314453125f, -0.02835107408463954925537109375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.01970471441745758056640625f, 0.0624365098774433135986328125f, 0.098965190351009368896484375f, -0.17492258548736572265625f), float4(0.012675787322223186492919921875f, -0.0042390287853777408599853515625f, 0.213198244571685791015625f, 0.06918312609195709228515625f), float4(-0.0071114585734903812408447265625f, 0.123431123793125152587890625f, -0.24479834735393524169921875f, 0.0072379498742520809173583984375f), float4(-0.04529392719268798828125f, 0.014101029373705387115478515625f, 0.15746681392192840576171875f, 0.042405806481838226318359375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.02382822521030902862548828125f, -0.001519092940725386142730712890625f, 0.11946380138397216796875f, 0.08216388523578643798828125f), float4(0.105321131646633148193359375f, 0.0420440621674060821533203125f, 0.0252800695598125457763671875f, 0.0151750035583972930908203125f), float4(0.0266131944954395294189453125f, 0.3352553844451904296875f, -0.1627064049243927001953125f, -0.298879683017730712890625f), float4(-0.197706997394561767578125f, 0.0389677770435810089111328125f, -0.15811683237552642822265625f, -0.106895215809345245361328125f)));
[   1.096][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0443620271980762481689453125f, -0.0494674183428287506103515625f, -0.148158490657806396484375f, -0.176605224609375f), float4(-0.0342014767229557037353515625f, -0.012243106029927730560302734375f, -0.05018399655818939208984375f, 0.064073719084262847900390625f), float4(0.0398225151002407073974609375f, 0.15880872309207916259765625f, -0.0672720968723297119140625f, -0.40810930728912353515625f), float4(0.019489578902721405029296875f, -0.060278706252574920654296875f, -0.0150967426598072052001953125f, -0.077991671860218048095703125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.118617556989192962646484375f, 0.2711358368396759033203125f, -0.141071856021881103515625f, -0.102460078895092010498046875f), float4(-0.124050997197628021240234375f, -0.16278539597988128662109375f, 0.10698585212230682373046875f, 0.2846401035785675048828125f), float4(-0.0617317855358123779296875f, 0.172443807125091552734375f, -0.124286882579326629638671875f, -0.099860407412052154541015625f), float4(-0.034171514213085174560546875f, -0.07100923359394073486328125f, 0.0417396463453769683837890625f, -0.1130837500095367431640625f)))) + float4(-0.029816620051860809326171875f, -0.2633839547634124755859375f, -0.01163258589804172515869140625f, 0.150632321834564208984375f);
[   1.096][d][vo/gpu-next/libplacebo] [ 56] }
[   1.096][d][vo/gpu-next/libplacebo] [ 57] 
[   1.096][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.096][d][vo/gpu-next/libplacebo] [ 59] {
[   1.096][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   1.096][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   1.096][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   1.096][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   1.096][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   1.096][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   1.096][d][vo/gpu-next/libplacebo] [ 66] }
[   1.101][d][vo/gpu-next] cache_save_obj: key(3ddf6043bb78cd22), size(11845), save time(4.997 ms)
[   1.101][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.102][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.102][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.102][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.102][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.102][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.102][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.102][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.102][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.102][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.102][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.102][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.102][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.102][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.102][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.102][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.102][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.102][d][vo/gpu-next/libplacebo] [ 16] };
[   1.102][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   1.102][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   1.102][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   1.102][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   1.102][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   1.102][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   1.102][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   1.102][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   1.102][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   1.102][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.102][d][vo/gpu-next/libplacebo] [ 27] }
[   1.102][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.102][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.102][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.102][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.102][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.102][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.102][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.102][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.102][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.102][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.102][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.102][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.102][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.102][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.102][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.102][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.102][d][vo/gpu-next/libplacebo] [ 16] };
[   1.102][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   1.102][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   1.102][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   1.102][d][vo/gpu-next/libplacebo] [ 20] 
[   1.102][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_5_tf_raw _2 
[   1.102][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_5_tf_pos _3 
[   1.102][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_5_tf_map _3_map 
[   1.102][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_5_tf_size vec2(textureSize(_2, 0)) 
[   1.102][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_5_tf_pt _4 
[   1.102][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_5_tf_off _5 
[   1.102][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   1.102][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_5_tf_mul _6 
[   1.102][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_5_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.102][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_5_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.102][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_5_tf_texOff(off) (conv2d_5_tf_tex(_3 + _4 * vec2(off))) 
[   1.102][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_5_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.102][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_5_tf1_raw _7 
[   1.102][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_5_tf1_pos _8 
[   1.102][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_5_tf1_map _8_map 
[   1.102][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_5_tf1_size vec2(textureSize(_7, 0)) 
[   1.102][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_5_tf1_pt _9 
[   1.102][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_5_tf1_off _a 
[   1.102][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   1.102][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_5_tf1_mul _b 
[   1.102][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_5_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.102][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_5_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.102][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_5_tf1_texOff(off) (conv2d_5_tf1_tex(_8 + _9 * vec2(off))) 
[   1.102][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_5_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.102][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   1.102][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   1.102][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   1.102][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   1.102][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   1.102][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   1.102][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   1.102][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   1.102][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   1.102][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   1.102][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.102][d][vo/gpu-next/libplacebo] [ 56] return color;
[   1.102][d][vo/gpu-next/libplacebo] [ 57] }
[   1.102][d][vo/gpu-next/libplacebo] [ 58] 
[   1.102][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   1.102][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   1.102][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   1.102][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   1.102][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   1.102][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   1.102][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.102][d][vo/gpu-next/libplacebo] [ 66] return color;
[   1.102][d][vo/gpu-next/libplacebo] [ 67] }
[   1.102][d][vo/gpu-next/libplacebo] [ 68] 
[   1.102][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   1.102][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.102][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.102][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_5_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.102][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_5_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.102][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   1.102][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(0.17082009, 0.031344634, -0.06131912, 0.00887183, -0.01528174, 0.12943709, 0.24537678, 0.008178781, -0.312396, -0.023583878, 0.07827866, -0.1231261, 0.15081584, -0.18161978, -0.25179705, -0.036934935) * go_0(-1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.05768411, 0.16785417, -0.1788644, -0.0067257965, 0.021445744, 0.10066516, -0.23864186, 0.1450302, 0.12892793, 0.19856106, -0.24444748, 0.16531628, -0.044425935, -0.02775357, 0.009059946, -0.12958384) * go_0(-1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(-0.025798557, -0.17238182, -0.34056288, -0.20921059, -0.03576266, 0.1476854, -0.06264234, 0.14452787, -0.04130045, -0.07275762, 0.034578666, 0.2914669, 0.20879944, 0.21359251, -0.048695553, 0.2638088) * go_0(-1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.022791177, 0.4204545, 0.116855636, 0.20241925, -0.010444933, -0.14462502, 0.022550104, -0.24423064, -0.09417524, 0.045358784, -0.11405829, 0.035979558, -0.2283092, -0.06670842, -0.23852053, -0.22417003) * go_0(0.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.14526704, 0.040880535, 0.14076385, 0.07795045, -0.059177604, -0.13056375, -0.3373641, -0.19344307, -0.29891858, -0.32578763, -0.29061425, 0.1562214, -0.13578376, 0.36586633, 0.24936736, 0.054629393) * go_0(0.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(-0.025790233, -0.13020341, -0.10084969, 0.15767297, -0.09738769, 0.04034404, 0.0038675873, 0.043515608, 0.16899958, -0.29117966, 0.03420067, 0.14432564, -0.10473084, 0.21014084, 0.07775908, -0.09303797) * go_0(0.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.07443987, -0.16225167, 0.036251917, 0.028432872, 0.03759333, 0.004027401, -0.033941846, 0.0019474924, 0.02357054, 0.30748722, 0.1652115, -0.17361522, 0.16905582, 0.08048018, -0.23639561, -0.029408466) * go_0(1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.0461233, -0.09346199, -0.07063276, -0.19447634, -0.049339604, -0.0032855074, -0.22661209, -0.0543389, 0.11924857, -0.21691081, -0.1645725, -0.0075736847, 0.018572787, -0.06552861, -0.01777661, -0.11651732) * go_0(1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.06425901, 0.123392984, -0.16395192, -0.093448035, -0.029316641, 0.0986573, -0.23135012, 0.011170849, 0.00023920486, 0.15296175, 0.35453254, -0.05189021, 0.20708887, -0.103900835, 0.081992395, -0.21829562) * go_0(1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.019074136, -0.1572586, 0.27919227, 0.09119617, 0.035954695, 0.2941489, 0.18262725, -0.055522963, -0.21364328, -0.1573611, 0.104966134, 0.08228523, 0.19945285, -0.0039229114, -0.1565048, 0.028975379) * go_1(-1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.18501253, 0.006473006, 0.06637501, 0.04295065, 0.06411007, 0.1166344, -0.10060226, 0.46296063, -0.08600344, -0.03560105, 0.012215349, 0.017885283, 0.061346993, 0.17336361, 0.01935021, 0.20198092) * go_1(-1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.04451627, -0.10372061, -0.13968691, 0.14479733, 0.1660607, 0.19334625, 0.0085214665, 0.28863636, -0.07600901, -0.014777084, 0.13209191, -0.09045013, 0.104893915, -0.04776884, -0.007936376, 0.104568765) * go_1(-1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(0.023751335, -0.108048, -0.050531313, 0.15916029, 0.13246661, 0.04644228, -0.09586482, -0.17222965, -0.22898191, -0.033484615, 0.078883134, -0.052609313, -0.2721741, 0.045986425, 0.13972299, -0.28923607) * go_1(0.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.23364568, -0.008875902, -0.40894926, 0.060443908, -0.2839635, -0.5270991, -0.2500865, 0.002020195, -0.24488612, -0.04982319, -0.009110353, -0.018023955, 0.06647274, -0.25225738, 0.26154432, -0.033934146) * go_1(0.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.1535129, -0.21257545, -0.16553773, 0.17471452, -0.06203719, 0.15238857, 0.18702018, 0.18572305, 0.07740396, -0.074217625, -0.072156586, -0.2183728, 0.00403749, 0.13750519, 0.30362993, 0.06550286) * go_1(0.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(0.37164542, -0.1980723, -0.15659203, 0.19498909, 0.01748114, 0.011807152, -0.05424202, 0.11926474, 0.050406165, -0.12925303, -0.020280985, 0.08429331, 0.14769496, -0.077555746, -0.15216178, -0.27070466) * go_1(1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(0.35804263, 0.08539285, -0.14785156, -0.13532467, 0.058254432, 0.20448379, -0.006173341, 0.058168225, -0.21714899, -0.13472849, -0.09392532, -0.12753737, -0.097461835, -0.11419082, 0.09384189, 0.06414768) * go_1(1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.023494452, -0.22187226, -0.16694295, 0.0204334, -0.26720086, 0.15916729, 0.3098874, -0.10292057, 0.008854983, 0.13375004, -0.04409455, 0.09286524, 0.095829524, 0.12427317, -0.048659876, 0.18300754) * go_1(1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.119153984, 0.10163183, 0.025017537, -0.40096784, 0.026778705, 0.15821172, -0.19947284, -0.33337715, 0.2952563, 0.16820388, -0.057061996, -0.029319009, -0.12184868, 0.09031512, 0.12028806, 0.021044692) * go_2(-1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(0.086744264, -0.046958666, 0.2130253, -0.46672252, 0.07135636, 0.0100029735, -0.13828261, -0.012365689, -0.11374441, 0.21084632, -0.059631422, -0.013799735, -0.037889663, -0.10701892, -0.09493782, 0.15516634) * go_2(-1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.031181194, -0.01535001, 0.029270316, 0.13128386, 0.11838377, -0.17051528, 0.12228499, -0.04841128, 0.33350074, -0.006144013, -0.09055018, 0.27470216, -0.26665646, -0.08703671, -0.01719071, -0.23449609) * go_2(-1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.12856458, 0.005562174, -0.19517267, 0.13270985, 0.2776414, 0.032003902, -0.15778573, 0.15344355, 0.26930434, -0.13459459, 0.035019353, 0.08896612, 0.12847935, -0.122637205, 0.001815178, 0.08290523) * go_2(0.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.33805037, -0.15318587, -0.20955376, -0.26121393, -0.026022578, -0.1617741, 0.1336867, 0.026223289, 0.012059392, -0.17295446, -0.060811974, 0.14027825, -0.21134059, -0.08408573, -0.23773228, 0.110836074) * go_2(0.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.16176093, 0.15307428, -0.07711325, -0.3458805, 0.061291527, 0.023916256, 0.21370678, 0.0015756418, 0.10642374, 0.24807373, 0.11164451, 0.10780487, 0.087194376, -0.2718231, -0.008457387, 0.054078236) * go_2(0.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.03259038, -0.20923306, 0.165477, 0.098864526, -0.02734457, 0.08871225, -0.01552188, 0.047712058, 0.055032052, -0.13044262, -0.2899521, 0.22230095, -0.029343741, -0.16427459, -0.005436118, -0.05111821) * go_2(1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.20065974, -0.1556366, -0.12620135, 0.44572976, -0.020925352, 0.12025185, 0.20588058, 0.06391864, 0.046870507, 0.16942503, -0.049370963, 0.008779016, 0.04954915, 0.090298936, -0.16466027, 0.011152038) * go_2(1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.13587528, 0.047841422, 0.19804007, -0.1672396, -0.072491, 0.04543739, 0.25287256, 0.015226213, 0.02007356, -0.049578942, -0.08796175, 0.1714897, -0.07819061, 0.1509537, 0.093094915, 0.031139288) * go_2(1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [102]     result += mat4(-0.013774682, 0.118201815, -0.009592314, -0.10837201, -0.0686881, -0.083380274, 0.107689425, 0.046642892, 0.119898744, -0.05502989, -0.19719897, 0.0005697584, -0.0921928, 0.032281205, 0.2568853, 0.2325449) * go_3(-1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.02991112, -0.09898633, 0.06076172, -0.20906185, 0.0026118348, 0.06130956, 0.06760944, -0.16662054, 0.065741204, -0.13144116, 0.011419801, 0.22552124, 0.1465757, -0.07417319, -0.10788749, -0.24952699) * go_3(-1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.19238451, -0.024058497, 0.19580396, -0.067399554, -0.18832864, -0.11752747, -0.078949094, -0.23762032, -0.04141864, 0.022530237, -0.02222157, 0.0054874527, 0.057746816, -0.34854797, 0.028730657, -0.08976777) * go_3(-1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.16888975, 0.19949849, -0.08456147, -0.03619044, -0.019596824, 0.11214634, 0.13971676, 0.22926724, 0.03219445, -0.04566354, -0.14948955, -0.22817011, -0.08714846, -0.19684613, 0.15479128, 0.2433362) * go_3(0.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.16050309, -0.102841675, 0.20855242, -0.011171905, -0.10309409, 0.22455123, 0.15892951, -0.06582373, 0.010079549, -0.2055006, -0.09385158, 0.006519388, 0.11838815, 0.37134558, -0.165772, 0.12704434) * go_3(0.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.11643292, 0.03294274, -0.09800525, -0.13601723, -0.081318736, -0.059975546, -0.039105035, -0.2893635, -0.13024913, -0.058016162, -0.09961072, 0.10532414, 0.24250132, -0.35546342, -0.092634924, 0.093994915) * go_3(0.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.18799333, 0.25611782, 0.014645917, -0.063751906, 0.06498416, 0.16619027, -0.14411639, 0.3914421, -0.07343631, -0.116468735, -0.10941946, -0.2553544, -0.37774643, -0.0018441634, 0.06827239, -0.0122299045) * go_3(1.0, -1.0);
[   1.102][d][vo/gpu-next/libplacebo] [109]     result += mat4(-0.11884597, -0.2477297, 0.048488285, -0.06438257, -0.124703035, 0.25932777, 0.0650111, -0.0930877, 0.06463341, -0.000544085, 0.0147504965, -0.170097, -0.13241997, 0.20983136, -0.15956205, 0.03424298) * go_3(1.0, 0.0);
[   1.102][d][vo/gpu-next/libplacebo] [110]     result += mat4(-0.034574904, 0.06755256, 0.09508443, -0.17162292, 0.046379335, 0.2178781, 0.08699012, -0.055380464, -0.2237568, -0.07427848, -0.028395249, -0.3225617, -0.084454566, -0.24776657, 0.254169, 0.13229847) * go_3(1.0, 1.0);
[   1.102][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.18765923, -0.07697714, 0.028134674, -0.060966115);
[   1.102][d][vo/gpu-next/libplacebo] [112]     return result;
[   1.102][d][vo/gpu-next/libplacebo] [113] }
[   1.102][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   1.102][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   1.102][d][vo/gpu-next/libplacebo] [116] return color;
[   1.102][d][vo/gpu-next/libplacebo] [117] }
[   1.102][d][vo/gpu-next/libplacebo] [118] 
[   1.102][d][vo/gpu-next/libplacebo] [119] void main() {
[   1.102][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   1.102][d][vo/gpu-next/libplacebo] [121] }
[   1.104][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.104][d][vo/gpu-next/libplacebo] Spent 1.521 ms translating GLSL to SPIR-V
[   1.104][d][vo/gpu-next/libplacebo] Spent 0.116 ms translating SPIR-V to HLSL
[   1.105][d][vo/gpu-next/libplacebo] Spent 1.133 ms translating HLSL to DXBC
[   1.105][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.105][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.105][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.105][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.105][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.105][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.105][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   1.105][d][vo/gpu-next/libplacebo] [  7] 
[   1.105][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   1.105][d][vo/gpu-next/libplacebo] [  9] {
[   1.105][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   1.105][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   1.105][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   1.105][d][vo/gpu-next/libplacebo] [ 13] };
[   1.105][d][vo/gpu-next/libplacebo] [ 14] 
[   1.105][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   1.105][d][vo/gpu-next/libplacebo] [ 16] {
[   1.105][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   1.105][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   1.105][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   1.105][d][vo/gpu-next/libplacebo] [ 20] };
[   1.105][d][vo/gpu-next/libplacebo] [ 21] 
[   1.105][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   1.105][d][vo/gpu-next/libplacebo] [ 23] {
[   1.105][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   1.105][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   1.105][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   1.105][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   1.105][d][vo/gpu-next/libplacebo] [ 28] }
[   1.105][d][vo/gpu-next/libplacebo] [ 29] 
[   1.105][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.105][d][vo/gpu-next/libplacebo] [ 31] {
[   1.105][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   1.105][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   1.105][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   1.105][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   1.105][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   1.105][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   1.105][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   1.105][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   1.105][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.105][d][vo/gpu-next/libplacebo] [ 41] }
[   1.114][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.114][d][vo/gpu-next/libplacebo] Spent 9.155 ms translating GLSL to SPIR-V
[   1.116][d][vo/gpu-next/libplacebo] Spent 1.535 ms translating SPIR-V to HLSL
[   1.140][v][vo/gpu-next/libplacebo] Spent 24.337 ms translating HLSL to DXBC
[   1.140][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.140][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   1.140][d][vo/gpu-next/libplacebo] [  2] {
[   1.140][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   1.140][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   1.140][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   1.140][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   1.140][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   1.140][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   1.140][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   1.140][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   1.140][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   1.140][d][vo/gpu-next/libplacebo] [ 12] };
[   1.140][d][vo/gpu-next/libplacebo] [ 13] 
[   1.140][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   1.140][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   1.140][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   1.140][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   1.140][d][vo/gpu-next/libplacebo] [ 18] 
[   1.140][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   1.140][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   1.140][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   1.140][d][vo/gpu-next/libplacebo] [ 22] 
[   1.140][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   1.140][d][vo/gpu-next/libplacebo] [ 24] {
[   1.140][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   1.140][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   1.140][d][vo/gpu-next/libplacebo] [ 27] };
[   1.140][d][vo/gpu-next/libplacebo] [ 28] 
[   1.140][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   1.140][d][vo/gpu-next/libplacebo] [ 30] {
[   1.140][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   1.140][d][vo/gpu-next/libplacebo] [ 32] };
[   1.140][d][vo/gpu-next/libplacebo] [ 33] 
[   1.140][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   1.140][d][vo/gpu-next/libplacebo] [ 35] {
[   1.140][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   1.140][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   1.140][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   1.140][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1708200871944427490234375f, 0.0313446335494518280029296875f, -0.061319120228290557861328125f, 0.008871830068528652191162109375f), float4(-0.015281739644706249237060546875f, 0.12943708896636962890625f, 0.24537678062915802001953125f, 0.008178780786693096160888671875f), float4(-0.312395989894866943359375f, -0.0235838778316974639892578125f, 0.07827866077423095703125f, -0.123126097023487091064453125f), float4(0.15081584453582763671875f, -0.18161977827548980712890625f, -0.2517970502376556396484375f, -0.036934934556484222412109375f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.05768410861492156982421875f, 0.16785417497158050537109375f, -0.17886440455913543701171875f, -0.006725796498358249664306640625f), float4(0.021445743739604949951171875f, 0.100665159523487091064453125f, -0.23864185810089111328125f, 0.145030200481414794921875f), float4(0.12892793118953704833984375f, 0.19856105744838714599609375f, -0.24444748461246490478515625f, 0.165316283702850341796875f), float4(-0.0444259345531463623046875f, -0.027753569185733795166015625f, 0.009059946052730083465576171875f, -0.129583835601806640625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02579855732619762420654296875f, -0.172381818294525146484375f, -0.340562880039215087890625f, -0.20921058952808380126953125f), float4(-0.035762660205364227294921875f, 0.14768539369106292724609375f, -0.062642343342304229736328125f, 0.14452786743640899658203125f), float4(-0.0413004495203495025634765625f, -0.07275761663913726806640625f, 0.03457866609096527099609375f, 0.291466891765594482421875f), float4(0.20879943668842315673828125f, 0.21359251439571380615234375f, -0.0486955530941486358642578125f, 0.263808786869049072265625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0227911770343780517578125f, 0.420454502105712890625f, 0.11685563623905181884765625f, 0.2024192512035369873046875f), float4(-0.010444932617247104644775390625f, -0.14462502300739288330078125f, 0.02255010418593883514404296875f, -0.24423064291477203369140625f), float4(-0.094175241887569427490234375f, 0.045358784496784210205078125f, -0.114058293402194976806640625f, 0.0359795577824115753173828125f), float4(-0.22830919921398162841796875f, -0.066708423197269439697265625f, -0.2385205328464508056640625f, -0.224170029163360595703125f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1452670395374298095703125f, 0.0408805347979068756103515625f, 0.1407638490200042724609375f, 0.0779504477977752685546875f), float4(-0.0591776035726070404052734375f, -0.13056375086307525634765625f, -0.3373641073703765869140625f, -0.19344307482242584228515625f), float4(-0.2989185750484466552734375f, -0.3257876336574554443359375f, -0.29061424732208251953125f, 0.15622140467166900634765625f), float4(-0.1357837617397308349609375f, 0.3658663332462310791015625f, 0.24936735630035400390625f, 0.054629392921924591064453125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0257902331650257110595703125f, -0.13020341098308563232421875f, -0.100849688053131103515625f, 0.1576729714870452880859375f), float4(-0.09738768637180328369140625f, 0.0403440408408641815185546875f, 0.00386758730746805667877197265625f, 0.04351560771465301513671875f), float4(0.1689995825290679931640625f, -0.291179656982421875f, 0.0342006683349609375f, 0.1443256437778472900390625f), float4(-0.104730837047100067138671875f, 0.21014083921909332275390625f, 0.077759079635143280029296875f, -0.093037970364093780517578125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.07443986833095550537109375f, -0.16225166618824005126953125f, 0.03625191748142242431640625f, 0.0284328721463680267333984375f), float4(0.0375933311879634857177734375f, 0.004027401097118854522705078125f, -0.0339418463408946990966796875f, 0.0019474923610687255859375f), float4(0.02357053942978382110595703125f, 0.3074872195720672607421875f, 0.165211498737335205078125f, -0.1736152172088623046875f), float4(0.16905581951141357421875f, 0.080480180680751800537109375f, -0.23639561235904693603515625f, -0.0294084660708904266357421875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0461232997477054595947265625f, -0.0934619903564453125f, -0.070632763206958770751953125f, -0.1944763362407684326171875f), float4(-0.0493396036326885223388671875f, -0.00328550743870437145233154296875f, -0.226612091064453125f, -0.0543388985097408294677734375f), float4(0.119248569011688232421875f, -0.2169108092784881591796875f, -0.1645725071430206298828125f, -0.00757368467748165130615234375f), float4(0.01857278682291507720947265625f, -0.065528608858585357666015625f, -0.01777661032974720001220703125f, -0.11651732027530670166015625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.06425900757312774658203125f, 0.12339298427104949951171875f, -0.16395191848278045654296875f, -0.093448035418987274169921875f), float4(-0.029316641390323638916015625f, 0.098657302558422088623046875f, -0.231350123882293701171875f, 0.01117084920406341552734375f), float4(0.00023920486273709684610366821289062f, 0.15296174585819244384765625f, 0.354532539844512939453125f, -0.05189020931720733642578125f), float4(0.20708887279033660888671875f, -0.10390083491802215576171875f, 0.081992395222187042236328125f, -0.21829561889171600341796875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.01907413639128208160400390625f, -0.1572585999965667724609375f, 0.279192268848419189453125f, 0.091196171939373016357421875f), float4(0.0359546951949596405029296875f, 0.2941488921642303466796875f, 0.18262724578380584716796875f, -0.05552296340465545654296875f), float4(-0.2136432826519012451171875f, -0.15736110508441925048828125f, 0.1049661338329315185546875f, 0.082285232841968536376953125f), float4(0.1994528472423553466796875f, -0.00392291136085987091064453125f, -0.15650479495525360107421875f, 0.0289753787219524383544921875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.18501253426074981689453125f, 0.0064730062149465084075927734375f, 0.066375009715557098388671875f, 0.0429506488144397735595703125f), float4(0.0641100704669952392578125f, 0.1166343986988067626953125f, -0.100602261722087860107421875f, 0.4629606306552886962890625f), float4(-0.08600343763828277587890625f, -0.0356010496616363525390625f, 0.012215348891913890838623046875f, 0.01788528263568878173828125f), float4(0.06134699285030364990234375f, 0.17336361110210418701171875f, 0.01935021020472049713134765625f, 0.2019809186458587646484375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0445162691175937652587890625f, -0.103720612823963165283203125f, -0.1396869122982025146484375f, 0.14479732513427734375f), float4(0.16606070101261138916015625f, 0.19334624707698822021484375f, 0.008521466515958309173583984375f, 0.2886363565921783447265625f), float4(-0.076009012758731842041015625f, -0.014777083881199359893798828125f, 0.1320919096469879150390625f, -0.090450130403041839599609375f), float4(0.104893915355205535888671875f, -0.047768838703632354736328125f, -0.007936376146972179412841796875f, 0.10456876456737518310546875f)));
[   1.140][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   1.140][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   1.140][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02375133521854877471923828125f, -0.108047999441623687744140625f, -0.05053131282329559326171875f, 0.1591602861881256103515625f), float4(0.132466614246368408203125f, 0.0464422814548015594482421875f, -0.09586481750011444091796875f, -0.17222964763641357421875f), float4(-0.228981912136077880859375f, -0.033484615385532379150390625f, 0.078883133828639984130859375f, -0.0526093132793903350830078125f), float4(-0.2721740901470184326171875f, 0.0459864251315593719482421875f, 0.13972298800945281982421875f, -0.2892360687255859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2336456775665283203125f, -0.008875901810824871063232421875f, -0.40894925594329833984375f, 0.0604439079761505126953125f), float4(-0.283963501453399658203125f, -0.527099072933197021484375f, -0.250086486339569091796875f, 0.00202019489370286464691162109375f), float4(-0.24488611519336700439453125f, -0.0498231910169124603271484375f, -0.009110352955758571624755859375f, -0.01802395470440387725830078125f), float4(0.0664727389812469482421875f, -0.2522573769092559814453125f, 0.2615443170070648193359375f, -0.0339341461658477783203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.153512895107269287109375f, -0.21257545053958892822265625f, -0.16553772985935211181640625f, 0.17471452057361602783203125f), float4(-0.0620371885597705841064453125f, 0.15238857269287109375f, 0.18702018260955810546875f, 0.18572305142879486083984375f), float4(0.077403962612152099609375f, -0.074217624962329864501953125f, -0.072156585752964019775390625f, -0.21837280690670013427734375f), float4(0.00403749011456966400146484375f, 0.13750518858432769775390625f, 0.303629934787750244140625f, 0.065502859652042388916015625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.3716454207897186279296875f, -0.19807229936122894287109375f, -0.15659202635288238525390625f, 0.19498908519744873046875f), float4(0.017481140792369842529296875f, 0.011807152070105075836181640625f, -0.0542420186102390289306640625f, 0.11926473677158355712890625f), float4(0.050406165421009063720703125f, -0.12925302982330322265625f, -0.02028098516166210174560546875f, 0.084293313324451446533203125f), float4(0.14769496023654937744140625f, -0.0775557458400726318359375f, -0.152161777019500732421875f, -0.2707046568393707275390625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.3580426275730133056640625f, 0.08539284765720367431640625f, -0.1478515565395355224609375f, -0.13532467186450958251953125f), float4(0.0582544319331645965576171875f, 0.20448379218578338623046875f, -0.0061733410693705081939697265625f, 0.058168224990367889404296875f), float4(-0.2171489894390106201171875f, -0.134728491306304931640625f, -0.093925319612026214599609375f, -0.12753736972808837890625f), float4(-0.09746183454990386962890625f, -0.1141908168792724609375f, 0.093841888010501861572265625f, 0.0641476809978485107421875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0234944522380828857421875f, -0.22187225520610809326171875f, -0.16694295406341552734375f, 0.0204333998262882232666015625f), float4(-0.2672008574008941650390625f, 0.15916728973388671875f, 0.309887409210205078125f, -0.102920569479465484619140625f), float4(0.00885498337447643280029296875f, 0.13375003635883331298828125f, -0.0440945513546466827392578125f, 0.09286524355411529541015625f), float4(0.095829524099826812744140625f, 0.124273173511028289794921875f, -0.04865987598896026611328125f, 0.183007538318634033203125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.119153983891010284423828125f, 0.101631827652454376220703125f, 0.025017537176609039306640625f, -0.4009678363800048828125f), float4(0.026778705418109893798828125f, 0.15821172297000885009765625f, -0.199472844600677490234375f, -0.3333771526813507080078125f), float4(0.2952562868595123291015625f, 0.16820387542247772216796875f, -0.0570619963109493255615234375f, -0.02931900881230831146240234375f), float4(-0.121848680078983306884765625f, 0.09031511843204498291015625f, 0.12028805911540985107421875f, 0.02104469202458858489990234375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.08674426376819610595703125f, -0.0469586662948131561279296875f, 0.2130253016948699951171875f, -0.4667225182056427001953125f), float4(0.071356363594532012939453125f, 0.010002973489463329315185546875f, -0.13828261196613311767578125f, -0.012365688569843769073486328125f), float4(-0.1137444078922271728515625f, 0.21084631979465484619140625f, -0.05963142216205596923828125f, -0.013799735344946384429931640625f), float4(-0.0378896631300449371337890625f, -0.1070189177989959716796875f, -0.094937823712825775146484375f, 0.15516634285449981689453125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.031181193888187408447265625f, -0.0153500102460384368896484375f, 0.02927031554281711578369140625f, 0.13128386437892913818359375f), float4(0.118383772671222686767578125f, -0.17051528394222259521484375f, 0.12228499352931976318359375f, -0.0484112799167633056640625f), float4(0.33350074291229248046875f, -0.0061440127901732921600341796875f, -0.090550176799297332763671875f, 0.2747021615505218505859375f), float4(-0.266656458377838134765625f, -0.087036706507205963134765625f, -0.01719070971012115478515625f, -0.2344960868358612060546875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.12856458127498626708984375f, 0.005562174133956432342529296875f, -0.19517266750335693359375f, 0.13270984590053558349609375f), float4(0.2776413857936859130859375f, 0.032003901898860931396484375f, -0.15778572857379913330078125f, 0.1534435451030731201171875f), float4(0.269304335117340087890625f, -0.1345945894718170166015625f, 0.03501935303211212158203125f, 0.08896611630916595458984375f), float4(0.12847934663295745849609375f, -0.122637204825878143310546875f, 0.0018151779659092426300048828125f, 0.082905232906341552734375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.338050365447998046875f, -0.1531858742237091064453125f, -0.20955376327037811279296875f, -0.2612139284610748291015625f), float4(-0.02602257765829563140869140625f, -0.161774098873138427734375f, 0.13368670642375946044921875f, 0.02622328884899616241455078125f), float4(0.01205939240753650665283203125f, -0.17295445501804351806640625f, -0.060811974108219146728515625f, 0.1402782499790191650390625f), float4(-0.21134059131145477294921875f, -0.0840857326984405517578125f, -0.23773227632045745849609375f, 0.11083607375621795654296875f)));
[   1.140][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.16176092624664306640625f, 0.15307427942752838134765625f, -0.077113248407840728759765625f, -0.3458805084228515625f), float4(0.0612915270030498504638671875f, 0.0239162556827068328857421875f, 0.21370677649974822998046875f, 0.0015756417997181415557861328125f), float4(0.106423743069171905517578125f, 0.2480737268924713134765625f, 0.1116445064544677734375f, 0.107804872095584869384765625f), float4(0.087194375693798065185546875f, -0.271823108196258544921875f, -0.00845738686621189117431640625f, 0.05407823622226715087890625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.032590381801128387451171875f, -0.20923306047916412353515625f, 0.16547699272632598876953125f, 0.0988645255565643310546875f), float4(-0.02734456956386566162109375f, 0.088712252676486968994140625f, -0.0155218802392482757568359375f, 0.0477120578289031982421875f), float4(0.055032052099704742431640625f, -0.13044261932373046875f, -0.289952099323272705078125f, 0.222300946712493896484375f), float4(-0.02934374101459980010986328125f, -0.16427458822727203369140625f, -0.0054361182264983654022216796875f, -0.05111820995807647705078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.20065973699092864990234375f, -0.15563659369945526123046875f, -0.12620134651660919189453125f, 0.4457297623157501220703125f), float4(-0.02092535234987735748291015625f, 0.12025184929370880126953125f, 0.205880582332611083984375f, 0.063918642699718475341796875f), float4(0.046870507299900054931640625f, 0.16942502558231353759765625f, -0.0493709631264209747314453125f, 0.008779016323387622833251953125f), float4(0.0495491512119770050048828125f, 0.09029893577098846435546875f, -0.164660274982452392578125f, 0.01115203835070133209228515625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.135875284671783447265625f, 0.047841422259807586669921875f, 0.198040068149566650390625f, -0.167239606380462646484375f), float4(-0.072490997612476348876953125f, 0.0454373918473720550537109375f, 0.2528725564479827880859375f, 0.01522621326148509979248046875f), float4(0.0200735591351985931396484375f, -0.049578942358493804931640625f, -0.08796174824237823486328125f, 0.17148970067501068115234375f), float4(-0.07819060981273651123046875f, 0.15095369517803192138671875f, 0.0930949151515960693359375f, 0.0311392880976200103759765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0137746818363666534423828125f, 0.118201814591884613037109375f, -0.009592314250767230987548828125f, -0.108372010290622711181640625f), float4(-0.068688102066516876220703125f, -0.083380274474620819091796875f, 0.10768942534923553466796875f, 0.046642892062664031982421875f), float4(0.119898743927478790283203125f, -0.055029891431331634521484375f, -0.19719897210597991943359375f, 0.0005697584128938615322113037109375f), float4(-0.0921927988529205322265625f, 0.03228120505809783935546875f, 0.2568852901458740234375f, 0.23254489898681640625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0299111194908618927001953125f, -0.098986327648162841796875f, 0.0607617199420928955078125f, -0.20906184613704681396484375f), float4(0.00261183478869497776031494140625f, 0.06130956113338470458984375f, 0.067609436810016632080078125f, -0.16662053763866424560546875f), float4(0.065741203725337982177734375f, -0.13144116103649139404296875f, 0.01141980104148387908935546875f, 0.2255212366580963134765625f), float4(0.14657570421695709228515625f, -0.074173189699649810791015625f, -0.10788749158382415771484375f, -0.24952699244022369384765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1923845112323760986328125f, -0.02405849657952785491943359375f, 0.19580395519733428955078125f, -0.067399553954601287841796875f), float4(-0.18832863867282867431640625f, -0.11752746999263763427734375f, -0.07894909381866455078125f, -0.2376203238964080810546875f), float4(-0.0414186418056488037109375f, 0.02253023721277713775634765625f, -0.02222157083451747894287109375f, 0.0054874527268111705780029296875f), float4(0.0577468164265155792236328125f, -0.3485479652881622314453125f, 0.0287306569516658782958984375f, -0.08976776897907257080078125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.16888974606990814208984375f, 0.19949848949909210205078125f, -0.08456146717071533203125f, -0.0361904390156269073486328125f), float4(-0.01959682442247867584228515625f, 0.112146340310573577880859375f, 0.13971675932407379150390625f, 0.22926723957061767578125f), float4(0.03219445049762725830078125f, -0.0456635393202304840087890625f, -0.1494895517826080322265625f, -0.22817011177539825439453125f), float4(-0.0871484577655792236328125f, -0.19684612751007080078125f, 0.15479128062725067138671875f, 0.243336200714111328125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.160503089427947998046875f, -0.102841675281524658203125f, 0.208552420139312744140625f, -0.01117190532386302947998046875f), float4(-0.103094093501567840576171875f, 0.2245512306690216064453125f, 0.15892951190471649169921875f, -0.065823726356029510498046875f), float4(0.010079548694193363189697265625f, -0.20550060272216796875f, -0.09385158121585845947265625f, 0.0065193879418075084686279296875f), float4(0.118388153612613677978515625f, 0.371345579624176025390625f, -0.16577200591564178466796875f, 0.12704433500766754150390625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.11643292009830474853515625f, 0.0329427383840084075927734375f, -0.09800525009632110595703125f, -0.1360172331333160400390625f), float4(-0.08131873607635498046875f, -0.0599755458533763885498046875f, -0.039105035364627838134765625f, -0.28936350345611572265625f), float4(-0.13024912774562835693359375f, -0.0580161623656749725341796875f, -0.099610723555088043212890625f, 0.105324141681194305419921875f), float4(0.242501318454742431640625f, -0.3554634153842926025390625f, -0.092634923756122589111328125f, 0.093994915485382080078125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.18799333274364471435546875f, 0.25611782073974609375f, 0.01464591734111309051513671875f, -0.0637519061565399169921875f), float4(0.06498415768146514892578125f, 0.16619026660919189453125f, -0.14411638677120208740234375f, 0.3914420902729034423828125f), float4(-0.073436312377452850341796875f, -0.116468735039234161376953125f, -0.109419457614421844482421875f, -0.255354404449462890625f), float4(-0.3777464330196380615234375f, -0.001844163401983678340911865234375f, 0.068272389471530914306640625f, -0.01222990453243255615234375f)));
[   1.140][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1188459694385528564453125f, -0.24772970378398895263671875f, 0.0484882853925228118896484375f, -0.06438256800174713134765625f), float4(-0.12470303475856781005859375f, 0.25932776927947998046875f, 0.06501109898090362548828125f, -0.0930877029895782470703125f), float4(0.064633406698703765869140625f, -0.0005440849927254021167755126953125f, 0.014750496484339237213134765625f, -0.17009699344635009765625f), float4(-0.1324199736118316650390625f, 0.20983135700225830078125f, -0.159562051296234130859375f, 0.034242980182170867919921875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.034574903547763824462890625f, 0.067552559077739715576171875f, 0.0950844287872314453125f, -0.17162291705608367919921875f), float4(0.046379335224628448486328125f, 0.2178781032562255859375f, 0.0869901180267333984375f, -0.05538046360015869140625f), float4(-0.22375680506229400634765625f, -0.074278481304645538330078125f, -0.02839524857699871063232421875f, -0.3225617110729217529296875f), float4(-0.0844545662403106689453125f, -0.24776656925678253173828125f, 0.254168987274169921875f, 0.13229846954345703125f)))) + float4(0.1876592338085174560546875f, -0.076977141201496124267578125f, 0.0281346738338470458984375f, -0.0609661154448986053466796875f);
[   1.140][d][vo/gpu-next/libplacebo] [ 56] }
[   1.140][d][vo/gpu-next/libplacebo] [ 57] 
[   1.140][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.140][d][vo/gpu-next/libplacebo] [ 59] {
[   1.140][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   1.140][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   1.140][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   1.140][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   1.140][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   1.140][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   1.140][d][vo/gpu-next/libplacebo] [ 66] }
[   1.145][d][vo/gpu-next] cache_save_obj: key(9fa1c5bac8cc9823), size(11845), save time(5.087 ms)
[   1.145][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.146][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.146][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.146][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.146][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.146][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.146][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.146][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.146][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.146][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.146][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.146][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.146][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.146][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.146][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.146][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.146][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.146][d][vo/gpu-next/libplacebo] [ 16] };
[   1.146][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   1.146][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   1.146][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   1.146][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   1.146][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   1.146][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   1.146][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   1.146][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   1.146][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   1.146][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.146][d][vo/gpu-next/libplacebo] [ 27] }
[   1.146][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.146][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.146][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.146][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.146][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.146][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.146][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.146][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.146][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.146][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.146][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.146][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.146][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.146][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.146][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.146][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.146][d][vo/gpu-next/libplacebo] [ 16] };
[   1.146][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   1.146][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   1.146][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   1.146][d][vo/gpu-next/libplacebo] [ 20] 
[   1.146][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_6_tf_raw _2 
[   1.146][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_6_tf_pos _3 
[   1.146][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_6_tf_map _3_map 
[   1.146][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_6_tf_size vec2(textureSize(_2, 0)) 
[   1.146][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_6_tf_pt _4 
[   1.146][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_6_tf_off _5 
[   1.146][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   1.146][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_6_tf_mul _6 
[   1.146][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_6_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.146][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_6_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.146][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_6_tf_texOff(off) (conv2d_6_tf_tex(_3 + _4 * vec2(off))) 
[   1.146][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_6_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.146][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_6_tf1_raw _7 
[   1.146][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_6_tf1_pos _8 
[   1.146][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_6_tf1_map _8_map 
[   1.146][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_6_tf1_size vec2(textureSize(_7, 0)) 
[   1.146][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_6_tf1_pt _9 
[   1.146][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_6_tf1_off _a 
[   1.146][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   1.146][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_6_tf1_mul _b 
[   1.146][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_6_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.146][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_6_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.146][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_6_tf1_texOff(off) (conv2d_6_tf1_tex(_8 + _9 * vec2(off))) 
[   1.146][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_6_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.146][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   1.146][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   1.146][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   1.146][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   1.146][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   1.146][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   1.146][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   1.146][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   1.146][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   1.146][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   1.146][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.146][d][vo/gpu-next/libplacebo] [ 56] return color;
[   1.146][d][vo/gpu-next/libplacebo] [ 57] }
[   1.146][d][vo/gpu-next/libplacebo] [ 58] 
[   1.146][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   1.146][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   1.146][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   1.146][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   1.146][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   1.146][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   1.146][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.146][d][vo/gpu-next/libplacebo] [ 66] return color;
[   1.146][d][vo/gpu-next/libplacebo] [ 67] }
[   1.146][d][vo/gpu-next/libplacebo] [ 68] 
[   1.146][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   1.146][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.146][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.146][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.146][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.146][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   1.146][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(0.21919365, 0.36627784, 0.12603314, 0.24306288, 0.06447028, 0.06472204, -0.05997039, -0.15651788, 0.017059859, -0.006497198, -0.4189735, 0.021636713, -0.23887977, -0.014220949, 0.031113686, -0.17342716) * go_0(-1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(-0.10818789, -0.03273837, 0.33918005, -0.19290088, 0.0955361, -0.34107623, -0.054906327, -0.18083344, -0.060723677, 0.24395694, 0.112975016, -0.07254578, -0.14389384, 0.13235968, -0.15054801, -0.26216486) * go_0(-1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(-0.23442148, -0.07857079, 0.022283873, -0.2656417, 0.037092753, -0.037313666, -0.5057047, 0.042533103, -0.120424, 0.00021930189, -0.0044566668, -0.45536995, 0.00040759926, 0.14597592, -0.094990164, -0.036161344) * go_0(-1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(0.15024352, 0.19903262, -0.0734784, 0.092836305, -0.025753846, 0.024750374, -0.07550193, 0.035420835, 0.11084378, 0.26119822, -0.08443512, -0.0047807065, -0.042685136, 0.24889739, 0.098650105, 0.2088369) * go_0(0.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.25551823, 0.14455976, 0.19886157, -0.23465924, 0.20711218, -0.20875362, -0.11320392, -0.30852005, -0.06795657, 0.008670962, 0.30601278, 0.6929064, 0.17079145, 0.15744895, 0.06441601, 0.06514001) * go_0(0.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.03142604, -0.006410137, -0.023654792, -0.05708553, 0.062985405, -0.077010594, 0.078804865, 0.050882503, 0.010274228, -0.15558401, 0.09490256, 0.14964707, -0.11966925, -0.36176664, 0.27809814, -0.18862294) * go_0(0.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(0.05609992, 0.0041612233, -0.08498908, 0.04479823, -0.080117956, -0.17423204, -0.22858045, 0.054569032, -0.050866384, -0.020000307, 0.027000953, -0.67724514, 0.16240878, -0.04641204, 0.0648367, -0.20613132) * go_0(1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.08542306, -0.08254248, -0.11090553, -0.14140448, -0.10788511, -0.13011602, -0.29319742, -0.26007155, 0.11033401, -0.31966573, 0.32668245, 0.19542319, 0.06329418, 0.20904626, 0.2724067, -0.009155685) * go_0(1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(-0.007403411, 0.0012836396, -0.23446666, -0.03017208, 0.062420018, -0.13611084, -0.2975928, 0.13173148, -0.03679939, 0.13743873, -0.10121899, 0.074514665, 0.1497629, -0.09523838, 0.39018926, 0.37807035) * go_0(1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(0.11441487, -0.19565523, -0.25757137, -0.16148767, 0.15575317, -0.12657928, 0.10479676, 0.062919036, 0.010544159, 0.22931573, 0.20360178, 0.4637635, -0.3395036, -0.52467215, 0.08759308, 0.028030418) * go_1(-1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(0.2699195, -0.34218305, 0.15259695, 0.03139074, -0.024053533, -0.029567484, 0.28480124, 0.20525953, 0.15452823, -0.217713, 0.15861876, -0.012275699, 0.21408023, 0.097508304, -0.57126766, -0.14679857) * go_1(-1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(-0.0755847, -0.09751562, -0.29480466, -0.22285318, 0.14196442, 0.114573136, -0.22294767, 0.12463806, 0.3322209, -0.04631724, -0.11097061, -0.27986854, -0.16099304, -0.060079545, 0.00299308, 0.120776065) * go_1(-1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(0.050933484, -0.13776319, -0.18809728, 0.24035202, -0.32528606, -0.41684148, -0.029342847, 0.28642926, -0.07963454, -0.12905268, 0.07606093, 0.24670005, -0.08815598, -0.23320907, -0.008099349, 0.21512873) * go_1(0.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(0.19247563, 0.18083979, -0.09719762, 0.15314941, -0.22350982, 0.46515045, -0.3571128, 0.35953265, 0.06921985, -0.4482386, -0.18732521, -0.5043983, 0.35159567, -0.33315298, -0.21884166, -0.16283798) * go_1(0.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(-0.021124054, -0.007966742, 0.0052493825, 0.022550896, 0.030403977, 0.3377868, -0.47602004, -0.077664234, -0.07222509, -0.07486097, -0.37971064, -0.5107857, -0.06299477, 0.04930232, -0.3330487, 0.29845512) * go_1(0.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.063705474, -0.07917637, -0.02026607, -0.05142568, 0.021577014, -0.07379867, 0.033937998, 0.08148773, -0.02717838, -0.03233838, 0.098000035, 0.036476444, -0.13366953, 0.014477577, 0.24064232, 0.39313284) * go_1(1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.16046515, -0.094624564, 0.35435164, 0.09942324, -0.07137174, -0.27999225, 0.124644354, -0.0062176553, 0.015016751, -0.05500243, -0.23249559, -0.4508382, 0.1860433, 0.10671491, -0.033345353, -0.06611453) * go_1(1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(0.21614046, -0.01307525, -0.18941112, -0.20533535, -0.14481686, -0.47801897, 0.22605121, -0.20298961, -0.06744227, -0.20377496, -0.11926173, 0.15645133, -0.31570885, -0.3495616, -0.024666889, 0.040965475) * go_1(1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.11748018, -0.039976366, -0.00084064255, -0.028653437, -0.16216733, -0.036768105, 0.018064514, -0.0928936, 0.14008482, -0.064511225, 0.24329947, -0.0268608, 0.050330248, 0.08540601, -0.07272679, -0.01187671) * go_2(-1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.09459936, -0.011723822, -0.06952858, -0.07808506, -0.065588176, 0.332501, -0.0120042395, 0.07668016, 0.14735217, -0.14856043, -0.06702449, -0.020953184, -0.023006834, 0.06135422, 0.1491448, -0.028061569) * go_2(-1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(0.25136968, 0.25146323, -0.108277924, -0.20407207, -0.0013780294, 0.16108194, 0.25143847, 0.06672421, -0.033905584, -0.021144686, -0.019152718, 0.34619498, 0.14560962, 0.034437314, 0.024790365, -0.049976267) * go_2(-1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(-0.24928351, 0.12637813, 0.23609994, 0.12722939, -0.036997862, -0.16554876, 0.11144095, -0.10040036, -0.020359103, -0.080701865, -0.3142192, 0.27257237, 0.13546956, -0.14416885, 0.028196262, -0.2886465) * go_2(0.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(0.28524777, -0.4236231, 0.27420738, -0.21095508, 0.23475651, 0.115876295, -0.18837357, -0.0260708, 0.030670704, -0.11516913, -0.11365572, -0.2203149, -0.018612983, -0.10719593, -0.031727783, 0.1403327) * go_2(0.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(0.07240512, 0.03139215, 0.12328737, -0.021201206, -0.13971715, 0.072742075, -0.0011289873, 0.0053133667, 0.035639685, -0.04322272, -0.19288473, -0.15812221, -0.19126481, 0.0698514, 0.17619178, -0.035605464) * go_2(0.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(-0.18552057, 0.07259671, 0.011667668, -0.15630563, 0.11414356, 0.14482655, -0.04021029, 0.18495587, -0.11386139, -0.09058561, -0.011265998, 0.23358451, 0.0521358, 0.12495261, 0.021644838, -0.048094347) * go_2(1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [100]     result += mat4(-0.09222373, 0.0533347, 0.055820454, 0.22382596, 0.18713981, 0.2668916, -0.019384036, 0.012698582, 0.13325234, 0.20361474, -0.33106443, -0.08571572, -0.21243028, -0.10996386, 0.123459645, 0.1534967) * go_2(1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [101]     result += mat4(0.18133277, 0.18108074, -0.05638664, 0.29533157, -0.2108019, -0.033636626, 0.5015888, -0.15116066, -0.041320793, -0.14764231, 0.07314567, -0.18865979, 0.10276937, 0.094240844, -0.1364283, 0.27812913) * go_2(1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [102]     result += mat4(0.06040915, 0.23753685, 0.19019844, 0.23948252, -0.07535012, 0.11848904, 0.14389765, 0.050067905, 0.16150077, -0.030053454, 0.12478255, 0.26020208, 0.111198805, 0.06787492, -0.12771018, 0.006687384) * go_3(-1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [103]     result += mat4(-0.5421617, 0.10414128, -0.21526064, -0.08883624, 0.13145073, -0.29695904, 0.57386386, 0.073361695, -0.09538372, 0.27593842, 0.070922814, 0.21769938, 0.06214975, 0.11847816, 0.10033405, 0.29360098) * go_3(-1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.16294672, -0.014815565, 0.22046989, 0.16858687, 0.058917344, 0.21384977, 0.18803519, 0.105688855, 0.0355118, 0.20571202, -0.07341922, 0.26624045, -0.0415102, 0.050942056, 0.19727907, 0.20122413) * go_3(-1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [105]     result += mat4(-0.020470422, 0.15815964, -0.13437317, -0.1967045, 0.074902646, 0.08356444, 0.055913117, -0.12837863, -0.18647918, 0.07002247, 0.038864706, -0.07288784, 0.04135125, -0.016055549, -0.1340297, -0.15578008) * go_3(0.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [106]     result += mat4(-0.07685624, 0.00079105416, -0.068755336, 0.110282525, -0.014170752, 0.041282844, -0.17035173, 0.19439398, -0.3036256, 0.024148455, -0.19566648, -0.06736254, 0.14203559, -0.13016985, -0.32845357, -0.14266774) * go_3(0.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [107]     result += mat4(0.0087252045, 0.098839566, -0.08770506, -0.08499465, 0.015245115, -0.110854514, 0.054458305, -0.018121868, -0.09666134, -0.08316006, 0.24617113, -0.17195955, 0.2574254, 0.06734342, -0.13792352, -0.07306126) * go_3(0.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.0073954533, -0.20126835, -0.22545357, -0.29462856, 0.057408337, 0.11939119, -0.01846476, 0.12534486, 0.15751605, -0.14282645, -0.14219986, 0.14283386, 0.14090413, 0.10500912, 0.03039335, 0.17448832) * go_3(1.0, -1.0);
[   1.146][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.043910783, -0.09140025, -0.21666165, 0.07616939, 0.104454786, 0.309926, -0.12906921, 0.1140117, 0.09372434, 0.049547072, -0.086615674, -0.034449168, 0.096705064, 0.26001686, 0.027063297, 0.12422948) * go_3(1.0, 0.0);
[   1.146][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.1365422, 0.2679611, 0.12037257, 0.43346113, 0.08223084, -0.016788265, 0.13570398, -0.017974345, -0.17922844, -0.09475725, 0.073539585, -0.106947675, 0.08998511, 0.04133868, 0.16586913, -0.26291734) * go_3(1.0, 1.0);
[   1.146][d][vo/gpu-next/libplacebo] [111]     result += vec4(-0.19233678, 0.016725872, -0.008011114, -0.1977463);
[   1.146][d][vo/gpu-next/libplacebo] [112]     return result;
[   1.146][d][vo/gpu-next/libplacebo] [113] }
[   1.146][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   1.146][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   1.146][d][vo/gpu-next/libplacebo] [116] return color;
[   1.146][d][vo/gpu-next/libplacebo] [117] }
[   1.146][d][vo/gpu-next/libplacebo] [118] 
[   1.146][d][vo/gpu-next/libplacebo] [119] void main() {
[   1.146][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   1.146][d][vo/gpu-next/libplacebo] [121] }
[   1.148][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.148][d][vo/gpu-next/libplacebo] Spent 1.521 ms translating GLSL to SPIR-V
[   1.148][d][vo/gpu-next/libplacebo] Spent 0.110 ms translating SPIR-V to HLSL
[   1.149][d][vo/gpu-next/libplacebo] Spent 1.194 ms translating HLSL to DXBC
[   1.149][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.149][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.149][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.149][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.149][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.149][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.149][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   1.149][d][vo/gpu-next/libplacebo] [  7] 
[   1.149][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   1.149][d][vo/gpu-next/libplacebo] [  9] {
[   1.149][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   1.149][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   1.149][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   1.149][d][vo/gpu-next/libplacebo] [ 13] };
[   1.149][d][vo/gpu-next/libplacebo] [ 14] 
[   1.149][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   1.149][d][vo/gpu-next/libplacebo] [ 16] {
[   1.149][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   1.149][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   1.149][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   1.149][d][vo/gpu-next/libplacebo] [ 20] };
[   1.149][d][vo/gpu-next/libplacebo] [ 21] 
[   1.149][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   1.149][d][vo/gpu-next/libplacebo] [ 23] {
[   1.149][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   1.149][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   1.149][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   1.149][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   1.149][d][vo/gpu-next/libplacebo] [ 28] }
[   1.149][d][vo/gpu-next/libplacebo] [ 29] 
[   1.149][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.149][d][vo/gpu-next/libplacebo] [ 31] {
[   1.149][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   1.149][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   1.149][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   1.149][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   1.149][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   1.149][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   1.149][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   1.149][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   1.149][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.149][d][vo/gpu-next/libplacebo] [ 41] }
[   1.159][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.159][d][vo/gpu-next/libplacebo] Spent 9.781 ms translating GLSL to SPIR-V
[   1.161][d][vo/gpu-next/libplacebo] Spent 1.718 ms translating SPIR-V to HLSL
[   1.184][v][vo/gpu-next/libplacebo] Spent 23.824 ms translating HLSL to DXBC
[   1.184][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.184][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   1.184][d][vo/gpu-next/libplacebo] [  2] {
[   1.184][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   1.184][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   1.184][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   1.184][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   1.184][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   1.184][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   1.184][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   1.184][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   1.185][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   1.185][d][vo/gpu-next/libplacebo] [ 12] };
[   1.185][d][vo/gpu-next/libplacebo] [ 13] 
[   1.185][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   1.185][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   1.185][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   1.185][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   1.185][d][vo/gpu-next/libplacebo] [ 18] 
[   1.185][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   1.185][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   1.185][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   1.185][d][vo/gpu-next/libplacebo] [ 22] 
[   1.185][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   1.185][d][vo/gpu-next/libplacebo] [ 24] {
[   1.185][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   1.185][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   1.185][d][vo/gpu-next/libplacebo] [ 27] };
[   1.185][d][vo/gpu-next/libplacebo] [ 28] 
[   1.185][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   1.185][d][vo/gpu-next/libplacebo] [ 30] {
[   1.185][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   1.185][d][vo/gpu-next/libplacebo] [ 32] };
[   1.185][d][vo/gpu-next/libplacebo] [ 33] 
[   1.185][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   1.185][d][vo/gpu-next/libplacebo] [ 35] {
[   1.185][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   1.185][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   1.185][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   1.185][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.21919365227222442626953125f, 0.3662778437137603759765625f, 0.12603314220905303955078125f, 0.2430628836154937744140625f), float4(0.064470283687114715576171875f, 0.064722038805484771728515625f, -0.0599703900516033172607421875f, -0.15651787817478179931640625f), float4(0.0170598588883876800537109375f, -0.006497197784483432769775390625f, -0.418973505496978759765625f, 0.0216367132961750030517578125f), float4(-0.2388797700405120849609375f, -0.0142209492623805999755859375f, 0.03111368604004383087158203125f, -0.173427164554595947265625f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.108187891542911529541015625f, -0.0327383689582347869873046875f, 0.339180052280426025390625f, -0.19290088117122650146484375f), float4(0.09553609788417816162109375f, -0.3410762250423431396484375f, -0.0549063272774219512939453125f, -0.18083344399929046630859375f), float4(-0.06072367727756500244140625f, 0.24395693838596343994140625f, 0.11297501623630523681640625f, -0.07254578173160552978515625f), float4(-0.14389383792877197265625f, 0.132359683513641357421875f, -0.1505480110645294189453125f, -0.2621648609638214111328125f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.23442147672176361083984375f, -0.078570790588855743408203125f, 0.02228387258946895599365234375f, -0.265641689300537109375f), float4(0.037092752754688262939453125f, -0.0373136661946773529052734375f, -0.505704700946807861328125f, 0.0425331033766269683837890625f), float4(-0.1204240024089813232421875f, 0.00021930188813712447881698608398438f, -0.0044566667638719081878662109375f, -0.4553699493408203125f), float4(0.000407599261961877346038818359375f, 0.1459759175777435302734375f, -0.0949901640415191650390625f, -0.0361613444983959197998046875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1502435207366943359375f, 0.19903261959552764892578125f, -0.073478400707244873046875f, 0.09283630549907684326171875f), float4(-0.02575384639203548431396484375f, 0.024750374257564544677734375f, -0.07550193369388580322265625f, 0.035420835018157958984375f), float4(0.11084377765655517578125f, 0.261198222637176513671875f, -0.08443512022495269775390625f, -0.0047807064838707447052001953125f), float4(-0.04268513619899749755859375f, 0.24889738857746124267578125f, 0.098650105297565460205078125f, 0.20883689820766448974609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2555182278156280517578125f, 0.14455975592136383056640625f, 0.1988615691661834716796875f, -0.23465923964977264404296875f), float4(0.20711217820644378662109375f, -0.2087536156177520751953125f, -0.113203920423984527587890625f, -0.3085200488567352294921875f), float4(-0.06795656681060791015625f, 0.008670962415635585784912109375f, 0.3060127794742584228515625f, 0.69290637969970703125f), float4(0.170791447162628173828125f, 0.157448947429656982421875f, 0.064416013658046722412109375f, 0.0651400089263916015625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0314260385930538177490234375f, -0.00641013681888580322265625f, -0.0236547924578189849853515625f, -0.05708552896976470947265625f), float4(0.06298540532588958740234375f, -0.077010594308376312255859375f, 0.07880486547946929931640625f, 0.05088250339031219482421875f), float4(0.0102742277085781097412109375f, -0.1555840075016021728515625f, 0.09490256011486053466796875f, 0.14964707195758819580078125f), float4(-0.119669251143932342529296875f, -0.361766636371612548828125f, 0.2780981361865997314453125f, -0.18862293660640716552734375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0560999214649200439453125f, 0.0041612233035266399383544921875f, -0.084989078342914581298828125f, 0.0447982288897037506103515625f), float4(-0.08011795580387115478515625f, -0.1742320358753204345703125f, -0.2285804450511932373046875f, 0.0545690320432186126708984375f), float4(-0.0508663840591907501220703125f, -0.02000030688941478729248046875f, 0.0270009525120258331298828125f, -0.67724514007568359375f), float4(0.16240878403186798095703125f, -0.0464120395481586456298828125f, 0.064836703240871429443359375f, -0.20613132417201995849609375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.085423059761524200439453125f, -0.082542479038238525390625f, -0.11090552806854248046875f, -0.1414044797420501708984375f), float4(-0.10788510739803314208984375f, -0.1301160156726837158203125f, -0.2931974232196807861328125f, -0.2600715458393096923828125f), float4(0.1103340089321136474609375f, -0.319665729999542236328125f, 0.32668244838714599609375f, 0.195423185825347900390625f), float4(0.063294179737567901611328125f, 0.20904625952243804931640625f, 0.27240669727325439453125f, -0.00915568508207798004150390625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.007403410971164703369140625f, 0.0012836395762860774993896484375f, -0.23446665704250335693359375f, -0.0301720798015594482421875f), float4(0.062420018017292022705078125f, -0.136110842227935791015625f, -0.2975927889347076416015625f, 0.1317314803600311279296875f), float4(-0.0367993898689746856689453125f, 0.13743872940540313720703125f, -0.101218990981578826904296875f, 0.074514664709568023681640625f), float4(0.1497628986835479736328125f, -0.095238380134105682373046875f, 0.3901892602443695068359375f, 0.378070354461669921875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.114414870738983154296875f, -0.19565522670745849609375f, -0.2575713694095611572265625f, -0.1614876687526702880859375f), float4(0.1557531654834747314453125f, -0.12657928466796875f, 0.104796759784221649169921875f, 0.06291903555393218994140625f), float4(0.010544159449636936187744140625f, 0.2293157279491424560546875f, 0.203601777553558349609375f, 0.4637635052204132080078125f), float4(-0.339503586292266845703125f, -0.52467215061187744140625f, 0.08759307861328125f, 0.028030417859554290771484375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.26991951465606689453125f, -0.342183053493499755859375f, 0.152596950531005859375f, 0.03139074146747589111328125f), float4(-0.0240535326302051544189453125f, -0.0295674838125705718994140625f, 0.2848012447357177734375f, 0.2052595317363739013671875f), float4(0.1545282304286956787109375f, -0.21771299839019775390625f, 0.15861876308917999267578125f, -0.012275698594748973846435546875f), float4(0.21408022940158843994140625f, 0.097508303821086883544921875f, -0.571267664432525634765625f, -0.14679856598377227783203125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.075584702193737030029296875f, -0.097515620291233062744140625f, -0.2948046624660491943359375f, -0.222853183746337890625f), float4(0.14196442067623138427734375f, 0.11457313597202301025390625f, -0.22294767200946807861328125f, 0.124638058245182037353515625f), float4(0.33222091197967529296875f, -0.0463172383606433868408203125f, -0.110970608890056610107421875f, -0.279868543148040771484375f), float4(-0.160993039608001708984375f, -0.0600795447826385498046875f, 0.00299308006651699542999267578125f, 0.120776064693927764892578125f)));
[   1.185][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   1.185][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   1.185][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0509334839880466461181640625f, -0.13776318728923797607421875f, -0.18809728324413299560546875f, 0.24035201966762542724609375f), float4(-0.3252860605716705322265625f, -0.4168414771556854248046875f, -0.02934284694492816925048828125f, 0.2864292562007904052734375f), float4(-0.079634539783000946044921875f, -0.12905268371105194091796875f, 0.076060928404331207275390625f, 0.2467000484466552734375f), float4(-0.088155977427959442138671875f, -0.233209073543548583984375f, -0.00809934921562671661376953125f, 0.21512873470783233642578125f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.19247563183307647705078125f, 0.18083979189395904541015625f, -0.0971976220607757568359375f, 0.15314941108226776123046875f), float4(-0.2235098183155059814453125f, 0.4651504456996917724609375f, -0.3571127951145172119140625f, 0.359532654285430908203125f), float4(0.069219850003719329833984375f, -0.4482386112213134765625f, -0.1873252093791961669921875f, -0.504398286342620849609375f), float4(0.3515956699848175048828125f, -0.3331529796123504638671875f, -0.21884165704250335693359375f, -0.162837982177734375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0211240537464618682861328125f, -0.00796674191951751708984375f, 0.0052493824623525142669677734375f, 0.02255089581012725830078125f), float4(0.03040397725999355316162109375f, 0.33778679370880126953125f, -0.476020038127899169921875f, -0.077664233744144439697265625f), float4(-0.072225086390972137451171875f, -0.074860967695713043212890625f, -0.3797106444835662841796875f, -0.51078569889068603515625f), float4(-0.062994770705699920654296875f, 0.0493023209273815155029296875f, -0.33304870128631591796875f, 0.29845511913299560546875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0637054741382598876953125f, -0.079176366329193115234375f, -0.02026606909930706024169921875f, -0.05142568051815032958984375f), float4(0.02157701365649700164794921875f, -0.07379867136478424072265625f, 0.033937998116016387939453125f, 0.08148773014545440673828125f), float4(-0.0271783806383609771728515625f, -0.0323383808135986328125f, 0.09800003468990325927734375f, 0.0364764444530010223388671875f), float4(-0.1336695253849029541015625f, 0.0144775770604610443115234375f, 0.24064232409000396728515625f, 0.3931328356266021728515625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.1604651510715484619140625f, -0.09462456405162811279296875f, 0.35435163974761962890625f, 0.099423237144947052001953125f), float4(-0.071371741592884063720703125f, -0.2799922525882720947265625f, 0.12464435398578643798828125f, -0.0062176552601158618927001953125f), float4(0.01501675136387348175048828125f, -0.055002428591251373291015625f, -0.23249559104442596435546875f, -0.45083820819854736328125f), float4(0.18604330718517303466796875f, 0.106714911758899688720703125f, -0.0333453528583049774169921875f, -0.06611452996730804443359375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.21614046394824981689453125f, -0.013075250200927257537841796875f, -0.18941111862659454345703125f, -0.2053353488445281982421875f), float4(-0.14481686055660247802734375f, -0.4780189692974090576171875f, 0.22605121135711669921875f, -0.2029896080493927001953125f), float4(-0.0674422681331634521484375f, -0.2037749588489532470703125f, -0.11926172673702239990234375f, 0.15645132958889007568359375f), float4(-0.3157088458538055419921875f, -0.3495616018772125244140625f, -0.02466688863933086395263671875f, 0.040965475142002105712890625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.117480181157588958740234375f, -0.039976365864276885986328125f, -0.0008406425477005541324615478515625f, -0.02865343727171421051025390625f), float4(-0.16216732561588287353515625f, -0.0367681048810482025146484375f, 0.01806451380252838134765625f, -0.0928936004638671875f), float4(0.14008481800556182861328125f, -0.06451122462749481201171875f, 0.24329946935176849365234375f, -0.0268607996404170989990234375f), float4(0.0503302477300167083740234375f, 0.085406012833118438720703125f, -0.072726793587207794189453125f, -0.011876709759235382080078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.094599358737468719482421875f, -0.01172382198274135589599609375f, -0.0695285797119140625f, -0.078085057437419891357421875f), float4(-0.065588176250457763671875f, 0.332500994205474853515625f, -0.01200423948466777801513671875f, 0.076680161058902740478515625f), float4(0.14735217392444610595703125f, -0.1485604345798492431640625f, -0.067024491727352142333984375f, -0.02095318399369716644287109375f), float4(-0.023006834089756011962890625f, 0.061354219913482666015625f, 0.1491447985172271728515625f, -0.028061568737030029296875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.2513696849346160888671875f, 0.251463234424591064453125f, -0.108277924358844757080078125f, -0.20407207310199737548828125f), float4(-0.00137802935205399990081787109375f, 0.1610819399356842041015625f, 0.2514384686946868896484375f, 0.0667242109775543212890625f), float4(-0.0339055843651294708251953125f, -0.02114468626677989959716796875f, -0.01915271766483783721923828125f, 0.3461949825286865234375f), float4(0.1456096172332763671875f, 0.03443731367588043212890625f, 0.0247903652489185333251953125f, -0.049976266920566558837890625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.24928350746631622314453125f, 0.12637813389301300048828125f, 0.23609994351863861083984375f, 0.127229392528533935546875f), float4(-0.036997862160205841064453125f, -0.16554875671863555908203125f, 0.111440949141979217529296875f, -0.1004003584384918212890625f), float4(-0.0203591026365756988525390625f, -0.080701865255832672119140625f, -0.3142192065715789794921875f, 0.2725723683834075927734375f), float4(0.13546955585479736328125f, -0.144168853759765625f, 0.02819626219570636749267578125f, -0.2886464893817901611328125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.2852477729320526123046875f, -0.4236231148242950439453125f, 0.2742073833942413330078125f, -0.210955083370208740234375f), float4(0.23475651443004608154296875f, 0.115876294672489166259765625f, -0.188373565673828125f, -0.0260707996785640716552734375f), float4(0.03067070432007312774658203125f, -0.115169130265712738037109375f, -0.113655723631381988525390625f, -0.22031490504741668701171875f), float4(-0.01861298270523548126220703125f, -0.10719592869281768798828125f, -0.031727783381938934326171875f, 0.140332698822021484375f)));
[   1.185][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.072405122220516204833984375f, 0.031392149627208709716796875f, 0.123287372291088104248046875f, -0.02120120637118816375732421875f), float4(-0.13971714675426483154296875f, 0.0727420747280120849609375f, -0.001128987292759120464324951171875f, 0.0053133666515350341796875f), float4(0.0356396846473217010498046875f, -0.0432227216660976409912109375f, -0.19288472831249237060546875f, -0.1581222116947174072265625f), float4(-0.191264808177947998046875f, 0.069851398468017578125f, 0.1761917769908905029296875f, -0.0356054641306400299072265625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.18552057445049285888671875f, 0.072596706449985504150390625f, 0.011667667888104915618896484375f, -0.15630562603473663330078125f), float4(0.114143557846546173095703125f, 0.14482654631137847900390625f, -0.04021029174327850341796875f, 0.1849558651447296142578125f), float4(-0.113861389458179473876953125f, -0.090585611760616302490234375f, -0.011265997774899005889892578125f, 0.23358450829982757568359375f), float4(0.0521357990801334381103515625f, 0.124952606856822967529296875f, 0.021644838154315948486328125f, -0.04809434711933135986328125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0922237336635589599609375f, 0.0533347018063068389892578125f, 0.0558204539120197296142578125f, 0.2238259613513946533203125f), float4(0.187139809131622314453125f, 0.26689159870147705078125f, -0.01938403584063053131103515625f, 0.012698582373559474945068359375f), float4(0.13325233757495880126953125f, 0.2036147415637969970703125f, -0.3310644328594207763671875f, -0.085715718567371368408203125f), float4(-0.21243028342723846435546875f, -0.109963856637477874755859375f, 0.123459644615650177001953125f, 0.15349669754505157470703125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.181332767009735107421875f, 0.18108074367046356201171875f, -0.0563866384327411651611328125f, 0.2953315675258636474609375f), float4(-0.210801899433135986328125f, -0.0336366258561611175537109375f, 0.5015888214111328125f, -0.151160657405853271484375f), float4(-0.041320793330669403076171875f, -0.147642314434051513671875f, 0.07314567267894744873046875f, -0.18865978717803955078125f), float4(0.102769367396831512451171875f, 0.094240844249725341796875f, -0.136428296566009521484375f, 0.2781291306018829345703125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.060409151017665863037109375f, 0.237536847591400146484375f, 0.19019843637943267822265625f, 0.23948252201080322265625f), float4(-0.07535012066364288330078125f, 0.11848904192447662353515625f, 0.14389765262603759765625f, 0.0500679053366184234619140625f), float4(0.16150076687335968017578125f, -0.03005345351994037628173828125f, 0.12478254735469818115234375f, 0.2602020800113677978515625f), float4(0.111198805272579193115234375f, 0.06787492334842681884765625f, -0.12771017849445343017578125f, 0.0066873840987682342529296875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.5421617031097412109375f, 0.10414128005504608154296875f, -0.21526063978672027587890625f, -0.08883623778820037841796875f), float4(0.13145072758197784423828125f, -0.29695904254913330078125f, 0.57386386394500732421875f, 0.073361694812774658203125f), float4(-0.09538371860980987548828125f, 0.2759384214878082275390625f, 0.070922814309597015380859375f, 0.2176993787288665771484375f), float4(0.06214974820613861083984375f, 0.118478156626224517822265625f, 0.10033404827117919921875f, 0.293600976467132568359375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.16294671595096588134765625f, -0.0148155651986598968505859375f, 0.220469892024993896484375f, 0.16858686506748199462890625f), float4(0.058917343616485595703125f, 0.21384976804256439208984375f, 0.188035190105438232421875f, 0.10568885505199432373046875f), float4(0.035511799156665802001953125f, 0.205712020397186279296875f, -0.073419220745563507080078125f, 0.2662404477596282958984375f), float4(-0.0415101982653141021728515625f, 0.050942055881023406982421875f, 0.1972790658473968505859375f, 0.20122413337230682373046875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0204704217612743377685546875f, 0.1581596434116363525390625f, -0.13437317311763763427734375f, -0.19670450687408447265625f), float4(0.074902646243572235107421875f, 0.083564437925815582275390625f, 0.0559131167829036712646484375f, -0.1283786296844482421875f), float4(-0.1864791810512542724609375f, 0.070022471249103546142578125f, 0.0388647057116031646728515625f, -0.072887837886810302734375f), float4(0.041351251304149627685546875f, -0.01605554856359958648681640625f, -0.13402970135211944580078125f, -0.1557800769805908203125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.07685624063014984130859375f, 0.0007910541607998311519622802734375f, -0.068755336105823516845703125f, 0.11028252542018890380859375f), float4(-0.014170751906931400299072265625f, 0.0412828437983989715576171875f, -0.17035172879695892333984375f, 0.19439397752285003662109375f), float4(-0.3036256134510040283203125f, 0.02414845488965511322021484375f, -0.19566647708415985107421875f, -0.067362539470195770263671875f), float4(0.14203558862209320068359375f, -0.13016985356807708740234375f, -0.3284535706043243408203125f, -0.1426677405834197998046875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.008725204505026340484619140625f, 0.09883956611156463623046875f, -0.08770506083965301513671875f, -0.084994651377201080322265625f), float4(0.01524511538445949554443359375f, -0.110854513943195343017578125f, 0.05445830523967742919921875f, -0.0181218683719635009765625f), float4(-0.096661336719989776611328125f, -0.08316005766391754150390625f, 0.24617113173007965087890625f, -0.1719595491886138916015625f), float4(0.2574253976345062255859375f, 0.067343421280384063720703125f, -0.13792352378368377685546875f, -0.0730612576007843017578125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0073954532854259014129638671875f, -0.2012683451175689697265625f, -0.22545357048511505126953125f, -0.294628560543060302734375f), float4(0.0574083365499973297119140625f, 0.11939118802547454833984375f, -0.01846476085484027862548828125f, 0.12534485757350921630859375f), float4(0.15751604735851287841796875f, -0.14282645285129547119140625f, -0.14219985902309417724609375f, 0.1428338587284088134765625f), float4(0.140904128551483154296875f, 0.10500912368297576904296875f, 0.0303933508694171905517578125f, 0.17448832094669342041015625f)));
[   1.185][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0439107827842235565185546875f, -0.09140025079250335693359375f, -0.21666164696216583251953125f, 0.07616938650608062744140625f), float4(0.1044547855854034423828125f, 0.3099260032176971435546875f, -0.12906920909881591796875f, 0.114011697471141815185546875f), float4(0.0937243402004241943359375f, 0.0495470724999904632568359375f, -0.086615674197673797607421875f, -0.034449167549610137939453125f), float4(0.09670506417751312255859375f, 0.260016858577728271484375f, 0.02706329710781574249267578125f, 0.124229483306407928466796875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.13654220104217529296875f, 0.2679611146450042724609375f, 0.120372571051120758056640625f, 0.433461129665374755859375f), float4(0.082230843603610992431640625f, -0.01678826473653316497802734375f, 0.135703980922698974609375f, -0.01797434501349925994873046875f), float4(-0.17922843992710113525390625f, -0.094757251441478729248046875f, 0.0735395848751068115234375f, -0.10694767534732818603515625f), float4(0.089985109865665435791015625f, 0.0413386784493923187255859375f, 0.16586913168430328369140625f, -0.262917339801788330078125f)))) + float4(-0.19233678281307220458984375f, 0.0167258717119693756103515625f, -0.0080111138522624969482421875f, -0.1977463066577911376953125f);
[   1.185][d][vo/gpu-next/libplacebo] [ 56] }
[   1.185][d][vo/gpu-next/libplacebo] [ 57] 
[   1.185][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.185][d][vo/gpu-next/libplacebo] [ 59] {
[   1.185][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   1.185][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   1.185][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   1.185][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   1.185][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   1.185][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   1.185][d][vo/gpu-next/libplacebo] [ 66] }
[   1.190][d][vo/gpu-next] cache_save_obj: key(fa780b5960dab806), size(11845), save time(5.367 ms)
[   1.190][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.191][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.191][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.191][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.191][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.191][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.191][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.191][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.191][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.191][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.191][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.191][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.191][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.191][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.191][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.191][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.191][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.191][d][vo/gpu-next/libplacebo] [ 16] };
[   1.191][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   1.191][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   1.191][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   1.191][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   1.191][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   1.191][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   1.191][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   1.191][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   1.191][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   1.191][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.191][d][vo/gpu-next/libplacebo] [ 27] }
[   1.191][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.191][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.191][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.191][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.191][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.191][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.191][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.191][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.191][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.191][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.191][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.191][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.191][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.191][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.191][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.191][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.191][d][vo/gpu-next/libplacebo] [ 16] };
[   1.191][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   1.191][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   1.191][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   1.191][d][vo/gpu-next/libplacebo] [ 20] 
[   1.191][d][vo/gpu-next/libplacebo] [ 21] #define conv2d_6_tf_raw _2 
[   1.191][d][vo/gpu-next/libplacebo] [ 22] #define conv2d_6_tf_pos _3 
[   1.191][d][vo/gpu-next/libplacebo] [ 23] #define conv2d_6_tf_map _3_map 
[   1.191][d][vo/gpu-next/libplacebo] [ 24] #define conv2d_6_tf_size vec2(textureSize(_2, 0)) 
[   1.191][d][vo/gpu-next/libplacebo] [ 25] #define conv2d_6_tf_pt _4 
[   1.191][d][vo/gpu-next/libplacebo] [ 26] #define conv2d_6_tf_off _5 
[   1.191][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   1.191][d][vo/gpu-next/libplacebo] [ 28] #define conv2d_6_tf_mul _6 
[   1.191][d][vo/gpu-next/libplacebo] [ 29] #define conv2d_6_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.191][d][vo/gpu-next/libplacebo] [ 30] #define conv2d_6_tf_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.191][d][vo/gpu-next/libplacebo] [ 31] #define conv2d_6_tf_texOff(off) (conv2d_6_tf_tex(_3 + _4 * vec2(off))) 
[   1.191][d][vo/gpu-next/libplacebo] [ 32] #define conv2d_6_tf_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.191][d][vo/gpu-next/libplacebo] [ 33] #define conv2d_6_tf1_raw _7 
[   1.191][d][vo/gpu-next/libplacebo] [ 34] #define conv2d_6_tf1_pos _8 
[   1.191][d][vo/gpu-next/libplacebo] [ 35] #define conv2d_6_tf1_map _8_map 
[   1.191][d][vo/gpu-next/libplacebo] [ 36] #define conv2d_6_tf1_size vec2(textureSize(_7, 0)) 
[   1.191][d][vo/gpu-next/libplacebo] [ 37] #define conv2d_6_tf1_pt _9 
[   1.191][d][vo/gpu-next/libplacebo] [ 38] #define conv2d_6_tf1_off _a 
[   1.191][d][vo/gpu-next/libplacebo] [ 39] const float _b = float(1); 
[   1.191][d][vo/gpu-next/libplacebo] [ 40] #define conv2d_6_tf1_mul _b 
[   1.191][d][vo/gpu-next/libplacebo] [ 41] #define conv2d_6_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.191][d][vo/gpu-next/libplacebo] [ 42] #define conv2d_6_tf1_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.191][d][vo/gpu-next/libplacebo] [ 43] #define conv2d_6_tf1_texOff(off) (conv2d_6_tf1_tex(_8 + _9 * vec2(off))) 
[   1.191][d][vo/gpu-next/libplacebo] [ 44] #define conv2d_6_tf1_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.191][d][vo/gpu-next/libplacebo] [ 45] #define frame _c 
[   1.191][d][vo/gpu-next/libplacebo] [ 46] #define random _d 
[   1.191][d][vo/gpu-next/libplacebo] [ 47] #define input_size _e 
[   1.191][d][vo/gpu-next/libplacebo] [ 48] #define target_size _f 
[   1.191][d][vo/gpu-next/libplacebo] [ 49] #define tex_offset _10 
[   1.191][d][vo/gpu-next/libplacebo] [ 50] const float _8002 = float(0.8703105449676514); 
[   1.191][d][vo/gpu-next/libplacebo] [ 51] const float _8003 = float(0.0595848374068737); 
[   1.191][d][vo/gpu-next/libplacebo] [ 52] vec4 _8001(vec4 color) {
[   1.191][d][vo/gpu-next/libplacebo] [ 53] // pl_shader_linearize           
[   1.191][d][vo/gpu-next/libplacebo] [ 54] color.rgb = max(color.rgb, 0.0); 
[   1.191][d][vo/gpu-next/libplacebo] [ 55] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.191][d][vo/gpu-next/libplacebo] [ 56] return color;
[   1.191][d][vo/gpu-next/libplacebo] [ 57] }
[   1.191][d][vo/gpu-next/libplacebo] [ 58] 
[   1.191][d][vo/gpu-next/libplacebo] [ 59] #define linearize _8001 
[   1.191][d][vo/gpu-next/libplacebo] [ 60] const float _4002 = float(1.149015188217163); 
[   1.191][d][vo/gpu-next/libplacebo] [ 61] const float _4003 = float(0.0595848374068737); 
[   1.191][d][vo/gpu-next/libplacebo] [ 62] vec4 _4001(vec4 color) {
[   1.191][d][vo/gpu-next/libplacebo] [ 63] // pl_shader_delinearize 
[   1.191][d][vo/gpu-next/libplacebo] [ 64] color.rgb = max(color.rgb, 0.0); 
[   1.191][d][vo/gpu-next/libplacebo] [ 65] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.191][d][vo/gpu-next/libplacebo] [ 66] return color;
[   1.191][d][vo/gpu-next/libplacebo] [ 67] }
[   1.191][d][vo/gpu-next/libplacebo] [ 68] 
[   1.191][d][vo/gpu-next/libplacebo] [ 69] #define delinearize _4001 
[   1.191][d][vo/gpu-next/libplacebo] [ 70] #define go_0(x_off, y_off) (max((conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.191][d][vo/gpu-next/libplacebo] [ 71] #define go_1(x_off, y_off) (max((conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.191][d][vo/gpu-next/libplacebo] [ 72] #define go_2(x_off, y_off) (max(-(conv2d_6_tf_texOff(vec2(x_off, y_off))), 0.0))
[   1.191][d][vo/gpu-next/libplacebo] [ 73] #define go_3(x_off, y_off) (max(-(conv2d_6_tf1_texOff(vec2(x_off, y_off))), 0.0))
[   1.191][d][vo/gpu-next/libplacebo] [ 74] vec4 hook() {
[   1.191][d][vo/gpu-next/libplacebo] [ 75]     vec4 result = mat4(-0.36016628, 0.019064043, 0.3073228, 0.16891135, 0.026739368, 0.31136194, 0.11260383, -0.26918694, 0.0419928, -0.3365078, 0.20189743, -0.04136312, 0.039564647, 0.033199426, 0.18768296, -0.017119858) * go_0(-1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 76]     result += mat4(0.28663483, -0.41716507, 0.059281543, 0.043736435, 0.0028875466, 0.13817391, -0.12543318, -0.2794053, -0.023528943, 0.10610115, 0.09100278, 0.040132936, -0.21949205, -0.027810011, -0.0301218, 0.084047124) * go_0(-1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 77]     result += mat4(0.39674807, -0.0040878756, -0.038235947, 0.11880838, 0.009898328, 0.19107847, -0.009313831, -0.1554276, -0.047341663, 0.18049581, -0.029317195, 0.0708909, 0.0708316, -0.110617444, 0.14584038, -0.022261223) * go_0(-1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 78]     result += mat4(-0.20400241, 0.0896492, -0.010386381, -0.052133385, 0.005023956, -0.06628705, -0.16436209, -0.25345984, -0.05285192, 0.09706557, -0.03778914, -0.152546, 0.17023252, 0.063713826, 0.00743037, 0.056634087) * go_0(0.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 79]     result += mat4(-0.080793336, 0.4204207, 0.19098237, 0.20028038, -0.054076545, 0.22064368, -0.25853387, -0.3643562, 0.2085573, -0.023731, -0.06727709, -0.18683033, -0.18032159, -0.06388348, 0.304463, -0.2517781) * go_0(0.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 80]     result += mat4(0.11940941, 0.10624008, 0.16120581, 0.2369602, 0.3321827, 0.4272075, -0.10403669, -0.31388018, -0.006372124, -0.00653671, 0.109810196, 0.2277172, 0.005771998, 0.086026914, -0.08934813, -0.094941735) * go_0(0.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 81]     result += mat4(-0.13233568, 0.24112508, -0.0068006413, 0.12466225, 0.11396591, -0.07249253, -0.29090378, -0.12828146, -0.22001141, -0.08532405, -0.11932601, 0.29452974, 0.09572195, 0.017603843, 0.12454017, 0.16321751) * go_0(1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 82]     result += mat4(0.042107448, -0.00807216, 0.06580674, -0.1289527, 0.13977426, -0.037159685, -0.21001346, -0.08698161, 0.22370502, -0.29170328, 0.2179206, 0.36621302, 0.0825477, -0.016513655, -0.11157249, 0.12861598) * go_0(1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 83]     result += mat4(0.2246826, -0.13262233, 0.12131653, -0.15522355, 0.38104856, 0.030237729, 0.1286289, -0.19770473, -0.16175011, -0.13688888, 0.23505463, 0.21333031, 0.76352316, -0.17949077, -0.13124311, 0.1613879) * go_0(1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 84]     result += mat4(-0.050607495, 0.0846705, -0.06136092, -0.033436477, 0.41138348, 0.037043408, -0.02676336, -0.37771952, 0.22147503, 0.06490757, -0.04266158, -0.22606373, 0.045775007, -0.054498192, -0.21495876, -0.036050417) * go_1(-1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 85]     result += mat4(-0.06242522, 0.2700824, -0.05602621, -0.12361551, 0.14477442, 0.19403581, 0.23505251, -0.072234035, -0.15831544, 0.4640447, -0.104754634, -0.004539681, -0.20246096, 0.23216484, -0.35886365, 0.11360777) * go_1(-1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 86]     result += mat4(0.14777757, 0.18951412, 0.027219458, 0.11216015, 0.02997997, -0.13466355, -0.0010830094, 0.021302953, 0.23441231, -0.14529245, 0.08068729, 0.10044398, 0.3972878, 0.26570204, 0.0046810666, -0.2863261) * go_1(-1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 87]     result += mat4(-0.10385485, 0.1053724, 0.16961229, 0.20727012, -0.025148917, -0.011365095, 0.03899919, -0.030950211, 0.079080455, -0.32767853, 0.064670205, -0.035771385, 0.16833797, -0.21567492, 0.30871257, -0.19965471) * go_1(0.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 88]     result += mat4(-0.23420888, -0.004894698, -0.18162623, -0.31107524, 0.11976508, 0.14924951, -0.08723316, 0.21401922, -0.58200324, -0.01177345, -0.049033508, 0.19593577, -0.21139073, 0.13016601, 0.08734843, 0.4158892) * go_1(0.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 89]     result += mat4(0.0009789813, 0.33274913, 0.017405733, -0.042906318, -0.26410276, -0.09291333, 0.019387102, 0.105381854, -0.009176527, 0.09483514, -0.28462934, -0.03644404, 0.285194, -0.4260311, 0.14902237, -0.115670316) * go_1(0.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 90]     result += mat4(-0.09344311, 0.4463103, 0.19984834, -0.09733857, -0.118717775, -0.0708026, 0.24919955, -0.11234634, 0.1246395, -0.052909933, 0.1525815, 0.07724016, 0.0070534665, -0.06404165, -0.18149726, -0.014058336) * go_1(1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 91]     result += mat4(-0.17353044, 0.15376104, 0.004588994, -0.13554202, -0.19920237, -0.18918681, 0.11327512, -0.117296435, -0.0785251, 0.013677155, -0.2103214, 0.06843426, -0.27790928, 0.09837545, -0.00019213746, 0.09132539) * go_1(1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 92]     result += mat4(-0.01586651, 0.014929441, 0.2426186, -0.1889374, -0.0865462, -0.07454513, -0.20797268, -0.22366855, 0.19704159, 0.0048206006, -0.16707218, -0.14162683, 0.036798395, -0.1663155, -0.12009389, 0.09603803) * go_1(1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 93]     result += mat4(-0.041532192, 0.05753804, 0.17927068, -0.042112097, 0.12080969, -0.15052572, -0.34855765, -0.07356988, -0.28199884, -0.18958664, 0.15879883, 0.08511588, 0.0034213227, -0.05338495, -0.37285298, 0.06626709) * go_2(-1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 94]     result += mat4(-0.20219134, 0.22150375, -0.29405454, 0.06597703, -0.018885285, -0.010551704, -0.010774283, 0.08758955, -0.2015349, -0.17006227, -0.24321876, -0.06864207, -0.118437864, -0.043977212, -0.029736811, 0.14040919) * go_2(-1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 95]     result += mat4(-0.18709077, -0.09723938, 0.12783436, -0.15167634, 0.29039705, -0.11009911, 0.018371418, -0.060096707, -0.07256923, -0.25799567, -0.06276934, -0.035992302, -0.06729111, -0.059956793, -0.024079734, 0.011838878) * go_2(-1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 96]     result += mat4(0.010449175, -0.08212451, 0.1409803, 0.11861122, -0.18035835, 0.051930565, 0.01049551, -0.09447962, 0.12029649, 0.040604513, -0.059971705, -0.0044667358, -0.22080486, -0.11187681, 0.124374695, -0.004155485) * go_2(0.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 97]     result += mat4(-0.28584236, -0.38480133, -0.13987814, -0.4463469, -0.3890419, -0.022498172, 0.17334452, 0.21895568, -0.15450422, -0.10905497, 0.15111905, -0.22554915, 0.106121585, -0.029144369, 0.36059046, 0.22140682) * go_2(0.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 98]     result += mat4(-0.23780307, -0.023033705, 0.068205886, -0.110635854, -0.26720005, -0.1608183, 0.19523881, 0.07972837, -0.018495852, -0.2793956, 0.17668398, -0.12020479, -0.079556085, -0.02284952, 0.031480275, 0.31818348) * go_2(0.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [ 99]     result += mat4(0.22501226, -0.00829407, 0.059581667, 0.16512989, 0.18711442, 0.1200968, 0.11812652, -0.16091056, 0.15733972, 0.045156084, 0.20640492, -0.16852027, -0.11217177, 0.06746273, -0.050218176, 0.08643783) * go_2(1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [100]     result += mat4(0.20715691, -0.1082907, 0.027892975, 0.19515261, -0.17838904, 0.1532257, -0.108409844, -0.06632365, -0.13805026, 0.23020233, 0.12416581, -0.14861803, 0.16650471, 0.08158386, -0.09051303, -0.06981649) * go_2(1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [101]     result += mat4(-0.04617126, 0.06579221, 0.25964734, 0.28500968, 0.07641255, -0.090885855, -0.0972522, 0.18298368, -0.06393334, 0.103463, -0.23062052, -0.15270731, 0.13633437, 0.074707486, 0.15065335, -0.024602572) * go_2(1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [102]     result += mat4(0.118319295, 0.010410938, 0.044655934, -0.104725905, 0.030477569, 0.12867387, 0.039075315, 0.18922117, 0.13301082, -0.1601557, 0.038168408, -0.07372259, -0.09522213, -0.095107146, -0.16679631, 0.044673234) * go_3(-1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [103]     result += mat4(0.46229, -0.30780822, -0.09081465, 0.1433387, -0.0315039, 0.059409115, -0.24948491, -0.17146957, 0.060843736, -0.041989822, 0.054005735, 0.22835566, 0.12036598, -0.0070898845, 0.17276852, -0.17754094) * go_3(-1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [104]     result += mat4(-0.35119572, 0.020034311, 0.08751943, 0.08193488, 0.041884877, 0.22649358, -0.07447533, 0.20845473, -0.04859846, -0.16206735, 0.06819576, -0.053000778, 0.18146423, 0.04694148, 0.045293212, 0.06783575) * go_3(-1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [105]     result += mat4(0.280914, -0.14998704, -0.23485807, -0.015608296, 0.1549556, -0.11992663, -0.094974115, 0.05887284, 0.053392075, 0.10322464, -0.075066686, 0.068358354, -0.18663338, 0.009901499, -0.123370335, -0.12502703) * go_3(0.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [106]     result += mat4(0.7748568, -0.17870626, -0.20770052, 0.024692526, -0.056430295, -0.06324113, -0.03660047, 0.29629672, -0.51896983, -0.027231261, 0.05903762, 0.077677645, -0.061675485, -0.20277846, 0.10352223, -0.08198446) * go_3(0.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [107]     result += mat4(-0.06347568, 0.21643166, -0.09718546, 0.0372257, -0.029537952, -0.0357135, -0.09548363, 0.18225233, -0.29609334, -0.3496132, 0.18245913, -0.10162589, -0.18189451, -0.09077887, 0.117313184, -0.06863874) * go_3(0.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [108]     result += mat4(-0.047373574, -0.020289376, -0.25748715, -0.13568166, 0.15656634, -0.06841899, 0.012100781, -0.13611819, 0.0016357322, -0.23870537, 0.14035743, -0.14700134, 0.2535575, -0.13697346, -0.13693139, -0.10365287) * go_3(1.0, -1.0);
[   1.191][d][vo/gpu-next/libplacebo] [109]     result += mat4(0.4283934, -0.316192, -0.012617617, 0.018468965, 0.21436644, 0.18408814, -0.42651537, 0.12504087, -0.13894933, 0.091662176, -0.20096369, -0.080727175, -0.005487846, 0.17046383, 0.1383948, -0.0054956395) * go_3(1.0, 0.0);
[   1.191][d][vo/gpu-next/libplacebo] [110]     result += mat4(0.20014295, -0.027282396, -0.06317007, 0.04452042, 0.064600386, 0.072222926, -0.33409226, 0.08063831, -0.022607977, 0.1308856, -0.39691743, -0.094889864, -0.1810531, 0.011367248, -0.2531222, -0.22468317) * go_3(1.0, 1.0);
[   1.191][d][vo/gpu-next/libplacebo] [111]     result += vec4(0.26886886, 0.05874665, 0.10268232, 0.05833081);
[   1.191][d][vo/gpu-next/libplacebo] [112]     return result;
[   1.191][d][vo/gpu-next/libplacebo] [113] }
[   1.191][d][vo/gpu-next/libplacebo] [114] vec4 _1() {
[   1.191][d][vo/gpu-next/libplacebo] [115] vec4 color = hook(); 
[   1.191][d][vo/gpu-next/libplacebo] [116] return color;
[   1.191][d][vo/gpu-next/libplacebo] [117] }
[   1.191][d][vo/gpu-next/libplacebo] [118] 
[   1.191][d][vo/gpu-next/libplacebo] [119] void main() {
[   1.191][d][vo/gpu-next/libplacebo] [120] out_color = _1();
[   1.191][d][vo/gpu-next/libplacebo] [121] }
[   1.192][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.192][d][vo/gpu-next/libplacebo] Spent 1.374 ms translating GLSL to SPIR-V
[   1.192][d][vo/gpu-next/libplacebo] Spent 0.154 ms translating SPIR-V to HLSL
[   1.194][d][vo/gpu-next/libplacebo] Spent 1.235 ms translating HLSL to DXBC
[   1.194][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.194][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.194][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.194][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.194][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.194][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.194][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   1.194][d][vo/gpu-next/libplacebo] [  7] 
[   1.194][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   1.194][d][vo/gpu-next/libplacebo] [  9] {
[   1.194][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   1.194][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   1.194][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   1.194][d][vo/gpu-next/libplacebo] [ 13] };
[   1.194][d][vo/gpu-next/libplacebo] [ 14] 
[   1.194][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   1.194][d][vo/gpu-next/libplacebo] [ 16] {
[   1.194][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   1.194][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   1.194][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   1.194][d][vo/gpu-next/libplacebo] [ 20] };
[   1.194][d][vo/gpu-next/libplacebo] [ 21] 
[   1.194][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   1.194][d][vo/gpu-next/libplacebo] [ 23] {
[   1.194][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   1.194][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   1.194][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   1.194][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   1.194][d][vo/gpu-next/libplacebo] [ 28] }
[   1.194][d][vo/gpu-next/libplacebo] [ 29] 
[   1.194][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.194][d][vo/gpu-next/libplacebo] [ 31] {
[   1.194][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   1.194][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   1.194][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   1.194][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   1.194][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   1.194][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   1.194][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   1.194][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   1.194][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.194][d][vo/gpu-next/libplacebo] [ 41] }
[   1.204][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.204][d][vo/gpu-next/libplacebo] Spent 9.935 ms translating GLSL to SPIR-V
[   1.205][d][vo/gpu-next/libplacebo] Spent 1.630 ms translating SPIR-V to HLSL
[   1.230][v][vo/gpu-next/libplacebo] Spent 24.722 ms translating HLSL to DXBC
[   1.230][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.230][d][vo/gpu-next/libplacebo] [  1] cbuffer _48_50 : register(b0)
[   1.230][d][vo/gpu-next/libplacebo] [  2] {
[   1.230][d][vo/gpu-next/libplacebo] [  3]     float2 _50_m0 : packoffset(c0);
[   1.230][d][vo/gpu-next/libplacebo] [  4]     float2 _50_m1 : packoffset(c0.z);
[   1.230][d][vo/gpu-next/libplacebo] [  5]     float2 _50_m2 : packoffset(c1);
[   1.230][d][vo/gpu-next/libplacebo] [  6]     float2 _50_m3 : packoffset(c1.z);
[   1.230][d][vo/gpu-next/libplacebo] [  7]     int _50_m4 : packoffset(c2);
[   1.230][d][vo/gpu-next/libplacebo] [  8]     float _50_m5 : packoffset(c2.y);
[   1.230][d][vo/gpu-next/libplacebo] [  9]     float2 _50_m6 : packoffset(c2.z);
[   1.230][d][vo/gpu-next/libplacebo] [ 10]     float2 _50_m7 : packoffset(c3);
[   1.230][d][vo/gpu-next/libplacebo] [ 11]     float2 _50_m8 : packoffset(c3.z);
[   1.230][d][vo/gpu-next/libplacebo] [ 12] };
[   1.230][d][vo/gpu-next/libplacebo] [ 13] 
[   1.230][d][vo/gpu-next/libplacebo] [ 14] Texture2D<float4> _41 : register(t0);
[   1.230][d][vo/gpu-next/libplacebo] [ 15] SamplerState __41_sampler : register(s0);
[   1.230][d][vo/gpu-next/libplacebo] [ 16] Texture2D<float4> _366 : register(t1);
[   1.230][d][vo/gpu-next/libplacebo] [ 17] SamplerState __366_sampler : register(s1);
[   1.230][d][vo/gpu-next/libplacebo] [ 18] 
[   1.230][d][vo/gpu-next/libplacebo] [ 19] static float2 _45;
[   1.230][d][vo/gpu-next/libplacebo] [ 20] static float2 _368;
[   1.230][d][vo/gpu-next/libplacebo] [ 21] static float4 _1300;
[   1.230][d][vo/gpu-next/libplacebo] [ 22] 
[   1.230][d][vo/gpu-next/libplacebo] [ 23] struct SPIRV_Cross_Input
[   1.230][d][vo/gpu-next/libplacebo] [ 24] {
[   1.230][d][vo/gpu-next/libplacebo] [ 25]     float2 _45 : TEXCOORD0;
[   1.230][d][vo/gpu-next/libplacebo] [ 26]     float2 _368 : TEXCOORD1;
[   1.230][d][vo/gpu-next/libplacebo] [ 27] };
[   1.230][d][vo/gpu-next/libplacebo] [ 28] 
[   1.230][d][vo/gpu-next/libplacebo] [ 29] struct SPIRV_Cross_Output
[   1.230][d][vo/gpu-next/libplacebo] [ 30] {
[   1.230][d][vo/gpu-next/libplacebo] [ 31]     float4 _1300 : SV_Target0;
[   1.230][d][vo/gpu-next/libplacebo] [ 32] };
[   1.230][d][vo/gpu-next/libplacebo] [ 33] 
[   1.230][d][vo/gpu-next/libplacebo] [ 34] void frag_main()
[   1.230][d][vo/gpu-next/libplacebo] [ 35] {
[   1.230][d][vo/gpu-next/libplacebo] [ 36]     float2 _1318 = _45 + (_50_m0 * (-1.0f).xx);
[   1.230][d][vo/gpu-next/libplacebo] [ 37]     float2 _1329 = _45 + (_50_m0 * float2(-1.0f, 0.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 38]     float2 _1342 = _45 + (_50_m0 * float2(-1.0f, 1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 39]     float2 _1355 = _45 + (_50_m0 * float2(0.0f, -1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 40]     float2 _1381 = _45 + (_50_m0 * float2(0.0f, 1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 41]     float2 _1394 = _45 + (_50_m0 * float2(1.0f, -1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 42]     float2 _1407 = _45 + (_50_m0 * float2(1.0f, 0.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 43]     float2 _1420 = _45 + _50_m0;
[   1.230][d][vo/gpu-next/libplacebo] [ 44]     float2 _1433 = _368 + (_50_m2 * (-1.0f).xx);
[   1.230][d][vo/gpu-next/libplacebo] [ 45]     float2 _1446 = _368 + (_50_m2 * float2(-1.0f, 0.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 46]     float2 _1459 = _368 + (_50_m2 * float2(-1.0f, 1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 47]     float4 _1466 = ((((((((((mul(max(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.3601662814617156982421875f, 0.0190640427172183990478515625f, 0.307322800159454345703125f, 0.16891135275363922119140625f), float4(0.02673936821520328521728515625f, 0.3113619387149810791015625f, 0.11260382831096649169921875f, -0.2691869437694549560546875f), float4(0.04199279844760894775390625f, -0.3365077972412109375f, 0.20189742743968963623046875f, -0.04136312007904052734375f), float4(0.039564646780490875244140625f, 0.0331994257867336273193359375f, 0.1876829564571380615234375f, -0.0171198584139347076416015625f))) + mul(max(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.2866348326206207275390625f, -0.4171650707721710205078125f, 0.05928154289722442626953125f, 0.043736435472965240478515625f), float4(0.0028875465504825115203857421875f, 0.1381739079952239990234375f, -0.1254331767559051513671875f, -0.279405295848846435546875f), float4(-0.02352894283831119537353515625f, 0.106101147830486297607421875f, 0.09100277721881866455078125f, 0.0401329360902309417724609375f), float4(-0.2194920480251312255859375f, -0.0278100110590457916259765625f, -0.0301217995584011077880859375f, 0.08404712378978729248046875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.396748065948486328125f, -0.004087875597178936004638671875f, -0.03823594748973846435546875f, 0.118808381259441375732421875f), float4(0.009898328222334384918212890625f, 0.19107846915721893310546875f, -0.00931383110582828521728515625f, -0.1554276049137115478515625f), float4(-0.0473416633903980255126953125f, 0.18049581348896026611328125f, -0.02931719459593296051025390625f, 0.070890903472900390625f), float4(0.070831596851348876953125f, -0.11061744391918182373046875f, 0.1458403766155242919921875f, -0.02226122282445430755615234375f)))) + mul(max(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.2040024101734161376953125f, 0.089649200439453125f, -0.0103863812983036041259765625f, -0.0521333850920200347900390625f), float4(0.0050239558331668376922607421875f, -0.066287048161029815673828125f, -0.16436208784580230712890625f, -0.2534598410129547119140625f), float4(-0.0528519190847873687744140625f, 0.09706556797027587890625f, -0.0377891398966312408447265625f, -0.15254600346088409423828125f), float4(0.17023251950740814208984375f, 0.063713826239109039306640625f, 0.007430369965732097625732421875f, 0.0566340871155261993408203125f)))) + mul(max(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.08079333603382110595703125f, 0.420420706272125244140625f, 0.1909823715686798095703125f, 0.20028038322925567626953125f), float4(-0.054076544940471649169921875f, 0.22064368426799774169921875f, -0.2585338652133941650390625f, -0.3643561899662017822265625f), float4(0.20855729281902313232421875f, -0.023731000721454620361328125f, -0.06727708876132965087890625f, -0.18683032691478729248046875f), float4(-0.18032158911228179931640625f, -0.063883483409881591796875f, 0.3044629991054534912109375f, -0.2517780959606170654296875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.1194094121456146240234375f, 0.10624007880687713623046875f, 0.16120581328868865966796875f, 0.2369602024555206298828125f), float4(0.332182705402374267578125f, 0.4272074997425079345703125f, -0.10403668880462646484375f, -0.3138801753520965576171875f), float4(-0.0063721239566802978515625f, -0.006536710076034069061279296875f, 0.109810195863246917724609375f, 0.22771720588207244873046875f), float4(0.0057719978503882884979248046875f, 0.086026914417743682861328125f, -0.089348129928112030029296875f, -0.09494173526763916015625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.13233567774295806884765625f, 0.2411250770092010498046875f, -0.006800641305744647979736328125f, 0.1246622502803802490234375f), float4(0.11396591365337371826171875f, -0.072492532432079315185546875f, -0.2909037768840789794921875f, -0.12828145921230316162109375f), float4(-0.220011413097381591796875f, -0.0853240489959716796875f, -0.11932601034641265869140625f, 0.294529736042022705078125f), float4(0.095721952617168426513671875f, 0.01760384254157543182373046875f, 0.124540172517299652099609375f, 0.1632175147533416748046875f)))) + mul(max(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.04210744798183441162109375f, -0.008072160184383392333984375f, 0.065806739032268524169921875f, -0.12895269691944122314453125f), float4(0.139774262905120849609375f, -0.0371596850454807281494140625f, -0.21001346409320831298828125f, -0.08698160946369171142578125f), float4(0.2237050235271453857421875f, -0.291703283786773681640625f, 0.217920601367950439453125f, 0.366213023662567138671875f), float4(0.082547701895236968994140625f, -0.01651365496218204498291015625f, -0.11157248914241790771484375f, 0.12861597537994384765625f)))) + mul(max(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.2246825993061065673828125f, -0.1326223313808441162109375f, 0.121316529810428619384765625f, -0.155223548412322998046875f), float4(0.38104856014251708984375f, 0.03023772872984409332275390625f, 0.12862889468669891357421875f, -0.197704732418060302734375f), float4(-0.1617501080036163330078125f, -0.13688887655735015869140625f, 0.23505462706089019775390625f, 0.21333031356334686279296875f), float4(0.763523161411285400390625f, -0.1794907748699188232421875f, -0.13124310970306396484375f, 0.16138790547847747802734375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.050607495009899139404296875f, 0.08467049896717071533203125f, -0.0613609217107295989990234375f, -0.033436477184295654296875f), float4(0.4113834798336029052734375f, 0.03704340755939483642578125f, -0.02676335908472537994384765625f, -0.37771952152252197265625f), float4(0.2214750349521636962890625f, 0.064907573163509368896484375f, -0.0426615811884403228759765625f, -0.22606372833251953125f), float4(0.0457750074565410614013671875f, -0.0544981919229030609130859375f, -0.2149587571620941162109375f, -0.036050416529178619384765625f)))) + mul(max(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.062425218522548675537109375f, 0.270082414150238037109375f, -0.0560262091457843780517578125f, -0.123615510761737823486328125f), float4(0.14477442204952239990234375f, 0.19403581321239471435546875f, 0.23505251109600067138671875f, -0.07223403453826904296875f), float4(-0.15831543505191802978515625f, 0.46404469013214111328125f, -0.104754634201526641845703125f, -0.0045396811328828334808349609375f), float4(-0.20246095955371856689453125f, 0.23216484487056732177734375f, -0.358863651752471923828125f, 0.113607771694660186767578125f)))) + mul(max(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.14777757227420806884765625f, 0.18951411545276641845703125f, 0.02721945755183696746826171875f, 0.112160153687000274658203125f), float4(0.0299799703061580657958984375f, -0.1346635520458221435546875f, -0.0010830094106495380401611328125f, 0.02130295336246490478515625f), float4(0.23441231250762939453125f, -0.14529244601726531982421875f, 0.080687291920185089111328125f, 0.100443981587886810302734375f), float4(0.397287786006927490234375f, 0.2657020390033721923828125f, 0.004681066609919071197509765625f, -0.286326110363006591796875f)));
[   1.230][d][vo/gpu-next/libplacebo] [ 48]     float2 _1472 = _368 + (_50_m2 * float2(0.0f, -1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 49]     float2 _1498 = _368 + (_50_m2 * float2(0.0f, 1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 50]     float2 _1511 = _368 + (_50_m2 * float2(1.0f, -1.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 51]     float2 _1524 = _368 + (_50_m2 * float2(1.0f, 0.0f));
[   1.230][d][vo/gpu-next/libplacebo] [ 52]     float2 _1537 = _368 + _50_m2;
[   1.230][d][vo/gpu-next/libplacebo] [ 53]     float4 _1614 = ((((((((((_1466 + mul(max(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.10385484993457794189453125f, 0.1053723990917205810546875f, 0.16961228847503662109375f, 0.2072701156139373779296875f), float4(-0.0251489169895648956298828125f, -0.01136509515345096588134765625f, 0.0389991886913776397705078125f, -0.030950210988521575927734375f), float4(0.079080455005168914794921875f, -0.3276785314083099365234375f, 0.06467020511627197265625f, -0.03577138483524322509765625f), float4(0.1683379709720611572265625f, -0.21567492187023162841796875f, 0.3087125718593597412109375f, -0.19965471327304840087890625f)))) + mul(max(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.234208881855010986328125f, -0.00489469803869724273681640625f, -0.1816262304782867431640625f, -0.3110752403736114501953125f), float4(0.119765080511569976806640625f, 0.14924950897693634033203125f, -0.087233163416385650634765625f, 0.21401922404766082763671875f), float4(-0.58200323581695556640625f, -0.01177345030009746551513671875f, -0.04903350770473480224609375f, 0.19593577086925506591796875f), float4(-0.2113907337188720703125f, 0.13016600906848907470703125f, 0.0873484313488006591796875f, 0.415889203548431396484375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.000978981261141598224639892578125f, 0.3327491283416748046875f, 0.01740573346614837646484375f, -0.0429063178598880767822265625f), float4(-0.264102756977081298828125f, -0.092913329601287841796875f, 0.01938710175454616546630859375f, 0.105381853878498077392578125f), float4(-0.009176527149975299835205078125f, 0.094835139811038970947265625f, -0.284629344940185546875f, -0.0364440381526947021484375f), float4(0.2851940095424652099609375f, -0.4260311126708984375f, 0.1490223705768585205078125f, -0.115670315921306610107421875f)))) + mul(max(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.09344311058521270751953125f, 0.4463103115558624267578125f, 0.19984833896160125732421875f, -0.09733857214450836181640625f), float4(-0.11871777474880218505859375f, -0.0708025991916656494140625f, 0.24919955432415008544921875f, -0.112346343696117401123046875f), float4(0.124639503657817840576171875f, -0.052909933030605316162109375f, 0.15258149802684783935546875f, 0.077240161597728729248046875f), float4(0.00705346651375293731689453125f, -0.064041651785373687744140625f, -0.18149726092815399169921875f, -0.014058335684239864349365234375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.17353044450283050537109375f, 0.15376104414463043212890625f, 0.004588994197547435760498046875f, -0.13554202020168304443359375f), float4(-0.19920237362384796142578125f, -0.1891868114471435546875f, 0.113275118172168731689453125f, -0.117296434938907623291015625f), float4(-0.078525103628635406494140625f, 0.013677154667675495147705078125f, -0.2103213965892791748046875f, 0.068434260785579681396484375f), float4(-0.27790927886962890625f, 0.098375447094440460205078125f, -0.00019213746418245136737823486328125f, 0.09132538735866546630859375f)))) + mul(max(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.015866510570049285888671875f, 0.014929440803825855255126953125f, 0.24261860549449920654296875f, -0.1889373958110809326171875f), float4(-0.08654619753360748291015625f, -0.07454513013362884521484375f, -0.2079726755619049072265625f, -0.2236685454845428466796875f), float4(0.19704158604145050048828125f, 0.0048206006176769733428955078125f, -0.16707217693328857421875f, -0.141626834869384765625f), float4(0.036798395216464996337890625f, -0.166315495967864990234375f, -0.120093889534473419189453125f, 0.09603802859783172607421875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1318, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0415321923792362213134765625f, 0.057538039982318878173828125f, 0.179270684719085693359375f, -0.04211209714412689208984375f), float4(0.12080968916416168212890625f, -0.1505257189273834228515625f, -0.348557651042938232421875f, -0.07356987893581390380859375f), float4(-0.2819988429546356201171875f, -0.189586639404296875f, 0.15879882872104644775390625f, 0.0851158797740936279296875f), float4(0.00342132267542183399200439453125f, -0.0533849485218524932861328125f, -0.372852981090545654296875f, 0.06626708805561065673828125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1329, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.20219133794307708740234375f, 0.22150374948978424072265625f, -0.2940545380115509033203125f, 0.065977029502391815185546875f), float4(-0.0188852846622467041015625f, -0.01055170409381389617919921875f, -0.01077428273856639862060546875f, 0.08758954703807830810546875f), float4(-0.2015348970890045166015625f, -0.1700622737407684326171875f, -0.24321876466274261474609375f, -0.068642072379589080810546875f), float4(-0.118437863886356353759765625f, -0.0439772121608257293701171875f, -0.02973681129515171051025390625f, 0.14040918648242950439453125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1342, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.18709076941013336181640625f, -0.097239382565021514892578125f, 0.12783436477184295654296875f, -0.15167634189128875732421875f), float4(0.29039704799652099609375f, -0.1100991070270538330078125f, 0.01837141811847686767578125f, -0.0600967071950435638427734375f), float4(-0.072569228708744049072265625f, -0.257995665073394775390625f, -0.06276933848857879638671875f, -0.035992302000522613525390625f), float4(-0.0672911107540130615234375f, -0.0599567927420139312744140625f, -0.02407973445951938629150390625f, 0.01183887757360935211181640625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1355, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0104491747915744781494140625f, -0.082124508917331695556640625f, 0.140980303287506103515625f, 0.11861121654510498046875f), float4(-0.180358350276947021484375f, 0.0519305653870105743408203125f, 0.0104955099523067474365234375f, -0.094479620456695556640625f), float4(0.12029649317264556884765625f, 0.0406045131385326385498046875f, -0.05997170507907867431640625f, -0.004466735757887363433837890625f), float4(-0.22080485522747039794921875f, -0.111876808106899261474609375f, 0.124374695122241973876953125f, -0.00415548495948314666748046875f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _45, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.285842359066009521484375f, -0.384801328182220458984375f, -0.13987813889980316162109375f, -0.4463469088077545166015625f), float4(-0.389041900634765625f, -0.0224981717765331268310546875f, 0.1733445227146148681640625f, 0.21895568072795867919921875f), float4(-0.15450422465801239013671875f, -0.10905496776103973388671875f, 0.151119053363800048828125f, -0.22554914653301239013671875f), float4(0.10612158477306365966796875f, -0.029144369065761566162109375f, 0.360590457916259765625f, 0.22140681743621826171875f)));
[   1.230][d][vo/gpu-next/libplacebo] [ 54]     float4 _1768 = ((((((((((_1614 + mul(max(-(_41.SampleLevel(__41_sampler, _1381, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.2378030717372894287109375f, -0.0230337046086788177490234375f, 0.068205885589122772216796875f, -0.110635854303836822509765625f), float4(-0.267200052738189697265625f, -0.16081829369068145751953125f, 0.19523881375789642333984375f, 0.079728372395038604736328125f), float4(-0.01849585212767124176025390625f, -0.2793956100940704345703125f, 0.17668397724628448486328125f, -0.12020479142665863037109375f), float4(-0.079556085169315338134765625f, -0.02284952066838741302490234375f, 0.031480275094509124755859375f, 0.318183481693267822265625f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1394, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.22501225769519805908203125f, -0.00829407013952732086181640625f, 0.0595816671848297119140625f, 0.16512988507747650146484375f), float4(0.187114417552947998046875f, 0.12009680271148681640625f, 0.118126519024372100830078125f, -0.16091056168079376220703125f), float4(0.1573397219181060791015625f, 0.045156084001064300537109375f, 0.2064049243927001953125f, -0.168520271778106689453125f), float4(-0.11217176914215087890625f, 0.06746272742748260498046875f, -0.0502181760966777801513671875f, 0.086437828838825225830078125f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1407, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.20715691149234771728515625f, -0.1082907021045684814453125f, 0.02789297513663768768310546875f, 0.1951526105403900146484375f), float4(-0.1783890426158905029296875f, 0.15322570502758026123046875f, -0.108409844338893890380859375f, -0.06632365286350250244140625f), float4(-0.138050258159637451171875f, 0.23020233213901519775390625f, 0.124165810644626617431640625f, -0.14861802756786346435546875f), float4(0.1665047109127044677734375f, 0.08158385753631591796875f, -0.090513028204441070556640625f, -0.069816492497920989990234375f)))) + mul(max(-(_41.SampleLevel(__41_sampler, _1420, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0461712591350078582763671875f, 0.065792210400104522705078125f, 0.2596473395824432373046875f, 0.285009682178497314453125f), float4(0.076412551105022430419921875f, -0.090885855257511138916015625f, -0.097252197563648223876953125f, 0.18298368155956268310546875f), float4(-0.0639333426952362060546875f, 0.103463001549243927001953125f, -0.23062051832675933837890625f, -0.1527073085308074951171875f), float4(0.13633437454700469970703125f, 0.074707485735416412353515625f, 0.15065334737300872802734375f, -0.02460257150232791900634765625f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1433, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.118319295346736907958984375f, 0.0104109384119510650634765625f, 0.04465593397617340087890625f, -0.104725904762744903564453125f), float4(0.03047756850719451904296875f, 0.12867386639118194580078125f, 0.039075314998626708984375f, 0.1892211735248565673828125f), float4(0.13301081955432891845703125f, -0.16015569865703582763671875f, 0.038168407976627349853515625f, -0.073722593486309051513671875f), float4(-0.09522213041782379150390625f, -0.095107145607471466064453125f, -0.16679631173610687255859375f, 0.0446732342243194580078125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1446, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.462289988994598388671875f, -0.307808220386505126953125f, -0.090814650058746337890625f, 0.14333869516849517822265625f), float4(-0.03150390088558197021484375f, 0.0594091154634952545166015625f, -0.24948491156101226806640625f, -0.17146956920623779296875f), float4(0.0608437359333038330078125f, -0.0419898219406604766845703125f, 0.054005734622478485107421875f, 0.22835566103458404541015625f), float4(0.12036597728729248046875f, -0.0070898844860494136810302734375f, 0.17276851832866668701171875f, -0.17754094302654266357421875f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1459, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.3511957228183746337890625f, 0.02003431133925914764404296875f, 0.087519429624080657958984375f, 0.081934876739978790283203125f), float4(0.041884876787662506103515625f, 0.22649358212947845458984375f, -0.07447533309459686279296875f, 0.20845472812652587890625f), float4(-0.048598460853099822998046875f, -0.162067353725433349609375f, 0.068195760250091552734375f, -0.0530007779598236083984375f), float4(0.1814642250537872314453125f, 0.046941481530666351318359375f, 0.04529321193695068359375f, 0.067835748195648193359375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1472, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.280914008617401123046875f, -0.149987041950225830078125f, -0.2348580658435821533203125f, -0.01560829579830169677734375f), float4(0.1549555957317352294921875f, -0.119926631450653076171875f, -0.09497411549091339111328125f, 0.058872841298580169677734375f), float4(0.053392075002193450927734375f, 0.103224642574787139892578125f, -0.07506668567657470703125f, 0.068358354270458221435546875f), float4(-0.1866333782672882080078125f, 0.00990149937570095062255859375f, -0.12337033450603485107421875f, -0.1250270307064056396484375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _368, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.7748568058013916015625f, -0.1787062585353851318359375f, -0.2077005207538604736328125f, 0.02469252608716487884521484375f), float4(-0.05643029510974884033203125f, -0.063241131603717803955078125f, -0.03660047054290771484375f, 0.29629671573638916015625f), float4(-0.518969833850860595703125f, -0.02723126113414764404296875f, 0.059037618339061737060546875f, 0.077677644789218902587890625f), float4(-0.0616754852235317230224609375f, -0.20277845859527587890625f, 0.103522233664989471435546875f, -0.081984460353851318359375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1498, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.06347568333148956298828125f, 0.21643166244029998779296875f, -0.0971854627132415771484375f, 0.037225700914859771728515625f), float4(-0.02953795157372951507568359375f, -0.035713501274585723876953125f, -0.0954836308956146240234375f, 0.18225233256816864013671875f), float4(-0.29609334468841552734375f, -0.349613189697265625f, 0.18245913088321685791015625f, -0.1016258895397186279296875f), float4(-0.1818945109844207763671875f, -0.09077887237071990966796875f, 0.117313183844089508056640625f, -0.068638741970062255859375f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1511, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0473735742270946502685546875f, -0.02028937637805938720703125f, -0.2574871480464935302734375f, -0.1356816589832305908203125f), float4(0.15656633675098419189453125f, -0.068418987095355987548828125f, 0.012100781314074993133544921875f, -0.13611818850040435791015625f), float4(0.001635732245631515979766845703125f, -0.2387053668498992919921875f, 0.140357434749603271484375f, -0.14700134098529815673828125f), float4(0.253557503223419189453125f, -0.13697345554828643798828125f, -0.1369313895702362060546875f, -0.103652872145175933837890625f)));
[   1.230][d][vo/gpu-next/libplacebo] [ 55]     _1300 = ((_1768 + mul(max(-(_366.SampleLevel(__366_sampler, _1524, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.4283933937549591064453125f, -0.3161920011043548583984375f, -0.012617616914212703704833984375f, 0.0184689648449420928955078125f), float4(0.214366436004638671875f, 0.1840881407260894775390625f, -0.4265153706073760986328125f, 0.12504087388515472412109375f), float4(-0.138949334621429443359375f, 0.091662175953388214111328125f, -0.20096369087696075439453125f, -0.08072717487812042236328125f), float4(-0.00548784621059894561767578125f, 0.1704638302326202392578125f, 0.1383948028087615966796875f, -0.00549563951790332794189453125f)))) + mul(max(-(_366.SampleLevel(__366_sampler, _1537, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.2001429498195648193359375f, -0.02728239633142948150634765625f, -0.063170067965984344482421875f, 0.0445204190909862518310546875f), float4(0.064600385725498199462890625f, 0.072222925722599029541015625f, -0.33409225940704345703125f, 0.080638311803340911865234375f), float4(-0.02260797657072544097900390625f, 0.130885601043701171875f, -0.3969174325466156005859375f, -0.09488986432552337646484375f), float4(-0.181053102016448974609375f, 0.01136724837124347686767578125f, -0.25312221050262451171875f, -0.22468316555023193359375f)))) + float4(0.268868863582611083984375f, 0.05874665081501007080078125f, 0.1026823222637176513671875f, 0.058330811560153961181640625f);
[   1.230][d][vo/gpu-next/libplacebo] [ 56] }
[   1.230][d][vo/gpu-next/libplacebo] [ 57] 
[   1.230][d][vo/gpu-next/libplacebo] [ 58] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.230][d][vo/gpu-next/libplacebo] [ 59] {
[   1.230][d][vo/gpu-next/libplacebo] [ 60]     _45 = stage_input._45;
[   1.230][d][vo/gpu-next/libplacebo] [ 61]     _368 = stage_input._368;
[   1.230][d][vo/gpu-next/libplacebo] [ 62]     frag_main();
[   1.230][d][vo/gpu-next/libplacebo] [ 63]     SPIRV_Cross_Output stage_output;
[   1.230][d][vo/gpu-next/libplacebo] [ 64]     stage_output._1300 = _1300;
[   1.230][d][vo/gpu-next/libplacebo] [ 65]     return stage_output;
[   1.230][d][vo/gpu-next/libplacebo] [ 66] }
[   1.233][d][vo/gpu-next] cache_save_obj: key(5be0253176f26d14), size(11845), save time(2.423 ms)
[   1.233][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.233][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.233][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.233][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.233][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.233][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.233][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.233][d][vo/gpu-next/libplacebo] [  6] layout(binding=2) uniform  sampler2D _c;
[   1.233][d][vo/gpu-next/libplacebo] [  7] layout(binding=3) uniform  sampler2D _11;
[   1.233][d][vo/gpu-next/libplacebo] [  8] layout(binding=4) uniform  sampler2D _16;
[   1.233][d][vo/gpu-next/libplacebo] [  9] layout(binding=5) uniform  sampler2D _1b;
[   1.233][d][vo/gpu-next/libplacebo] [ 10] layout(binding=6) uniform  sampler2D _20;
[   1.233][d][vo/gpu-next/libplacebo] [ 11] layout(binding=7) uniform  sampler2D _25;
[   1.233][d][vo/gpu-next/libplacebo] [ 12] layout(binding=8) uniform  sampler2D _2a;
[   1.233][d][vo/gpu-next/libplacebo] [ 13] layout(binding=9) uniform  sampler2D _2f;
[   1.233][d][vo/gpu-next/libplacebo] [ 14] layout(binding=10) uniform  sampler2D _34;
[   1.233][d][vo/gpu-next/libplacebo] [ 15] layout(binding=11) uniform  sampler2D _39;
[   1.233][d][vo/gpu-next/libplacebo] [ 16] layout(binding=12) uniform  sampler2D _3e;
[   1.233][d][vo/gpu-next/libplacebo] [ 17] layout(binding=13) uniform  sampler2D _43;
[   1.233][d][vo/gpu-next/libplacebo] [ 18] layout(binding=14) uniform  sampler2D _48;
[   1.233][d][vo/gpu-next/libplacebo] [ 19] layout(std140, binding=15) uniform _53 {
[   1.233][d][vo/gpu-next/libplacebo] [ 20]     layout(offset=0) vec2 _4;
[   1.233][d][vo/gpu-next/libplacebo] [ 21]     layout(offset=8) vec2 _5;
[   1.233][d][vo/gpu-next/libplacebo] [ 22]     layout(offset=16) vec2 _9;
[   1.233][d][vo/gpu-next/libplacebo] [ 23]     layout(offset=24) vec2 _a;
[   1.233][d][vo/gpu-next/libplacebo] [ 24]     layout(offset=32) vec2 _e;
[   1.233][d][vo/gpu-next/libplacebo] [ 25]     layout(offset=40) vec2 _f;
[   1.233][d][vo/gpu-next/libplacebo] [ 26]     layout(offset=48) vec2 _13;
[   1.233][d][vo/gpu-next/libplacebo] [ 27]     layout(offset=56) vec2 _14;
[   1.233][d][vo/gpu-next/libplacebo] [ 28]     layout(offset=64) vec2 _18;
[   1.233][d][vo/gpu-next/libplacebo] [ 29]     layout(offset=72) vec2 _19;
[   1.233][d][vo/gpu-next/libplacebo] [ 30]     layout(offset=80) vec2 _1d;
[   1.233][d][vo/gpu-next/libplacebo] [ 31]     layout(offset=88) vec2 _1e;
[   1.233][d][vo/gpu-next/libplacebo] [ 32]     layout(offset=96) vec2 _22;
[   1.233][d][vo/gpu-next/libplacebo] [ 33]     layout(offset=104) vec2 _23;
[   1.233][d][vo/gpu-next/libplacebo] [ 34]     layout(offset=112) vec2 _27;
[   1.233][d][vo/gpu-next/libplacebo] [ 35]     layout(offset=120) vec2 _28;
[   1.233][d][vo/gpu-next/libplacebo] [ 36]     layout(offset=128) vec2 _2c;
[   1.233][d][vo/gpu-next/libplacebo] [ 37]     layout(offset=136) vec2 _2d;
[   1.233][d][vo/gpu-next/libplacebo] [ 38]     layout(offset=144) vec2 _31;
[   1.233][d][vo/gpu-next/libplacebo] [ 39]     layout(offset=152) vec2 _32;
[   1.233][d][vo/gpu-next/libplacebo] [ 40]     layout(offset=160) vec2 _36;
[   1.233][d][vo/gpu-next/libplacebo] [ 41]     layout(offset=168) vec2 _37;
[   1.233][d][vo/gpu-next/libplacebo] [ 42]     layout(offset=176) vec2 _3b;
[   1.233][d][vo/gpu-next/libplacebo] [ 43]     layout(offset=184) vec2 _3c;
[   1.233][d][vo/gpu-next/libplacebo] [ 44]     layout(offset=192) vec2 _40;
[   1.233][d][vo/gpu-next/libplacebo] [ 45]     layout(offset=200) vec2 _41;
[   1.234][d][vo/gpu-next/libplacebo] [ 46]     layout(offset=208) vec2 _45;
[   1.234][d][vo/gpu-next/libplacebo] [ 47]     layout(offset=216) vec2 _46;
[   1.234][d][vo/gpu-next/libplacebo] [ 48]     layout(offset=224) vec2 _4a;
[   1.234][d][vo/gpu-next/libplacebo] [ 49]     layout(offset=232) vec2 _4b;
[   1.234][d][vo/gpu-next/libplacebo] [ 50]     layout(offset=240) int _4d;
[   1.234][d][vo/gpu-next/libplacebo] [ 51]     layout(offset=244) float _4e;
[   1.234][d][vo/gpu-next/libplacebo] [ 52]     layout(offset=248) vec2 _4f;
[   1.234][d][vo/gpu-next/libplacebo] [ 53]     layout(offset=256) vec2 _50;
[   1.234][d][vo/gpu-next/libplacebo] [ 54]     layout(offset=264) vec2 _51;
[   1.234][d][vo/gpu-next/libplacebo] [ 55] };
[   1.234][d][vo/gpu-next/libplacebo] [ 56] layout(location=0) in vec2 _54;
[   1.234][d][vo/gpu-next/libplacebo] [ 57] layout(location=0) out vec2 _3;
[   1.234][d][vo/gpu-next/libplacebo] [ 58] layout(location=1) in vec2 _55;
[   1.234][d][vo/gpu-next/libplacebo] [ 59] layout(location=1) out vec2 _8;
[   1.234][d][vo/gpu-next/libplacebo] [ 60] layout(location=2) in vec2 _56;
[   1.234][d][vo/gpu-next/libplacebo] [ 61] layout(location=2) out vec2 _d;
[   1.234][d][vo/gpu-next/libplacebo] [ 62] layout(location=3) in vec2 _57;
[   1.234][d][vo/gpu-next/libplacebo] [ 63] layout(location=3) out vec2 _12;
[   1.234][d][vo/gpu-next/libplacebo] [ 64] layout(location=4) in vec2 _58;
[   1.234][d][vo/gpu-next/libplacebo] [ 65] layout(location=4) out vec2 _17;
[   1.234][d][vo/gpu-next/libplacebo] [ 66] layout(location=5) in vec2 _59;
[   1.234][d][vo/gpu-next/libplacebo] [ 67] layout(location=5) out vec2 _1c;
[   1.234][d][vo/gpu-next/libplacebo] [ 68] layout(location=6) in vec2 _5a;
[   1.234][d][vo/gpu-next/libplacebo] [ 69] layout(location=6) out vec2 _21;
[   1.234][d][vo/gpu-next/libplacebo] [ 70] layout(location=7) in vec2 _5b;
[   1.234][d][vo/gpu-next/libplacebo] [ 71] layout(location=7) out vec2 _26;
[   1.234][d][vo/gpu-next/libplacebo] [ 72] layout(location=8) in vec2 _5c;
[   1.234][d][vo/gpu-next/libplacebo] [ 73] layout(location=8) out vec2 _2b;
[   1.234][d][vo/gpu-next/libplacebo] [ 74] layout(location=9) in vec2 _5d;
[   1.234][d][vo/gpu-next/libplacebo] [ 75] layout(location=9) out vec2 _30;
[   1.234][d][vo/gpu-next/libplacebo] [ 76] layout(location=10) in vec2 _5e;
[   1.234][d][vo/gpu-next/libplacebo] [ 77] layout(location=10) out vec2 _35;
[   1.234][d][vo/gpu-next/libplacebo] [ 78] layout(location=11) in vec2 _5f;
[   1.234][d][vo/gpu-next/libplacebo] [ 79] layout(location=11) out vec2 _3a;
[   1.234][d][vo/gpu-next/libplacebo] [ 80] layout(location=12) in vec2 _60;
[   1.234][d][vo/gpu-next/libplacebo] [ 81] layout(location=12) out vec2 _3f;
[   1.234][d][vo/gpu-next/libplacebo] [ 82] layout(location=13) in vec2 _61;
[   1.234][d][vo/gpu-next/libplacebo] [ 83] layout(location=13) out vec2 _44;
[   1.234][d][vo/gpu-next/libplacebo] [ 84] layout(location=14) in vec2 _62;
[   1.234][d][vo/gpu-next/libplacebo] [ 85] layout(location=14) out vec2 _49;
[   1.234][d][vo/gpu-next/libplacebo] [ 86] layout(location=15) in vec2 _63;
[   1.234][d][vo/gpu-next/libplacebo] [ 87] void main() {
[   1.234][d][vo/gpu-next/libplacebo] [ 88] _3 = _54;
[   1.234][d][vo/gpu-next/libplacebo] [ 89] _8 = _55;
[   1.234][d][vo/gpu-next/libplacebo] [ 90] _d = _56;
[   1.234][d][vo/gpu-next/libplacebo] [ 91] _12 = _57;
[   1.234][d][vo/gpu-next/libplacebo] [ 92] _17 = _58;
[   1.234][d][vo/gpu-next/libplacebo] [ 93] _1c = _59;
[   1.234][d][vo/gpu-next/libplacebo] [ 94] _21 = _5a;
[   1.234][d][vo/gpu-next/libplacebo] [ 95] _26 = _5b;
[   1.234][d][vo/gpu-next/libplacebo] [ 96] _2b = _5c;
[   1.234][d][vo/gpu-next/libplacebo] [ 97] _30 = _5d;
[   1.234][d][vo/gpu-next/libplacebo] [ 98] _35 = _5e;
[   1.234][d][vo/gpu-next/libplacebo] [ 99] _3a = _5f;
[   1.234][d][vo/gpu-next/libplacebo] [100] _3f = _60;
[   1.234][d][vo/gpu-next/libplacebo] [101] _44 = _61;
[   1.234][d][vo/gpu-next/libplacebo] [102] _49 = _62;
[   1.234][d][vo/gpu-next/libplacebo] [103] vec2 va_pos = _63; 
[   1.234][d][vo/gpu-next/libplacebo] [104] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.234][d][vo/gpu-next/libplacebo] [105] }
[   1.234][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.234][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.234][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.234][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.234][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.234][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.234][d][vo/gpu-next/libplacebo] [  6] layout(binding=2) uniform  sampler2D _c;
[   1.234][d][vo/gpu-next/libplacebo] [  7] layout(binding=3) uniform  sampler2D _11;
[   1.234][d][vo/gpu-next/libplacebo] [  8] layout(binding=4) uniform  sampler2D _16;
[   1.234][d][vo/gpu-next/libplacebo] [  9] layout(binding=5) uniform  sampler2D _1b;
[   1.234][d][vo/gpu-next/libplacebo] [ 10] layout(binding=6) uniform  sampler2D _20;
[   1.234][d][vo/gpu-next/libplacebo] [ 11] layout(binding=7) uniform  sampler2D _25;
[   1.234][d][vo/gpu-next/libplacebo] [ 12] layout(binding=8) uniform  sampler2D _2a;
[   1.234][d][vo/gpu-next/libplacebo] [ 13] layout(binding=9) uniform  sampler2D _2f;
[   1.234][d][vo/gpu-next/libplacebo] [ 14] layout(binding=10) uniform  sampler2D _34;
[   1.234][d][vo/gpu-next/libplacebo] [ 15] layout(binding=11) uniform  sampler2D _39;
[   1.234][d][vo/gpu-next/libplacebo] [ 16] layout(binding=12) uniform  sampler2D _3e;
[   1.234][d][vo/gpu-next/libplacebo] [ 17] layout(binding=13) uniform  sampler2D _43;
[   1.234][d][vo/gpu-next/libplacebo] [ 18] layout(binding=14) uniform  sampler2D _48;
[   1.234][d][vo/gpu-next/libplacebo] [ 19] layout(std140, binding=15) uniform _53 {
[   1.234][d][vo/gpu-next/libplacebo] [ 20]     layout(offset=0) vec2 _4;
[   1.234][d][vo/gpu-next/libplacebo] [ 21]     layout(offset=8) vec2 _5;
[   1.234][d][vo/gpu-next/libplacebo] [ 22]     layout(offset=16) vec2 _9;
[   1.234][d][vo/gpu-next/libplacebo] [ 23]     layout(offset=24) vec2 _a;
[   1.234][d][vo/gpu-next/libplacebo] [ 24]     layout(offset=32) vec2 _e;
[   1.234][d][vo/gpu-next/libplacebo] [ 25]     layout(offset=40) vec2 _f;
[   1.234][d][vo/gpu-next/libplacebo] [ 26]     layout(offset=48) vec2 _13;
[   1.234][d][vo/gpu-next/libplacebo] [ 27]     layout(offset=56) vec2 _14;
[   1.234][d][vo/gpu-next/libplacebo] [ 28]     layout(offset=64) vec2 _18;
[   1.234][d][vo/gpu-next/libplacebo] [ 29]     layout(offset=72) vec2 _19;
[   1.234][d][vo/gpu-next/libplacebo] [ 30]     layout(offset=80) vec2 _1d;
[   1.234][d][vo/gpu-next/libplacebo] [ 31]     layout(offset=88) vec2 _1e;
[   1.234][d][vo/gpu-next/libplacebo] [ 32]     layout(offset=96) vec2 _22;
[   1.234][d][vo/gpu-next/libplacebo] [ 33]     layout(offset=104) vec2 _23;
[   1.234][d][vo/gpu-next/libplacebo] [ 34]     layout(offset=112) vec2 _27;
[   1.234][d][vo/gpu-next/libplacebo] [ 35]     layout(offset=120) vec2 _28;
[   1.234][d][vo/gpu-next/libplacebo] [ 36]     layout(offset=128) vec2 _2c;
[   1.234][d][vo/gpu-next/libplacebo] [ 37]     layout(offset=136) vec2 _2d;
[   1.234][d][vo/gpu-next/libplacebo] [ 38]     layout(offset=144) vec2 _31;
[   1.234][d][vo/gpu-next/libplacebo] [ 39]     layout(offset=152) vec2 _32;
[   1.234][d][vo/gpu-next/libplacebo] [ 40]     layout(offset=160) vec2 _36;
[   1.234][d][vo/gpu-next/libplacebo] [ 41]     layout(offset=168) vec2 _37;
[   1.234][d][vo/gpu-next/libplacebo] [ 42]     layout(offset=176) vec2 _3b;
[   1.234][d][vo/gpu-next/libplacebo] [ 43]     layout(offset=184) vec2 _3c;
[   1.234][d][vo/gpu-next/libplacebo] [ 44]     layout(offset=192) vec2 _40;
[   1.234][d][vo/gpu-next/libplacebo] [ 45]     layout(offset=200) vec2 _41;
[   1.234][d][vo/gpu-next/libplacebo] [ 46]     layout(offset=208) vec2 _45;
[   1.234][d][vo/gpu-next/libplacebo] [ 47]     layout(offset=216) vec2 _46;
[   1.234][d][vo/gpu-next/libplacebo] [ 48]     layout(offset=224) vec2 _4a;
[   1.234][d][vo/gpu-next/libplacebo] [ 49]     layout(offset=232) vec2 _4b;
[   1.234][d][vo/gpu-next/libplacebo] [ 50]     layout(offset=240) int _4d;
[   1.234][d][vo/gpu-next/libplacebo] [ 51]     layout(offset=244) float _4e;
[   1.234][d][vo/gpu-next/libplacebo] [ 52]     layout(offset=248) vec2 _4f;
[   1.234][d][vo/gpu-next/libplacebo] [ 53]     layout(offset=256) vec2 _50;
[   1.234][d][vo/gpu-next/libplacebo] [ 54]     layout(offset=264) vec2 _51;
[   1.234][d][vo/gpu-next/libplacebo] [ 55] };
[   1.234][d][vo/gpu-next/libplacebo] [ 56] layout(location=0) in vec2 _3;
[   1.234][d][vo/gpu-next/libplacebo] [ 57] layout(location=1) in vec2 _8;
[   1.234][d][vo/gpu-next/libplacebo] [ 58] layout(location=2) in vec2 _d;
[   1.234][d][vo/gpu-next/libplacebo] [ 59] layout(location=3) in vec2 _12;
[   1.234][d][vo/gpu-next/libplacebo] [ 60] layout(location=4) in vec2 _17;
[   1.234][d][vo/gpu-next/libplacebo] [ 61] layout(location=5) in vec2 _1c;
[   1.234][d][vo/gpu-next/libplacebo] [ 62] layout(location=6) in vec2 _21;
[   1.234][d][vo/gpu-next/libplacebo] [ 63] layout(location=7) in vec2 _26;
[   1.234][d][vo/gpu-next/libplacebo] [ 64] layout(location=8) in vec2 _2b;
[   1.234][d][vo/gpu-next/libplacebo] [ 65] layout(location=9) in vec2 _30;
[   1.234][d][vo/gpu-next/libplacebo] [ 66] layout(location=10) in vec2 _35;
[   1.234][d][vo/gpu-next/libplacebo] [ 67] layout(location=11) in vec2 _3a;
[   1.234][d][vo/gpu-next/libplacebo] [ 68] layout(location=12) in vec2 _3f;
[   1.234][d][vo/gpu-next/libplacebo] [ 69] layout(location=13) in vec2 _44;
[   1.234][d][vo/gpu-next/libplacebo] [ 70] layout(location=14) in vec2 _49;
[   1.234][d][vo/gpu-next/libplacebo] [ 71] layout(location=0) out vec4 out_color;
[   1.234][d][vo/gpu-next/libplacebo] [ 72] 
[   1.234][d][vo/gpu-next/libplacebo] [ 73] #define MAINPRESUB_raw _2 
[   1.234][d][vo/gpu-next/libplacebo] [ 74] #define MAINPRESUB_pos _3 
[   1.234][d][vo/gpu-next/libplacebo] [ 75] #define MAINPRESUB_map _3_map 
[   1.234][d][vo/gpu-next/libplacebo] [ 76] #define MAINPRESUB_size vec2(textureSize(_2, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [ 77] #define MAINPRESUB_pt _4 
[   1.234][d][vo/gpu-next/libplacebo] [ 78] #define MAINPRESUB_off _5 
[   1.234][d][vo/gpu-next/libplacebo] [ 79] const float _6 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [ 80] #define MAINPRESUB_mul _6 
[   1.234][d][vo/gpu-next/libplacebo] [ 81] #define MAINPRESUB_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [ 82] #define MAINPRESUB_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [ 83] #define MAINPRESUB_texOff(off) (MAINPRESUB_tex(_3 + _4 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [ 84] #define MAINPRESUB_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [ 85] #define MAIN_raw MAINPRESUB_raw 
[   1.234][d][vo/gpu-next/libplacebo] [ 86] #define MAIN_pos MAINPRESUB_pos 
[   1.234][d][vo/gpu-next/libplacebo] [ 87] #define MAIN_size MAINPRESUB_size 
[   1.234][d][vo/gpu-next/libplacebo] [ 88] #define MAIN_rot MAINPRESUB_rot 
[   1.234][d][vo/gpu-next/libplacebo] [ 89] #define MAIN_off MAINPRESUB_off 
[   1.234][d][vo/gpu-next/libplacebo] [ 90] #define MAIN_pt MAINPRESUB_pt 
[   1.234][d][vo/gpu-next/libplacebo] [ 91] #define MAIN_map MAINPRESUB_map 
[   1.234][d][vo/gpu-next/libplacebo] [ 92] #define MAIN_mul MAINPRESUB_mul 
[   1.234][d][vo/gpu-next/libplacebo] [ 93] #define MAIN_tex MAINPRESUB_tex 
[   1.234][d][vo/gpu-next/libplacebo] [ 94] #define MAIN_texOff MAINPRESUB_texOff 
[   1.234][d][vo/gpu-next/libplacebo] [ 95] #define MAIN_gather MAINPRESUB_gather 
[   1.234][d][vo/gpu-next/libplacebo] [ 96] #define conv2d_1_tf_raw _7 
[   1.234][d][vo/gpu-next/libplacebo] [ 97] #define conv2d_1_tf_pos _8 
[   1.234][d][vo/gpu-next/libplacebo] [ 98] #define conv2d_1_tf_map _8_map 
[   1.234][d][vo/gpu-next/libplacebo] [ 99] #define conv2d_1_tf_size vec2(textureSize(_7, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [100] #define conv2d_1_tf_pt _9 
[   1.234][d][vo/gpu-next/libplacebo] [101] #define conv2d_1_tf_off _a 
[   1.234][d][vo/gpu-next/libplacebo] [102] const float _b = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [103] #define conv2d_1_tf_mul _b 
[   1.234][d][vo/gpu-next/libplacebo] [104] #define conv2d_1_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [105] #define conv2d_1_tf_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [106] #define conv2d_1_tf_texOff(off) (conv2d_1_tf_tex(_8 + _9 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [107] #define conv2d_1_tf_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [108] #define conv2d_1_tf1_raw _c 
[   1.234][d][vo/gpu-next/libplacebo] [109] #define conv2d_1_tf1_pos _d 
[   1.234][d][vo/gpu-next/libplacebo] [110] #define conv2d_1_tf1_map _d_map 
[   1.234][d][vo/gpu-next/libplacebo] [111] #define conv2d_1_tf1_size vec2(textureSize(_c, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [112] #define conv2d_1_tf1_pt _e 
[   1.234][d][vo/gpu-next/libplacebo] [113] #define conv2d_1_tf1_off _f 
[   1.234][d][vo/gpu-next/libplacebo] [114] const float _10 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [115] #define conv2d_1_tf1_mul _10 
[   1.234][d][vo/gpu-next/libplacebo] [116] #define conv2d_1_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [117] #define conv2d_1_tf1_tex(pos) (_10 * vec4(textureLod(_c, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [118] #define conv2d_1_tf1_texOff(off) (conv2d_1_tf1_tex(_d + _e * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [119] #define conv2d_1_tf1_gather(pos, c) (_10 * vec4(textureGather(_c, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [120] #define conv2d_2_tf_raw _11 
[   1.234][d][vo/gpu-next/libplacebo] [121] #define conv2d_2_tf_pos _12 
[   1.234][d][vo/gpu-next/libplacebo] [122] #define conv2d_2_tf_map _12_map 
[   1.234][d][vo/gpu-next/libplacebo] [123] #define conv2d_2_tf_size vec2(textureSize(_11, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [124] #define conv2d_2_tf_pt _13 
[   1.234][d][vo/gpu-next/libplacebo] [125] #define conv2d_2_tf_off _14 
[   1.234][d][vo/gpu-next/libplacebo] [126] const float _15 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [127] #define conv2d_2_tf_mul _15 
[   1.234][d][vo/gpu-next/libplacebo] [128] #define conv2d_2_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [129] #define conv2d_2_tf_tex(pos) (_15 * vec4(textureLod(_11, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [130] #define conv2d_2_tf_texOff(off) (conv2d_2_tf_tex(_12 + _13 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [131] #define conv2d_2_tf_gather(pos, c) (_15 * vec4(textureGather(_11, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [132] #define conv2d_2_tf1_raw _16 
[   1.234][d][vo/gpu-next/libplacebo] [133] #define conv2d_2_tf1_pos _17 
[   1.234][d][vo/gpu-next/libplacebo] [134] #define conv2d_2_tf1_map _17_map 
[   1.234][d][vo/gpu-next/libplacebo] [135] #define conv2d_2_tf1_size vec2(textureSize(_16, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [136] #define conv2d_2_tf1_pt _18 
[   1.234][d][vo/gpu-next/libplacebo] [137] #define conv2d_2_tf1_off _19 
[   1.234][d][vo/gpu-next/libplacebo] [138] const float _1a = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [139] #define conv2d_2_tf1_mul _1a 
[   1.234][d][vo/gpu-next/libplacebo] [140] #define conv2d_2_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [141] #define conv2d_2_tf1_tex(pos) (_1a * vec4(textureLod(_16, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [142] #define conv2d_2_tf1_texOff(off) (conv2d_2_tf1_tex(_17 + _18 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [143] #define conv2d_2_tf1_gather(pos, c) (_1a * vec4(textureGather(_16, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [144] #define conv2d_3_tf_raw _1b 
[   1.234][d][vo/gpu-next/libplacebo] [145] #define conv2d_3_tf_pos _1c 
[   1.234][d][vo/gpu-next/libplacebo] [146] #define conv2d_3_tf_map _1c_map 
[   1.234][d][vo/gpu-next/libplacebo] [147] #define conv2d_3_tf_size vec2(textureSize(_1b, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [148] #define conv2d_3_tf_pt _1d 
[   1.234][d][vo/gpu-next/libplacebo] [149] #define conv2d_3_tf_off _1e 
[   1.234][d][vo/gpu-next/libplacebo] [150] const float _1f = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [151] #define conv2d_3_tf_mul _1f 
[   1.234][d][vo/gpu-next/libplacebo] [152] #define conv2d_3_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [153] #define conv2d_3_tf_tex(pos) (_1f * vec4(textureLod(_1b, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [154] #define conv2d_3_tf_texOff(off) (conv2d_3_tf_tex(_1c + _1d * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [155] #define conv2d_3_tf_gather(pos, c) (_1f * vec4(textureGather(_1b, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [156] #define conv2d_3_tf1_raw _20 
[   1.234][d][vo/gpu-next/libplacebo] [157] #define conv2d_3_tf1_pos _21 
[   1.234][d][vo/gpu-next/libplacebo] [158] #define conv2d_3_tf1_map _21_map 
[   1.234][d][vo/gpu-next/libplacebo] [159] #define conv2d_3_tf1_size vec2(textureSize(_20, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [160] #define conv2d_3_tf1_pt _22 
[   1.234][d][vo/gpu-next/libplacebo] [161] #define conv2d_3_tf1_off _23 
[   1.234][d][vo/gpu-next/libplacebo] [162] const float _24 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [163] #define conv2d_3_tf1_mul _24 
[   1.234][d][vo/gpu-next/libplacebo] [164] #define conv2d_3_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [165] #define conv2d_3_tf1_tex(pos) (_24 * vec4(textureLod(_20, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [166] #define conv2d_3_tf1_texOff(off) (conv2d_3_tf1_tex(_21 + _22 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [167] #define conv2d_3_tf1_gather(pos, c) (_24 * vec4(textureGather(_20, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [168] #define conv2d_4_tf_raw _25 
[   1.234][d][vo/gpu-next/libplacebo] [169] #define conv2d_4_tf_pos _26 
[   1.234][d][vo/gpu-next/libplacebo] [170] #define conv2d_4_tf_map _26_map 
[   1.234][d][vo/gpu-next/libplacebo] [171] #define conv2d_4_tf_size vec2(textureSize(_25, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [172] #define conv2d_4_tf_pt _27 
[   1.234][d][vo/gpu-next/libplacebo] [173] #define conv2d_4_tf_off _28 
[   1.234][d][vo/gpu-next/libplacebo] [174] const float _29 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [175] #define conv2d_4_tf_mul _29 
[   1.234][d][vo/gpu-next/libplacebo] [176] #define conv2d_4_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [177] #define conv2d_4_tf_tex(pos) (_29 * vec4(textureLod(_25, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [178] #define conv2d_4_tf_texOff(off) (conv2d_4_tf_tex(_26 + _27 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [179] #define conv2d_4_tf_gather(pos, c) (_29 * vec4(textureGather(_25, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [180] #define conv2d_4_tf1_raw _2a 
[   1.234][d][vo/gpu-next/libplacebo] [181] #define conv2d_4_tf1_pos _2b 
[   1.234][d][vo/gpu-next/libplacebo] [182] #define conv2d_4_tf1_map _2b_map 
[   1.234][d][vo/gpu-next/libplacebo] [183] #define conv2d_4_tf1_size vec2(textureSize(_2a, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [184] #define conv2d_4_tf1_pt _2c 
[   1.234][d][vo/gpu-next/libplacebo] [185] #define conv2d_4_tf1_off _2d 
[   1.234][d][vo/gpu-next/libplacebo] [186] const float _2e = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [187] #define conv2d_4_tf1_mul _2e 
[   1.234][d][vo/gpu-next/libplacebo] [188] #define conv2d_4_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [189] #define conv2d_4_tf1_tex(pos) (_2e * vec4(textureLod(_2a, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [190] #define conv2d_4_tf1_texOff(off) (conv2d_4_tf1_tex(_2b + _2c * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [191] #define conv2d_4_tf1_gather(pos, c) (_2e * vec4(textureGather(_2a, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [192] #define conv2d_5_tf_raw _2f 
[   1.234][d][vo/gpu-next/libplacebo] [193] #define conv2d_5_tf_pos _30 
[   1.234][d][vo/gpu-next/libplacebo] [194] #define conv2d_5_tf_map _30_map 
[   1.234][d][vo/gpu-next/libplacebo] [195] #define conv2d_5_tf_size vec2(textureSize(_2f, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [196] #define conv2d_5_tf_pt _31 
[   1.234][d][vo/gpu-next/libplacebo] [197] #define conv2d_5_tf_off _32 
[   1.234][d][vo/gpu-next/libplacebo] [198] const float _33 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [199] #define conv2d_5_tf_mul _33 
[   1.234][d][vo/gpu-next/libplacebo] [200] #define conv2d_5_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [201] #define conv2d_5_tf_tex(pos) (_33 * vec4(textureLod(_2f, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [202] #define conv2d_5_tf_texOff(off) (conv2d_5_tf_tex(_30 + _31 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [203] #define conv2d_5_tf_gather(pos, c) (_33 * vec4(textureGather(_2f, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [204] #define conv2d_5_tf1_raw _34 
[   1.234][d][vo/gpu-next/libplacebo] [205] #define conv2d_5_tf1_pos _35 
[   1.234][d][vo/gpu-next/libplacebo] [206] #define conv2d_5_tf1_map _35_map 
[   1.234][d][vo/gpu-next/libplacebo] [207] #define conv2d_5_tf1_size vec2(textureSize(_34, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [208] #define conv2d_5_tf1_pt _36 
[   1.234][d][vo/gpu-next/libplacebo] [209] #define conv2d_5_tf1_off _37 
[   1.234][d][vo/gpu-next/libplacebo] [210] const float _38 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [211] #define conv2d_5_tf1_mul _38 
[   1.234][d][vo/gpu-next/libplacebo] [212] #define conv2d_5_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [213] #define conv2d_5_tf1_tex(pos) (_38 * vec4(textureLod(_34, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [214] #define conv2d_5_tf1_texOff(off) (conv2d_5_tf1_tex(_35 + _36 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [215] #define conv2d_5_tf1_gather(pos, c) (_38 * vec4(textureGather(_34, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [216] #define conv2d_6_tf_raw _39 
[   1.234][d][vo/gpu-next/libplacebo] [217] #define conv2d_6_tf_pos _3a 
[   1.234][d][vo/gpu-next/libplacebo] [218] #define conv2d_6_tf_map _3a_map 
[   1.234][d][vo/gpu-next/libplacebo] [219] #define conv2d_6_tf_size vec2(textureSize(_39, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [220] #define conv2d_6_tf_pt _3b 
[   1.234][d][vo/gpu-next/libplacebo] [221] #define conv2d_6_tf_off _3c 
[   1.234][d][vo/gpu-next/libplacebo] [222] const float _3d = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [223] #define conv2d_6_tf_mul _3d 
[   1.234][d][vo/gpu-next/libplacebo] [224] #define conv2d_6_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [225] #define conv2d_6_tf_tex(pos) (_3d * vec4(textureLod(_39, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [226] #define conv2d_6_tf_texOff(off) (conv2d_6_tf_tex(_3a + _3b * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [227] #define conv2d_6_tf_gather(pos, c) (_3d * vec4(textureGather(_39, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [228] #define conv2d_6_tf1_raw _3e 
[   1.234][d][vo/gpu-next/libplacebo] [229] #define conv2d_6_tf1_pos _3f 
[   1.234][d][vo/gpu-next/libplacebo] [230] #define conv2d_6_tf1_map _3f_map 
[   1.234][d][vo/gpu-next/libplacebo] [231] #define conv2d_6_tf1_size vec2(textureSize(_3e, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [232] #define conv2d_6_tf1_pt _40 
[   1.234][d][vo/gpu-next/libplacebo] [233] #define conv2d_6_tf1_off _41 
[   1.234][d][vo/gpu-next/libplacebo] [234] const float _42 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [235] #define conv2d_6_tf1_mul _42 
[   1.234][d][vo/gpu-next/libplacebo] [236] #define conv2d_6_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [237] #define conv2d_6_tf1_tex(pos) (_42 * vec4(textureLod(_3e, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [238] #define conv2d_6_tf1_texOff(off) (conv2d_6_tf1_tex(_3f + _40 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [239] #define conv2d_6_tf1_gather(pos, c) (_42 * vec4(textureGather(_3e, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [240] #define conv2d_7_tf_raw _43 
[   1.234][d][vo/gpu-next/libplacebo] [241] #define conv2d_7_tf_pos _44 
[   1.234][d][vo/gpu-next/libplacebo] [242] #define conv2d_7_tf_map _44_map 
[   1.234][d][vo/gpu-next/libplacebo] [243] #define conv2d_7_tf_size vec2(textureSize(_43, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [244] #define conv2d_7_tf_pt _45 
[   1.234][d][vo/gpu-next/libplacebo] [245] #define conv2d_7_tf_off _46 
[   1.234][d][vo/gpu-next/libplacebo] [246] const float _47 = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [247] #define conv2d_7_tf_mul _47 
[   1.234][d][vo/gpu-next/libplacebo] [248] #define conv2d_7_tf_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [249] #define conv2d_7_tf_tex(pos) (_47 * vec4(textureLod(_43, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [250] #define conv2d_7_tf_texOff(off) (conv2d_7_tf_tex(_44 + _45 * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [251] #define conv2d_7_tf_gather(pos, c) (_47 * vec4(textureGather(_43, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [252] #define conv2d_7_tf1_raw _48 
[   1.234][d][vo/gpu-next/libplacebo] [253] #define conv2d_7_tf1_pos _49 
[   1.234][d][vo/gpu-next/libplacebo] [254] #define conv2d_7_tf1_map _49_map 
[   1.234][d][vo/gpu-next/libplacebo] [255] #define conv2d_7_tf1_size vec2(textureSize(_48, 0)) 
[   1.234][d][vo/gpu-next/libplacebo] [256] #define conv2d_7_tf1_pt _4a 
[   1.234][d][vo/gpu-next/libplacebo] [257] #define conv2d_7_tf1_off _4b 
[   1.234][d][vo/gpu-next/libplacebo] [258] const float _4c = float(1); 
[   1.234][d][vo/gpu-next/libplacebo] [259] #define conv2d_7_tf1_mul _4c 
[   1.234][d][vo/gpu-next/libplacebo] [260] #define conv2d_7_tf1_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.234][d][vo/gpu-next/libplacebo] [261] #define conv2d_7_tf1_tex(pos) (_4c * vec4(textureLod(_48, pos, 0.0))) 
[   1.234][d][vo/gpu-next/libplacebo] [262] #define conv2d_7_tf1_texOff(off) (conv2d_7_tf1_tex(_49 + _4a * vec2(off))) 
[   1.234][d][vo/gpu-next/libplacebo] [263] #define conv2d_7_tf1_gather(pos, c) (_4c * vec4(textureGather(_48, pos, c))) 
[   1.234][d][vo/gpu-next/libplacebo] [264] #define frame _4d 
[   1.234][d][vo/gpu-next/libplacebo] [265] #define random _4e 
[   1.234][d][vo/gpu-next/libplacebo] [266] #define input_size _4f 
[   1.234][d][vo/gpu-next/libplacebo] [267] #define target_size _50 
[   1.234][d][vo/gpu-next/libplacebo] [268] #define tex_offset _51 
[   1.234][d][vo/gpu-next/libplacebo] [269] const float _8002 = float(0.8703105449676514); 
[   1.234][d][vo/gpu-next/libplacebo] [270] const float _8003 = float(0.0595848374068737); 
[   1.234][d][vo/gpu-next/libplacebo] [271] vec4 _8001(vec4 color) {
[   1.234][d][vo/gpu-next/libplacebo] [272] // pl_shader_linearize           
[   1.234][d][vo/gpu-next/libplacebo] [273] color.rgb = max(color.rgb, 0.0); 
[   1.234][d][vo/gpu-next/libplacebo] [274] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.234][d][vo/gpu-next/libplacebo] [275] return color;
[   1.234][d][vo/gpu-next/libplacebo] [276] }
[   1.234][d][vo/gpu-next/libplacebo] [277] 
[   1.234][d][vo/gpu-next/libplacebo] [278] #define linearize _8001 
[   1.234][d][vo/gpu-next/libplacebo] [279] const float _4002 = float(1.149015188217163); 
[   1.234][d][vo/gpu-next/libplacebo] [280] const float _4003 = float(0.0595848374068737); 
[   1.234][d][vo/gpu-next/libplacebo] [281] vec4 _4001(vec4 color) {
[   1.234][d][vo/gpu-next/libplacebo] [282] // pl_shader_delinearize 
[   1.234][d][vo/gpu-next/libplacebo] [283] color.rgb = max(color.rgb, 0.0); 
[   1.234][d][vo/gpu-next/libplacebo] [284] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.234][d][vo/gpu-next/libplacebo] [285] return color;
[   1.234][d][vo/gpu-next/libplacebo] [286] }
[   1.234][d][vo/gpu-next/libplacebo] [287] 
[   1.234][d][vo/gpu-next/libplacebo] [288] #define delinearize _4001 
[   1.234][d][vo/gpu-next/libplacebo] [289] #define g_0 (max((conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [290] #define g_1 (max((conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [291] #define g_2 (max(-(conv2d_1_tf_tex(conv2d_1_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [292] #define g_3 (max(-(conv2d_1_tf1_tex(conv2d_1_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [293] #define g_4 (max((conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [294] #define g_5 (max((conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [295] #define g_6 (max(-(conv2d_2_tf_tex(conv2d_2_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [296] #define g_7 (max(-(conv2d_2_tf1_tex(conv2d_2_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [297] #define g_8 (max((conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [298] #define g_9 (max((conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [299] #define g_10 (max(-(conv2d_3_tf_tex(conv2d_3_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [300] #define g_11 (max(-(conv2d_3_tf1_tex(conv2d_3_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [301] #define g_12 (max((conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [302] #define g_13 (max((conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [303] #define g_14 (max(-(conv2d_4_tf_tex(conv2d_4_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [304] #define g_15 (max(-(conv2d_4_tf1_tex(conv2d_4_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [305] #define g_16 (max((conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [306] #define g_17 (max((conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [307] #define g_18 (max(-(conv2d_5_tf_tex(conv2d_5_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [308] #define g_19 (max(-(conv2d_5_tf1_tex(conv2d_5_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [309] #define g_20 (max((conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [310] #define g_21 (max((conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [311] #define g_22 (max(-(conv2d_6_tf_tex(conv2d_6_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [312] #define g_23 (max(-(conv2d_6_tf1_tex(conv2d_6_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [313] #define g_24 (max((conv2d_7_tf_tex(conv2d_7_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [314] #define g_25 (max((conv2d_7_tf1_tex(conv2d_7_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [315] #define g_26 (max(-(conv2d_7_tf_tex(conv2d_7_tf_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [316] #define g_27 (max(-(conv2d_7_tf1_tex(conv2d_7_tf1_pos)), 0.0))
[   1.234][d][vo/gpu-next/libplacebo] [317] vec4 hook() {
[   1.234][d][vo/gpu-next/libplacebo] [318]     vec4 result = mat4(0.09689336, 0.06046458, 0.072598994, 0.0, 0.11994565, 0.104477674, 0.09302802, 0.0, -0.05718302, 0.050438102, 0.08814741, 0.0, 0.0308889, 0.0033925986, -0.01715605, 0.0) * g_0;
[   1.234][d][vo/gpu-next/libplacebo] [319]     result += mat4(-0.028314235, 0.06597744, 0.0966897, 0.0, 0.035656154, 0.07770106, 0.075551905, 0.0, 0.0001793458, -0.000479495, -0.00297406, 0.0, -0.053916585, -0.016807461, -0.0057141334, 0.0) * g_1;
[   1.234][d][vo/gpu-next/libplacebo] [320]     result += mat4(-0.047189303, -0.0207, -0.020910334, 0.0, -0.07933196, -0.06961211, -0.086069845, 0.0, 0.0943727, 0.008463375, 0.010755166, 0.0, 0.062410597, 0.022625161, 0.04068433, 0.0) * g_2;
[   1.234][d][vo/gpu-next/libplacebo] [321]     result += mat4(0.10270994, -0.019080428, 0.0050091282, 0.0, -0.004672948, -0.013966742, -0.0063746064, 0.0, -2.5856789e-05, 0.03151499, -0.0023983798, 0.0, 0.113539025, 0.12381699, 0.100360274, 0.0) * g_3;
[   1.234][d][vo/gpu-next/libplacebo] [322]     result += mat4(0.07868885, -0.030913834, -0.009213676, 0.0, 0.04870991, 0.021467991, 0.038739506, 0.0, -0.042969644, -0.07122453, -0.08798675, 0.0, -0.09784122, 0.021434791, 0.02510374, 0.0) * g_4;
[   1.234][d][vo/gpu-next/libplacebo] [323]     result += mat4(0.050420716, 0.0729716, 0.076532185, 0.0, -0.019112485, -0.01037939, -0.026948035, 0.0, -0.02591423, 0.008927897, -0.00042541025, 0.0, 0.1043701, -0.0071186824, -0.041817162, 0.0) * g_5;
[   1.234][d][vo/gpu-next/libplacebo] [324]     result += mat4(-0.16143242, -0.0009298223, -0.01228508, 0.0, 0.07744052, -0.018313263, -0.0488145, 0.0, 0.09241393, 0.07128674, 0.055164956, 0.0, 0.054884013, -0.04834418, -0.06281626, 0.0) * g_6;
[   1.234][d][vo/gpu-next/libplacebo] [325]     result += mat4(-0.049036566, -0.05979936, -0.05594288, 0.0, -0.014564307, 0.031926468, 0.037857566, 0.0, 0.015474487, -0.11385003, -0.11527764, 0.0, -0.07076006, 0.057038613, 0.095983796, 0.0) * g_7;
[   1.234][d][vo/gpu-next/libplacebo] [326]     result += mat4(0.03094887, -0.008734403, 0.00042712069, 0.0, 0.053891554, 0.05837673, 0.06200635, 0.0, 0.09071558, -0.04202184, -0.046172567, 0.0, -0.0425916, 0.04905093, 0.020835675, 0.0) * g_8;
[   1.234][d][vo/gpu-next/libplacebo] [327]     result += mat4(0.096628904, -0.037792254, -0.043241944, 0.0, -0.011923947, -0.025950424, -0.031381752, 0.0, -0.060941868, -0.07859433, -0.07535451, 0.0, -0.026777223, 0.08604982, 0.07829908, 0.0) * g_9;
[   1.234][d][vo/gpu-next/libplacebo] [328]     result += mat4(-0.06435972, 0.0036599538, 0.00786578, 0.0, -0.061972067, -0.05681472, -0.06667608, 0.0, -0.106890626, 0.007406496, 0.029977169, 0.0, -0.20519382, -0.044860814, 0.0021225857, 0.0) * g_10;
[   1.234][d][vo/gpu-next/libplacebo] [329]     result += mat4(-0.16876474, 0.012789643, 0.026692612, 0.0, 0.017817136, 0.026935097, 0.02227043, 0.0, 0.01690181, 0.07716103, 0.086527, 0.0, 0.07923805, -0.10443151, -0.10859543, 0.0) * g_11;
[   1.234][d][vo/gpu-next/libplacebo] [330]     result += mat4(0.003730466, -0.024648283, -0.022169832, 0.0, -0.0062762927, 0.022062732, 0.032966793, 0.0, 0.016349113, 0.017197203, 0.020952817, 0.0, -0.1763789, 0.035497356, 0.053835396, 0.0) * g_12;
[   1.234][d][vo/gpu-next/libplacebo] [331]     result += mat4(0.020886675, -0.07054202, -0.079142675, 0.0, 0.06664387, 0.044960167, 0.042230908, 0.0, -0.095019594, 0.012421141, 0.0142890485, 0.0, 0.056814816, -0.012751135, -0.014684506, 0.0) * g_13;
[   1.234][d][vo/gpu-next/libplacebo] [332]     result += mat4(0.011765893, 0.0008920681, -0.0018258415, 0.0, -0.010473814, -0.023085753, -0.028783914, 0.0, -0.023034256, -0.0024786016, -0.0052162083, 0.0, 0.1643386, -0.06132718, -0.09289065, 0.0) * g_14;
[   1.234][d][vo/gpu-next/libplacebo] [333]     result += mat4(0.016597198, 0.09389637, 0.10833379, 0.0, -0.043163072, -0.04714812, -0.035274632, 0.0, 0.09634976, -0.009292612, -0.022424143, 0.0, -0.08765172, 0.0051558353, 0.010900356, 0.0) * g_15;
[   1.234][d][vo/gpu-next/libplacebo] [334]     result += mat4(0.030815786, 0.021069322, 0.01812191, 0.0, 0.084839165, -0.0080813095, -0.029270556, 0.0, -0.10456346, 0.062386703, 0.0665605, 0.0, 0.11926609, -0.1104228, -0.13291118, 0.0) * g_16;
[   1.234][d][vo/gpu-next/libplacebo] [335]     result += mat4(-0.07159541, -0.007267032, -0.010134558, 0.0, 0.008234213, 0.045609634, 0.040295456, 0.0, 0.018416971, 0.01308482, 0.014649557, 0.0, 0.035107512, -0.02140815, -0.030279048, 0.0) * g_17;
[   1.234][d][vo/gpu-next/libplacebo] [336]     result += mat4(0.01918586, 0.03875863, 0.03229402, 0.0, -0.07917104, 0.041135103, 0.057182517, 0.0, 0.08609541, 0.0079662455, 0.004327576, 0.0, -0.14332893, 0.03120354, 0.056732506, 0.0) * g_18;
[   1.234][d][vo/gpu-next/libplacebo] [337]     result += mat4(0.03200192, -0.0035752193, -0.0031064528, 0.0, -0.010902813, 0.014607456, 0.019431474, 0.0, -0.016461229, -0.004938204, -0.004655488, 0.0, -0.033470232, 0.0026075812, 0.005896968, 0.0) * g_19;
[   1.234][d][vo/gpu-next/libplacebo] [338]     result += mat4(0.037410006, 0.048742272, 0.04348088, 0.0, 0.037719514, 0.030768529, 0.03127472, 0.0, 0.056426726, 0.03066893, 0.016440205, 0.0, -0.010599352, 0.022832409, 0.023211194, 0.0) * g_20;
[   1.234][d][vo/gpu-next/libplacebo] [339]     result += mat4(-0.005733291, 0.06365659, 0.06663611, 0.0, -0.041917093, -0.016493445, -0.020438088, 0.0, -0.0014357592, -0.0022506563, -0.0045095007, 0.0, 0.029893145, -0.009129354, -0.015173116, 0.0) * g_21;
[   1.234][d][vo/gpu-next/libplacebo] [340]     result += mat4(0.013052085, 0.005108175, 0.0025906067, 0.0, -0.021950055, -0.036447693, -0.036141638, 0.0, -0.036296472, 0.0068928464, 0.013102313, 0.0, 0.0060471976, -0.024798103, -0.023548538, 0.0) * g_22;
[   1.234][d][vo/gpu-next/libplacebo] [341]     result += mat4(0.0067743887, -0.06191211, -0.062355213, 0.0, 0.0016080744, -0.020445071, -0.016840393, 0.0, 0.028264903, 0.01852915, 0.015891539, 0.0, -0.023877412, -0.013271666, -0.008158679, 0.0) * g_23;
[   1.234][d][vo/gpu-next/libplacebo] [342]     result += mat4(-0.04317466, -0.018953001, -0.020452993, 0.0, -0.009322576, -0.03022352, -0.030970376, 0.0, 0.05653658, 0.05430553, 0.046692245, 0.0, 0.05615359, 0.059338935, 0.056018773, 0.0) * g_24;
[   1.234][d][vo/gpu-next/libplacebo] [343]     result += mat4(0.022878079, 0.03392234, 0.033057988, 0.0, -0.017554542, -0.0141542535, -0.014122613, 0.0, -0.048634093, -0.05316463, -0.047988772, 0.0, -0.058002178, -0.040221967, -0.034025013, 0.0) * g_25;
[   1.234][d][vo/gpu-next/libplacebo] [344]     result += mat4(-0.018253656, -0.04197674, -0.040467236, 0.0, -0.04358929, -0.028309818, -0.025425073, 0.0, -0.008488672, -0.001727991, 0.00035808363, 0.0, -0.0011709273, 0.0052514165, 0.0059479307, 0.0) * g_26;
[   1.234][d][vo/gpu-next/libplacebo] [345]     result += mat4(-0.08333935, -0.09818201, -0.09476284, 0.0, -0.033692095, -0.046259012, -0.045797516, 0.0, -0.007577072, 0.0022402718, 0.0016200038, 0.0, 0.0029786075, -0.020728534, -0.018938033, 0.0) * g_27;
[   1.234][d][vo/gpu-next/libplacebo] [346]     result += vec4(0.047567394, -0.02504617, -0.028163986, 0.0);
[   1.234][d][vo/gpu-next/libplacebo] [347]     return result + MAIN_tex(MAIN_pos);
[   1.234][d][vo/gpu-next/libplacebo] [348] }
[   1.234][d][vo/gpu-next/libplacebo] [349] vec4 _1() {
[   1.234][d][vo/gpu-next/libplacebo] [350] vec4 color = hook(); 
[   1.234][d][vo/gpu-next/libplacebo] [351] return color;
[   1.234][d][vo/gpu-next/libplacebo] [352] }
[   1.234][d][vo/gpu-next/libplacebo] [353] 
[   1.234][d][vo/gpu-next/libplacebo] [354] void main() {
[   1.234][d][vo/gpu-next/libplacebo] [355] out_color = _1();
[   1.234][d][vo/gpu-next/libplacebo] [356] }
[   1.236][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.236][d][vo/gpu-next/libplacebo] Spent 1.920 ms translating GLSL to SPIR-V
[   1.236][d][vo/gpu-next/libplacebo] Spent 0.163 ms translating SPIR-V to HLSL
[   1.239][d][vo/gpu-next/libplacebo] Spent 2.223 ms translating HLSL to DXBC
[   1.239][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.239][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.239][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.239][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.239][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.239][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.239][d][vo/gpu-next/libplacebo] [  6] static float2 _16;
[   1.239][d][vo/gpu-next/libplacebo] [  7] static float2 _17;
[   1.239][d][vo/gpu-next/libplacebo] [  8] static float2 _19;
[   1.239][d][vo/gpu-next/libplacebo] [  9] static float2 _20;
[   1.239][d][vo/gpu-next/libplacebo] [ 10] static float2 _22;
[   1.239][d][vo/gpu-next/libplacebo] [ 11] static float2 _23;
[   1.239][d][vo/gpu-next/libplacebo] [ 12] static float2 _25;
[   1.239][d][vo/gpu-next/libplacebo] [ 13] static float2 _26;
[   1.239][d][vo/gpu-next/libplacebo] [ 14] static float2 _28;
[   1.239][d][vo/gpu-next/libplacebo] [ 15] static float2 _29;
[   1.239][d][vo/gpu-next/libplacebo] [ 16] static float2 _31;
[   1.239][d][vo/gpu-next/libplacebo] [ 17] static float2 _32;
[   1.239][d][vo/gpu-next/libplacebo] [ 18] static float2 _34;
[   1.239][d][vo/gpu-next/libplacebo] [ 19] static float2 _35;
[   1.239][d][vo/gpu-next/libplacebo] [ 20] static float2 _37;
[   1.239][d][vo/gpu-next/libplacebo] [ 21] static float2 _38;
[   1.239][d][vo/gpu-next/libplacebo] [ 22] static float2 _40;
[   1.239][d][vo/gpu-next/libplacebo] [ 23] static float2 _41;
[   1.239][d][vo/gpu-next/libplacebo] [ 24] static float2 _43;
[   1.239][d][vo/gpu-next/libplacebo] [ 25] static float2 _44;
[   1.239][d][vo/gpu-next/libplacebo] [ 26] static float2 _46;
[   1.239][d][vo/gpu-next/libplacebo] [ 27] static float2 _47;
[   1.239][d][vo/gpu-next/libplacebo] [ 28] static float2 _49;
[   1.239][d][vo/gpu-next/libplacebo] [ 29] static float2 _50;
[   1.239][d][vo/gpu-next/libplacebo] [ 30] static float2 _52;
[   1.239][d][vo/gpu-next/libplacebo] [ 31] static float2 _53;
[   1.239][d][vo/gpu-next/libplacebo] [ 32] static float2 _57;
[   1.239][d][vo/gpu-next/libplacebo] [ 33] 
[   1.239][d][vo/gpu-next/libplacebo] [ 34] struct SPIRV_Cross_Input
[   1.239][d][vo/gpu-next/libplacebo] [ 35] {
[   1.239][d][vo/gpu-next/libplacebo] [ 36]     float2 _11 : TEXCOORD0;
[   1.239][d][vo/gpu-next/libplacebo] [ 37]     float2 _14 : TEXCOORD1;
[   1.239][d][vo/gpu-next/libplacebo] [ 38]     float2 _17 : TEXCOORD2;
[   1.239][d][vo/gpu-next/libplacebo] [ 39]     float2 _20 : TEXCOORD3;
[   1.239][d][vo/gpu-next/libplacebo] [ 40]     float2 _23 : TEXCOORD4;
[   1.239][d][vo/gpu-next/libplacebo] [ 41]     float2 _26 : TEXCOORD5;
[   1.239][d][vo/gpu-next/libplacebo] [ 42]     float2 _29 : TEXCOORD6;
[   1.239][d][vo/gpu-next/libplacebo] [ 43]     float2 _32 : TEXCOORD7;
[   1.239][d][vo/gpu-next/libplacebo] [ 44]     float2 _35 : TEXCOORD8;
[   1.239][d][vo/gpu-next/libplacebo] [ 45]     float2 _38 : TEXCOORD9;
[   1.239][d][vo/gpu-next/libplacebo] [ 46]     float2 _41 : TEXCOORD10;
[   1.239][d][vo/gpu-next/libplacebo] [ 47]     float2 _44 : TEXCOORD11;
[   1.239][d][vo/gpu-next/libplacebo] [ 48]     float2 _47 : TEXCOORD12;
[   1.239][d][vo/gpu-next/libplacebo] [ 49]     float2 _50 : TEXCOORD13;
[   1.239][d][vo/gpu-next/libplacebo] [ 50]     float2 _53 : TEXCOORD14;
[   1.239][d][vo/gpu-next/libplacebo] [ 51]     float2 _57 : TEXCOORD15;
[   1.239][d][vo/gpu-next/libplacebo] [ 52] };
[   1.239][d][vo/gpu-next/libplacebo] [ 53] 
[   1.239][d][vo/gpu-next/libplacebo] [ 54] struct SPIRV_Cross_Output
[   1.239][d][vo/gpu-next/libplacebo] [ 55] {
[   1.239][d][vo/gpu-next/libplacebo] [ 56]     float2 _9 : TEXCOORD0;
[   1.239][d][vo/gpu-next/libplacebo] [ 57]     float2 _13 : TEXCOORD1;
[   1.239][d][vo/gpu-next/libplacebo] [ 58]     float2 _16 : TEXCOORD2;
[   1.239][d][vo/gpu-next/libplacebo] [ 59]     float2 _19 : TEXCOORD3;
[   1.239][d][vo/gpu-next/libplacebo] [ 60]     float2 _22 : TEXCOORD4;
[   1.239][d][vo/gpu-next/libplacebo] [ 61]     float2 _25 : TEXCOORD5;
[   1.239][d][vo/gpu-next/libplacebo] [ 62]     float2 _28 : TEXCOORD6;
[   1.239][d][vo/gpu-next/libplacebo] [ 63]     float2 _31 : TEXCOORD7;
[   1.239][d][vo/gpu-next/libplacebo] [ 64]     float2 _34 : TEXCOORD8;
[   1.239][d][vo/gpu-next/libplacebo] [ 65]     float2 _37 : TEXCOORD9;
[   1.239][d][vo/gpu-next/libplacebo] [ 66]     float2 _40 : TEXCOORD10;
[   1.239][d][vo/gpu-next/libplacebo] [ 67]     float2 _43 : TEXCOORD11;
[   1.239][d][vo/gpu-next/libplacebo] [ 68]     float2 _46 : TEXCOORD12;
[   1.239][d][vo/gpu-next/libplacebo] [ 69]     float2 _49 : TEXCOORD13;
[   1.239][d][vo/gpu-next/libplacebo] [ 70]     float2 _52 : TEXCOORD14;
[   1.239][d][vo/gpu-next/libplacebo] [ 71]     float4 gl_Position : SV_Position;
[   1.239][d][vo/gpu-next/libplacebo] [ 72] };
[   1.239][d][vo/gpu-next/libplacebo] [ 73] 
[   1.239][d][vo/gpu-next/libplacebo] [ 74] void vert_main()
[   1.239][d][vo/gpu-next/libplacebo] [ 75] {
[   1.239][d][vo/gpu-next/libplacebo] [ 76]     _9 = _11;
[   1.239][d][vo/gpu-next/libplacebo] [ 77]     _13 = _14;
[   1.239][d][vo/gpu-next/libplacebo] [ 78]     _16 = _17;
[   1.239][d][vo/gpu-next/libplacebo] [ 79]     _19 = _20;
[   1.239][d][vo/gpu-next/libplacebo] [ 80]     _22 = _23;
[   1.239][d][vo/gpu-next/libplacebo] [ 81]     _25 = _26;
[   1.239][d][vo/gpu-next/libplacebo] [ 82]     _28 = _29;
[   1.239][d][vo/gpu-next/libplacebo] [ 83]     _31 = _32;
[   1.239][d][vo/gpu-next/libplacebo] [ 84]     _34 = _35;
[   1.239][d][vo/gpu-next/libplacebo] [ 85]     _37 = _38;
[   1.239][d][vo/gpu-next/libplacebo] [ 86]     _40 = _41;
[   1.239][d][vo/gpu-next/libplacebo] [ 87]     _43 = _44;
[   1.239][d][vo/gpu-next/libplacebo] [ 88]     _46 = _47;
[   1.239][d][vo/gpu-next/libplacebo] [ 89]     _49 = _50;
[   1.239][d][vo/gpu-next/libplacebo] [ 90]     _52 = _53;
[   1.239][d][vo/gpu-next/libplacebo] [ 91]     gl_Position = float4(_57, 0.0f, 1.0f);
[   1.239][d][vo/gpu-next/libplacebo] [ 92]     gl_Position.y = -gl_Position.y;
[   1.239][d][vo/gpu-next/libplacebo] [ 93] }
[   1.239][d][vo/gpu-next/libplacebo] [ 94] 
[   1.239][d][vo/gpu-next/libplacebo] [ 95] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.239][d][vo/gpu-next/libplacebo] [ 96] {
[   1.239][d][vo/gpu-next/libplacebo] [ 97]     _11 = stage_input._11;
[   1.239][d][vo/gpu-next/libplacebo] [ 98]     _14 = stage_input._14;
[   1.239][d][vo/gpu-next/libplacebo] [ 99]     _17 = stage_input._17;
[   1.239][d][vo/gpu-next/libplacebo] [100]     _20 = stage_input._20;
[   1.239][d][vo/gpu-next/libplacebo] [101]     _23 = stage_input._23;
[   1.239][d][vo/gpu-next/libplacebo] [102]     _26 = stage_input._26;
[   1.239][d][vo/gpu-next/libplacebo] [103]     _29 = stage_input._29;
[   1.239][d][vo/gpu-next/libplacebo] [104]     _32 = stage_input._32;
[   1.239][d][vo/gpu-next/libplacebo] [105]     _35 = stage_input._35;
[   1.239][d][vo/gpu-next/libplacebo] [106]     _38 = stage_input._38;
[   1.239][d][vo/gpu-next/libplacebo] [107]     _41 = stage_input._41;
[   1.239][d][vo/gpu-next/libplacebo] [108]     _44 = stage_input._44;
[   1.239][d][vo/gpu-next/libplacebo] [109]     _47 = stage_input._47;
[   1.239][d][vo/gpu-next/libplacebo] [110]     _50 = stage_input._50;
[   1.239][d][vo/gpu-next/libplacebo] [111]     _53 = stage_input._53;
[   1.239][d][vo/gpu-next/libplacebo] [112]     _57 = stage_input._57;
[   1.239][d][vo/gpu-next/libplacebo] [113]     vert_main();
[   1.239][d][vo/gpu-next/libplacebo] [114]     SPIRV_Cross_Output stage_output;
[   1.239][d][vo/gpu-next/libplacebo] [115]     stage_output.gl_Position = gl_Position;
[   1.239][d][vo/gpu-next/libplacebo] [116]     stage_output._9 = _9;
[   1.239][d][vo/gpu-next/libplacebo] [117]     stage_output._13 = _13;
[   1.239][d][vo/gpu-next/libplacebo] [118]     stage_output._16 = _16;
[   1.239][d][vo/gpu-next/libplacebo] [119]     stage_output._19 = _19;
[   1.239][d][vo/gpu-next/libplacebo] [120]     stage_output._22 = _22;
[   1.239][d][vo/gpu-next/libplacebo] [121]     stage_output._25 = _25;
[   1.239][d][vo/gpu-next/libplacebo] [122]     stage_output._28 = _28;
[   1.239][d][vo/gpu-next/libplacebo] [123]     stage_output._31 = _31;
[   1.239][d][vo/gpu-next/libplacebo] [124]     stage_output._34 = _34;
[   1.239][d][vo/gpu-next/libplacebo] [125]     stage_output._37 = _37;
[   1.239][d][vo/gpu-next/libplacebo] [126]     stage_output._40 = _40;
[   1.239][d][vo/gpu-next/libplacebo] [127]     stage_output._43 = _43;
[   1.239][d][vo/gpu-next/libplacebo] [128]     stage_output._46 = _46;
[   1.239][d][vo/gpu-next/libplacebo] [129]     stage_output._49 = _49;
[   1.239][d][vo/gpu-next/libplacebo] [130]     stage_output._52 = _52;
[   1.239][d][vo/gpu-next/libplacebo] [131]     return stage_output;
[   1.239][d][vo/gpu-next/libplacebo] [132] }
[   1.245][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.245][d][vo/gpu-next/libplacebo] Spent 6.639 ms translating GLSL to SPIR-V
[   1.246][d][vo/gpu-next/libplacebo] Spent 0.816 ms translating SPIR-V to HLSL
[   1.264][v][vo/gpu-next/libplacebo] Spent 18.224 ms translating HLSL to DXBC
[   1.265][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.265][d][vo/gpu-next/libplacebo] [  1] Texture2D<float4> _38 : register(t0);
[   1.265][d][vo/gpu-next/libplacebo] [  2] SamplerState __38_sampler : register(s0);
[   1.265][d][vo/gpu-next/libplacebo] [  3] Texture2D<float4> _66 : register(t1);
[   1.265][d][vo/gpu-next/libplacebo] [  4] SamplerState __66_sampler : register(s1);
[   1.265][d][vo/gpu-next/libplacebo] [  5] Texture2D<float4> _148 : register(t2);
[   1.265][d][vo/gpu-next/libplacebo] [  6] SamplerState __148_sampler : register(s2);
[   1.265][d][vo/gpu-next/libplacebo] [  7] Texture2D<float4> _176 : register(t3);
[   1.265][d][vo/gpu-next/libplacebo] [  8] SamplerState __176_sampler : register(s3);
[   1.265][d][vo/gpu-next/libplacebo] [  9] Texture2D<float4> _258 : register(t4);
[   1.265][d][vo/gpu-next/libplacebo] [ 10] SamplerState __258_sampler : register(s4);
[   1.265][d][vo/gpu-next/libplacebo] [ 11] Texture2D<float4> _286 : register(t5);
[   1.265][d][vo/gpu-next/libplacebo] [ 12] SamplerState __286_sampler : register(s5);
[   1.265][d][vo/gpu-next/libplacebo] [ 13] Texture2D<float4> _368 : register(t6);
[   1.265][d][vo/gpu-next/libplacebo] [ 14] SamplerState __368_sampler : register(s6);
[   1.265][d][vo/gpu-next/libplacebo] [ 15] Texture2D<float4> _396 : register(t7);
[   1.265][d][vo/gpu-next/libplacebo] [ 16] SamplerState __396_sampler : register(s7);
[   1.265][d][vo/gpu-next/libplacebo] [ 17] Texture2D<float4> _478 : register(t8);
[   1.265][d][vo/gpu-next/libplacebo] [ 18] SamplerState __478_sampler : register(s8);
[   1.265][d][vo/gpu-next/libplacebo] [ 19] Texture2D<float4> _506 : register(t9);
[   1.265][d][vo/gpu-next/libplacebo] [ 20] SamplerState __506_sampler : register(s9);
[   1.265][d][vo/gpu-next/libplacebo] [ 21] Texture2D<float4> _588 : register(t10);
[   1.265][d][vo/gpu-next/libplacebo] [ 22] SamplerState __588_sampler : register(s10);
[   1.265][d][vo/gpu-next/libplacebo] [ 23] Texture2D<float4> _616 : register(t11);
[   1.265][d][vo/gpu-next/libplacebo] [ 24] SamplerState __616_sampler : register(s11);
[   1.265][d][vo/gpu-next/libplacebo] [ 25] Texture2D<float4> _698 : register(t12);
[   1.265][d][vo/gpu-next/libplacebo] [ 26] SamplerState __698_sampler : register(s12);
[   1.265][d][vo/gpu-next/libplacebo] [ 27] Texture2D<float4> _726 : register(t13);
[   1.265][d][vo/gpu-next/libplacebo] [ 28] SamplerState __726_sampler : register(s13);
[   1.265][d][vo/gpu-next/libplacebo] [ 29] Texture2D<float4> _798 : register(t14);
[   1.265][d][vo/gpu-next/libplacebo] [ 30] SamplerState __798_sampler : register(s14);
[   1.265][d][vo/gpu-next/libplacebo] [ 31] 
[   1.265][d][vo/gpu-next/libplacebo] [ 32] static float2 _42;
[   1.265][d][vo/gpu-next/libplacebo] [ 33] static float2 _68;
[   1.265][d][vo/gpu-next/libplacebo] [ 34] static float2 _150;
[   1.265][d][vo/gpu-next/libplacebo] [ 35] static float2 _178;
[   1.265][d][vo/gpu-next/libplacebo] [ 36] static float2 _260;
[   1.265][d][vo/gpu-next/libplacebo] [ 37] static float2 _288;
[   1.265][d][vo/gpu-next/libplacebo] [ 38] static float2 _370;
[   1.265][d][vo/gpu-next/libplacebo] [ 39] static float2 _398;
[   1.265][d][vo/gpu-next/libplacebo] [ 40] static float2 _480;
[   1.265][d][vo/gpu-next/libplacebo] [ 41] static float2 _508;
[   1.265][d][vo/gpu-next/libplacebo] [ 42] static float2 _590;
[   1.265][d][vo/gpu-next/libplacebo] [ 43] static float2 _618;
[   1.265][d][vo/gpu-next/libplacebo] [ 44] static float2 _700;
[   1.265][d][vo/gpu-next/libplacebo] [ 45] static float2 _728;
[   1.265][d][vo/gpu-next/libplacebo] [ 46] static float2 _800;
[   1.265][d][vo/gpu-next/libplacebo] [ 47] static float4 _813;
[   1.265][d][vo/gpu-next/libplacebo] [ 48] 
[   1.265][d][vo/gpu-next/libplacebo] [ 49] struct SPIRV_Cross_Input
[   1.265][d][vo/gpu-next/libplacebo] [ 50] {
[   1.265][d][vo/gpu-next/libplacebo] [ 51]     float2 _800 : TEXCOORD0;
[   1.265][d][vo/gpu-next/libplacebo] [ 52]     float2 _42 : TEXCOORD1;
[   1.265][d][vo/gpu-next/libplacebo] [ 53]     float2 _68 : TEXCOORD2;
[   1.265][d][vo/gpu-next/libplacebo] [ 54]     float2 _150 : TEXCOORD3;
[   1.265][d][vo/gpu-next/libplacebo] [ 55]     float2 _178 : TEXCOORD4;
[   1.265][d][vo/gpu-next/libplacebo] [ 56]     float2 _260 : TEXCOORD5;
[   1.265][d][vo/gpu-next/libplacebo] [ 57]     float2 _288 : TEXCOORD6;
[   1.265][d][vo/gpu-next/libplacebo] [ 58]     float2 _370 : TEXCOORD7;
[   1.265][d][vo/gpu-next/libplacebo] [ 59]     float2 _398 : TEXCOORD8;
[   1.265][d][vo/gpu-next/libplacebo] [ 60]     float2 _480 : TEXCOORD9;
[   1.265][d][vo/gpu-next/libplacebo] [ 61]     float2 _508 : TEXCOORD10;
[   1.265][d][vo/gpu-next/libplacebo] [ 62]     float2 _590 : TEXCOORD11;
[   1.265][d][vo/gpu-next/libplacebo] [ 63]     float2 _618 : TEXCOORD12;
[   1.265][d][vo/gpu-next/libplacebo] [ 64]     float2 _700 : TEXCOORD13;
[   1.265][d][vo/gpu-next/libplacebo] [ 65]     float2 _728 : TEXCOORD14;
[   1.265][d][vo/gpu-next/libplacebo] [ 66] };
[   1.265][d][vo/gpu-next/libplacebo] [ 67] 
[   1.265][d][vo/gpu-next/libplacebo] [ 68] struct SPIRV_Cross_Output
[   1.265][d][vo/gpu-next/libplacebo] [ 69] {
[   1.265][d][vo/gpu-next/libplacebo] [ 70]     float4 _813 : SV_Target0;
[   1.265][d][vo/gpu-next/libplacebo] [ 71] };
[   1.265][d][vo/gpu-next/libplacebo] [ 72] 
[   1.265][d][vo/gpu-next/libplacebo] [ 73] void frag_main()
[   1.265][d][vo/gpu-next/libplacebo] [ 74] {
[   1.265][d][vo/gpu-next/libplacebo] [ 75]     float4 _941 = ((((((((((mul(max(_38.SampleLevel(__38_sampler, _42, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.096893362700939178466796875f, 0.0604645796120166778564453125f, 0.072598993778228759765625f, 0.0f), float4(0.119945652782917022705078125f, 0.1044776737689971923828125f, 0.093028016388416290283203125f, 0.0f), float4(-0.057183019816875457763671875f, 0.0504381023347377777099609375f, 0.088147409260272979736328125f, 0.0f), float4(0.03088890016078948974609375f, 0.003392598591744899749755859375f, -0.01715604960918426513671875f, 0.0f))) + mul(max(_66.SampleLevel(__66_sampler, _68, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.02831423468887805938720703125f, 0.06597743928432464599609375f, 0.096689701080322265625f, 0.0f), float4(0.035656154155731201171875f, 0.0777010619640350341796875f, 0.075551904737949371337890625f, 0.0f), float4(0.00017934580682776868343353271484375f, -0.00047949500731192529201507568359375f, -0.0029740598984062671661376953125f, 0.0f), float4(-0.0539165847003459930419921875f, -0.01680746115744113922119140625f, -0.00571413338184356689453125f, 0.0f)))) + mul(max(-(_38.SampleLevel(__38_sampler, _42, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.047189302742481231689453125f, -0.020700000226497650146484375f, -0.0209103338420391082763671875f, 0.0f), float4(-0.079331956803798675537109375f, -0.069612108170986175537109375f, -0.086069844663143157958984375f, 0.0f), float4(0.094372697174549102783203125f, 0.008463375270366668701171875f, 0.01075516641139984130859375f, 0.0f), float4(0.0624105967581272125244140625f, 0.02262516133487224578857421875f, 0.0406843312084674835205078125f, 0.0f)))) + mul(max(-(_66.SampleLevel(__66_sampler, _68, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.102709941565990447998046875f, -0.01908042840659618377685546875f, 0.0050091282464563846588134765625f, 0.0f), float4(-0.0046729478053748607635498046875f, -0.013966741971671581268310546875f, -0.0063746063970029354095458984375f, 0.0f), float4(-2.5856788852252066135406494140625e-05f, 0.0315149910748004913330078125f, -0.00239837984554469585418701171875f, 0.0f), float4(0.11353902518749237060546875f, 0.123816989362239837646484375f, 0.10036027431488037109375f, 0.0f)))) + mul(max(_148.SampleLevel(__148_sampler, _150, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.078688852488994598388671875f, -0.0309138335287570953369140625f, -0.009213675744831562042236328125f, 0.0f), float4(0.0487099103629589080810546875f, 0.021467991173267364501953125f, 0.0387395061552524566650390625f, 0.0f), float4(-0.042969644069671630859375f, -0.071224533021450042724609375f, -0.08798675239086151123046875f, 0.0f), float4(-0.09784121811389923095703125f, 0.021434791386127471923828125f, 0.025103740394115447998046875f, 0.0f)))) + mul(max(_176.SampleLevel(__176_sampler, _178, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.05042071640491485595703125f, 0.07297159731388092041015625f, 0.076532185077667236328125f, 0.0f), float4(-0.01911248452961444854736328125f, -0.010379389859735965728759765625f, -0.026948034763336181640625f, 0.0f), float4(-0.025914229452610015869140625f, 0.00892789661884307861328125f, -0.00042541025322861969470977783203125f, 0.0f), float4(0.10437010228633880615234375f, -0.007118682377040386199951171875f, -0.0418171621859073638916015625f, 0.0f)))) + mul(max(-(_148.SampleLevel(__148_sampler, _150, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1614324152469635009765625f, -0.0009298222721554338932037353515625f, -0.0122850798070430755615234375f, 0.0f), float4(0.077440522611141204833984375f, -0.0183132626116275787353515625f, -0.0488145016133785247802734375f, 0.0f), float4(0.0924139320850372314453125f, 0.071286737918853759765625f, 0.055164955556392669677734375f, 0.0f), float4(0.0548840127885341644287109375f, -0.04834417998790740966796875f, -0.06281626224517822265625f, 0.0f)))) + mul(max(-(_176.SampleLevel(__176_sampler, _178, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.0490365661680698394775390625f, -0.05979935824871063232421875f, -0.0559428818523883819580078125f, 0.0f), float4(-0.01456430740654468536376953125f, 0.03192646801471710205078125f, 0.0378575660288333892822265625f, 0.0f), float4(0.0154744870960712432861328125f, -0.1138500273227691650390625f, -0.115277640521526336669921875f, 0.0f), float4(-0.07076005637645721435546875f, 0.057038612663745880126953125f, 0.095983795821666717529296875f, 0.0f)))) + mul(max(_258.SampleLevel(__258_sampler, _260, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.030948869884014129638671875f, -0.00873440317809581756591796875f, 0.00042712068534456193447113037109375f, 0.0f), float4(0.05389155447483062744140625f, 0.058376729488372802734375f, 0.0620063506066799163818359375f, 0.0f), float4(0.090715579688549041748046875f, -0.0420218408107757568359375f, -0.046172566711902618408203125f, 0.0f), float4(-0.0425916016101837158203125f, 0.0490509308874607086181640625f, 0.020835675299167633056640625f, 0.0f)))) + mul(max(_286.SampleLevel(__286_sampler, _288, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.0966289043426513671875f, -0.0377922542393207550048828125f, -0.0432419441640377044677734375f, 0.0f), float4(-0.011923947371542453765869140625f, -0.025950424373149871826171875f, -0.0313817523419857025146484375f, 0.0f), float4(-0.060941867530345916748046875f, -0.07859432697296142578125f, -0.075354509055614471435546875f, 0.0f), float4(-0.02677722275257110595703125f, 0.086049817502498626708984375f, 0.078299082815647125244140625f, 0.0f)))) + mul(max(-(_258.SampleLevel(__258_sampler, _260, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.064359717071056365966796875f, 0.0036599538289010524749755859375f, 0.007865780033171176910400390625f, 0.0f), float4(-0.06197206676006317138671875f, -0.0568147189915180206298828125f, -0.066676080226898193359375f, 0.0f), float4(-0.106890626251697540283203125f, 0.0074064959771931171417236328125f, 0.0299771688878536224365234375f, 0.0f), float4(-0.205193817615509033203125f, -0.0448608137667179107666015625f, 0.002122585661709308624267578125f, 0.0f)))) + mul(max(-(_286.SampleLevel(__286_sampler, _288, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.1687647402286529541015625f, 0.012789643369615077972412109375f, 0.02669261209666728973388671875f, 0.0f), float4(0.0178171359002590179443359375f, 0.0269350968301296234130859375f, 0.0222704298794269561767578125f, 0.0f), float4(0.0169018097221851348876953125f, 0.07716102898120880126953125f, 0.086526997387409210205078125f, 0.0f), float4(0.079238049685955047607421875f, -0.10443150997161865234375f, -0.108595430850982666015625f, 0.0f)));
[   1.265][d][vo/gpu-next/libplacebo] [ 76]     float4 _1055 = (((((((((((_941 + mul(max(_368.SampleLevel(__368_sampler, _370, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.00373046589083969593048095703125f, -0.0246482826769351959228515625f, -0.0221698321402072906494140625f, 0.0f), float4(-0.00627629272639751434326171875f, 0.02206273190677165985107421875f, 0.032966792583465576171875f, 0.0f), float4(0.01634911261498928070068359375f, 0.0171972028911113739013671875f, 0.0209528170526027679443359375f, 0.0f), float4(-0.176378905773162841796875f, 0.0354973562061786651611328125f, 0.0538353957235813140869140625f, 0.0f)))) + mul(max(_396.SampleLevel(__396_sampler, _398, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02088667452335357666015625f, -0.07054202258586883544921875f, -0.07914267480373382568359375f, 0.0f), float4(0.066643871366977691650390625f, 0.0449601672589778900146484375f, 0.0422309078276157379150390625f, 0.0f), float4(-0.09501959383487701416015625f, 0.012421141378581523895263671875f, 0.014289048500359058380126953125f, 0.0f), float4(0.0568148158490657806396484375f, -0.012751135043799877166748046875f, -0.014684505760669708251953125f, 0.0f)))) + mul(max(-(_368.SampleLevel(__368_sampler, _370, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.011765892617404460906982421875f, 0.0008920680847950279712677001953125f, -0.001825841492973268032073974609375f, 0.0f), float4(-0.0104738138616085052490234375f, -0.02308575250208377838134765625f, -0.0287839137017726898193359375f, 0.0f), float4(-0.0230342559516429901123046875f, -0.00247860164381563663482666015625f, -0.005216208286583423614501953125f, 0.0f), float4(0.16433860361576080322265625f, -0.061327181756496429443359375f, -0.0928906500339508056640625f, 0.0f)))) + mul(max(-(_396.SampleLevel(__396_sampler, _398, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.01659719832241535186767578125f, 0.093896366655826568603515625f, 0.108333788812160491943359375f, 0.0f), float4(-0.0431630723178386688232421875f, -0.0471481196582317352294921875f, -0.035274632275104522705078125f, 0.0f), float4(0.09634976089000701904296875f, -0.00929261185228824615478515625f, -0.0224241428077220916748046875f, 0.0f), float4(-0.087651722133159637451171875f, 0.0051558353006839752197265625f, 0.010900355875492095947265625f, 0.0f)))) + mul(max(_478.SampleLevel(__478_sampler, _480, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.03081578575074672698974609375f, 0.0210693217813968658447265625f, 0.0181219093501567840576171875f, 0.0f), float4(0.084839165210723876953125f, -0.008081309497356414794921875f, -0.0292705558240413665771484375f, 0.0f), float4(-0.10456345975399017333984375f, 0.0623867027461528778076171875f, 0.066560499370098114013671875f, 0.0f), float4(0.119266092777252197265625f, -0.110422797501087188720703125f, -0.1329111754894256591796875f, 0.0f)))) + mul(max(_506.SampleLevel(__506_sampler, _508, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.071595408022403717041015625f, -0.0072670318186283111572265625f, -0.010134558193385601043701171875f, 0.0f), float4(0.008234213106334209442138671875f, 0.0456096343696117401123046875f, 0.0402954556047916412353515625f, 0.0f), float4(0.0184169709682464599609375f, 0.01308481954038143157958984375f, 0.01464955694973468780517578125f, 0.0f), float4(0.0351075120270252227783203125f, -0.02140814997255802154541015625f, -0.030279047787189483642578125f, 0.0f)))) + mul(max(-(_478.SampleLevel(__478_sampler, _480, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0191858597099781036376953125f, 0.0387586317956447601318359375f, 0.03229402005672454833984375f, 0.0f), float4(-0.079171039164066314697265625f, 0.0411351025104522705078125f, 0.0571825169026851654052734375f, 0.0f), float4(0.08609540760517120361328125f, 0.007966245524585247039794921875f, 0.0043275761418044567108154296875f, 0.0f), float4(-0.1433289349079132080078125f, 0.03120354004204273223876953125f, 0.0567325055599212646484375f, 0.0f)))) + mul(max(-(_506.SampleLevel(__506_sampler, _508, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.032001920044422149658203125f, -0.0035752193070948123931884765625f, -0.00310645275749266147613525390625f, 0.0f), float4(-0.01090281270444393157958984375f, 0.0146074555814266204833984375f, 0.01943147368729114532470703125f, 0.0f), float4(-0.01646122895181179046630859375f, -0.0049382038414478302001953125f, -0.004655487835407257080078125f, 0.0f), float4(-0.0334702320396900177001953125f, 0.002607581205666065216064453125f, 0.005896967835724353790283203125f, 0.0f)))) + mul(max(_588.SampleLevel(__588_sampler, _590, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.03741000592708587646484375f, 0.048742271959781646728515625f, 0.043480880558490753173828125f, 0.0f), float4(0.0377195142209529876708984375f, 0.03076852858066558837890625f, 0.03127472102642059326171875f, 0.0f), float4(0.056426726281642913818359375f, 0.03066892921924591064453125f, 0.016440205276012420654296875f, 0.0f), float4(-0.010599352419376373291015625f, 0.02283240854740142822265625f, 0.02321119420230388641357421875f, 0.0f)))) + mul(max(_616.SampleLevel(__616_sampler, _618, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.0057332911528646945953369140625f, 0.063656590878963470458984375f, 0.066636107861995697021484375f, 0.0f), float4(-0.041917093098163604736328125f, -0.01649344526231288909912109375f, -0.02043808810412883758544921875f, 0.0f), float4(-0.00143575924448668956756591796875f, -0.00225065625272691249847412109375f, -0.0045095006935298442840576171875f, 0.0f), float4(0.02989314496517181396484375f, -0.009129353798925876617431640625f, -0.015173115767538547515869140625f, 0.0f)))) + mul(max(-(_588.SampleLevel(__588_sampler, _590, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.01305208541452884674072265625f, 0.005108174867928028106689453125f, 0.00259060668759047985076904296875f, 0.0f), float4(-0.0219500549137592315673828125f, -0.0364476926624774932861328125f, -0.0361416377127170562744140625f, 0.0f), float4(-0.03629647195339202880859375f, 0.0068928464315831661224365234375f, 0.013102312572300434112548828125f, 0.0f), float4(0.006047197617590427398681640625f, -0.024798102676868438720703125f, -0.02354853786528110504150390625f, 0.0f)))) + mul(max(-(_616.SampleLevel(__616_sampler, _618, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(0.0067743887193500995635986328125f, -0.0619121082127094268798828125f, -0.062355212867259979248046875f, 0.0f), float4(0.00160807440988719463348388671875f, -0.020445071160793304443359375f, -0.01684039272367954254150390625f, 0.0f), float4(0.028264902532100677490234375f, 0.0185291506350040435791015625f, 0.01589153893291950225830078125f, 0.0f), float4(-0.0238774120807647705078125f, -0.013271666131913661956787109375f, -0.008158679120242595672607421875f, 0.0f)));
[   1.265][d][vo/gpu-next/libplacebo] [ 77]     _813 = (((((_1055 + mul(max(_698.SampleLevel(__698_sampler, _700, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(-0.043174661695957183837890625f, -0.01895300112664699554443359375f, -0.02045299299061298370361328125f, 0.0f), float4(-0.009322576224803924560546875f, -0.03022352047264575958251953125f, -0.0309703759849071502685546875f, 0.0f), float4(0.0565365813672542572021484375f, 0.054305531084537506103515625f, 0.046692244708538055419921875f, 0.0f), float4(0.0561535917222499847412109375f, 0.059338934719562530517578125f, 0.0560187734663486480712890625f, 0.0f)))) + mul(max(_726.SampleLevel(__726_sampler, _728, 0.0f) * 1.0f, 0.0f.xxxx), float4x4(float4(0.02287807874381542205810546875f, 0.0339223407208919525146484375f, 0.033057987689971923828125f, 0.0f), float4(-0.01755454204976558685302734375f, -0.01415425352752208709716796875f, -0.014122612774372100830078125f, 0.0f), float4(-0.0486340932548046112060546875f, -0.0531646311283111572265625f, -0.04798877239227294921875f, 0.0f), float4(-0.0580021776258945465087890625f, -0.040221966803073883056640625f, -0.034025013446807861328125f, 0.0f)))) + mul(max(-(_698.SampleLevel(__698_sampler, _700, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.01825365610420703887939453125f, -0.0419767387211322784423828125f, -0.0404672361910343170166015625f, 0.0f), float4(-0.0435892902314662933349609375f, -0.0283098183572292327880859375f, -0.0254250727593898773193359375f, 0.0f), float4(-0.00848867185413837432861328125f, -0.00172799103893339633941650390625f, 0.000358083634637296199798583984375f, 0.0f), float4(-0.001170927309431135654449462890625f, 0.0052514164708554744720458984375f, 0.00594793073832988739013671875f, 0.0f)))) + mul(max(-(_726.SampleLevel(__726_sampler, _728, 0.0f) * 1.0f), 0.0f.xxxx), float4x4(float4(-0.08333934843540191650390625f, -0.09818200767040252685546875f, -0.094762839376926422119140625f, 0.0f), float4(-0.0336920954287052154541015625f, -0.0462590120732784271240234375f, -0.0457975156605243682861328125f, 0.0f), float4(-0.007577071897685527801513671875f, 0.0022402717731893062591552734375f, 0.001620003837160766124725341796875f, 0.0f), float4(0.0029786075465381145477294921875f, -0.02072853408753871917724609375f, -0.01893803291022777557373046875f, 0.0f)))) + float4(0.0475673936307430267333984375f, -0.025046169757843017578125f, -0.02816398628056049346923828125f, 0.0f)) + (_798.SampleLevel(__798_sampler, _800, 0.0f) * 1.0f);
[   1.265][d][vo/gpu-next/libplacebo] [ 78] }
[   1.265][d][vo/gpu-next/libplacebo] [ 79] 
[   1.265][d][vo/gpu-next/libplacebo] [ 80] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.265][d][vo/gpu-next/libplacebo] [ 81] {
[   1.265][d][vo/gpu-next/libplacebo] [ 82]     _42 = stage_input._42;
[   1.265][d][vo/gpu-next/libplacebo] [ 83]     _68 = stage_input._68;
[   1.265][d][vo/gpu-next/libplacebo] [ 84]     _150 = stage_input._150;
[   1.265][d][vo/gpu-next/libplacebo] [ 85]     _178 = stage_input._178;
[   1.265][d][vo/gpu-next/libplacebo] [ 86]     _260 = stage_input._260;
[   1.265][d][vo/gpu-next/libplacebo] [ 87]     _288 = stage_input._288;
[   1.265][d][vo/gpu-next/libplacebo] [ 88]     _370 = stage_input._370;
[   1.265][d][vo/gpu-next/libplacebo] [ 89]     _398 = stage_input._398;
[   1.265][d][vo/gpu-next/libplacebo] [ 90]     _480 = stage_input._480;
[   1.265][d][vo/gpu-next/libplacebo] [ 91]     _508 = stage_input._508;
[   1.265][d][vo/gpu-next/libplacebo] [ 92]     _590 = stage_input._590;
[   1.265][d][vo/gpu-next/libplacebo] [ 93]     _618 = stage_input._618;
[   1.265][d][vo/gpu-next/libplacebo] [ 94]     _700 = stage_input._700;
[   1.265][d][vo/gpu-next/libplacebo] [ 95]     _728 = stage_input._728;
[   1.265][d][vo/gpu-next/libplacebo] [ 96]     _800 = stage_input._800;
[   1.265][d][vo/gpu-next/libplacebo] [ 97]     frag_main();
[   1.265][d][vo/gpu-next/libplacebo] [ 98]     SPIRV_Cross_Output stage_output;
[   1.265][d][vo/gpu-next/libplacebo] [ 99]     stage_output._813 = _813;
[   1.265][d][vo/gpu-next/libplacebo] [100]     return stage_output;
[   1.265][d][vo/gpu-next/libplacebo] [101] }
[   1.267][d][vo/gpu-next] cache_save_obj: key(57a2dc49986c3208), size(10901), save time(2.132 ms)
[   1.267][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:1012
[   1.268][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.268][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.268][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.268][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.268][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.268][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.268][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.268][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.268][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.268][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.268][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.268][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.268][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.268][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.268][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.268][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.268][d][vo/gpu-next/libplacebo] [ 16] };
[   1.268][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _13;
[   1.268][d][vo/gpu-next/libplacebo] [ 18] layout(location=0) out vec2 _3;
[   1.268][d][vo/gpu-next/libplacebo] [ 19] layout(location=1) in vec2 _14;
[   1.268][d][vo/gpu-next/libplacebo] [ 20] layout(location=1) out vec2 _8;
[   1.268][d][vo/gpu-next/libplacebo] [ 21] layout(location=2) in vec2 _15;
[   1.268][d][vo/gpu-next/libplacebo] [ 22] void main() {
[   1.268][d][vo/gpu-next/libplacebo] [ 23] _3 = _13;
[   1.268][d][vo/gpu-next/libplacebo] [ 24] _8 = _14;
[   1.268][d][vo/gpu-next/libplacebo] [ 25] vec2 va_pos = _15; 
[   1.268][d][vo/gpu-next/libplacebo] [ 26] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.268][d][vo/gpu-next/libplacebo] [ 27] }
[   1.268][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.268][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.268][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.268][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.268][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.268][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _7;
[   1.268][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _12 {
[   1.268][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) vec2 _4;
[   1.268][d][vo/gpu-next/libplacebo] [  8]     layout(offset=8) vec2 _5;
[   1.268][d][vo/gpu-next/libplacebo] [  9]     layout(offset=16) vec2 _9;
[   1.268][d][vo/gpu-next/libplacebo] [ 10]     layout(offset=24) vec2 _a;
[   1.268][d][vo/gpu-next/libplacebo] [ 11]     layout(offset=32) int _c;
[   1.268][d][vo/gpu-next/libplacebo] [ 12]     layout(offset=36) float _d;
[   1.268][d][vo/gpu-next/libplacebo] [ 13]     layout(offset=40) vec2 _e;
[   1.268][d][vo/gpu-next/libplacebo] [ 14]     layout(offset=48) vec2 _f;
[   1.268][d][vo/gpu-next/libplacebo] [ 15]     layout(offset=56) vec2 _10;
[   1.268][d][vo/gpu-next/libplacebo] [ 16] };
[   1.268][d][vo/gpu-next/libplacebo] [ 17] layout(location=0) in vec2 _3;
[   1.268][d][vo/gpu-next/libplacebo] [ 18] layout(location=1) in vec2 _8;
[   1.268][d][vo/gpu-next/libplacebo] [ 19] layout(location=0) out vec4 out_color;
[   1.268][d][vo/gpu-next/libplacebo] [ 20] 
[   1.268][d][vo/gpu-next/libplacebo] [ 21] #define PREKERNEL_raw _2 
[   1.268][d][vo/gpu-next/libplacebo] [ 22] #define PREKERNEL_pos _3 
[   1.268][d][vo/gpu-next/libplacebo] [ 23] #define PREKERNEL_map _3_map 
[   1.268][d][vo/gpu-next/libplacebo] [ 24] #define PREKERNEL_size vec2(textureSize(_2, 0)) 
[   1.268][d][vo/gpu-next/libplacebo] [ 25] #define PREKERNEL_pt _4 
[   1.268][d][vo/gpu-next/libplacebo] [ 26] #define PREKERNEL_off _5 
[   1.268][d][vo/gpu-next/libplacebo] [ 27] const float _6 = float(1); 
[   1.268][d][vo/gpu-next/libplacebo] [ 28] #define PREKERNEL_mul _6 
[   1.268][d][vo/gpu-next/libplacebo] [ 29] #define PREKERNEL_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.268][d][vo/gpu-next/libplacebo] [ 30] #define PREKERNEL_tex(pos) (_6 * vec4(textureLod(_2, pos, 0.0))) 
[   1.268][d][vo/gpu-next/libplacebo] [ 31] #define PREKERNEL_texOff(off) (PREKERNEL_tex(_3 + _4 * vec2(off))) 
[   1.268][d][vo/gpu-next/libplacebo] [ 32] #define PREKERNEL_gather(pos, c) (_6 * vec4(textureGather(_2, pos, c))) 
[   1.268][d][vo/gpu-next/libplacebo] [ 33] #define HOOKED_raw PREKERNEL_raw 
[   1.268][d][vo/gpu-next/libplacebo] [ 34] #define HOOKED_pos PREKERNEL_pos 
[   1.268][d][vo/gpu-next/libplacebo] [ 35] #define HOOKED_size PREKERNEL_size 
[   1.268][d][vo/gpu-next/libplacebo] [ 36] #define HOOKED_rot PREKERNEL_rot 
[   1.268][d][vo/gpu-next/libplacebo] [ 37] #define HOOKED_off PREKERNEL_off 
[   1.268][d][vo/gpu-next/libplacebo] [ 38] #define HOOKED_pt PREKERNEL_pt 
[   1.268][d][vo/gpu-next/libplacebo] [ 39] #define HOOKED_map PREKERNEL_map 
[   1.268][d][vo/gpu-next/libplacebo] [ 40] #define HOOKED_mul PREKERNEL_mul 
[   1.268][d][vo/gpu-next/libplacebo] [ 41] #define HOOKED_tex PREKERNEL_tex 
[   1.268][d][vo/gpu-next/libplacebo] [ 42] #define HOOKED_texOff PREKERNEL_texOff 
[   1.268][d][vo/gpu-next/libplacebo] [ 43] #define HOOKED_gather PREKERNEL_gather 
[   1.268][d][vo/gpu-next/libplacebo] [ 44] #define STATSMAX_raw _7 
[   1.268][d][vo/gpu-next/libplacebo] [ 45] #define STATSMAX_pos _8 
[   1.268][d][vo/gpu-next/libplacebo] [ 46] #define STATSMAX_map _8_map 
[   1.268][d][vo/gpu-next/libplacebo] [ 47] #define STATSMAX_size vec2(textureSize(_7, 0)) 
[   1.268][d][vo/gpu-next/libplacebo] [ 48] #define STATSMAX_pt _9 
[   1.268][d][vo/gpu-next/libplacebo] [ 49] #define STATSMAX_off _a 
[   1.268][d][vo/gpu-next/libplacebo] [ 50] const float _b = float(1); 
[   1.268][d][vo/gpu-next/libplacebo] [ 51] #define STATSMAX_mul _b 
[   1.268][d][vo/gpu-next/libplacebo] [ 52] #define STATSMAX_rot mat2(1.0, 0.0, 0.0, 1.0) 
[   1.268][d][vo/gpu-next/libplacebo] [ 53] #define STATSMAX_tex(pos) (_b * vec4(textureLod(_7, pos, 0.0))) 
[   1.268][d][vo/gpu-next/libplacebo] [ 54] #define STATSMAX_texOff(off) (STATSMAX_tex(_8 + _9 * vec2(off))) 
[   1.268][d][vo/gpu-next/libplacebo] [ 55] #define STATSMAX_gather(pos, c) (_b * vec4(textureGather(_7, pos, c))) 
[   1.268][d][vo/gpu-next/libplacebo] [ 56] #define frame _c 
[   1.268][d][vo/gpu-next/libplacebo] [ 57] #define random _d 
[   1.268][d][vo/gpu-next/libplacebo] [ 58] #define input_size _e 
[   1.268][d][vo/gpu-next/libplacebo] [ 59] #define target_size _f 
[   1.268][d][vo/gpu-next/libplacebo] [ 60] #define tex_offset _10 
[   1.268][d][vo/gpu-next/libplacebo] [ 61] const float _8002 = float(0.8703105449676514); 
[   1.268][d][vo/gpu-next/libplacebo] [ 62] const float _8003 = float(0.0595848374068737); 
[   1.268][d][vo/gpu-next/libplacebo] [ 63] vec4 _8001(vec4 color) {
[   1.268][d][vo/gpu-next/libplacebo] [ 64] // pl_shader_linearize           
[   1.268][d][vo/gpu-next/libplacebo] [ 65] color.rgb = max(color.rgb, 0.0); 
[   1.268][d][vo/gpu-next/libplacebo] [ 66] color.rgb = _8002 * pow(color.rgb + vec3(_8003), vec3(2.4)); 
[   1.268][d][vo/gpu-next/libplacebo] [ 67] return color;
[   1.268][d][vo/gpu-next/libplacebo] [ 68] }
[   1.268][d][vo/gpu-next/libplacebo] [ 69] 
[   1.268][d][vo/gpu-next/libplacebo] [ 70] #define linearize _8001 
[   1.268][d][vo/gpu-next/libplacebo] [ 71] const float _4002 = float(1.149015188217163); 
[   1.268][d][vo/gpu-next/libplacebo] [ 72] const float _4003 = float(0.0595848374068737); 
[   1.268][d][vo/gpu-next/libplacebo] [ 73] vec4 _4001(vec4 color) {
[   1.268][d][vo/gpu-next/libplacebo] [ 74] // pl_shader_delinearize 
[   1.268][d][vo/gpu-next/libplacebo] [ 75] color.rgb = max(color.rgb, 0.0); 
[   1.268][d][vo/gpu-next/libplacebo] [ 76] color.rgb = pow(_4002 * color.rgb, vec3(1.0/2.4)) - vec3(_4003); 
[   1.268][d][vo/gpu-next/libplacebo] [ 77] return color;
[   1.268][d][vo/gpu-next/libplacebo] [ 78] }
[   1.268][d][vo/gpu-next/libplacebo] [ 79] 
[   1.268][d][vo/gpu-next/libplacebo] [ 80] #define delinearize _4001 
[   1.268][d][vo/gpu-next/libplacebo] [ 81] 
[   1.268][d][vo/gpu-next/libplacebo] [ 82] float get_luma(vec4 rgba) {
[   1.268][d][vo/gpu-next/libplacebo] [ 83] 	return dot(vec4(0.299, 0.587, 0.114, 0.0), rgba);
[   1.268][d][vo/gpu-next/libplacebo] [ 84] }
[   1.268][d][vo/gpu-next/libplacebo] [ 85] 
[   1.268][d][vo/gpu-next/libplacebo] [ 86] vec4 hook() {
[   1.268][d][vo/gpu-next/libplacebo] [ 87] 
[   1.268][d][vo/gpu-next/libplacebo] [ 88] 	float current_luma = get_luma(HOOKED_tex(HOOKED_pos));
[   1.268][d][vo/gpu-next/libplacebo] [ 89] 	float new_luma = min(current_luma, STATSMAX_tex(HOOKED_pos).x);
[   1.268][d][vo/gpu-next/libplacebo] [ 90] 	
[   1.268][d][vo/gpu-next/libplacebo] [ 91] 	//This trick is only possible if the inverse Y->RGB matrix has 1 for every row... (which is the case for BT.709)
[   1.268][d][vo/gpu-next/libplacebo] [ 92] 	//Otherwise we would need to convert RGB to YUV, modify Y then convert back to RGB.
[   1.268][d][vo/gpu-next/libplacebo] [ 93]     return HOOKED_tex(HOOKED_pos) - (current_luma - new_luma); 
[   1.268][d][vo/gpu-next/libplacebo] [ 94] }vec4 _1() {
[   1.268][d][vo/gpu-next/libplacebo] [ 95] vec4 color = hook(); 
[   1.268][d][vo/gpu-next/libplacebo] [ 96] return color;
[   1.268][d][vo/gpu-next/libplacebo] [ 97] }
[   1.268][d][vo/gpu-next/libplacebo] [ 98] 
[   1.268][d][vo/gpu-next/libplacebo] [ 99] void main() {
[   1.268][d][vo/gpu-next/libplacebo] [100] out_color = _1();
[   1.268][d][vo/gpu-next/libplacebo] [101] }
[   1.269][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.269][d][vo/gpu-next/libplacebo] Spent 1.410 ms translating GLSL to SPIR-V
[   1.269][d][vo/gpu-next/libplacebo] Spent 0.108 ms translating SPIR-V to HLSL
[   1.270][d][vo/gpu-next/libplacebo] Spent 1.130 ms translating HLSL to DXBC
[   1.270][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.270][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.270][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.270][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.271][d][vo/gpu-next/libplacebo] [  4] static float2 _13;
[   1.271][d][vo/gpu-next/libplacebo] [  5] static float2 _14;
[   1.271][d][vo/gpu-next/libplacebo] [  6] static float2 _18;
[   1.271][d][vo/gpu-next/libplacebo] [  7] 
[   1.271][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   1.271][d][vo/gpu-next/libplacebo] [  9] {
[   1.271][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   1.271][d][vo/gpu-next/libplacebo] [ 11]     float2 _14 : TEXCOORD1;
[   1.271][d][vo/gpu-next/libplacebo] [ 12]     float2 _18 : TEXCOORD2;
[   1.271][d][vo/gpu-next/libplacebo] [ 13] };
[   1.271][d][vo/gpu-next/libplacebo] [ 14] 
[   1.271][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   1.271][d][vo/gpu-next/libplacebo] [ 16] {
[   1.271][d][vo/gpu-next/libplacebo] [ 17]     float2 _9 : TEXCOORD0;
[   1.271][d][vo/gpu-next/libplacebo] [ 18]     float2 _13 : TEXCOORD1;
[   1.271][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   1.271][d][vo/gpu-next/libplacebo] [ 20] };
[   1.271][d][vo/gpu-next/libplacebo] [ 21] 
[   1.271][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   1.271][d][vo/gpu-next/libplacebo] [ 23] {
[   1.271][d][vo/gpu-next/libplacebo] [ 24]     _9 = _11;
[   1.271][d][vo/gpu-next/libplacebo] [ 25]     _13 = _14;
[   1.271][d][vo/gpu-next/libplacebo] [ 26]     gl_Position = float4(_18, 0.0f, 1.0f);
[   1.271][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   1.271][d][vo/gpu-next/libplacebo] [ 28] }
[   1.271][d][vo/gpu-next/libplacebo] [ 29] 
[   1.271][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.271][d][vo/gpu-next/libplacebo] [ 31] {
[   1.271][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   1.271][d][vo/gpu-next/libplacebo] [ 33]     _14 = stage_input._14;
[   1.271][d][vo/gpu-next/libplacebo] [ 34]     _18 = stage_input._18;
[   1.271][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   1.271][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   1.271][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   1.271][d][vo/gpu-next/libplacebo] [ 38]     stage_output._9 = _9;
[   1.271][d][vo/gpu-next/libplacebo] [ 39]     stage_output._13 = _13;
[   1.271][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.271][d][vo/gpu-next/libplacebo] [ 41] }
[   1.272][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.272][d][vo/gpu-next/libplacebo] Spent 1.420 ms translating GLSL to SPIR-V
[   1.272][d][vo/gpu-next/libplacebo] Spent 0.113 ms translating SPIR-V to HLSL
[   1.274][d][vo/gpu-next/libplacebo] Spent 1.540 ms translating HLSL to DXBC
[   1.274][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.274][d][vo/gpu-next/libplacebo] [  1] Texture2D<float4> _33 : register(t0);
[   1.274][d][vo/gpu-next/libplacebo] [  2] SamplerState __33_sampler : register(s0);
[   1.274][d][vo/gpu-next/libplacebo] [  3] Texture2D<float4> _45 : register(t1);
[   1.274][d][vo/gpu-next/libplacebo] [  4] SamplerState __45_sampler : register(s1);
[   1.274][d][vo/gpu-next/libplacebo] [  5] 
[   1.274][d][vo/gpu-next/libplacebo] [  6] static float2 _37;
[   1.274][d][vo/gpu-next/libplacebo] [  7] static float4 _71;
[   1.274][d][vo/gpu-next/libplacebo] [  8] 
[   1.274][d][vo/gpu-next/libplacebo] [  9] struct SPIRV_Cross_Input
[   1.274][d][vo/gpu-next/libplacebo] [ 10] {
[   1.274][d][vo/gpu-next/libplacebo] [ 11]     float2 _37 : TEXCOORD0;
[   1.274][d][vo/gpu-next/libplacebo] [ 12] };
[   1.274][d][vo/gpu-next/libplacebo] [ 13] 
[   1.274][d][vo/gpu-next/libplacebo] [ 14] struct SPIRV_Cross_Output
[   1.274][d][vo/gpu-next/libplacebo] [ 15] {
[   1.274][d][vo/gpu-next/libplacebo] [ 16]     float4 _71 : SV_Target0;
[   1.274][d][vo/gpu-next/libplacebo] [ 17] };
[   1.274][d][vo/gpu-next/libplacebo] [ 18] 
[   1.274][d][vo/gpu-next/libplacebo] [ 19] void frag_main()
[   1.274][d][vo/gpu-next/libplacebo] [ 20] {
[   1.274][d][vo/gpu-next/libplacebo] [ 21]     float _115 = dot(float4(0.2989999949932098388671875f, 0.58700001239776611328125f, 0.114000000059604644775390625f, 0.0f), _33.SampleLevel(__33_sampler, _37, 0.0f) * 1.0f);
[   1.274][d][vo/gpu-next/libplacebo] [ 22]     _71 = (_33.SampleLevel(__33_sampler, _37, 0.0f) * 1.0f) - (_115 - min(_115, (_45.SampleLevel(__45_sampler, _37, 0.0f) * 1.0f).x)).xxxx;
[   1.274][d][vo/gpu-next/libplacebo] [ 23] }
[   1.274][d][vo/gpu-next/libplacebo] [ 24] 
[   1.274][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.274][d][vo/gpu-next/libplacebo] [ 26] {
[   1.274][d][vo/gpu-next/libplacebo] [ 27]     _37 = stage_input._37;
[   1.274][d][vo/gpu-next/libplacebo] [ 28]     frag_main();
[   1.274][d][vo/gpu-next/libplacebo] [ 29]     SPIRV_Cross_Output stage_output;
[   1.274][d][vo/gpu-next/libplacebo] [ 30]     stage_output._71 = _71;
[   1.274][d][vo/gpu-next/libplacebo] [ 31]     return stage_output;
[   1.274][d][vo/gpu-next/libplacebo] [ 32] }
[   1.276][d][vo/gpu-next] cache_save_obj: key(d88238453afe0a79), size(1729), save time(2.113 ms)
[   1.281][d][vo/gpu-next] cache_load_obj: key(d95b62e641a2e006), size(16384), load time(5.161 ms)
[   1.281][d][vo/gpu-next/libplacebo] Re-using cached LUT (0xd95b62e641a2e006) with size 16384
[   1.282][d][vo/gpu-next] cache_save_obj: key(d95b62e641a2e006), size(16384)
[   1.282][v][vo/gpu-next/libplacebo] Dithering to 8 bit depth
[   1.282][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.282][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.282][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_texture_gather : enable
[   1.282][d][vo/gpu-next/libplacebo] [  3] layout(binding=0) uniform  sampler2D _a002;
[   1.282][d][vo/gpu-next/libplacebo] [  4] layout(binding=1) uniform  sampler2D _a006;
[   1.282][d][vo/gpu-next/libplacebo] [  5] layout(location=0) in vec2 _a00d;
[   1.282][d][vo/gpu-next/libplacebo] [  6] layout(location=0) out vec2 _a003;
[   1.282][d][vo/gpu-next/libplacebo] [  7] layout(location=1) in vec2 _a00e;
[   1.282][d][vo/gpu-next/libplacebo] [  8] void main() {
[   1.282][d][vo/gpu-next/libplacebo] [  9] _a003 = _a00d;
[   1.282][d][vo/gpu-next/libplacebo] [ 10] vec2 va_pos = _a00e; 
[   1.282][d][vo/gpu-next/libplacebo] [ 11] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.282][d][vo/gpu-next/libplacebo] [ 12] }
[   1.282][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.282][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.282][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_texture_gather : enable
[   1.282][d][vo/gpu-next/libplacebo] [  3] layout(binding=0) uniform  sampler2D _a002;
[   1.282][d][vo/gpu-next/libplacebo] [  4] layout(binding=1) uniform  sampler2D _a006;
[   1.282][d][vo/gpu-next/libplacebo] [  5] layout(location=0) in vec2 _a003;
[   1.282][d][vo/gpu-next/libplacebo] [  6] layout(location=0) out vec4 out_color;
[   1.282][d][vo/gpu-next/libplacebo] [  7] 
[   1.282][d][vo/gpu-next/libplacebo] [  8] const float _a004 = float(1); 
[   1.282][d][vo/gpu-next/libplacebo] [  9] #define _a005(pos) (texelFetch(_a006, ivec2(pos), 0).x)
[   1.282][d][vo/gpu-next/libplacebo] [ 10] const float _a007 = float(64); 
[   1.282][d][vo/gpu-next/libplacebo] [ 11] const float _a008 = float(64); 
[   1.282][d][vo/gpu-next/libplacebo] [ 12] const float _a009 = float(1); 
[   1.282][d][vo/gpu-next/libplacebo] [ 13] vec4 _a001() {
[   1.282][d][vo/gpu-next/libplacebo] [ 14] // pl_shader_sample_direct                                  
[   1.282][d][vo/gpu-next/libplacebo] [ 15] vec4 color = vec4(_a004) * vec4(textureLod(_a002, _a003, 0.0));   
[   1.282][d][vo/gpu-next/libplacebo] [ 16] // pl_shader_encode_color 
[   1.282][d][vo/gpu-next/libplacebo] [ 17] { 
[   1.282][d][vo/gpu-next/libplacebo] [ 18] color.rgb *= vec3(color.a); 
[   1.282][d][vo/gpu-next/libplacebo] [ 19] }
[   1.282][d][vo/gpu-next/libplacebo] [ 20] // pl_shader_dither 
[   1.282][d][vo/gpu-next/libplacebo] [ 21] {                    
[   1.282][d][vo/gpu-next/libplacebo] [ 22] float bias;          
[   1.282][d][vo/gpu-next/libplacebo] [ 23] vec2 pos = fract(gl_FragCoord.xy * 1.0/_a007); 
[   1.282][d][vo/gpu-next/libplacebo] [ 24] bias = _a005(ivec2(pos * _a008));
[   1.282][d][vo/gpu-next/libplacebo] [ 25] const float scale = 255.0; 
[   1.282][d][vo/gpu-next/libplacebo] [ 26] color = scale * color + vec4(bias);   
[   1.282][d][vo/gpu-next/libplacebo] [ 27] color = floor(color) * (1.0 / scale); 
[   1.282][d][vo/gpu-next/libplacebo] [ 28] } 
[   1.282][d][vo/gpu-next/libplacebo] [ 29] color.rgba *= vec4(1.0 / _a009); 
[   1.282][d][vo/gpu-next/libplacebo] [ 30] vec4 _a00a = color;                 
[   1.282][d][vo/gpu-next/libplacebo] [ 31] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   1.282][d][vo/gpu-next/libplacebo] [ 32] color[0] = _a00a[0]; 
[   1.282][d][vo/gpu-next/libplacebo] [ 33] color[1] = _a00a[1]; 
[   1.282][d][vo/gpu-next/libplacebo] [ 34] color[2] = _a00a[2]; 
[   1.282][d][vo/gpu-next/libplacebo] [ 35] color[3] = _a00a[3]; 
[   1.282][d][vo/gpu-next/libplacebo] [ 36] return color;
[   1.282][d][vo/gpu-next/libplacebo] [ 37] }
[   1.282][d][vo/gpu-next/libplacebo] [ 38] 
[   1.282][d][vo/gpu-next/libplacebo] [ 39] void main() {
[   1.282][d][vo/gpu-next/libplacebo] [ 40] out_color = _a001();
[   1.282][d][vo/gpu-next/libplacebo] [ 41] }
[   1.283][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.283][d][vo/gpu-next/libplacebo] Spent 1.518 ms translating GLSL to SPIR-V
[   1.283][d][vo/gpu-next/libplacebo] Spent 0.106 ms translating SPIR-V to HLSL
[   1.284][d][vo/gpu-next/libplacebo] Spent 1.049 ms translating HLSL to DXBC
[   1.284][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.284][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.284][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.284][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.284][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   1.284][d][vo/gpu-next/libplacebo] [  5] 
[   1.284][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   1.284][d][vo/gpu-next/libplacebo] [  7] {
[   1.284][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   1.284][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   1.284][d][vo/gpu-next/libplacebo] [ 10] };
[   1.284][d][vo/gpu-next/libplacebo] [ 11] 
[   1.284][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   1.284][d][vo/gpu-next/libplacebo] [ 13] {
[   1.284][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   1.284][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   1.284][d][vo/gpu-next/libplacebo] [ 16] };
[   1.284][d][vo/gpu-next/libplacebo] [ 17] 
[   1.284][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   1.284][d][vo/gpu-next/libplacebo] [ 19] {
[   1.284][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   1.284][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   1.284][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   1.284][d][vo/gpu-next/libplacebo] [ 23] }
[   1.284][d][vo/gpu-next/libplacebo] [ 24] 
[   1.284][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.284][d][vo/gpu-next/libplacebo] [ 26] {
[   1.284][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   1.284][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   1.284][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   1.284][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   1.284][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   1.284][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   1.284][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   1.284][d][vo/gpu-next/libplacebo] [ 34] }
[   1.286][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.286][d][vo/gpu-next/libplacebo] Spent 1.609 ms translating GLSL to SPIR-V
[   1.286][d][vo/gpu-next/libplacebo] Spent 0.131 ms translating SPIR-V to HLSL
[   1.288][d][vo/gpu-next/libplacebo] Spent 1.756 ms translating HLSL to DXBC
[   1.288][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.288][d][vo/gpu-next/libplacebo] [  1] Texture2D<float4> _18 : register(t0);
[   1.288][d][vo/gpu-next/libplacebo] [  2] SamplerState __18_sampler : register(s0);
[   1.288][d][vo/gpu-next/libplacebo] [  3] Texture2D<float4> _58 : register(t1);
[   1.288][d][vo/gpu-next/libplacebo] [  4] SamplerState __58_sampler : register(s1);
[   1.288][d][vo/gpu-next/libplacebo] [  5] 
[   1.288][d][vo/gpu-next/libplacebo] [  6] static float4 gl_FragCoord;
[   1.288][d][vo/gpu-next/libplacebo] [  7] static float2 _22;
[   1.288][d][vo/gpu-next/libplacebo] [  8] static float4 _100;
[   1.288][d][vo/gpu-next/libplacebo] [  9] 
[   1.288][d][vo/gpu-next/libplacebo] [ 10] struct SPIRV_Cross_Input
[   1.288][d][vo/gpu-next/libplacebo] [ 11] {
[   1.288][d][vo/gpu-next/libplacebo] [ 12]     float2 _22 : TEXCOORD0;
[   1.288][d][vo/gpu-next/libplacebo] [ 13]     float4 gl_FragCoord : SV_Position;
[   1.288][d][vo/gpu-next/libplacebo] [ 14] };
[   1.288][d][vo/gpu-next/libplacebo] [ 15] 
[   1.288][d][vo/gpu-next/libplacebo] [ 16] struct SPIRV_Cross_Output
[   1.288][d][vo/gpu-next/libplacebo] [ 17] {
[   1.288][d][vo/gpu-next/libplacebo] [ 18]     float4 _100 : SV_Target0;
[   1.288][d][vo/gpu-next/libplacebo] [ 19] };
[   1.288][d][vo/gpu-next/libplacebo] [ 20] 
[   1.288][d][vo/gpu-next/libplacebo] [ 21] void frag_main()
[   1.288][d][vo/gpu-next/libplacebo] [ 22] {
[   1.288][d][vo/gpu-next/libplacebo] [ 23]     float4 _110 = _18.SampleLevel(__18_sampler, _22, 0.0f);
[   1.288][d][vo/gpu-next/libplacebo] [ 24]     float3 _117 = _110.xyz * _110.w.xxx;
[   1.288][d][vo/gpu-next/libplacebo] [ 25]     float4 _163 = _110;
[   1.288][d][vo/gpu-next/libplacebo] [ 26]     _163.x = _117.x;
[   1.288][d][vo/gpu-next/libplacebo] [ 27]     _163.y = _117.y;
[   1.288][d][vo/gpu-next/libplacebo] [ 28]     _163.z = _117.z;
[   1.288][d][vo/gpu-next/libplacebo] [ 29]     _100 = floor((_163 * 255.0f) + _58.Load(int3(int2(frac((gl_FragCoord.xy * 1.0f) * 0.015625f.xx) * 64.0f), 0)).x.xxxx) * 0.0039215688593685626983642578125f;
[   1.288][d][vo/gpu-next/libplacebo] [ 30] }
[   1.288][d][vo/gpu-next/libplacebo] [ 31] 
[   1.288][d][vo/gpu-next/libplacebo] [ 32] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.288][d][vo/gpu-next/libplacebo] [ 33] {
[   1.288][d][vo/gpu-next/libplacebo] [ 34]     gl_FragCoord = stage_input.gl_FragCoord;
[   1.288][d][vo/gpu-next/libplacebo] [ 35]     gl_FragCoord.w = 1.0 / gl_FragCoord.w;
[   1.288][d][vo/gpu-next/libplacebo] [ 36]     _22 = stage_input._22;
[   1.288][d][vo/gpu-next/libplacebo] [ 37]     frag_main();
[   1.288][d][vo/gpu-next/libplacebo] [ 38]     SPIRV_Cross_Output stage_output;
[   1.288][d][vo/gpu-next/libplacebo] [ 39]     stage_output._100 = _100;
[   1.288][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   1.288][d][vo/gpu-next/libplacebo] [ 41] }
[   1.290][d][vo/gpu-next] cache_save_obj: key(3c3205dd3600eed5), size(1773), save time(2.422 ms)
[   1.292][v][cplayer] first video frame after restart shown
[   1.292][d][cplayer] starting video playback
[   1.292][v][cplayer] playback restart complete @ 0.000000, audio=eof, video=playing
[   1.292][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:3547
[   1.293][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.293][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.293][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_texture_gather : enable
[   1.293][d][vo/gpu-next/libplacebo] [  3] layout(binding=0) uniform  sampler2D _a002;
[   1.293][d][vo/gpu-next/libplacebo] [  4] layout(location=0) in vec2 _a007;
[   1.293][d][vo/gpu-next/libplacebo] [  5] layout(location=0) out vec2 _a003;
[   1.293][d][vo/gpu-next/libplacebo] [  6] layout(location=1) in vec2 _a008;
[   1.293][d][vo/gpu-next/libplacebo] [  7] void main() {
[   1.293][d][vo/gpu-next/libplacebo] [  8] _a003 = _a007;
[   1.293][d][vo/gpu-next/libplacebo] [  9] vec2 va_pos = _a008; 
[   1.293][d][vo/gpu-next/libplacebo] [ 10] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.293][d][vo/gpu-next/libplacebo] [ 11] }
[   1.293][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.293][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.293][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_texture_gather : enable
[   1.293][d][vo/gpu-next/libplacebo] [  3] layout(binding=0) uniform  sampler2D _a002;
[   1.293][d][vo/gpu-next/libplacebo] [  4] layout(location=0) in vec2 _a003;
[   1.293][d][vo/gpu-next/libplacebo] [  5] layout(location=0) out vec4 out_color;
[   1.293][d][vo/gpu-next/libplacebo] [  6] 
[   1.293][d][vo/gpu-next/libplacebo] [  7] const float _a004 = float(1); 
[   1.293][d][vo/gpu-next/libplacebo] [  8] vec4 _a001() {
[   1.293][d][vo/gpu-next/libplacebo] [  9] // pl_shader_sample_direct                                  
[   1.293][d][vo/gpu-next/libplacebo] [ 10] vec4 color = vec4(_a004) * vec4(textureLod(_a002, _a003, 0.0));   
[   1.293][d][vo/gpu-next/libplacebo] [ 11] return color;
[   1.293][d][vo/gpu-next/libplacebo] [ 12] }
[   1.293][d][vo/gpu-next/libplacebo] [ 13] 
[   1.293][d][vo/gpu-next/libplacebo] [ 14] void main() {
[   1.293][d][vo/gpu-next/libplacebo] [ 15] out_color = _a001();
[   1.293][d][vo/gpu-next/libplacebo] [ 16] }
[   1.294][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.295][d][vo/gpu-next/libplacebo] Spent 1.471 ms translating GLSL to SPIR-V
[   1.295][d][vo/gpu-next/libplacebo] Spent 0.114 ms translating SPIR-V to HLSL
[   1.296][d][vo/gpu-next/libplacebo] Spent 1.145 ms translating HLSL to DXBC
[   1.296][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.296][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.296][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.296][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.296][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   1.296][d][vo/gpu-next/libplacebo] [  5] 
[   1.296][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   1.296][d][vo/gpu-next/libplacebo] [  7] {
[   1.296][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   1.296][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   1.296][d][vo/gpu-next/libplacebo] [ 10] };
[   1.296][d][vo/gpu-next/libplacebo] [ 11] 
[   1.296][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   1.296][d][vo/gpu-next/libplacebo] [ 13] {
[   1.296][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   1.296][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   1.296][d][vo/gpu-next/libplacebo] [ 16] };
[   1.296][d][vo/gpu-next/libplacebo] [ 17] 
[   1.296][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   1.296][d][vo/gpu-next/libplacebo] [ 19] {
[   1.296][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   1.296][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   1.296][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   1.296][d][vo/gpu-next/libplacebo] [ 23] }
[   1.296][d][vo/gpu-next/libplacebo] [ 24] 
[   1.296][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.296][d][vo/gpu-next/libplacebo] [ 26] {
[   1.296][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   1.296][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   1.296][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   1.296][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   1.296][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   1.296][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   1.296][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   1.296][d][vo/gpu-next/libplacebo] [ 34] }
[   1.297][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.297][d][vo/gpu-next/libplacebo] Spent 1.067 ms translating GLSL to SPIR-V
[   1.297][d][vo/gpu-next/libplacebo] Spent 0.086 ms translating SPIR-V to HLSL
[   1.298][d][vo/gpu-next/libplacebo] Spent 1.083 ms translating HLSL to DXBC
[   1.298][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.298][d][vo/gpu-next/libplacebo] [  1] Texture2D<float4> _18 : register(t0);
[   1.298][d][vo/gpu-next/libplacebo] [  2] SamplerState __18_sampler : register(s0);
[   1.298][d][vo/gpu-next/libplacebo] [  3] 
[   1.298][d][vo/gpu-next/libplacebo] [  4] static float2 _22;
[   1.298][d][vo/gpu-next/libplacebo] [  5] static float4 _31;
[   1.298][d][vo/gpu-next/libplacebo] [  6] 
[   1.298][d][vo/gpu-next/libplacebo] [  7] struct SPIRV_Cross_Input
[   1.298][d][vo/gpu-next/libplacebo] [  8] {
[   1.298][d][vo/gpu-next/libplacebo] [  9]     float2 _22 : TEXCOORD0;
[   1.298][d][vo/gpu-next/libplacebo] [ 10] };
[   1.298][d][vo/gpu-next/libplacebo] [ 11] 
[   1.298][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   1.298][d][vo/gpu-next/libplacebo] [ 13] {
[   1.298][d][vo/gpu-next/libplacebo] [ 14]     float4 _31 : SV_Target0;
[   1.298][d][vo/gpu-next/libplacebo] [ 15] };
[   1.298][d][vo/gpu-next/libplacebo] [ 16] 
[   1.298][d][vo/gpu-next/libplacebo] [ 17] void frag_main()
[   1.298][d][vo/gpu-next/libplacebo] [ 18] {
[   1.298][d][vo/gpu-next/libplacebo] [ 19]     _31 = _18.SampleLevel(__18_sampler, _22, 0.0f);
[   1.298][d][vo/gpu-next/libplacebo] [ 20] }
[   1.298][d][vo/gpu-next/libplacebo] [ 21] 
[   1.298][d][vo/gpu-next/libplacebo] [ 22] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.298][d][vo/gpu-next/libplacebo] [ 23] {
[   1.298][d][vo/gpu-next/libplacebo] [ 24]     _22 = stage_input._22;
[   1.298][d][vo/gpu-next/libplacebo] [ 25]     frag_main();
[   1.298][d][vo/gpu-next/libplacebo] [ 26]     SPIRV_Cross_Output stage_output;
[   1.298][d][vo/gpu-next/libplacebo] [ 27]     stage_output._31 = _31;
[   1.298][d][vo/gpu-next/libplacebo] [ 28]     return stage_output;
[   1.298][d][vo/gpu-next/libplacebo] [ 29] }
[   1.301][d][vo/gpu-next] cache_save_obj: key(ae2f36addb0903a1), size(1329), save time(2.298 ms)
[   1.301][d][vo/gpu-next/libplacebo] vertex shader source:
[   1.301][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.301][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.301][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.301][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.301][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _6;
[   1.301][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _c {
[   1.301][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) float _4;
[   1.301][d][vo/gpu-next/libplacebo] [  8] };
[   1.301][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _d;
[   1.301][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec2 _3;
[   1.301][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) in vec2 _e;
[   1.301][d][vo/gpu-next/libplacebo] [ 12] void main() {
[   1.301][d][vo/gpu-next/libplacebo] [ 13] _3 = _d;
[   1.301][d][vo/gpu-next/libplacebo] [ 14] vec2 va_pos = _e; 
[   1.301][d][vo/gpu-next/libplacebo] [ 15] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   1.301][d][vo/gpu-next/libplacebo] [ 16] }
[   1.301][d][vo/gpu-next/libplacebo] fragment shader source:
[   1.301][d][vo/gpu-next/libplacebo] [  1] #version 450
[   1.301][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   1.301][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   1.301][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   1.301][d][vo/gpu-next/libplacebo] [  5] layout(binding=1) uniform  sampler2D _6;
[   1.301][d][vo/gpu-next/libplacebo] [  6] layout(std140, binding=2) uniform _c {
[   1.301][d][vo/gpu-next/libplacebo] [  7]     layout(offset=0) float _4;
[   1.301][d][vo/gpu-next/libplacebo] [  8] };
[   1.301][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _3;
[   1.301][d][vo/gpu-next/libplacebo] [ 10] layout(location=0) out vec4 out_color;
[   1.301][d][vo/gpu-next/libplacebo] [ 11] 
[   1.301][d][vo/gpu-next/libplacebo] [ 12] #define _5(pos) (texelFetch(_6, ivec2(pos), 0).x)
[   1.301][d][vo/gpu-next/libplacebo] [ 13] const float _7 = float(64); 
[   1.301][d][vo/gpu-next/libplacebo] [ 14] const float _8 = float(64); 
[   1.301][d][vo/gpu-next/libplacebo] [ 15] const float _9 = float(1); 
[   1.301][d][vo/gpu-next/libplacebo] [ 16] vec4 _1() {
[   1.301][d][vo/gpu-next/libplacebo] [ 17] vec4 color;                   
[   1.301][d][vo/gpu-next/libplacebo] [ 18] // pl_render_image_mix        
[   1.301][d][vo/gpu-next/libplacebo] [ 19] {                             
[   1.301][d][vo/gpu-next/libplacebo] [ 20] vec4 mix_color = vec4(0.0);   
[   1.301][d][vo/gpu-next/libplacebo] [ 21] color = textureLod(_2, _3, 0.0); 
[   1.301][d][vo/gpu-next/libplacebo] [ 22] mix_color += vec4(_4) * color; 
[   1.301][d][vo/gpu-next/libplacebo] [ 23] color = mix_color; 
[   1.301][d][vo/gpu-next/libplacebo] [ 24] }                  
[   1.301][d][vo/gpu-next/libplacebo] [ 25] // pl_shader_encode_color 
[   1.301][d][vo/gpu-next/libplacebo] [ 26] { 
[   1.301][d][vo/gpu-next/libplacebo] [ 27] color.rgb *= vec3(color.a); 
[   1.301][d][vo/gpu-next/libplacebo] [ 28] }
[   1.301][d][vo/gpu-next/libplacebo] [ 29] // pl_shader_dither 
[   1.301][d][vo/gpu-next/libplacebo] [ 30] {                    
[   1.301][d][vo/gpu-next/libplacebo] [ 31] float bias;          
[   1.301][d][vo/gpu-next/libplacebo] [ 32] vec2 pos = fract(gl_FragCoord.xy * 1.0/_7); 
[   1.301][d][vo/gpu-next/libplacebo] [ 33] bias = _5(ivec2(pos * _8));
[   1.301][d][vo/gpu-next/libplacebo] [ 34] const float scale = 255.0; 
[   1.301][d][vo/gpu-next/libplacebo] [ 35] color = scale * color + vec4(bias);   
[   1.301][d][vo/gpu-next/libplacebo] [ 36] color = floor(color) * (1.0 / scale); 
[   1.301][d][vo/gpu-next/libplacebo] [ 37] } 
[   1.301][d][vo/gpu-next/libplacebo] [ 38] color.rgba *= vec4(1.0 / _9); 
[   1.301][d][vo/gpu-next/libplacebo] [ 39] vec4 _a = color;                 
[   1.301][d][vo/gpu-next/libplacebo] [ 40] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   1.301][d][vo/gpu-next/libplacebo] [ 41] color[0] = _a[0]; 
[   1.301][d][vo/gpu-next/libplacebo] [ 42] color[1] = _a[1]; 
[   1.301][d][vo/gpu-next/libplacebo] [ 43] color[2] = _a[2]; 
[   1.301][d][vo/gpu-next/libplacebo] [ 44] color[3] = _a[3]; 
[   1.301][d][vo/gpu-next/libplacebo] [ 45] return color;
[   1.301][d][vo/gpu-next/libplacebo] [ 46] }
[   1.301][d][vo/gpu-next/libplacebo] [ 47] 
[   1.301][d][vo/gpu-next/libplacebo] [ 48] void main() {
[   1.301][d][vo/gpu-next/libplacebo] [ 49] out_color = _1();
[   1.301][d][vo/gpu-next/libplacebo] [ 50] }
[   1.302][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.302][d][vo/gpu-next/libplacebo] Spent 1.454 ms translating GLSL to SPIR-V
[   1.302][d][vo/gpu-next/libplacebo] Spent 0.099 ms translating SPIR-V to HLSL
[   1.303][d][vo/gpu-next/libplacebo] Spent 1.064 ms translating HLSL to DXBC
[   1.303][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   1.303][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   1.303][d][vo/gpu-next/libplacebo] [  2] static float2 _9;
[   1.303][d][vo/gpu-next/libplacebo] [  3] static float2 _11;
[   1.303][d][vo/gpu-next/libplacebo] [  4] static float2 _15;
[   1.303][d][vo/gpu-next/libplacebo] [  5] 
[   1.303][d][vo/gpu-next/libplacebo] [  6] struct SPIRV_Cross_Input
[   1.303][d][vo/gpu-next/libplacebo] [  7] {
[   1.303][d][vo/gpu-next/libplacebo] [  8]     float2 _11 : TEXCOORD0;
[   1.303][d][vo/gpu-next/libplacebo] [  9]     float2 _15 : TEXCOORD1;
[   1.303][d][vo/gpu-next/libplacebo] [ 10] };
[   1.303][d][vo/gpu-next/libplacebo] [ 11] 
[   1.303][d][vo/gpu-next/libplacebo] [ 12] struct SPIRV_Cross_Output
[   1.303][d][vo/gpu-next/libplacebo] [ 13] {
[   1.303][d][vo/gpu-next/libplacebo] [ 14]     float2 _9 : TEXCOORD0;
[   1.303][d][vo/gpu-next/libplacebo] [ 15]     float4 gl_Position : SV_Position;
[   1.303][d][vo/gpu-next/libplacebo] [ 16] };
[   1.303][d][vo/gpu-next/libplacebo] [ 17] 
[   1.303][d][vo/gpu-next/libplacebo] [ 18] void vert_main()
[   1.303][d][vo/gpu-next/libplacebo] [ 19] {
[   1.303][d][vo/gpu-next/libplacebo] [ 20]     _9 = _11;
[   1.303][d][vo/gpu-next/libplacebo] [ 21]     gl_Position = float4(_15, 0.0f, 1.0f);
[   1.303][d][vo/gpu-next/libplacebo] [ 22]     gl_Position.y = -gl_Position.y;
[   1.303][d][vo/gpu-next/libplacebo] [ 23] }
[   1.303][d][vo/gpu-next/libplacebo] [ 24] 
[   1.303][d][vo/gpu-next/libplacebo] [ 25] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.303][d][vo/gpu-next/libplacebo] [ 26] {
[   1.303][d][vo/gpu-next/libplacebo] [ 27]     _11 = stage_input._11;
[   1.303][d][vo/gpu-next/libplacebo] [ 28]     _15 = stage_input._15;
[   1.303][d][vo/gpu-next/libplacebo] [ 29]     vert_main();
[   1.303][d][vo/gpu-next/libplacebo] [ 30]     SPIRV_Cross_Output stage_output;
[   1.303][d][vo/gpu-next/libplacebo] [ 31]     stage_output.gl_Position = gl_Position;
[   1.303][d][vo/gpu-next/libplacebo] [ 32]     stage_output._9 = _9;
[   1.303][d][vo/gpu-next/libplacebo] [ 33]     return stage_output;
[   1.303][d][vo/gpu-next/libplacebo] [ 34] }
[   1.305][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   1.305][d][vo/gpu-next/libplacebo] Spent 2.024 ms translating GLSL to SPIR-V
[   1.306][d][vo/gpu-next/libplacebo] Spent 0.200 ms translating SPIR-V to HLSL
[   1.308][d][vo/gpu-next/libplacebo] Spent 2.059 ms translating HLSL to DXBC
[   1.308][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   1.308][d][vo/gpu-next/libplacebo] [  1] cbuffer _26_28 : register(b0)
[   1.308][d][vo/gpu-next/libplacebo] [  2] {
[   1.308][d][vo/gpu-next/libplacebo] [  3]     float _28_m0 : packoffset(c0);
[   1.308][d][vo/gpu-next/libplacebo] [  4] };
[   1.308][d][vo/gpu-next/libplacebo] [  5] 
[   1.308][d][vo/gpu-next/libplacebo] [  6] Texture2D<float4> _19 : register(t0);
[   1.308][d][vo/gpu-next/libplacebo] [  7] SamplerState __19_sampler : register(s0);
[   1.308][d][vo/gpu-next/libplacebo] [  8] Texture2D<float4> _72 : register(t1);
[   1.308][d][vo/gpu-next/libplacebo] [  9] SamplerState __72_sampler : register(s1);
[   1.308][d][vo/gpu-next/libplacebo] [ 10] 
[   1.308][d][vo/gpu-next/libplacebo] [ 11] static float4 gl_FragCoord;
[   1.308][d][vo/gpu-next/libplacebo] [ 12] static float2 _23;
[   1.308][d][vo/gpu-next/libplacebo] [ 13] static float4 _113;
[   1.308][d][vo/gpu-next/libplacebo] [ 14] 
[   1.308][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Input
[   1.308][d][vo/gpu-next/libplacebo] [ 16] {
[   1.308][d][vo/gpu-next/libplacebo] [ 17]     float2 _23 : TEXCOORD0;
[   1.308][d][vo/gpu-next/libplacebo] [ 18]     float4 gl_FragCoord : SV_Position;
[   1.308][d][vo/gpu-next/libplacebo] [ 19] };
[   1.308][d][vo/gpu-next/libplacebo] [ 20] 
[   1.308][d][vo/gpu-next/libplacebo] [ 21] struct SPIRV_Cross_Output
[   1.308][d][vo/gpu-next/libplacebo] [ 22] {
[   1.308][d][vo/gpu-next/libplacebo] [ 23]     float4 _113 : SV_Target0;
[   1.308][d][vo/gpu-next/libplacebo] [ 24] };
[   1.308][d][vo/gpu-next/libplacebo] [ 25] 
[   1.308][d][vo/gpu-next/libplacebo] [ 26] void frag_main()
[   1.308][d][vo/gpu-next/libplacebo] [ 27] {
[   1.308][d][vo/gpu-next/libplacebo] [ 28]     float4 _129 = _28_m0.xxxx * _19.SampleLevel(__19_sampler, _23, 0.0f);
[   1.308][d][vo/gpu-next/libplacebo] [ 29]     float3 _138 = _129.xyz * _129.w.xxx;
[   1.308][d][vo/gpu-next/libplacebo] [ 30]     float4 _184 = _129;
[   1.308][d][vo/gpu-next/libplacebo] [ 31]     _184.x = _138.x;
[   1.308][d][vo/gpu-next/libplacebo] [ 32]     _184.y = _138.y;
[   1.308][d][vo/gpu-next/libplacebo] [ 33]     _184.z = _138.z;
[   1.308][d][vo/gpu-next/libplacebo] [ 34]     _113 = floor((_184 * 255.0f) + _72.Load(int3(int2(frac((gl_FragCoord.xy * 1.0f) * 0.015625f.xx) * 64.0f), 0)).x.xxxx) * 0.0039215688593685626983642578125f;
[   1.308][d][vo/gpu-next/libplacebo] [ 35] }
[   1.308][d][vo/gpu-next/libplacebo] [ 36] 
[   1.308][d][vo/gpu-next/libplacebo] [ 37] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   1.308][d][vo/gpu-next/libplacebo] [ 38] {
[   1.308][d][vo/gpu-next/libplacebo] [ 39]     gl_FragCoord = stage_input.gl_FragCoord;
[   1.308][d][vo/gpu-next/libplacebo] [ 40]     gl_FragCoord.w = 1.0 / gl_FragCoord.w;
[   1.308][d][vo/gpu-next/libplacebo] [ 41]     _23 = stage_input._23;
[   1.308][d][vo/gpu-next/libplacebo] [ 42]     frag_main();
[   1.308][d][vo/gpu-next/libplacebo] [ 43]     SPIRV_Cross_Output stage_output;
[   1.308][d][vo/gpu-next/libplacebo] [ 44]     stage_output._113 = _113;
[   1.308][d][vo/gpu-next/libplacebo] [ 45]     return stage_output;
[   1.308][d][vo/gpu-next/libplacebo] [ 46] }
[   1.310][d][vo/gpu-next] cache_save_obj: key(e6530c21ec2c395e), size(1977), save time(2.277 ms)
[   1.312][v][vo/gpu-next/libplacebo] Detected fps ratio 0.0000 below threshold 0.0100, disabling interpolation
[   1.312][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.312][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.312][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.359][v][cplayer] Set property: options/term-status-msg="V: 00:00:00 / 00:00:05 (1%)" -> 1
[   1.360][d][cplayer] Run command: set, flags=64, args=[name="sub-pos", value="100"]
[   1.360][v][cplayer] Set property: sub-pos=100 -> 1
[   1.360][d][modernz] osc_init
[   1.362][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format rgba16hf: src/renderer.c:3547
[   1.375][d][vo/gpu-next/libplacebo] (Re)creating 1080x610x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.382][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.386][d][vo/gpu-next/libplacebo] (Re)creating 540x305x0 texture with format r8: ../../../../../src_packages/libplacebo/src/utils/upload.c:246
[   1.509][v][vo/gpu-next/libplacebo] Estimated source FPS: 14.985, display FPS: 14.985
[   2.042][v][cplayer] Set property: options/term-status-msg="V: 00:00:00 / 00:00:05 (13%)" -> 1
[   2.085][d][cplayer] Run command: set, flags=64, args=[name="sub-pos", value="84"]
[   2.085][v][cplayer] Set property: sub-pos=84 -> 1
[   2.094][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   2.120][v][osd/libass] fontselect: (sans-serif, 400, 0) -> ArialMT, 0, ArialMT
[   2.122][v][osd/libass] fontselect: (fluent-system-icons, 400, 0) -> fluentsystemicons-Regular, 0, fluentsystemicons-Regular
[   2.122][v][osd/libass] fontselect: (mpv-osd-symbols, 400, 0) -> mpv-osd-symbols-Regular, 0, mpv-osd-symbols-Regular
[   2.122][v][osd/libass] Glyph 0x30 not found, selecting one more font for (mpv-osd-symbols, 400, 0)
[   2.122][i][osd/libass] fontselect: Using default font family: (mpv-osd-symbols, 400, 0) -> ArialMT, 0, ArialMT
[   2.122][v][osd/libass] fontselect: (mpv-osd-symbols, 400, 0) -> ArialMT, 0, ArialMT
[   2.123][d][osd] Spent 13.446 ms in osd_render (slow!)
[   2.123][d][vo/gpu-next/libplacebo] (Re)creating 1349x405x0 texture with format r8: unknown
[   2.124][d][vo/gpu-next/libplacebo] vertex shader source:
[   2.124][d][vo/gpu-next/libplacebo] [  1] #version 450
[   2.124][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   2.124][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   2.124][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   2.124][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   2.124][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) mat3 _5;
[   2.124][d][vo/gpu-next/libplacebo] [  7]     layout(offset=48) mat3 _6;
[   2.124][d][vo/gpu-next/libplacebo] [  8] };
[   2.124][d][vo/gpu-next/libplacebo] [  9] layout(location=0) in vec2 _e;
[   2.124][d][vo/gpu-next/libplacebo] [ 10] layout(location=1) in vec2 _f;
[   2.124][d][vo/gpu-next/libplacebo] [ 11] layout(location=1) out vec2 _b;
[   2.124][d][vo/gpu-next/libplacebo] [ 12] layout(location=2) in vec4 _10;
[   2.124][d][vo/gpu-next/libplacebo] [ 13] layout(location=2) out vec4 _c;
[   2.124][d][vo/gpu-next/libplacebo] [ 14] void main() {
[   2.124][d][vo/gpu-next/libplacebo] [ 15] vec2 va_pos = _e; 
[   2.124][d][vo/gpu-next/libplacebo] [ 16] gl_Position = vec4(va_pos, 0.0, 1.0); 
[   2.124][d][vo/gpu-next/libplacebo] [ 17] _b = _f;
[   2.124][d][vo/gpu-next/libplacebo] [ 18] _c = _10;
[   2.124][d][vo/gpu-next/libplacebo] [ 19] }
[   2.124][d][vo/gpu-next/libplacebo] fragment shader source:
[   2.124][d][vo/gpu-next/libplacebo] [  1] #version 450
[   2.124][d][vo/gpu-next/libplacebo] [  2] #extension GL_ARB_uniform_buffer_object : enable
[   2.124][d][vo/gpu-next/libplacebo] [  3] #extension GL_ARB_texture_gather : enable
[   2.124][d][vo/gpu-next/libplacebo] [  4] layout(binding=0) uniform  sampler2D _2;
[   2.124][d][vo/gpu-next/libplacebo] [  5] layout(std140, binding=1) uniform _d {
[   2.124][d][vo/gpu-next/libplacebo] [  6]     layout(offset=0) mat3 _5;
[   2.124][d][vo/gpu-next/libplacebo] [  7]     layout(offset=48) mat3 _6;
[   2.124][d][vo/gpu-next/libplacebo] [  8] };
[   2.124][d][vo/gpu-next/libplacebo] [  9] layout(location=1) in vec2 _b;
[   2.124][d][vo/gpu-next/libplacebo] [ 10] layout(location=2) in vec4 _c;
[   2.124][d][vo/gpu-next/libplacebo] [ 11] layout(location=0) out vec4 out_color;
[   2.124][d][vo/gpu-next/libplacebo] [ 12] #define pos _a
[   2.124][d][vo/gpu-next/libplacebo] [ 13] #define coord _b
[   2.124][d][vo/gpu-next/libplacebo] [ 14] #define osd_color _c
[   2.124][d][vo/gpu-next/libplacebo] [ 15] 
[   2.124][d][vo/gpu-next/libplacebo] [ 16] const float _3 = float(0.9990000128746033); 
[   2.124][d][vo/gpu-next/libplacebo] [ 17] const float _4 = float(0.0009999999310821295); 
[   2.124][d][vo/gpu-next/libplacebo] [ 18] const float _7 = float(1.149015188217163); 
[   2.124][d][vo/gpu-next/libplacebo] [ 19] const float _8 = float(0.0595848374068737); 
[   2.124][d][vo/gpu-next/libplacebo] [ 20] vec4 _1() {
[   2.124][d][vo/gpu-next/libplacebo] [ 21] // overlay 
[   2.124][d][vo/gpu-next/libplacebo] [ 22] vec4 color = osd_color; 
[   2.124][d][vo/gpu-next/libplacebo] [ 23] // pl_shader_decode_color 
[   2.124][d][vo/gpu-next/libplacebo] [ 24] { 
[   2.124][d][vo/gpu-next/libplacebo] [ 25] }
[   2.124][d][vo/gpu-next/libplacebo] [ 26] // pl_shader_color_map 
[   2.124][d][vo/gpu-next/libplacebo] [ 27] {                      
[   2.124][d][vo/gpu-next/libplacebo] [ 28] // pl_shader_linearize           
[   2.124][d][vo/gpu-next/libplacebo] [ 29] color.rgb = max(color.rgb, 0.0); 
[   2.124][d][vo/gpu-next/libplacebo] [ 30] color.rgb = mix(color.rgb * vec3(1.0/12.92),               
[   2.124][d][vo/gpu-next/libplacebo] [ 31]                 pow((color.rgb + vec3(0.055))/vec3(1.055), 
[   2.124][d][vo/gpu-next/libplacebo] [ 32]                     vec3(2.4)),                            
[   2.124][d][vo/gpu-next/libplacebo] [ 33]                 lessThan(vec3(0.04045), color.rgb));       
[   2.124][d][vo/gpu-next/libplacebo] [ 34] color.rgb = _3 * color.rgb + vec3(_4); 
[   2.124][d][vo/gpu-next/libplacebo] [ 35] // pl_shader_delinearize 
[   2.124][d][vo/gpu-next/libplacebo] [ 36] color.rgb = max(color.rgb, 0.0); 
[   2.124][d][vo/gpu-next/libplacebo] [ 37] color.rgb = pow(_7 * color.rgb, vec3(1.0/2.4)) - vec3(_8); 
[   2.124][d][vo/gpu-next/libplacebo] [ 38] }
[   2.124][d][vo/gpu-next/libplacebo] [ 39] // pl_shader_encode_color 
[   2.124][d][vo/gpu-next/libplacebo] [ 40] { 
[   2.124][d][vo/gpu-next/libplacebo] [ 41] color.rgb *= vec3(color.a); 
[   2.124][d][vo/gpu-next/libplacebo] [ 42] }
[   2.124][d][vo/gpu-next/libplacebo] [ 43] color.rgba *= textureLod(_2, coord, 0.0).r; 
[   2.124][d][vo/gpu-next/libplacebo] [ 44] vec4 _9 = color;                 
[   2.124][d][vo/gpu-next/libplacebo] [ 45] color = vec4(0.0, 0.0, 0.0, 1.0); 
[   2.124][d][vo/gpu-next/libplacebo] [ 46] color[0] = _9[0]; 
[   2.124][d][vo/gpu-next/libplacebo] [ 47] color[1] = _9[1]; 
[   2.124][d][vo/gpu-next/libplacebo] [ 48] color[2] = _9[2]; 
[   2.124][d][vo/gpu-next/libplacebo] [ 49] color[3] = _9[3]; 
[   2.124][d][vo/gpu-next/libplacebo] [ 50] color.a = _9.a; 
[   2.124][d][vo/gpu-next/libplacebo] [ 51] return color;
[   2.124][d][vo/gpu-next/libplacebo] [ 52] }
[   2.124][d][vo/gpu-next/libplacebo] [ 53] 
[   2.124][d][vo/gpu-next/libplacebo] [ 54] void main() {
[   2.124][d][vo/gpu-next/libplacebo] [ 55] out_color = _1();
[   2.124][d][vo/gpu-next/libplacebo] [ 56] }
[   2.126][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.126][d][vo/gpu-next/libplacebo] Spent 1.357 ms translating GLSL to SPIR-V
[   2.126][d][vo/gpu-next/libplacebo] Spent 0.128 ms translating SPIR-V to HLSL
[   2.127][d][vo/gpu-next/libplacebo] Spent 1.266 ms translating HLSL to DXBC
[   2.127][d][vo/gpu-next/libplacebo] vertex shader HLSL source:
[   2.127][d][vo/gpu-next/libplacebo] [  1] static float4 gl_Position;
[   2.127][d][vo/gpu-next/libplacebo] [  2] static float2 _11;
[   2.127][d][vo/gpu-next/libplacebo] [  3] static float2 _31;
[   2.127][d][vo/gpu-next/libplacebo] [  4] static float2 _32;
[   2.127][d][vo/gpu-next/libplacebo] [  5] static float4 _34;
[   2.127][d][vo/gpu-next/libplacebo] [  6] static float4 _36;
[   2.127][d][vo/gpu-next/libplacebo] [  7] 
[   2.127][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   2.127][d][vo/gpu-next/libplacebo] [  9] {
[   2.127][d][vo/gpu-next/libplacebo] [ 10]     float2 _11 : TEXCOORD0;
[   2.127][d][vo/gpu-next/libplacebo] [ 11]     float2 _32 : TEXCOORD1;
[   2.127][d][vo/gpu-next/libplacebo] [ 12]     float4 _36 : TEXCOORD2;
[   2.127][d][vo/gpu-next/libplacebo] [ 13] };
[   2.127][d][vo/gpu-next/libplacebo] [ 14] 
[   2.127][d][vo/gpu-next/libplacebo] [ 15] struct SPIRV_Cross_Output
[   2.127][d][vo/gpu-next/libplacebo] [ 16] {
[   2.127][d][vo/gpu-next/libplacebo] [ 17]     float2 _31 : TEXCOORD1;
[   2.127][d][vo/gpu-next/libplacebo] [ 18]     float4 _34 : TEXCOORD2;
[   2.127][d][vo/gpu-next/libplacebo] [ 19]     float4 gl_Position : SV_Position;
[   2.127][d][vo/gpu-next/libplacebo] [ 20] };
[   2.127][d][vo/gpu-next/libplacebo] [ 21] 
[   2.127][d][vo/gpu-next/libplacebo] [ 22] void vert_main()
[   2.127][d][vo/gpu-next/libplacebo] [ 23] {
[   2.127][d][vo/gpu-next/libplacebo] [ 24]     gl_Position = float4(_11, 0.0f, 1.0f);
[   2.127][d][vo/gpu-next/libplacebo] [ 25]     _31 = _32;
[   2.127][d][vo/gpu-next/libplacebo] [ 26]     _34 = _36;
[   2.127][d][vo/gpu-next/libplacebo] [ 27]     gl_Position.y = -gl_Position.y;
[   2.127][d][vo/gpu-next/libplacebo] [ 28] }
[   2.127][d][vo/gpu-next/libplacebo] [ 29] 
[   2.127][d][vo/gpu-next/libplacebo] [ 30] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.127][d][vo/gpu-next/libplacebo] [ 31] {
[   2.127][d][vo/gpu-next/libplacebo] [ 32]     _11 = stage_input._11;
[   2.127][d][vo/gpu-next/libplacebo] [ 33]     _32 = stage_input._32;
[   2.127][d][vo/gpu-next/libplacebo] [ 34]     _36 = stage_input._36;
[   2.127][d][vo/gpu-next/libplacebo] [ 35]     vert_main();
[   2.127][d][vo/gpu-next/libplacebo] [ 36]     SPIRV_Cross_Output stage_output;
[   2.127][d][vo/gpu-next/libplacebo] [ 37]     stage_output.gl_Position = gl_Position;
[   2.127][d][vo/gpu-next/libplacebo] [ 38]     stage_output._31 = _31;
[   2.127][d][vo/gpu-next/libplacebo] [ 39]     stage_output._34 = _34;
[   2.127][d][vo/gpu-next/libplacebo] [ 40]     return stage_output;
[   2.127][d][vo/gpu-next/libplacebo] [ 41] }
[   2.129][d][vo/gpu-next/libplacebo] shaderc compile status 'success' (0 errors, 0 warnings)
[   2.129][d][vo/gpu-next/libplacebo] Spent 2.274 ms translating GLSL to SPIR-V
[   2.129][d][vo/gpu-next/libplacebo] Spent 0.226 ms translating SPIR-V to HLSL
[   2.132][d][cplayer] Run command: script-binding, flags=73, args=[name="modernz/__keybinding4", arg=""]
[   2.133][d][vo/gpu-next/libplacebo] Spent 3.096 ms translating HLSL to DXBC
[   2.133][d][vo/gpu-next/libplacebo] fragment shader HLSL source:
[   2.133][d][vo/gpu-next/libplacebo] [  1] Texture2D<float4> _118 : register(t0);
[   2.133][d][vo/gpu-next/libplacebo] [  2] SamplerState __118_sampler : register(s0);
[   2.133][d][vo/gpu-next/libplacebo] [  3] 
[   2.133][d][vo/gpu-next/libplacebo] [  4] static float4 _14;
[   2.133][d][vo/gpu-next/libplacebo] [  5] static float2 _122;
[   2.133][d][vo/gpu-next/libplacebo] [  6] static float4 _151;
[   2.133][d][vo/gpu-next/libplacebo] [  7] 
[   2.133][d][vo/gpu-next/libplacebo] [  8] struct SPIRV_Cross_Input
[   2.133][d][vo/gpu-next/libplacebo] [  9] {
[   2.133][d][vo/gpu-next/libplacebo] [ 10]     float2 _122 : TEXCOORD1;
[   2.133][d][vo/gpu-next/libplacebo] [ 11]     float4 _14 : TEXCOORD2;
[   2.133][d][vo/gpu-next/libplacebo] [ 12] };
[   2.133][d][vo/gpu-next/libplacebo] [ 13] 
[   2.133][d][vo/gpu-next/libplacebo] [ 14] struct SPIRV_Cross_Output
[   2.133][d][vo/gpu-next/libplacebo] [ 15] {
[   2.133][d][vo/gpu-next/libplacebo] [ 16]     float4 _151 : SV_Target0;
[   2.133][d][vo/gpu-next/libplacebo] [ 17] };
[   2.133][d][vo/gpu-next/libplacebo] [ 18] 
[   2.133][d][vo/gpu-next/libplacebo] [ 19] void frag_main()
[   2.133][d][vo/gpu-next/libplacebo] [ 20] {
[   2.133][d][vo/gpu-next/libplacebo] [ 21]     float4 _161 = _14;
[   2.133][d][vo/gpu-next/libplacebo] [ 22]     float3 _165 = max(_161.xyz, 0.0f.xxx);
[   2.133][d][vo/gpu-next/libplacebo] [ 23]     float4 _257 = _161;
[   2.133][d][vo/gpu-next/libplacebo] [ 24]     _257.x = _165.x;
[   2.133][d][vo/gpu-next/libplacebo] [ 25]     _257.y = _165.y;
[   2.133][d][vo/gpu-next/libplacebo] [ 26]     _257.z = _165.z;
[   2.133][d][vo/gpu-next/libplacebo] [ 27]     float3 _174 = _257.xyz * 0.077399380505084991455078125f.xxx;
[   2.133][d][vo/gpu-next/libplacebo] [ 28]     float3 _179 = pow((_257.xyz + 0.054999999701976776123046875f.xxx) * 0.947867333889007568359375f.xxx, 2.400000095367431640625f.xxx);
[   2.133][d][vo/gpu-next/libplacebo] [ 29]     bool3 _182 = bool3(0.040449999272823333740234375f.xxx.x < _257.xyz.x, 0.040449999272823333740234375f.xxx.y < _257.xyz.y, 0.040449999272823333740234375f.xxx.z < _257.xyz.z);
[   2.133][d][vo/gpu-next/libplacebo] [ 30]     float3 _183 = float3(_182.x ? _179.x : _174.x, _182.y ? _179.y : _174.y, _182.z ? _179.z : _174.z);
[   2.133][d][vo/gpu-next/libplacebo] [ 31]     float4 _263 = _257;
[   2.133][d][vo/gpu-next/libplacebo] [ 32]     _263.x = _183.x;
[   2.133][d][vo/gpu-next/libplacebo] [ 33]     _263.y = _183.y;
[   2.133][d][vo/gpu-next/libplacebo] [ 34]     _263.z = _183.z;
[   2.133][d][vo/gpu-next/libplacebo] [ 35]     float3 _193 = (_263.xyz * 0.999000012874603271484375f) + 0.00099999993108212947845458984375f.xxx;
[   2.133][d][vo/gpu-next/libplacebo] [ 36]     float4 _269 = _263;
[   2.133][d][vo/gpu-next/libplacebo] [ 37]     _269.x = _193.x;
[   2.133][d][vo/gpu-next/libplacebo] [ 38]     _269.y = _193.y;
[   2.133][d][vo/gpu-next/libplacebo] [ 39]     _269.z = _193.z;
[   2.133][d][vo/gpu-next/libplacebo] [ 40]     float3 _203 = max(_269.xyz, 0.0f.xxx);
[   2.133][d][vo/gpu-next/libplacebo] [ 41]     float4 _275 = _269;
[   2.133][d][vo/gpu-next/libplacebo] [ 42]     _275.x = _203.x;
[   2.133][d][vo/gpu-next/libplacebo] [ 43]     _275.y = _203.y;
[   2.133][d][vo/gpu-next/libplacebo] [ 44]     _275.z = _203.z;
[   2.133][d][vo/gpu-next/libplacebo] [ 45]     float3 _214 = pow(_275.xyz * 1.1490151882171630859375f, 0.4166666567325592041015625f.xxx) - 0.0595848374068737030029296875f.xxx;
[   2.133][d][vo/gpu-next/libplacebo] [ 46]     float4 _281 = _275;
[   2.133][d][vo/gpu-next/libplacebo] [ 47]     _281.x = _214.x;
[   2.133][d][vo/gpu-next/libplacebo] [ 48]     _281.y = _214.y;
[   2.133][d][vo/gpu-next/libplacebo] [ 49]     _281.z = _214.z;
[   2.133][d][vo/gpu-next/libplacebo] [ 50]     float3 _226 = _281.xyz * _161.w.xxx;
[   2.133][d][vo/gpu-next/libplacebo] [ 51]     float4 _288 = _281;
[   2.133][d][vo/gpu-next/libplacebo] [ 52]     _288.x = _226.x;
[   2.133][d][vo/gpu-next/libplacebo] [ 53]     _288.y = _226.y;
[   2.133][d][vo/gpu-next/libplacebo] [ 54]     _288.z = _226.z;
[   2.133][d][vo/gpu-next/libplacebo] [ 55]     float4 _238 = _288 * _118.SampleLevel(__118_sampler, _122, 0.0f).x;
[   2.133][d][vo/gpu-next/libplacebo] [ 56]     _238.w = _238.w;
[   2.133][d][vo/gpu-next/libplacebo] [ 57]     _151 = _238;
[   2.133][d][vo/gpu-next/libplacebo] [ 58] }
[   2.133][d][vo/gpu-next/libplacebo] [ 59] 
[   2.133][d][vo/gpu-next/libplacebo] [ 60] SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
[   2.133][d][vo/gpu-next/libplacebo] [ 61] {
[   2.133][d][vo/gpu-next/libplacebo] [ 62]     _14 = stage_input._14;
[   2.133][d][vo/gpu-next/libplacebo] [ 63]     _122 = stage_input._122;
[   2.133][d][vo/gpu-next/libplacebo] [ 64]     frag_main();
[   2.133][d][vo/gpu-next/libplacebo] [ 65]     SPIRV_Cross_Output stage_output;
[   2.133][d][vo/gpu-next/libplacebo] [ 66]     stage_output._151 = _151;
[   2.133][d][vo/gpu-next/libplacebo] [ 67]     return stage_output;
[   2.133][d][vo/gpu-next/libplacebo] [ 68] }
[   2.135][d][vo/gpu-next] cache_save_obj: key(3360a918d5ee5464), size(2077), save time(2.239 ms)
[   3.047][v][cplayer] Set property: options/term-status-msg="V: 00:00:01 / 00:00:05 (32%)" -> 1
[   4.052][v][cplayer] Set property: options/term-status-msg="V: 00:00:02 / 00:00:05 (49%)" -> 1
[   4.229][d][vo/gpu-next/libplacebo] (Re)creating 1550x405x0 texture with format r8: unknown
[   4.329][d][cplayer] Run command: script-binding, flags=73, args=[name="modernz/__keybinding4", arg=""]
[   4.645][v][lavf] EOF reached.
[   4.812][d][cplayer] Run command: script-binding, flags=73, args=[name="modernz/__keybinding4", arg=""]
[   5.065][v][cplayer] Set property: options/term-status-msg="V: 00:00:03 / 00:00:05 (67%)" -> 1
[   5.532][d][cplayer] Run command: quit, flags=73, args=[code="0"]
[   5.532][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.532][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.533][i][cplayer] Saving state.
[   5.533][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.534][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.535][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.535][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.536][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.536][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.537][d][global] state path: 'watch_later' -> 'C:\Users\jespe\AppData\Local/mpv/watch_later'
[   5.537][v][cplayer] EOF code: 5  
[   5.537][d][vd] Uninit decoder.
[   5.542][d][cplayer] Terminating demuxers...
[   5.542][d][cplayer] Done terminating demuxers.
[   5.542][v][cplayer] finished playback, success (reason 3)
[   5.542][v][cplayer] Running hook: ytdl_hook/on_after_end_file
[   5.564][d][cplayer] Run command: del, flags=64, args=[name="user-data/mpv/ytdl/json-subprocess-result"]
[   5.564][d][modernz] osc_init
[   5.564][i][cplayer] Exiting... (Quit)
[   5.564][d][cplayer] Run command: del, flags=64, args=[name="user-data/mpv/console"]
[   5.564][d][vo/gpu-next/libplacebo] First frame received with non-zero PTS 4.270933
[   5.564][d][status_line] Destroying client handle...
[   5.564][d][trackselect] Destroying client handle...
[   5.564][d][anilistUpdater] Destroying client handle...
[   5.565][d][commands] Destroying client handle...
[   5.565][d][ytdl_hook] Destroying client handle...
[   5.565][d][positioning] Destroying client handle...
[   5.565][d][console] Destroying client handle...
[   5.565][d][select] Destroying client handle...
[   5.565][d][mpv_discordRPC] Destroying client handle...
[   5.565][d][stats] Destroying client handle...
[   5.565][d][autoload] Destroying client handle...
[   5.565][d][playlistmanager] Destroying client handle...
[   5.566][d][SystemMediaTransportControls] Destroying client handle...
[   5.566][d][cplayer] Run command: del, flags=64, args=[name="user-data/osc"]
[   5.567][d][modernz] Destroying client handle...
[   5.605][v][vo/gpu-next/win32] uninit
